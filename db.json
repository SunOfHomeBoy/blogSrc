{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/shana/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","path":"css/fontawesome/font-awesome-ie7.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","path":"css/fontawesome/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","path":"css/fontawesome/font-awesome-ie7.min.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","path":"css/fontawesome/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/icon.png","path":"css/images/icon.png","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/icon2.png","path":"css/images/icon2.png","modified":0,"renderable":1},{"_id":"themes/shana/source/css/plugin/animate.styl","path":"css/plugin/animate.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/css/plugin/hover.styl","path":"css/plugin/hover.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/bganimation/bg.css","path":"plugin/bganimation/bg.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","path":"plugin/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","path":"plugin/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","path":"plugin/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","path":"plugin/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","path":"plugin/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","path":"plugin/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","path":"plugin/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","path":"plugin/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","path":"plugin/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","path":"plugin/galmenu/GalMenu.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","path":"plugin/galmenu/GalMenu.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/img.png","path":"plugin/galmenu/img.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","path":"plugin/galmenu/wulusai.mp3","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","path":"plugin/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","path":"plugin/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/banne1r.jpg","path":"css/images/banne1r.jpg","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/shana/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1505232686410},{"_id":"themes/shana/LICENSE","hash":"fc4ad28c989781cc67a41df069b8348e214ab812","modified":1505232686411},{"_id":"themes/shana/README.md","hash":"02e25f04bb231c3dbb400207f58bfd80b514c01b","modified":1505232686412},{"_id":"themes/shana/_config.yml","hash":"a3e685760d7605e062e3ad3b86276c5f1c8e317d","modified":1523865790637},{"_id":"themes/shana/package.json","hash":"88a4f665067397eb15ab90423027eb25c96be222","modified":1505232686501},{"_id":"source/_posts/CSS-潜藏着的BFC.md","hash":"f8694f8ddf12295672f1ff8f85cf050fc055beba","modified":1524126611375},{"_id":"source/_posts/MongoDB-Node.js中的使用.md","hash":"9b639a1e79692e7ca4a8dd041ba38c354e0888a9","modified":1523862693139},{"_id":"source/_posts/JS笔记-廖雪峰.md","hash":"9c1d680f31951c639a295eaf4d85f58ac4b86aff","modified":1523871114758},{"_id":"source/_posts/MongoDB-备份与恢复.md","hash":"a168923fc6a0934fc38f4d958703e5c144dd3877","modified":1523862743903},{"_id":"source/_posts/React-01.md","hash":"9bb5653013aa605e7cd4d475d498eb514ddb4854","modified":1523861467224},{"_id":"source/_posts/React-02.md","hash":"ea9d027684d9ea850e5de85348163f4f1a070ae4","modified":1523861590615},{"_id":"source/_posts/VSCode使用笔记.md","hash":"54bca510204b576f609d78e369f6e77b8a2675da","modified":1523865186387},{"_id":"source/_posts/git使用指南.md","hash":"7ca794d9ba22940a70a035517f5fc47f279d2567","modified":1524897752745},{"_id":"source/_posts/hello-world.md","hash":"f8caee19ddf9607b0aed2cf4a67feefaf23254bb","modified":1523865265144},{"_id":"source/_posts/原生Ajax请求.md","hash":"fa22463e831607bac8adffe86df9f70ce7f49f3b","modified":1523865677103},{"_id":"source/_posts/阅读理解.md","hash":"367b0a764344e975e1f614c74a2b5ce6321ee1c9","modified":1524889560866},{"_id":"source/_posts/响应式布局JS事件.md","hash":"742dd3c34e7821878d3601df82b6ac80f5241101","modified":1524124481290},{"_id":"source/categories/index.md","hash":"18876db84aa8697c07a2bb2f1dbec4e3fa83aaa5","modified":1502868866000},{"_id":"source/tags/index.md","hash":"4a704a7f0c558394625af2ddfc57053481ed8b8e","modified":1502868866000},{"_id":"themes/shana/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1505232686418},{"_id":"themes/shana/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1505232686419},{"_id":"themes/shana/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1505232686419},{"_id":"themes/shana/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1505232686420},{"_id":"themes/shana/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1505232686421},{"_id":"themes/shana/languages/zh-CN.yml","hash":"da83da6b8367cb749b9f3e2885600b515057af15","modified":1505232686430},{"_id":"themes/shana/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1505232686431},{"_id":"themes/shana/layout/archive.ejs","hash":"ae0149112760550ec5b5791aed25a9f558008969","modified":1505232686494},{"_id":"themes/shana/layout/categories.ejs","hash":"f5c915b57e9602448ead49cc268f3c43e67eb135","modified":1505232686494},{"_id":"themes/shana/layout/category.ejs","hash":"6bb634b555083f54904536b0f159c7b3e8febdd7","modified":1505232686495},{"_id":"themes/shana/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1505232686497},{"_id":"themes/shana/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505232686498},{"_id":"themes/shana/layout/layout.ejs","hash":"c764e113602336c9e21c03bf94090bf5ab999781","modified":1505232686498},{"_id":"themes/shana/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505232686498},{"_id":"themes/shana/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505232686499},{"_id":"themes/shana/layout/tags.ejs","hash":"90c48448d469a328bdb5ddaff4c23aaa38350f4a","modified":1505232686500},{"_id":"themes/shana/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1505232686503},{"_id":"themes/shana/_source/categories/index.md","hash":"30e8b5db11dfd7b1e5e881fe97f29334d8a34e22","modified":1505232686414},{"_id":"themes/shana/_source/tags/index.md","hash":"77738dafd6e79edc4816aca40d2bfd706905450b","modified":1505232686418},{"_id":"themes/shana/layout/_partial/after-footer.ejs","hash":"57734d076129799de01c9fad8a246cb821741fbf","modified":1505232686434},{"_id":"themes/shana/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1505232686434},{"_id":"themes/shana/layout/_partial/archive.ejs","hash":"e7858f113ee9f42ab21b303efaa1612168385a72","modified":1505232686437},{"_id":"themes/shana/layout/_partial/article.ejs","hash":"adaa096ec6b42a7944c9be718edac2d12325461b","modified":1505232686438},{"_id":"themes/shana/layout/_partial/bganimation.ejs","hash":"ef6e9ccefee88265255b4789a6318d7ee80f1f77","modified":1505232686479},{"_id":"themes/shana/layout/_partial/galmenu.ejs","hash":"6ade50ebcd908d1e248a087c41e239cb717138c1","modified":1505232686481},{"_id":"themes/shana/layout/_partial/footer.ejs","hash":"35a9963e9aad35a4d953b1fd2c09f9201183b819","modified":1505232686480},{"_id":"themes/shana/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1505232686483},{"_id":"themes/shana/layout/_partial/head.ejs","hash":"9ad9e603ccb22232c1ad8cdfbda280a7b2902e7c","modified":1505232686484},{"_id":"themes/shana/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1505232686485},{"_id":"themes/shana/layout/_partial/lean-analytics.ejs","hash":"ca5a9b7aad67406896bcf8f9d372acac39cbbb51","modified":1505232686486},{"_id":"themes/shana/layout/_partial/mobile-header.ejs","hash":"dd0088099a0b322d4cc64a86837786421a20d257","modified":1505232686487},{"_id":"themes/shana/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1505232686487},{"_id":"themes/shana/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1505232686492},{"_id":"themes/shana/layout/_widget/about.ejs","hash":"6bdeaad8de81d37bff204115ee0fe47a4eb32993","modified":1505232686493},{"_id":"themes/shana/layout/_widget/nav.ejs","hash":"5e3d307e49c7934b1b9343b81488fd07e18a7f01","modified":1505232686494},{"_id":"themes/shana/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1505311522708},{"_id":"themes/shana/source/css/_extend.styl","hash":"1dca7bc1bf3cc3c4af7385191f74f15292ec0fb9","modified":1505232686504},{"_id":"themes/shana/source/css/_variables.styl","hash":"358508fc755f0af7072e4390a33fd3287d2aba9e","modified":1505232686514},{"_id":"themes/shana/source/css/style.styl","hash":"3db505463b3483cb5d4e99d54baca1396a750d92","modified":1505293682674},{"_id":"themes/shana/layout/_partial/post/category.ejs","hash":"fc6f4836ecb48c876e28d9336f00cc1775202cb9","modified":1505232686488},{"_id":"themes/shana/layout/_partial/post/date.ejs","hash":"8a17b4f64d8bbc522d5d028700c85cda9db715a7","modified":1505232686489},{"_id":"themes/shana/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1505232686489},{"_id":"themes/shana/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1505232686490},{"_id":"themes/shana/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1505232686490},{"_id":"themes/shana/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1505232686491},{"_id":"themes/shana/layout/_partial/post/view.ejs","hash":"5191ec468768e3243da247bc4ad770a511ce3fa9","modified":1505232686492},{"_id":"themes/shana/source/css/_partial/archive.styl","hash":"605a72f468a9f5bf001964241cb683c5b8f0cd0a","modified":1505232686505},{"_id":"themes/shana/source/css/_partial/article.styl","hash":"24883af90f61d3ed364abe9428e8aed96bf7a92a","modified":1505232686506},{"_id":"themes/shana/source/css/_partial/categories.styl","hash":"964cf546f177383511f6cfda78f78d67b281eed4","modified":1505232686506},{"_id":"themes/shana/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1505232686507},{"_id":"themes/shana/source/css/_partial/footer.styl","hash":"b00c4d04ca55f9fba9322d2314dc4f07bc3fe998","modified":1505232686508},{"_id":"themes/shana/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1505232686508},{"_id":"themes/shana/source/css/_partial/highlight.styl","hash":"d2c2ca89ab2d52dbbbd767a304ebd793d5509122","modified":1505232686509},{"_id":"themes/shana/source/css/_partial/mobile.styl","hash":"c781dbb86614a4d825953a2e00de61ee410bacbe","modified":1505232686510},{"_id":"themes/shana/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1505232686510},{"_id":"themes/shana/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1505232686511},{"_id":"themes/shana/source/css/_partial/sidebar.styl","hash":"9f3637b69491cf61bc24328ff7c27ba4c72fad32","modified":1505232686511},{"_id":"themes/shana/source/css/_partial/tags.styl","hash":"1909f74f678f0fd33a6ff6a92f1427c8f413beba","modified":1505232686511},{"_id":"themes/shana/source/css/_partial/views.styl","hash":"fba8d0ec66ca6dd3e7a521dbd2308954aa534a9c","modified":1505232686512},{"_id":"themes/shana/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1505232686512},{"_id":"themes/shana/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1505232686513},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","hash":"cbbd3d62d4db8f8ebf6916c6c049de2a5bafa933","modified":1505232686515},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","hash":"004fc9bfc4cb2a8e63695fe0b5f886e977e63a48","modified":1505232686525},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","hash":"4e2217c8c7c703f79a416a7bd8795a18a2d16805","modified":1505232686515},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","hash":"6589bcd1956889dfb72a0c0d46f2305beac724e7","modified":1505232686524},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1505232686526},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1505232686527},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1505232686531},{"_id":"themes/shana/source/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1505291163919},{"_id":"themes/shana/source/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1505291193239},{"_id":"themes/shana/source/css/plugin/animate.styl","hash":"b8b17f5f9255ef2a8865fe9dd8025634ad20d209","modified":1505232686541},{"_id":"themes/shana/source/css/plugin/hover.styl","hash":"a5d29bcd4028208eafd4031d3cf3ccf019c71777","modified":1505232686542},{"_id":"themes/shana/source/plugin/bganimation/bg.css","hash":"6e787e83429e3e073bb4a7488de71ac0e1ead766","modified":1523263005570},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505232686545},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505232686545},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505232686546},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505232686546},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505232686547},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505232686547},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1505232686553},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1505232686554},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1505232686555},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","hash":"54f86564b181abd8f9746bca5fc142a9f041bb30","modified":1505232686557},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","hash":"2a1fdbbd30de26adcfb4f37de66abc5787365dc4","modified":1505232686556},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1505232686530},{"_id":"themes/shana/source/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1505232686558},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1505232686559},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505232686548},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1505232686548},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1505232686549},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1505232686550},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1505232686551},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1505232686552},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1505232686529},{"_id":"themes/shana/source/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1505232686535},{"_id":"themes/shana/source/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1505232686538},{"_id":"public/categories/index.html","hash":"744957c76d09c81d3ac1aa649656eefedc40c382","modified":1524897826537},{"_id":"public/tags/index.html","hash":"cd2137bf37a027c0bc690e5fd14e5badc6955781","modified":1524897826545},{"_id":"public/2018/04/19/响应式布局JS事件/index.html","hash":"9361b333b8b50532b2a3b7f235fd45c201d405ca","modified":1524897826546},{"_id":"public/2018/04/20/阅读理解/index.html","hash":"16331177d8fb315ee21a4162b72e7f9830d194db","modified":1524897826546},{"_id":"public/2018/04/16/CSS-潜藏着的BFC/index.html","hash":"75e96e4365242634ae08caf7f79122099aa02658","modified":1524897826546},{"_id":"public/2018/04/16/原生Ajax请求/index.html","hash":"219a74e7d954c9397c0ec9c606323ff8aba3559d","modified":1524897826546},{"_id":"public/2018/04/16/MongoDB-备份与恢复/index.html","hash":"b942c25189098f043895d1359d6c550fc112d796","modified":1524897826546},{"_id":"public/2017/09/14/React-02/index.html","hash":"923a0757492cff0205f0975fe533ccfce89333ee","modified":1524897826546},{"_id":"public/2014/10/13/hello-world/index.html","hash":"631ed46bf692a930ab3f130bb314424ab866ee96","modified":1524897826546},{"_id":"public/categories/数据库/index.html","hash":"5a5f71055f6c3196a7b55352518fc0f10b8ad407","modified":1524897826546},{"_id":"public/categories/CSS/index.html","hash":"8d216d56aba44933c917955d43635d5ef2221dff","modified":1524897826547},{"_id":"public/categories/原生JS/index.html","hash":"c2fdb4a7513eb14ec2998621a102d75606b86298","modified":1524897826547},{"_id":"public/categories/编辑器/index.html","hash":"a24a8457d1119248059ab8ab3005b5f8b3430d03","modified":1524897826548},{"_id":"public/categories/前端/index.html","hash":"13dcfcaac1dfb3b6bd0b525bccb9d0f690960643","modified":1524897826548},{"_id":"public/categories/git/index.html","hash":"651ae6f89c64897333123bc9830c36531c162f46","modified":1524897826548},{"_id":"public/categories/文学技能/index.html","hash":"eacc0761d7fb3b3b73bfe439b871969579e3fc80","modified":1524897826548},{"_id":"public/archives/page/2/index.html","hash":"4951880e88c494ae9bcf492695d0524de2d48393","modified":1524897826548},{"_id":"public/archives/2014/index.html","hash":"519729bb1a835b2ee561cb346542ade09becd7b9","modified":1524897826548},{"_id":"public/archives/2014/10/index.html","hash":"fa5ffc85f2beea8b6b4a3fb19f68066c8d0f74f3","modified":1524897826548},{"_id":"public/archives/2017/index.html","hash":"1b14791cda3b2bdbe5befa699e965826355fa75d","modified":1524897826548},{"_id":"public/archives/2017/09/index.html","hash":"393bfb8e989e7334667d20d1d21af2e5d4dac035","modified":1524897826548},{"_id":"public/archives/2018/index.html","hash":"e93e6d0dc17eea87d1882e027d751affbdba39d8","modified":1524897826548},{"_id":"public/archives/2018/04/index.html","hash":"466d4e1d69fb05491dfed05f67a743821c8ea1b1","modified":1524897826548},{"_id":"public/tags/MongoDB/index.html","hash":"67b026a38dd792eceac77dd0b6624d2b2b51e96b","modified":1524897826549},{"_id":"public/tags/BFC/index.html","hash":"64a955aba5eb776d413b8f0f1c83a97a1f8bcca3","modified":1524897826549},{"_id":"public/tags/ES5-ES6/index.html","hash":"ee20a4c0e74f37a4f044721966cec1f50ddbf87b","modified":1524897826549},{"_id":"public/tags/VSCode/index.html","hash":"2615783d6e9eeb5f71afcfa2757547297a72e791","modified":1524897826549},{"_id":"public/tags/React/index.html","hash":"dd8a29ad9ad4c9cf07f818b9f2773d2f8013b1b3","modified":1524897826549},{"_id":"public/tags/git/index.html","hash":"a692135bc2d62bca5ed5f82e3f783075bc9e83bc","modified":1524897826549},{"_id":"public/2018/04/28/git使用指南/index.html","hash":"a9b03fc22945c60796313d7760cd7e09dff40e7a","modified":1524897826549},{"_id":"public/2018/04/16/JS笔记-廖雪峰/index.html","hash":"85f4b088fa33c0c3e6c81ccf58c92501a81238d5","modified":1524897826549},{"_id":"public/2018/04/16/VSCode使用笔记/index.html","hash":"7e295d41e33d2bfd6e28da1810493a392a568f0c","modified":1524897826549},{"_id":"public/2018/04/16/MongoDB-Node.js中的使用/index.html","hash":"385d63875ac1a681f028e150338c7a9d8d9de1f7","modified":1524897826549},{"_id":"public/2017/09/13/React-01/index.html","hash":"628d66b23e8ef1d88fb5c42a30f829240776f6b1","modified":1524897826549},{"_id":"public/archives/index.html","hash":"5e5647beb0d585659d3a71ad6efcd6716fc873e9","modified":1524897826550},{"_id":"public/index.html","hash":"47865f3eaf7410d992fe36736f3e27362fdd469f","modified":1524897826550},{"_id":"public/page/2/index.html","hash":"8af9c474a3c4e8eb658f49d8fe1937d78370f07e","modified":1524897826550},{"_id":"public/tags/响应式/index.html","hash":"2fb3f2d90c7b743e8798110b232f4dee02771c67","modified":1524897826572},{"_id":"public/tags/文学技能/index.html","hash":"cad778b132eeae50937215ff828f562406afbb2a","modified":1524897826573},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1524897826575},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1524897826575},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1524897826575},{"_id":"public/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1524897826575},{"_id":"public/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1524897826575},{"_id":"public/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1524897826576},{"_id":"public/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1524897826576},{"_id":"public/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1524897826576},{"_id":"public/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1524897826576},{"_id":"public/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1524897826577},{"_id":"public/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1524897826577},{"_id":"public/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1524897826577},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1524897827122},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1524897827129},{"_id":"public/css/plugin/animate.css","hash":"7a1f3de057c416bd10edc288c7e8ac0b645232ab","modified":1524897827129},{"_id":"public/css/plugin/hover.css","hash":"54ec3d2774906f08e711ac0e494dccd09aefd570","modified":1524897827129},{"_id":"public/plugin/bganimation/bg.css","hash":"ecb949d2dd3d458c80772b255f93dab3e6a80783","modified":1524897827129},{"_id":"public/plugin/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1524897827129},{"_id":"public/plugin/galmenu/GalMenu.js","hash":"8549620fcb0b6a9bb329b799906aba6fb41c61f0","modified":1524897827129},{"_id":"public/plugin/galmenu/GalMenu.css","hash":"ae1357f888f3389bc4b39bde62d68533caefb6b5","modified":1524897827129},{"_id":"public/css/fontawesome/font-awesome.min.css","hash":"68e2602c02181b61eebc9e1dccb0a38377fa5df7","modified":1524897827129},{"_id":"public/css/style.css","hash":"a2420ea21c577271f9d1bf490d2aab6e2e7b92c4","modified":1524897827129},{"_id":"public/css/fontawesome/font-awesome-ie7.css","hash":"e142f6748ea95bff17ba450ed071a17b066642c7","modified":1524897827130},{"_id":"public/css/fontawesome/font-awesome-ie7.min.css","hash":"d66b7374b5dd6259dfd5c4eb682925305f6716d4","modified":1524897827130},{"_id":"public/css/fontawesome/font-awesome.css","hash":"57ca25a18cbdedf36973b712bc81f9e3f883a371","modified":1524897827130},{"_id":"public/plugin/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1524897827130},{"_id":"public/plugin/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1524897827130},{"_id":"public/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1524897827130},{"_id":"public/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1524897827130},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1524897827148},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1524897827148},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1524897827148},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1524897827148},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1524897827148},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1524897827155},{"_id":"public/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1524897827155},{"_id":"public/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1524897827156}],"Category":[{"name":"数据库","_id":"cjgj0skvw0002pcxj1rlr9ls6"},{"name":"CSS","_id":"cjgj0skw00007pcxjl9i7owym"},{"name":"原生JS","_id":"cjgj0skw5000epcxjho9a0g1b"},{"name":"编辑器","_id":"cjgj0skw9000lpcxja144u7f1"},{"name":"前端","_id":"cjgj0skwd000rpcxjcqok9gte"},{"name":"git","_id":"cjgj0skwh0010pcxjk5r2n229"},{"name":"文学技能","_id":"cjgj0skwj0015pcxj7osv1cgl"}],"Data":[],"Page":[{"title":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"categories\"\nlayout: \"categories\"\n---\n","date":"2018-01-01T07:16:31.315Z","updated":"2017-08-16T07:34:26.000Z","path":"categories/index.html","comments":1,"_id":"cjgj0skwx001dpcxja69fw8kd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---","date":"2018-01-01T07:16:31.325Z","updated":"2017-08-16T07:34:26.000Z","path":"tags/index.html","comments":1,"_id":"cjgj0skwy001epcxjw8bg0c8h","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"MongoDB在Node.js中的使用","date":"2018-04-16T06:03:08.000Z","archives":"SQL","_content":"#### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n","source":"_posts/MongoDB-Node.js中的使用.md","raw":"---\ntitle: MongoDB在Node.js中的使用\ndate: 2018-04-16 14:03:08\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n#### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n","slug":"MongoDB-Node.js中的使用","published":1,"updated":"2018-04-16T07:11:33.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skvq0000pcxj3xo69wra","content":"<h4 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h4><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure></p>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h4><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure></p>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"CSS-潜藏着的BFC","date":"2018-04-16T07:54:04.000Z","archives":"样式表","_content":" ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续","source":"_posts/CSS-潜藏着的BFC.md","raw":"---\ntitle: CSS-潜藏着的BFC\ndate: 2018-04-16 15:54:04\ntags: BFC\narchives: 样式表\ncategories: CSS\n---\n ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续","slug":"CSS-潜藏着的BFC","published":1,"updated":"2018-04-19T08:30:11.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skvu0001pcxjrdxgl7lq","content":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n"},{"title":"JS笔记-廖雪峰","date":"2018-04-16T09:22:06.000Z","archives":null,"_content":"ES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n## Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n## Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","source":"_posts/JS笔记-廖雪峰.md","raw":"---\ntitle: JS笔记-廖雪峰\ndate: 2018-04-16 17:22:06\ntags: ES5/ES6\narchives: \ncategories: 原生JS\n---\nES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n## Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n## Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","slug":"JS笔记-廖雪峰","published":1,"updated":"2018-04-16T09:31:54.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skvy0004pcxjeattbjyg","content":"<p>ES6 Map和Set(廖雪峰)<br>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h2><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h2><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ES6 Map和Set(廖雪峰)<br>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h2><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h2><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n"},{"title":"VSCode使用笔记","date":"2018-04-16T07:29:53.000Z","archives":"Editer","_content":"(2018年2月8日 15:24:24)<br/>\n## **发现**\n+ ### 新建终端(2018年4月16日 15:50:22)\n  `ctrl`+`shift`+`~`\n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","source":"_posts/VSCode使用笔记.md","raw":"---\ntitle: VSCode使用笔记\ndate: 2018-04-16 15:29:53\ntags: VSCode\narchives: Editer\ncategories: 编辑器\n---\n(2018年2月8日 15:24:24)<br/>\n## **发现**\n+ ### 新建终端(2018年4月16日 15:50:22)\n  `ctrl`+`shift`+`~`\n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","slug":"VSCode使用笔记","published":1,"updated":"2018-04-16T07:53:06.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skvz0005pcxj4vtqlnei","content":"<p>(2018年2月8日 15:24:24)<br></p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><ul>\n<li><h3 id=\"新建终端-2018年4月16日-15-50-22\"><a href=\"#新建终端-2018年4月16日-15-50-22\" class=\"headerlink\" title=\"新建终端(2018年4月16日 15:50:22)\"></a>新建终端(2018年4月16日 15:50:22)</h3><code>ctrl</code>+<code>shift</code>+<code>~</code></li>\n</ul>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>(2018年2月8日 15:24:24)<br></p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><ul>\n<li><h3 id=\"新建终端-2018年4月16日-15-50-22\"><a href=\"#新建终端-2018年4月16日-15-50-22\" class=\"headerlink\" title=\"新建终端(2018年4月16日 15:50:22)\"></a>新建终端(2018年4月16日 15:50:22)</h3><code>ctrl</code>+<code>shift</code>+<code>~</code></li>\n</ul>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"MongoDB--备份与恢复","date":"2018-04-16T07:10:13.000Z","archives":"SQL","_content":"## 备份(`mongodump`)与恢复(`mongorestore`)\n(http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n**数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbdirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","source":"_posts/MongoDB-备份与恢复.md","raw":"---\ntitle: MongoDB--备份与恢复\ndate: 2018-04-16 15:10:13\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n## 备份(`mongodump`)与恢复(`mongorestore`)\n(http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n**数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbdirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","slug":"MongoDB-备份与恢复","published":1,"updated":"2018-04-16T07:12:23.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skw00006pcxjlnixzj2g","content":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a>备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</h2><p>(<a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html</a>)<br><strong>数据备份</strong>(mongodump)<br>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。<br>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。<br><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a>备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</h2><p>(<a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html</a>)<br><strong>数据备份</strong>(mongodump)<br>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。<br>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。<br><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"React-入门","date":"2017-09-13T07:21:11.000Z","archives":"Front-end","_content":"<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","source":"_posts/React-01.md","raw":"---\ntitle: React-入门\ndate: 2017-09-13 15:21:11\ntags: React\narchives: Front-end\ncategories: 前端\n---\n<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","slug":"React-01","published":1,"updated":"2018-04-16T06:51:07.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skw1000apcxjdtclfvnk","content":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>"},{"title":"React-02","date":"2017-09-14T14:51:40.000Z","archives":"前端","_content":"React作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","source":"_posts/React-02.md","raw":"---\ntitle: React-02\ndate: 2017-09-14 22:51:40\ntags: React\narchives: 前端\ncategories: 前端\n---\nReact作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","slug":"React-02","published":1,"updated":"2018-04-16T06:53:10.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skw3000cpcxjgrthrpj9","content":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n"},{"title":"git使用指南","date":"2018-04-28T02:18:52.000Z","archives":"版本控制","_content":"# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**(一次性配置,以后使用不用再管)设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","source":"_posts/git使用指南.md","raw":"---\ntitle: git使用指南\ndate: 2018-04-28 10:18:52\ntags: git\narchives: 版本控制\ncategories: git\n---\n# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**(一次性配置,以后使用不用再管)设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","slug":"git使用指南","published":1,"updated":"2018-04-28T06:42:32.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skw5000gpcxjonihb91t","content":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong>(一次性配置,以后使用不用再管)设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com<br>The key’s randomart image is:<br>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong>(一次性配置,以后使用不用再管)设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com<br>The key’s randomart image is:<br>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hello World","date":"2014-10-13T07:21:11.000Z","archives":null,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2014-10-13 15:21:11\ntags: \narchives: \ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-04-16T07:54:25.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skw7000jpcxjmmblnk9r","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"原生Ajax请求","date":"2018-04-16T08:01:01.000Z","archives":null,"_content":"","source":"_posts/原生Ajax请求.md","raw":"---\ntitle: 原生Ajax请求\ndate: 2018-04-16 16:01:01\ntags:\narchives: \ncategories: \n---\n","slug":"原生Ajax请求","published":1,"updated":"2018-04-16T08:01:17.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skw9000npcxj5pwkez36","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"阅读理解","date":"2018-04-20T02:51:01.000Z","archives":"大脑训练","_content":"为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/","source":"_posts/阅读理解.md","raw":"---\ntitle: 阅读理解\ndate: 2018-04-20 10:51:01\ntags: 文学技能\narchives: 大脑训练\ncategories: 文学技能\n---\n为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/","slug":"阅读理解","published":1,"updated":"2018-04-28T04:26:00.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skwc000ppcxju0gl0133","content":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n<p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n<p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p>\n"},{"title":"响应式布局JS事件","date":"2018-04-19T01:23:15.000Z","archives":"样式表","_content":"为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","source":"_posts/响应式布局JS事件.md","raw":"---\ntitle: 响应式布局JS事件\ndate: 2018-04-19 09:23:15\ntags: 响应式\narchives: 样式表\ncategories: CSS\n---\n为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","slug":"响应式布局JS事件","published":1,"updated":"2018-04-19T07:54:41.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgj0skwd000tpcxjrt0agspo","content":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgj0skvq0000pcxj3xo69wra","category_id":"cjgj0skvw0002pcxj1rlr9ls6","_id":"cjgj0skw4000dpcxjygzxd5w0"},{"post_id":"cjgj0skw00006pcxjlnixzj2g","category_id":"cjgj0skvw0002pcxj1rlr9ls6","_id":"cjgj0skw6000hpcxjzyxhbu5p"},{"post_id":"cjgj0skvu0001pcxjrdxgl7lq","category_id":"cjgj0skw00007pcxjl9i7owym","_id":"cjgj0skw8000kpcxj3cmela34"},{"post_id":"cjgj0skvy0004pcxjeattbjyg","category_id":"cjgj0skw5000epcxjho9a0g1b","_id":"cjgj0skwd000qpcxjjqgg2mse"},{"post_id":"cjgj0skvz0005pcxj4vtqlnei","category_id":"cjgj0skw9000lpcxja144u7f1","_id":"cjgj0skwf000vpcxjkoy4lhsi"},{"post_id":"cjgj0skwd000tpcxjrt0agspo","category_id":"cjgj0skw00007pcxjl9i7owym","_id":"cjgj0skwh000zpcxj9j7vil6e"},{"post_id":"cjgj0skw1000apcxjdtclfvnk","category_id":"cjgj0skwd000rpcxjcqok9gte","_id":"cjgj0skwi0011pcxjz0utglh3"},{"post_id":"cjgj0skw3000cpcxjgrthrpj9","category_id":"cjgj0skwd000rpcxjcqok9gte","_id":"cjgj0skwj0014pcxjlrhupnq1"},{"post_id":"cjgj0skw5000gpcxjonihb91t","category_id":"cjgj0skwh0010pcxjk5r2n229","_id":"cjgj0skwk0018pcxjq2g8iaap"},{"post_id":"cjgj0skwc000ppcxju0gl0133","category_id":"cjgj0skwj0015pcxj7osv1cgl","_id":"cjgj0skwl001bpcxjwe3dhv78"}],"PostTag":[{"post_id":"cjgj0skvq0000pcxj3xo69wra","tag_id":"cjgj0skvx0003pcxj0krkjdw5","_id":"cjgj0skw10009pcxj9z6gt700"},{"post_id":"cjgj0skw00006pcxjlnixzj2g","tag_id":"cjgj0skvx0003pcxj0krkjdw5","_id":"cjgj0skw2000bpcxj04nftv9h"},{"post_id":"cjgj0skvu0001pcxjrdxgl7lq","tag_id":"cjgj0skw10008pcxjfgu1e66w","_id":"cjgj0skw7000ipcxji0oman64"},{"post_id":"cjgj0skvy0004pcxjeattbjyg","tag_id":"cjgj0skw5000fpcxj9xy87m0v","_id":"cjgj0skwb000opcxjg0p3egdq"},{"post_id":"cjgj0skvz0005pcxj4vtqlnei","tag_id":"cjgj0skw9000mpcxjbj3jz8df","_id":"cjgj0skwe000upcxjfzvj15t6"},{"post_id":"cjgj0skw1000apcxjdtclfvnk","tag_id":"cjgj0skwd000spcxjrj1ek8bf","_id":"cjgj0skwh000ypcxjkxtjskda"},{"post_id":"cjgj0skw3000cpcxjgrthrpj9","tag_id":"cjgj0skwd000spcxjrj1ek8bf","_id":"cjgj0skwi0013pcxjll6ooksf"},{"post_id":"cjgj0skw5000gpcxjonihb91t","tag_id":"cjgj0skwi0012pcxjee4xjg25","_id":"cjgj0skwj0017pcxjn9r942s4"},{"post_id":"cjgj0skwc000ppcxju0gl0133","tag_id":"cjgj0skwj0016pcxjou6apn5j","_id":"cjgj0skwk001apcxj5kfh8039"},{"post_id":"cjgj0skwd000tpcxjrt0agspo","tag_id":"cjgj0skwk0019pcxjw23d4w00","_id":"cjgj0skwl001cpcxjwihe3i99"}],"Tag":[{"name":"MongoDB","_id":"cjgj0skvx0003pcxj0krkjdw5"},{"name":"BFC","_id":"cjgj0skw10008pcxjfgu1e66w"},{"name":"ES5/ES6","_id":"cjgj0skw5000fpcxj9xy87m0v"},{"name":"VSCode","_id":"cjgj0skw9000mpcxjbj3jz8df"},{"name":"React","_id":"cjgj0skwd000spcxjrj1ek8bf"},{"name":"git","_id":"cjgj0skwi0012pcxjee4xjg25"},{"name":"文学技能","_id":"cjgj0skwj0016pcxjou6apn5j"},{"name":"响应式","_id":"cjgj0skwk0019pcxjw23d4w00"}]}}