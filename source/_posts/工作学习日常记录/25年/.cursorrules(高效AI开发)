[参考文章](https://mp.weixin.qq.com/s/JNkPIlGAq2QvmQIYUenSXg)

[项目架构]
框架 = React + TypeScript
状态管理 = zustand
UI = [antd, Material UI]
路由 = React Router 6
API = [RESTful + axios fetch]

[代码规范]
组件结构 = 组件名称.tsx + 组件名称.module.scss + types.ts
样式方案 = styled-components, module.scss
错误处理 = 统一错误边界组件
格式化规则 = eslint + prettier

[AI规则]
组件要加性能优化(React.memo)
表单必须有验证和错误提示
列表要考虑空状态和加载状态

[命名规范]
变量用驼峰命名, 绝对不能数字后缀
React组件必须大写开头
API函数必须以fetch/get/post打头

[项目规矩]
API调用必须放services目录
状态管理用Redux Toolkit
数据校验用Zod

[质量要求]
组件必须写PropTypes或TS类型
复杂函数必须有单测
函数不能超20行

[编程思路]
- 代码就是文档, 自己得能看明白
- 别整太复杂, 宁可多写两行
- 同样的代码出现三次就抽函数
- 先想边界情况再写主逻辑

[提速指南]
函数名要能看出来干啥的
变量作用域越小越好, 别整全局的
出错时提示要有用
注释是写给半年后的自己看的
注释一定要用中文
注释统一全部使用 jsdoc格式 /**  */

[编程规矩]
1. 代码必须遵循SOLID原则
2. 每个函数只干一件事
3. 所有异常必须处理
4. 变量名要说人话(data→userList)
5. 函数名必须表达其功能
6. 函数参数 超过三个 必须用对象

[辅助模式]
* 看到能复用的代码就提醒我
* 给出不同方案, 说优缺点
* 检查代码边界情况

# 实战指令
"把src/components下所有类组件改成函数组件, 加上TypeScript, 别改坏功能"

"找出项目里所有没处理的API错误, 加上错误处理和loading状态"

"按咱们设计规范, 把这个登录表单弄好看点, 加动画和表单验证"

# 生成代码
"按咱们项目的用户模型, 整个用户信息编辑表单, 要有验证、API对接和错误处理"

# 重构加速
"找出项目里所有重复的API调用, 抽成可复用的hooks"

# 质量检查
"扫描项目找内存泄漏和性能问题, 给修复方案"

# 闭坑建议
+ 别让AI"一次干超过3个活儿"
  就像熬夜三天的程序员, 越到后面越迷糊, bug越多, 烦死了。
  一次专注于一件事情

+ 定期"重启"AI脑子
  每做完一个大功能就执行：
  '> /clear 上下文 --保留项目记忆'

+ "教"比"改"效率高十倍
  与其老是改AI写的垃圾代码, 不如这样喂知识：
  ```
  # 效率更高的做法
  @components/Button.tsx
  @styles/theme.ts
  "照这两个文件的风格, 整个带loading的搜索框"
  ```

+ 没事别开thinking模式
  不写复杂代码时, 千万别开claude-3.7-sonnet-thinking模式！
  烧额度贼快, 一个号一个月才500次高速请求, 用完了哭都没地方哭去！

+ 必须"给AI写角色"
  没给AI写明确角色定义时, 它就像个智障, 老得反复提醒, 浪费好多时间, 烦都烦死了！

+ 找参考
  做特定框架开发时，如果Cursor写得不专业，我就自己去对应的开发论坛搜一下，找个解决方案给它参考，这样开发也能快不少。

+ 写清需求
  1. 先把功能拆成小块。
    要是AI迟迟做不出某个功能，八成是我描述不清或者有偏差。
  2. 用另一个AI工具梳理需求
    把需求弄清楚后放到readme.md最上面，开发立马就顺了！

## Trae 功能优化
[Trae 功能优化](./8d23dafaa4ce2eaa3e1a39eeb6eb7943.jpg)
source\_posts\工作学习日常记录\25年\8d23dafaa4ce2eaa3e1a39eeb6eb7943.jpg
